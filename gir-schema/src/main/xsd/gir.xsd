<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://www.gtk.org/introspection/core/1.0" xmlns:glib="http://www.gtk.org/introspection/glib/1.0" xmlns:c="http://www.gtk.org/introspection/c/1.0" xmlns:core="http://www.gtk.org/introspection/core/1.0">
  <xs:import namespace="http://www.gtk.org/introspection/c/1.0" schemaLocation="c.xsd"/>
  <xs:import namespace="http://www.gtk.org/introspection/glib/1.0" schemaLocation="glib.xsd"/>
  <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="xml.xsd"/>
  <xs:element name="repository">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="core:include"/>
        <xs:element ref="c:include"/>
        <xs:element ref="core:package"/>
        <xs:element ref="core:namespace"/>
      </xs:choice>
      <xs:attribute name="version" type="xs:string">
        <xs:annotation>
          <xs:documentation>version number of the repository</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute ref="c:identifier-prefixes"/>
      <xs:attribute ref="c:symbol-prefixes"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="namespace">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="core:alias"/>
        <xs:element ref="core:class"/>
        <xs:element ref="core:interface"/>
        <xs:element ref="core:record"/>
        <xs:element ref="core:enumeration"/>
        <xs:element ref="core:function"/>
        <xs:element ref="core:union"/>
        <xs:element ref="core:bitfield"/>
        <xs:element ref="core:callback"/>
        <xs:element ref="core:constant"/>
        <xs:element ref="core:attribute"/>
        <xs:element ref="glib:boxed"/>
      </xs:choice>
      <xs:attribute name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the namespace. For example, 'Gtk'</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="version" type="xs:string">
        <xs:annotation>
          <xs:documentation>version number of the namespace</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute ref="c:identifier-prefixes"/>
      <xs:attribute ref="c:symbol-prefixes"/>
      <xs:attribute ref="c:prefix"/>
      <xs:attribute name="shared-library" type="xs:string">
        <xs:annotation>
          <xs:documentation>Path to the shared library implementing the namespace. It can be a comma-separated list, with relative path only</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="attribute">
    <xs:annotation>
      <xs:documentation>element defining an annotation from the source code, usually a user-defined annotation associated to a parameter or a return value</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the attribute</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>value of the attribute</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="include">
    <xs:annotation>
      <xs:documentation>Dependant namespace to include with the current namespace. For example, Gtk will need the namespace GLib</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the dependant namespace to include</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="version" type="xs:string">
        <xs:annotation>
          <xs:documentation>version of the dependant namespace to use</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="package">
    <xs:annotation>
      <xs:documentation>Deprecated: package name containing the library</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the package</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="alias">
    <xs:annotation>
      <xs:documentation>Type's name substitution, representing a typedef in C</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="core:Info.elements"/>
        <xs:element ref="core:type"/>
      </xs:choice>
      <xs:attributeGroup ref="core:Info.attrs"/>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>the new name or typedef'd name</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="c:type"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="interface">
    <xs:annotation>
      <xs:documentation>Abstract interface to other classes</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="core:Info.elements"/>
        <xs:element ref="core:prerequisite"/>
        <xs:element ref="core:implements"/>
        <xs:element ref="core:function"/>
        <xs:element ref="core:constructor"/>
        <xs:element ref="core:method"/>
        <xs:element ref="core:virtual-method"/>
        <xs:element ref="core:field"/>
        <xs:element ref="core:property"/>
        <xs:element ref="glib:signal"/>
        <xs:element ref="core:callback"/>
        <xs:element ref="core:constant"/>
      </xs:choice>
      <xs:attributeGroup ref="core:Info.attrs"/>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the interface</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="glib:type-name"/>
      <xs:attributeGroup ref="glib:get-type"/>
      <xs:attribute ref="c:symbol-prefix"/>
      <xs:attributeGroup ref="c:type1"/>
      <xs:attributeGroup ref="glib:type-struct"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="class">
    <xs:annotation>
      <xs:documentation>GObject inherited class definition</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="core:Info.elements"/>
        <xs:element ref="core:implements"/>
        <xs:element ref="core:constructor"/>
        <xs:element ref="core:method"/>
        <xs:element ref="core:function"/>
        <xs:element ref="core:virtual-method"/>
        <xs:element ref="core:field"/>
        <xs:element ref="core:property"/>
        <xs:element ref="glib:signal"/>
        <xs:element ref="core:union"/>
        <xs:element ref="core:constant"/>
        <xs:element ref="core:record"/>
        <xs:element ref="core:callback"/>
      </xs:choice>
      <xs:attributeGroup ref="core:Info.attrs"/>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>Name of the class</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="glib:type-name1"/>
      <xs:attributeGroup ref="glib:get-type1"/>
      <xs:attribute name="parent" type="xs:string">
        <xs:annotation>
          <xs:documentation>Name of the parent class if any</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="glib:type-struct1"/>
      <xs:attribute ref="glib:ref-func"/>
      <xs:attribute ref="glib:unref-func"/>
      <xs:attribute ref="glib:set-value-func"/>
      <xs:attribute ref="glib:get-value-func"/>
      <xs:attributeGroup ref="c:type2"/>
      <xs:attribute ref="c:symbol-prefix"/>
      <xs:attribute name="abstract">
        <xs:annotation>
          <xs:documentation>Binary attribute to declare the class abstract or not</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute ref="glib:fundamental"/>
      <xs:attribute name="final">
        <xs:annotation>
          <xs:documentation>Binary attribute to declare the class final or not (non-derivable class in a derivable hierarchy)</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="record">
    <xs:annotation>
      <xs:documentation>Record definition, equivalent to a C struct, that is a simple structure, not a class</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="core:Info.elements"/>
        <xs:element ref="core:field"/>
        <xs:element ref="core:function"/>
        <xs:element ref="core:union"/>
        <xs:element ref="core:method"/>
        <xs:element ref="core:constructor"/>
      </xs:choice>
      <xs:attributeGroup ref="core:Info.attrs"/>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the record</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="c:type3"/>
      <xs:attribute name="disguised">
        <xs:annotation>
          <xs:documentation>Deprecated. Binary attribute to tell if the record is disguised, i.e. whether the c:type
is a typedef that doesn't look like a pointer, but is one internally. Its second meaning
is "private" and is set when any typedef struct is parsed which doesn't also include a
full struct with fields (https://gitlab.gnome.org/GNOME/gobject-introspection/issues/101)
Replaced by "opaque" and "pointer".</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="opaque">
        <xs:annotation>
          <xs:documentation>Binary attribute for a typedef struct that does not have a corresponding public structure definition</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="pointer">
        <xs:annotation>
          <xs:documentation>Binary attribute for a typedef struct pointer, e.g. typedef struct Foo* FooPtr</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attributeGroup ref="glib:type-name2"/>
      <xs:attributeGroup ref="glib:get-type2"/>
      <xs:attribute ref="c:symbol-prefix"/>
      <xs:attribute name="foreign">
        <xs:annotation>
          <xs:documentation>Binary attribute to tell if the record is foreign, that is it is not available in a g-i supported library</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute ref="glib:is-gtype-struct-for"/>
      <xs:attribute name="copy-function" type="xs:string">
        <xs:annotation>
          <xs:documentation>Name of the function used to copy the record</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="free-function" type="xs:string">
        <xs:annotation>
          <xs:documentation>Name of the function used to free the record</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <!-- Some base information for most elements like version, deprecation, stability, if they are introspectable or not, etc... -->
  <xs:attributeGroup name="Info.attrs">
    <xs:attribute name="introspectable">
      <xs:annotation>
        <xs:documentation>Binary attribute which is "0" (false) if the element is not introspectable. It doesn't exist in the bindings, due in general to missing information in the annotations in the original C code</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="0"/>
          <xs:enumeration value="1"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="deprecated" type="xs:string">
      <xs:annotation>
        <xs:documentation>Binary attribute which is "1" (true) if the element has been deprecated</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="deprecated-version" type="xs:string">
      <xs:annotation>
        <xs:documentation>Version number from which this element is deprecated</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="version" type="xs:string">
      <xs:annotation>
        <xs:documentation>version number of an element</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="stability" type="xs:string">
      <xs:annotation>
        <xs:documentation>give the statibility status of the element. Can take the values "Stable", "Unstable" or "Private"</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <!-- Documentation of elements -->
  <xs:group name="DocElements">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="core:doc-version"/>
        <xs:element ref="core:doc-stability"/>
        <xs:element ref="core:doc"/>
        <xs:element ref="core:doc-deprecated"/>
        <xs:element ref="core:source-position"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <xs:element name="doc-version">
    <xs:annotation>
      <xs:documentation>Version of the documentation</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:attribute ref="xml:space"/>
      <xs:attributeGroup ref="xml:whitespace"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="doc-stability">
    <xs:annotation>
      <xs:documentation>give the stability of the documentation</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:attribute ref="xml:space"/>
      <xs:attributeGroup ref="xml:whitespace"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="doc">
    <xs:annotation>
      <xs:documentation>documentation of an element</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:attribute ref="xml:space"/>
      <xs:attributeGroup ref="xml:whitespace1"/>
      <xs:attribute name="filename" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>The file containing this documentation</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="line" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>The first line of the documentation in the source code</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="column" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>The first column of the documentation in the source code</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="doc-deprecated">
    <xs:annotation>
      <xs:documentation>Deprecated documentation of an element. Kept for historical reasons in general</xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:attribute ref="xml:space"/>
      <xs:attributeGroup ref="xml:whitespace1"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="source-position">
    <xs:annotation>
      <xs:documentation>Position of the documentation in the original source code</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="filename" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>File name of the source of the documentation</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="line" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>The first line of the documentation in the source code</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="column" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>The first column of the documentation in the source code</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <!-- Information about elements can be a documentation of annotations -->
  <xs:group name="Info.elements">
    <xs:sequence>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="core:DocElements"/>
        <xs:element ref="core:attribute"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>
  <xs:element name="constant">
    <xs:annotation>
      <xs:documentation>A constant entity, similar to const variable in C</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="core:Info.elements"/>
        <xs:element ref="core:AnyType"/>
      </xs:choice>
      <xs:attributeGroup ref="core:Info.attrs"/>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the constant</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>value of the constant</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="c:type4"/>
      <xs:attributeGroup ref="c:identifier"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="property">
    <xs:annotation>
      <xs:documentation>Property, that is a variable or members with getter and setter functions</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="core:Info.elements"/>
        <xs:element ref="core:AnyType"/>
      </xs:choice>
      <xs:attributeGroup ref="core:Info.attrs"/>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the property</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="writable">
        <xs:annotation>
          <xs:documentation>Binary attribute, true if the property is writeable, that is it has a setter function</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="readable">
        <xs:annotation>
          <xs:documentation>Binary attribute, true if the property is readable, that is it has a getter function</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="construct">
        <xs:annotation>
          <xs:documentation>Binary attribute, true if the property will be set upon construction</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="construct-only">
        <xs:annotation>
          <xs:documentation>Binary attribute, true if the property can only be set upon construction</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="setter" type="xs:string">
        <xs:annotation>
          <xs:documentation>The setter function for this property</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="getter" type="xs:string">
        <xs:annotation>
          <xs:documentation>The getter function for this property</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="default-value" type="xs:string">
        <xs:annotation>
          <xs:documentation>The default value of the property, as a string; if missing, the default value is zero for integer types, and null for pointer types</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="transfer-ownership">
        <xs:annotation>
          <xs:documentation>attributes used by many elements for the transfer of ownership, with for example, a returned value. "none" if the recipient does not own the value, "container" if the recipient owns the container but not the value (for arrays or lists for example) , "full" the recipient owns the entire value. For details, see https://gi.readthedocs.io/en/latest/annotations/giannotations.html#memory-and-lifecycle-management</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="none"/>
            <xs:enumeration value="container"/>
            <xs:enumeration value="full"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="field">
    <xs:annotation>
      <xs:documentation>A field of struct of union structure, that is a C bit field, that is a fixed length in bits variable</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="core:Info.elements"/>
        <xs:choice>
          <xs:element ref="core:callback"/>
          <xs:element ref="core:AnyType"/>
        </xs:choice>
      </xs:choice>
      <xs:attributeGroup ref="core:Info.attrs"/>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the field</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="writable">
        <xs:annotation>
          <xs:documentation>Binary attribute, true if the field is writeable</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="readable">
        <xs:annotation>
          <xs:documentation>Binary attribute, true if the field is readable</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="private">
        <xs:annotation>
          <xs:documentation>Binary attribute, true if the field is private to the structure or has public ("0") visibility</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="bits" type="xs:integer">
        <xs:annotation>
          <xs:documentation>number of bits of the field</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="callback">
    <xs:annotation>
      <xs:documentation>A callback closure, that is a function called when a signal is emitted (as an answer to that signal)</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="core:Info.elements"/>
        <xs:element ref="core:parameters"/>
        <xs:element ref="core:return-value"/>
      </xs:choice>
      <xs:attributeGroup ref="core:Info.attrs"/>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the callback</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="c:type5"/>
      <xs:attribute name="throws">
        <xs:annotation>
          <xs:documentation>Binary attribute, true if the callback can throw an error</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="implements">
    <xs:annotation>
      <xs:documentation>Give the name of the interface it implements. This element is generally used within a class element</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the interface implemented by a class</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="prerequisite">
    <xs:annotation>
      <xs:documentation>Interface which is pre-required to implement another interface. This node is generally using within an interface element</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the required interface</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <!-- A generic grammar element to represent either a simple Type or an Array of the same Type -->
  <xs:element name="AnyType" abstract="true"/>
  <xs:element name="type" substitutionGroup="core:AnyType">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="core:DocElements"/>
        <xs:element ref="core:AnyType"/>
      </xs:choice>
      <xs:attribute name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the type</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="c:type6"/>
      <xs:attribute name="introspectable">
        <xs:annotation>
          <xs:documentation>Binary attribute which is "0" (false) if the element is not introspectable. It doesn't exist in the bindings, due in general to missing information in the annotations in the original C code</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="array" substitutionGroup="core:AnyType">
    <xs:annotation>
      <xs:documentation>An array type of data where each element is of the same type</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="core:AnyType"/>
      </xs:sequence>
      <xs:attribute name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the array type</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="zero-terminated">
        <xs:annotation>
          <xs:documentation>Binary attribute, true if the last element of the array is zero. For example, in an array of pointers, the last pointer would be NULL</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="fixed-size" type="xs:integer">
        <xs:annotation>
          <xs:documentation>size of an array of predetermined fixed size. For example a C array declared as char arr[5].</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="introspectable">
        <xs:annotation>
          <xs:documentation>Binary attribute which is "0" (false) if the element is not introspectable. It doesn't exist in the bindings, due in general to missing information in the annotations in the original C code</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="length" type="xs:integer">
        <xs:annotation>
          <xs:documentation>0-based index of parameter element that specifies the length of the array</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="c:type7"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="TransferOwnership">
    <xs:attribute name="transfer-ownership" use="required">
      <xs:annotation>
        <xs:documentation>attributes used by many elements for the transfer of ownership, with for example, a returned value. "none" if the recipient does not own the value, "container" if the recipient owns the container but not the value (for arrays or lists for example) , "full" the recipient owns the entire value. For details, see https://gi.readthedocs.io/en/latest/annotations/giannotations.html#memory-and-lifecycle-management</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="none"/>
          <xs:enumeration value="container"/>
          <xs:enumeration value="full"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="constructor">
    <xs:annotation>
      <xs:documentation>A constructor of a class</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="core:Info.elements"/>
        <xs:element ref="core:parameters"/>
        <xs:element ref="core:return-value"/>
      </xs:choice>
      <xs:attributeGroup ref="core:Callable.attrs"/>
    </xs:complexType>
  </xs:element>
  <xs:attributeGroup name="Callable.attrs">
    <xs:annotation>
      <xs:documentation>Attributes of a Callable (functions, callbacks, closures, etc...)</xs:documentation>
    </xs:annotation>
    <xs:attributeGroup ref="core:Info.attrs"/>
    <xs:attribute name="name" use="required" type="xs:string">
      <xs:annotation>
        <xs:documentation>name of the Callable</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="c:identifier1"/>
    <xs:attribute name="shadowed-by" type="xs:string">
      <xs:annotation>
        <xs:documentation>Callable it is shadowed by. For example, in C++, only one version of an overloaded callable will appear</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="shadows" type="xs:string">
      <xs:annotation>
        <xs:documentation>Callable it shadows. For example, in C++, only one version of an overloaded callable will appear</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="throws">
      <xs:annotation>
        <xs:documentation>Binary attribute, true if the callable can throw an error</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="0"/>
          <xs:enumeration value="1"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="moved-to" type="xs:string">
      <xs:annotation>
        <xs:documentation>if for backward compatibility reason the callable has a name in the source code but should be known by another one, this attribute contains the new name    </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="varargs">
    <xs:annotation>
      <xs:documentation>an element, usually found in a parameter element for variadic parameter in a function or callable</xs:documentation>
    </xs:annotation>
    <xs:complexType/>
  </xs:element>
  <!-- Refer to https://gi.readthedocs.io/en/latest/annotations/giannotations.html#support-for-gobject-closures -->
  <xs:element name="parameters">
    <xs:annotation>
      <xs:documentation>parameters element of a callable, that is in general parameters of a function or similar</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="core:parameter"/>
        <xs:element ref="core:instance-parameter"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="parameter">
    <xs:annotation>
      <xs:documentation>parameter element of a list of parameters</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="core:DocElements"/>
        <xs:choice>
          <xs:element ref="core:AnyType"/>
          <xs:element ref="core:varargs"/>
        </xs:choice>
      </xs:choice>
      <xs:attribute name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the parameter</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="nullable">
        <xs:annotation>
          <xs:documentation>Binary attribute, true if the parameter can have a null value</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="allow-none">
        <xs:annotation>
          <xs:documentation>Deprecated. Replaced by nullable and optional</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="introspectable">
        <xs:annotation>
          <xs:documentation>Binary attribute which is "0" (false) if the element is not introspectable. It doesn't exist in the bindings, due in general to missing information in the annotations in the original C code</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="closure" type="xs:integer">
        <xs:annotation>
          <xs:documentation>the parameter is a user_data for callbacks. The value points to a different parameter that is the actual callback</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="destroy" type="xs:integer">
        <xs:annotation>
          <xs:documentation>the parameter is a destroy_data for callbacks. The value points to a different parameter that is the actual callback</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="scope">
        <xs:annotation>
          <xs:documentation>the parameter is a callback, the value indicates the lifetime of the call. For language bindings which want to know when the resources required to do the call can be freed. "notified" valid until a GDestroyNotify argument is called, "async" only valid for the duration of the first callback invocation (can only be called once), "call" only valid for the duration of the call, can be called multiple times during the call, "forever" valid until the process terminates.</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="notified"/>
            <xs:enumeration value="async"/>
            <xs:enumeration value="call"/>
            <xs:enumeration value="forever"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="direction">
        <xs:annotation>
          <xs:documentation>direction of the parameter. "in" goes into the callable, "out" for output parameters from the callable (reference in C++, var in Pascal, etc...), "inout" for both (like a pre-allocated structure which will be filled-in by the callable)</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="out"/>
            <xs:enumeration value="in"/>
            <xs:enumeration value="inout"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="caller-allocates">
        <xs:annotation>
          <xs:documentation>Binary attribute, true if the caller should allocate the parameter before calling the callable</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="optional">
        <xs:annotation>
          <xs:documentation>Binary attribute, true if the parameter is optional</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="skip">
        <xs:annotation>
          <xs:documentation> Binary attribute, true if the parameter can be omitted from the introspected output</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="transfer-ownership">
        <xs:annotation>
          <xs:documentation>attributes used by many elements for the transfer of ownership, with for example, a returned value. "none" if the recipient does not own the value, "container" if the recipient owns the container but not the value (for arrays or lists for example) , "full" the recipient owns the entire value. For details, see https://gi.readthedocs.io/en/latest/annotations/giannotations.html#memory-and-lifecycle-management</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="none"/>
            <xs:enumeration value="container"/>
            <xs:enumeration value="full"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="instance-parameter">
    <xs:annotation>
      <xs:documentation>instance-parameter is a parameter of a C function which is an instance of an existing object. So the callable is surely a method of a class, and this parameter points to the instance of the object. In C++, this would be equivalent to the pointer this which is not passed to the method, in Python it's equivalent to self.</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="core:DocElements"/>
        <xs:element ref="core:type"/>
      </xs:choice>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the instance-parameter</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="nullable">
        <xs:annotation>
          <xs:documentation>Binary attribute, true if the parameter can have a null value</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="allow-none">
        <xs:annotation>
          <xs:documentation>Deprecated. Replaced by nullable and optional</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="direction">
        <xs:annotation>
          <xs:documentation>direction of the parameter. "in" goes into the callable, "out" for output parameters from the callable (reference in C++, var in Pascal, etc...), "inout" for both (like a pre-allocated structure which will be filled-in by the callable)</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="out"/>
            <xs:enumeration value="in"/>
            <xs:enumeration value="inout"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="caller-allocates">
        <xs:annotation>
          <xs:documentation>Binary attribute, true if the caller should allocate the parameter before calling the callable</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="transfer-ownership">
        <xs:annotation>
          <xs:documentation>attributes used by many elements for the transfer of ownership, with for example, a returned value. "none" if the recipient does not own the value, "container" if the recipient owns the container but not the value (for arrays or lists for example) , "full" the recipient owns the entire value. For details, see https://gi.readthedocs.io/en/latest/annotations/giannotations.html#memory-and-lifecycle-management</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="none"/>
            <xs:enumeration value="container"/>
            <xs:enumeration value="full"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="return-value">
    <xs:annotation>
      <xs:documentation>return value of a callable</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="core:DocElements"/>
        <xs:element ref="core:AnyType"/>
      </xs:choice>
      <xs:attribute name="introspectable">
        <xs:annotation>
          <xs:documentation>Binary attribute which is "0" (false) if the element is not introspectable. It doesn't exist in the bindings, due in general to missing information in the annotations in the original C code</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="nullable">
        <xs:annotation>
          <xs:documentation>Binary attribute, true if the parameter can have a null value</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="closure" type="xs:integer">
        <xs:annotation>
          <xs:documentation>the parameter is a user_data for callbacks. The value points to a different parameter that is the actual callback</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="scope">
        <xs:annotation>
          <xs:documentation>the parameter is a callback, the value indicates the lifetime of the call. For language bindings which want to know when the resources required to do the call can be freed. "notified" valid until a GDestroyNotify argument is called, "async" only valid for the duration of the first callback invocation (can only be called once), "call" only valid for the duration of the call, can be called multiple times during the call, "forever" valid until the process terminates.</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="notified"/>
            <xs:enumeration value="async"/>
            <xs:enumeration value="call"/>
            <xs:enumeration value="forever"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="destroy" type="xs:integer">
        <xs:annotation>
          <xs:documentation>the parameter is a destroy_data for callbacks. The value points to a different parameter that is the actual callback</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="skip">
        <xs:annotation>
          <xs:documentation> Binary attribute, true if the parameter can be omitted from the introspected output</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="allow-none">
        <xs:annotation>
          <xs:documentation>Deprecated. Replaced by nullable and optional</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="0"/>
            <xs:enumeration value="1"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="transfer-ownership">
        <xs:annotation>
          <xs:documentation>attributes used by many elements for the transfer of ownership, with for example, a returned value. "none" if the recipient does not own the value, "container" if the recipient owns the container but not the value (for arrays or lists for example) , "full" the recipient owns the entire value. For details, see https://gi.readthedocs.io/en/latest/annotations/giannotations.html#memory-and-lifecycle-management</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="none"/>
            <xs:enumeration value="container"/>
            <xs:enumeration value="full"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="function">
    <xs:annotation>
      <xs:documentation>element defining a standalone function (as usual in most programming languages)</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element ref="core:parameters"/>
        <xs:element ref="core:return-value"/>
        <xs:group ref="core:DocElements"/>
      </xs:choice>
      <xs:attributeGroup ref="core:Callable.attrs"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="method">
    <xs:annotation>
      <xs:documentation>element defining a method from a class</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="core:Info.elements"/>
        <xs:element ref="core:parameters"/>
        <xs:element ref="core:return-value"/>
      </xs:choice>
      <xs:attributeGroup ref="core:Callable.attrs"/>
      <xs:attribute ref="glib:set-property"/>
      <xs:attribute ref="glib:get-property"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="virtual-method">
    <xs:annotation>
      <xs:documentation>element defining a virtual method from a class, concept similar to C++</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="core:Info.elements"/>
        <xs:element ref="core:parameters"/>
        <xs:element ref="core:return-value"/>
      </xs:choice>
      <xs:attributeGroup ref="core:Callable.attrs"/>
      <xs:attribute name="invoker" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the callable called when invoking this virtual method</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="union">
    <xs:annotation>
      <xs:documentation>element defining a type of data being a union of type, similar to union in C/C++ but extended with fields and methods</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="core:Info.elements"/>
        <xs:element ref="core:field"/>
        <xs:element ref="core:constructor"/>
        <xs:element ref="core:method"/>
        <xs:element ref="core:function"/>
        <xs:element ref="core:record"/>
      </xs:choice>
      <xs:attributeGroup ref="core:Info.attrs"/>
      <xs:attribute name="name" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the union</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="c:type8"/>
      <xs:attribute ref="c:symbol-prefix"/>
      <xs:attributeGroup ref="glib:type-name3"/>
      <xs:attributeGroup ref="glib:get-type3"/>
      <xs:attribute name="copy-function" type="xs:string">
        <xs:annotation>
          <xs:documentation>Name of the function used to copy the union</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="free-function" type="xs:string">
        <xs:annotation>
          <xs:documentation>Name of the function used to free the union</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:element name="bitfield">
    <xs:annotation>
      <xs:documentation>element defining a bit field (as in C)</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="core:Info.elements"/>
        <xs:element ref="core:member"/>
        <xs:element ref="core:function"/>
      </xs:choice>
      <xs:attributeGroup ref="core:Info.attrs"/>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the bit field</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="c:type9"/>
      <xs:attributeGroup ref="glib:type-name3"/>
      <xs:attributeGroup ref="glib:get-type3"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="enumeration">
    <xs:annotation>
      <xs:documentation>element defining a enumeration type similar to enum in C/C++</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:group ref="core:Info.elements"/>
        <xs:element ref="core:member"/>
        <xs:element ref="core:function"/>
      </xs:choice>
      <xs:attributeGroup ref="core:Info.attrs"/>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the enumeration</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="c:type10"/>
      <xs:attributeGroup ref="glib:type-name3"/>
      <xs:attributeGroup ref="glib:get-type3"/>
      <xs:attribute ref="glib:error-domain"/>
    </xs:complexType>
  </xs:element>
  <xs:element name="member">
    <xs:annotation>
      <xs:documentation>element defining a member of a bit field or an enumeration</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:group ref="core:Info.elements"/>
      <xs:attributeGroup ref="core:Info.attrs"/>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>name of the member</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value" use="required" type="xs:string">
        <xs:annotation>
          <xs:documentation>value of the member</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attributeGroup ref="c:identifier2"/>
      <xs:attribute ref="glib:nick"/>
      <xs:attribute ref="glib:name"/>
    </xs:complexType>
  </xs:element>
</xs:schema>
