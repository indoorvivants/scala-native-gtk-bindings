package adwaita
package structs

import _root_.scala.scalanative.unsafe.*
import _root_.scala.scalanative.unsigned.*
import _root_.scala.scalanative.libc.*
import _root_.scala.scalanative.*

import _root_.adwaita.enumerations.*
import _root_.adwaita.aliases.*
import _root_.adwaita.structs.*
import _root_.adwaita.unions.*

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
*/
opaque type AdwActionRow = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object AdwActionRow:
  given _tag: Tag[AdwActionRow] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[AdwActionRow] = scala.scalanative.unsafe.alloc[AdwActionRow](1)
  def apply(parent_instance : AdwPreferencesRow)(using Zone): Ptr[AdwActionRow] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: AdwActionRow)
    def parent_instance: AdwPreferencesRow = !struct.at(0).asInstanceOf[Ptr[AdwPreferencesRow]]
    def parent_instance_=(value: AdwPreferencesRow): Unit = !struct.at(0).asInstanceOf[Ptr[AdwPreferencesRow]] = value

/**
 * AdwActionRowClass _class: The parent class : Activates the row to trigger its main action.

 * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
*/
opaque type AdwActionRowClass = CArray[CChar, Nat.Digit3[Nat._5, Nat._5, Nat._2]]
object AdwActionRowClass:
  given _tag: Tag[AdwActionRowClass] = Tag.CArray[CChar, Nat.Digit3[Nat._5, Nat._5, Nat._2]](Tag.Byte, Tag.Digit3[Nat._5, Nat._5, Nat._2](Tag.Nat5, Tag.Nat5, Tag.Nat2))
  def apply()(using Zone): Ptr[AdwActionRowClass] = scala.scalanative.unsafe.alloc[AdwActionRowClass](1)
  def apply(parent_class : AdwPreferencesRowClass, activate : CFuncPtr1[Ptr[AdwActionRow], Unit], padding : CArray[gpointer, Nat._4])(using Zone): Ptr[AdwActionRowClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).activate = activate
    (!____ptr).padding = padding
    ____ptr
  extension (struct: AdwActionRowClass)
    def parent_class: AdwPreferencesRowClass = !struct.at(0).asInstanceOf[Ptr[AdwPreferencesRowClass]]
    def parent_class_=(value: AdwPreferencesRowClass): Unit = !struct.at(0).asInstanceOf[Ptr[AdwPreferencesRowClass]] = value
    def activate: CFuncPtr1[Ptr[AdwActionRow], Unit] = !struct.at(512).asInstanceOf[Ptr[CFuncPtr1[Ptr[AdwActionRow], Unit]]]
    def activate_=(value: CFuncPtr1[Ptr[AdwActionRow], Unit]): Unit = !struct.at(512).asInstanceOf[Ptr[CFuncPtr1[Ptr[AdwActionRow], Unit]]] = value
    def padding: CArray[gpointer, Nat._4] = !struct.at(520).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]]
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at(520).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
*/
opaque type AdwAnimation = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object AdwAnimation:
  given _tag: Tag[AdwAnimation] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[AdwAnimation] = scala.scalanative.unsafe.alloc[AdwAnimation](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[AdwAnimation] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: AdwAnimation)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
*/
opaque type AdwAnimationClass = CStruct0
object AdwAnimationClass:
  given _tag: Tag[AdwAnimationClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
*/
opaque type AdwAnimationTarget = CStruct0
object AdwAnimationTarget:
  given _tag: Tag[AdwAnimationTarget] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
*/
opaque type AdwAnimationTargetClass = CStruct0
object AdwAnimationTargetClass:
  given _tag: Tag[AdwAnimationTargetClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
*/
opaque type AdwApplication = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object AdwApplication:
  given _tag: Tag[AdwApplication] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[AdwApplication] = scala.scalanative.unsafe.alloc[AdwApplication](1)
  def apply(parent_instance : _root_.gtk4.all.GtkApplication)(using Zone): Ptr[AdwApplication] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: AdwApplication)
    def parent_instance: _root_.gtk4.all.GtkApplication = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkApplication]]
    def parent_instance_=(value: _root_.gtk4.all.GtkApplication): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkApplication]] = value

/**
 * AdwApplicationClass: _class: The parent class

 * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
*/
opaque type AdwApplicationClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._2, Nat._4]]
object AdwApplicationClass:
  given _tag: Tag[AdwApplicationClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._2, Nat._4]](Tag.Byte, Tag.Digit3[Nat._4, Nat._2, Nat._4](Tag.Nat4, Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[AdwApplicationClass] = scala.scalanative.unsafe.alloc[AdwApplicationClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkApplicationClass, padding : CArray[gpointer, Nat._4])(using Zone): Ptr[AdwApplicationClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: AdwApplicationClass)
    def parent_class: _root_.gtk4.all.GtkApplicationClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkApplicationClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkApplicationClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkApplicationClass]] = value
    def padding: CArray[gpointer, Nat._4] = !struct.at(392).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]]
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at(392).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
*/
opaque type AdwApplicationWindow = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object AdwApplicationWindow:
  given _tag: Tag[AdwApplicationWindow] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[AdwApplicationWindow] = scala.scalanative.unsafe.alloc[AdwApplicationWindow](1)
  def apply(parent_instance : _root_.gtk4.all.GtkApplicationWindow)(using Zone): Ptr[AdwApplicationWindow] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: AdwApplicationWindow)
    def parent_instance: _root_.gtk4.all.GtkApplicationWindow = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkApplicationWindow]]
    def parent_instance_=(value: _root_.gtk4.all.GtkApplicationWindow): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkApplicationWindow]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
*/
opaque type AdwApplicationWindowClass = CArray[CChar, Nat.Digit3[Nat._6, Nat._0, Nat._8]]
object AdwApplicationWindowClass:
  given _tag: Tag[AdwApplicationWindowClass] = Tag.CArray[CChar, Nat.Digit3[Nat._6, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._6, Nat._0, Nat._8](Tag.Nat6, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwApplicationWindowClass] = scala.scalanative.unsafe.alloc[AdwApplicationWindowClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkApplicationWindowClass, padding : CArray[gpointer, Nat._4])(using Zone): Ptr[AdwApplicationWindowClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: AdwApplicationWindowClass)
    def parent_class: _root_.gtk4.all.GtkApplicationWindowClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkApplicationWindowClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkApplicationWindowClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkApplicationWindowClass]] = value
    def padding: CArray[gpointer, Nat._4] = !struct.at(576).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]]
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at(576).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
*/
opaque type AdwAvatar = CStruct0
object AdwAvatar:
  given _tag: Tag[AdwAvatar] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
*/
opaque type AdwAvatarClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwAvatarClass:
  given _tag: Tag[AdwAvatarClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwAvatarClass] = scala.scalanative.unsafe.alloc[AdwAvatarClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwAvatarClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwAvatarClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
*/
opaque type AdwBin = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object AdwBin:
  given _tag: Tag[AdwBin] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[AdwBin] = scala.scalanative.unsafe.alloc[AdwBin](1)
  def apply(parent_instance : _root_.gtk4.all.GtkWidget)(using Zone): Ptr[AdwBin] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: AdwBin)
    def parent_instance: _root_.gtk4.all.GtkWidget = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidget]]
    def parent_instance_=(value: _root_.gtk4.all.GtkWidget): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidget]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
*/
opaque type AdwBinClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwBinClass:
  given _tag: Tag[AdwBinClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwBinClass] = scala.scalanative.unsafe.alloc[AdwBinClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwBinClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwBinClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
*/
opaque type AdwButtonContent = CStruct0
object AdwButtonContent:
  given _tag: Tag[AdwButtonContent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
*/
opaque type AdwButtonContentClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwButtonContentClass:
  given _tag: Tag[AdwButtonContentClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwButtonContentClass] = scala.scalanative.unsafe.alloc[AdwButtonContentClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwButtonContentClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwButtonContentClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
*/
opaque type AdwCallbackAnimationTarget = CStruct0
object AdwCallbackAnimationTarget:
  given _tag: Tag[AdwCallbackAnimationTarget] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
*/
opaque type AdwCallbackAnimationTargetClass = CStruct0
object AdwCallbackAnimationTargetClass:
  given _tag: Tag[AdwCallbackAnimationTargetClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
*/
opaque type AdwCarousel = CStruct0
object AdwCarousel:
  given _tag: Tag[AdwCarousel] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
*/
opaque type AdwCarouselClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwCarouselClass:
  given _tag: Tag[AdwCarouselClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwCarouselClass] = scala.scalanative.unsafe.alloc[AdwCarouselClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwCarouselClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwCarouselClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-dots.h
*/
opaque type AdwCarouselIndicatorDots = CStruct0
object AdwCarouselIndicatorDots:
  given _tag: Tag[AdwCarouselIndicatorDots] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-dots.h
*/
opaque type AdwCarouselIndicatorDotsClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwCarouselIndicatorDotsClass:
  given _tag: Tag[AdwCarouselIndicatorDotsClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwCarouselIndicatorDotsClass] = scala.scalanative.unsafe.alloc[AdwCarouselIndicatorDotsClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwCarouselIndicatorDotsClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwCarouselIndicatorDotsClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-lines.h
*/
opaque type AdwCarouselIndicatorLines = CStruct0
object AdwCarouselIndicatorLines:
  given _tag: Tag[AdwCarouselIndicatorLines] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-lines.h
*/
opaque type AdwCarouselIndicatorLinesClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwCarouselIndicatorLinesClass:
  given _tag: Tag[AdwCarouselIndicatorLinesClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwCarouselIndicatorLinesClass] = scala.scalanative.unsafe.alloc[AdwCarouselIndicatorLinesClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwCarouselIndicatorLinesClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwCarouselIndicatorLinesClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
*/
opaque type AdwClamp = CStruct0
object AdwClamp:
  given _tag: Tag[AdwClamp] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
*/
opaque type AdwClampClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwClampClass:
  given _tag: Tag[AdwClampClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwClampClass] = scala.scalanative.unsafe.alloc[AdwClampClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwClampClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwClampClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
*/
opaque type AdwClampLayout = CStruct0
object AdwClampLayout:
  given _tag: Tag[AdwClampLayout] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
*/
opaque type AdwClampLayoutClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._2, Nat._0]]
object AdwClampLayoutClass:
  given _tag: Tag[AdwClampLayoutClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._2, Nat._0]](Tag.Byte, Tag.Digit3[Nat._3, Nat._2, Nat._0](Tag.Nat3, Tag.Nat2, Tag.Nat0))
  def apply()(using Zone): Ptr[AdwClampLayoutClass] = scala.scalanative.unsafe.alloc[AdwClampLayoutClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkLayoutManagerClass)(using Zone): Ptr[AdwClampLayoutClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwClampLayoutClass)
    def parent_class: _root_.gtk4.all.GtkLayoutManagerClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkLayoutManagerClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkLayoutManagerClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkLayoutManagerClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
*/
opaque type AdwClampScrollable = CStruct0
object AdwClampScrollable:
  given _tag: Tag[AdwClampScrollable] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
*/
opaque type AdwClampScrollableClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwClampScrollableClass:
  given _tag: Tag[AdwClampScrollableClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwClampScrollableClass] = scala.scalanative.unsafe.alloc[AdwClampScrollableClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwClampScrollableClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwClampScrollableClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
*/
opaque type AdwComboRow = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object AdwComboRow:
  given _tag: Tag[AdwComboRow] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[AdwComboRow] = scala.scalanative.unsafe.alloc[AdwComboRow](1)
  def apply(parent_instance : AdwActionRow)(using Zone): Ptr[AdwComboRow] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: AdwComboRow)
    def parent_instance: AdwActionRow = !struct.at(0).asInstanceOf[Ptr[AdwActionRow]]
    def parent_instance_=(value: AdwActionRow): Unit = !struct.at(0).asInstanceOf[Ptr[AdwActionRow]] = value

/**
 * AdwComboRowClass _class: The parent class

 * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
*/
opaque type AdwComboRowClass = CArray[CChar, Nat.Digit3[Nat._5, Nat._8, Nat._4]]
object AdwComboRowClass:
  given _tag: Tag[AdwComboRowClass] = Tag.CArray[CChar, Nat.Digit3[Nat._5, Nat._8, Nat._4]](Tag.Byte, Tag.Digit3[Nat._5, Nat._8, Nat._4](Tag.Nat5, Tag.Nat8, Tag.Nat4))
  def apply()(using Zone): Ptr[AdwComboRowClass] = scala.scalanative.unsafe.alloc[AdwComboRowClass](1)
  def apply(parent_class : AdwActionRowClass, padding : CArray[gpointer, Nat._4])(using Zone): Ptr[AdwComboRowClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: AdwComboRowClass)
    def parent_class: AdwActionRowClass = !struct.at(0).asInstanceOf[Ptr[AdwActionRowClass]]
    def parent_class_=(value: AdwActionRowClass): Unit = !struct.at(0).asInstanceOf[Ptr[AdwActionRowClass]] = value
    def padding: CArray[gpointer, Nat._4] = !struct.at(552).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]]
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at(552).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
*/
opaque type AdwEnumListItem = CStruct0
object AdwEnumListItem:
  given _tag: Tag[AdwEnumListItem] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
*/
opaque type AdwEnumListItemClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object AdwEnumListItemClass:
  given _tag: Tag[AdwEnumListItemClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[AdwEnumListItemClass] = scala.scalanative.unsafe.alloc[AdwEnumListItemClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[AdwEnumListItemClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwEnumListItemClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
*/
opaque type AdwEnumListModel = CStruct0
object AdwEnumListModel:
  given _tag: Tag[AdwEnumListModel] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
*/
opaque type AdwEnumListModelClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object AdwEnumListModelClass:
  given _tag: Tag[AdwEnumListModelClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[AdwEnumListModelClass] = scala.scalanative.unsafe.alloc[AdwEnumListModelClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[AdwEnumListModelClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwEnumListModelClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
*/
opaque type AdwExpanderRow = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object AdwExpanderRow:
  given _tag: Tag[AdwExpanderRow] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[AdwExpanderRow] = scala.scalanative.unsafe.alloc[AdwExpanderRow](1)
  def apply(parent_instance : AdwPreferencesRow)(using Zone): Ptr[AdwExpanderRow] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: AdwExpanderRow)
    def parent_instance: AdwPreferencesRow = !struct.at(0).asInstanceOf[Ptr[AdwPreferencesRow]]
    def parent_instance_=(value: AdwPreferencesRow): Unit = !struct.at(0).asInstanceOf[Ptr[AdwPreferencesRow]] = value

/**
 * AdwExpanderRowClass _class: The parent class

 * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
*/
opaque type AdwExpanderRowClass = CArray[CChar, Nat.Digit3[Nat._5, Nat._4, Nat._4]]
object AdwExpanderRowClass:
  given _tag: Tag[AdwExpanderRowClass] = Tag.CArray[CChar, Nat.Digit3[Nat._5, Nat._4, Nat._4]](Tag.Byte, Tag.Digit3[Nat._5, Nat._4, Nat._4](Tag.Nat5, Tag.Nat4, Tag.Nat4))
  def apply()(using Zone): Ptr[AdwExpanderRowClass] = scala.scalanative.unsafe.alloc[AdwExpanderRowClass](1)
  def apply(parent_class : AdwPreferencesRowClass, padding : CArray[gpointer, Nat._4])(using Zone): Ptr[AdwExpanderRowClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: AdwExpanderRowClass)
    def parent_class: AdwPreferencesRowClass = !struct.at(0).asInstanceOf[Ptr[AdwPreferencesRowClass]]
    def parent_class_=(value: AdwPreferencesRowClass): Unit = !struct.at(0).asInstanceOf[Ptr[AdwPreferencesRowClass]] = value
    def padding: CArray[gpointer, Nat._4] = !struct.at(512).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]]
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at(512).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
*/
opaque type AdwFlap = CStruct0
object AdwFlap:
  given _tag: Tag[AdwFlap] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
*/
opaque type AdwFlapClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwFlapClass:
  given _tag: Tag[AdwFlapClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwFlapClass] = scala.scalanative.unsafe.alloc[AdwFlapClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwFlapClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwFlapClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
*/
opaque type AdwHeaderBar = CStruct0
object AdwHeaderBar:
  given _tag: Tag[AdwHeaderBar] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
*/
opaque type AdwHeaderBarClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwHeaderBarClass:
  given _tag: Tag[AdwHeaderBarClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwHeaderBarClass] = scala.scalanative.unsafe.alloc[AdwHeaderBarClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwHeaderBarClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwHeaderBarClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
*/
opaque type AdwLeaflet = CStruct0
object AdwLeaflet:
  given _tag: Tag[AdwLeaflet] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
*/
opaque type AdwLeafletClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwLeafletClass:
  given _tag: Tag[AdwLeafletClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwLeafletClass] = scala.scalanative.unsafe.alloc[AdwLeafletClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwLeafletClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwLeafletClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
*/
opaque type AdwLeafletPage = CStruct0
object AdwLeafletPage:
  given _tag: Tag[AdwLeafletPage] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
*/
opaque type AdwLeafletPageClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object AdwLeafletPageClass:
  given _tag: Tag[AdwLeafletPageClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[AdwLeafletPageClass] = scala.scalanative.unsafe.alloc[AdwLeafletPageClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[AdwLeafletPageClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwLeafletPageClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
*/
opaque type AdwPreferencesGroup = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object AdwPreferencesGroup:
  given _tag: Tag[AdwPreferencesGroup] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[AdwPreferencesGroup] = scala.scalanative.unsafe.alloc[AdwPreferencesGroup](1)
  def apply(parent_instance : _root_.gtk4.all.GtkWidget)(using Zone): Ptr[AdwPreferencesGroup] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: AdwPreferencesGroup)
    def parent_instance: _root_.gtk4.all.GtkWidget = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidget]]
    def parent_instance_=(value: _root_.gtk4.all.GtkWidget): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidget]] = value

/**
 * AdwPreferencesGroupClass _class: The parent class

 * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
*/
opaque type AdwPreferencesGroupClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._4, Nat._0]]
object AdwPreferencesGroupClass:
  given _tag: Tag[AdwPreferencesGroupClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._4, Nat._0]](Tag.Byte, Tag.Digit3[Nat._4, Nat._4, Nat._0](Tag.Nat4, Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[AdwPreferencesGroupClass] = scala.scalanative.unsafe.alloc[AdwPreferencesGroupClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass, padding : CArray[gpointer, Nat._4])(using Zone): Ptr[AdwPreferencesGroupClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: AdwPreferencesGroupClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value
    def padding: CArray[gpointer, Nat._4] = !struct.at(408).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]]
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at(408).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
*/
opaque type AdwPreferencesPage = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object AdwPreferencesPage:
  given _tag: Tag[AdwPreferencesPage] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[AdwPreferencesPage] = scala.scalanative.unsafe.alloc[AdwPreferencesPage](1)
  def apply(parent_instance : _root_.gtk4.all.GtkWidget)(using Zone): Ptr[AdwPreferencesPage] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: AdwPreferencesPage)
    def parent_instance: _root_.gtk4.all.GtkWidget = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidget]]
    def parent_instance_=(value: _root_.gtk4.all.GtkWidget): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidget]] = value

/**
 * AdwPreferencesPageClass _class: The parent class

 * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
*/
opaque type AdwPreferencesPageClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._4, Nat._0]]
object AdwPreferencesPageClass:
  given _tag: Tag[AdwPreferencesPageClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._4, Nat._0]](Tag.Byte, Tag.Digit3[Nat._4, Nat._4, Nat._0](Tag.Nat4, Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[AdwPreferencesPageClass] = scala.scalanative.unsafe.alloc[AdwPreferencesPageClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass, padding : CArray[gpointer, Nat._4])(using Zone): Ptr[AdwPreferencesPageClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: AdwPreferencesPageClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value
    def padding: CArray[gpointer, Nat._4] = !struct.at(408).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]]
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at(408).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
*/
opaque type AdwPreferencesRow = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object AdwPreferencesRow:
  given _tag: Tag[AdwPreferencesRow] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[AdwPreferencesRow] = scala.scalanative.unsafe.alloc[AdwPreferencesRow](1)
  def apply(parent_instance : _root_.gtk4.all.GtkListBoxRow)(using Zone): Ptr[AdwPreferencesRow] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: AdwPreferencesRow)
    def parent_instance: _root_.gtk4.all.GtkListBoxRow = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkListBoxRow]]
    def parent_instance_=(value: _root_.gtk4.all.GtkListBoxRow): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkListBoxRow]] = value

/**
 * AdwPreferencesRowClass _class: The parent class

 * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
*/
opaque type AdwPreferencesRowClass = CArray[CChar, Nat.Digit3[Nat._5, Nat._1, Nat._2]]
object AdwPreferencesRowClass:
  given _tag: Tag[AdwPreferencesRowClass] = Tag.CArray[CChar, Nat.Digit3[Nat._5, Nat._1, Nat._2]](Tag.Byte, Tag.Digit3[Nat._5, Nat._1, Nat._2](Tag.Nat5, Tag.Nat1, Tag.Nat2))
  def apply()(using Zone): Ptr[AdwPreferencesRowClass] = scala.scalanative.unsafe.alloc[AdwPreferencesRowClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkListBoxRowClass, padding : CArray[gpointer, Nat._4])(using Zone): Ptr[AdwPreferencesRowClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: AdwPreferencesRowClass)
    def parent_class: _root_.gtk4.all.GtkListBoxRowClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkListBoxRowClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkListBoxRowClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkListBoxRowClass]] = value
    def padding: CArray[gpointer, Nat._4] = !struct.at(480).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]]
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at(480).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
*/
opaque type AdwPreferencesWindow = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object AdwPreferencesWindow:
  given _tag: Tag[AdwPreferencesWindow] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[AdwPreferencesWindow] = scala.scalanative.unsafe.alloc[AdwPreferencesWindow](1)
  def apply(parent_instance : AdwWindow)(using Zone): Ptr[AdwPreferencesWindow] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: AdwPreferencesWindow)
    def parent_instance: AdwWindow = !struct.at(0).asInstanceOf[Ptr[AdwWindow]]
    def parent_instance_=(value: AdwWindow): Unit = !struct.at(0).asInstanceOf[Ptr[AdwWindow]] = value

/**
 * AdwPreferencesWindowClass _class: The parent class

 * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
*/
opaque type AdwPreferencesWindowClass = CArray[CChar, Nat.Digit3[Nat._5, Nat._7, Nat._6]]
object AdwPreferencesWindowClass:
  given _tag: Tag[AdwPreferencesWindowClass] = Tag.CArray[CChar, Nat.Digit3[Nat._5, Nat._7, Nat._6]](Tag.Byte, Tag.Digit3[Nat._5, Nat._7, Nat._6](Tag.Nat5, Tag.Nat7, Tag.Nat6))
  def apply()(using Zone): Ptr[AdwPreferencesWindowClass] = scala.scalanative.unsafe.alloc[AdwPreferencesWindowClass](1)
  def apply(parent_class : AdwWindowClass, padding : CArray[gpointer, Nat._4])(using Zone): Ptr[AdwPreferencesWindowClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: AdwPreferencesWindowClass)
    def parent_class: AdwWindowClass = !struct.at(0).asInstanceOf[Ptr[AdwWindowClass]]
    def parent_class_=(value: AdwWindowClass): Unit = !struct.at(0).asInstanceOf[Ptr[AdwWindowClass]] = value
    def padding: CArray[gpointer, Nat._4] = !struct.at(544).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]]
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at(544).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
*/
opaque type AdwSplitButton = CStruct0
object AdwSplitButton:
  given _tag: Tag[AdwSplitButton] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
*/
opaque type AdwSplitButtonClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwSplitButtonClass:
  given _tag: Tag[AdwSplitButtonClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwSplitButtonClass] = scala.scalanative.unsafe.alloc[AdwSplitButtonClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwSplitButtonClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwSplitButtonClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
*/
opaque type AdwSpringAnimation = CStruct0
object AdwSpringAnimation:
  given _tag: Tag[AdwSpringAnimation] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
*/
opaque type AdwSpringAnimationClass = CStruct0
object AdwSpringAnimationClass:
  given _tag: Tag[AdwSpringAnimationClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-spring-params.h
*/
opaque type AdwSpringParams = CStruct0
object AdwSpringParams:
  given _tag: Tag[AdwSpringParams] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
*/
opaque type AdwSqueezer = CStruct0
object AdwSqueezer:
  given _tag: Tag[AdwSqueezer] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
*/
opaque type AdwSqueezerClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwSqueezerClass:
  given _tag: Tag[AdwSqueezerClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwSqueezerClass] = scala.scalanative.unsafe.alloc[AdwSqueezerClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwSqueezerClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwSqueezerClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
*/
opaque type AdwSqueezerPage = CStruct0
object AdwSqueezerPage:
  given _tag: Tag[AdwSqueezerPage] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
*/
opaque type AdwSqueezerPageClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object AdwSqueezerPageClass:
  given _tag: Tag[AdwSqueezerPageClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[AdwSqueezerPageClass] = scala.scalanative.unsafe.alloc[AdwSqueezerPageClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[AdwSqueezerPageClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwSqueezerPageClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
*/
opaque type AdwStatusPage = CStruct0
object AdwStatusPage:
  given _tag: Tag[AdwStatusPage] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
*/
opaque type AdwStatusPageClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwStatusPageClass:
  given _tag: Tag[AdwStatusPageClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwStatusPageClass] = scala.scalanative.unsafe.alloc[AdwStatusPageClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwStatusPageClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwStatusPageClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
*/
opaque type AdwStyleManager = CStruct0
object AdwStyleManager:
  given _tag: Tag[AdwStyleManager] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
*/
opaque type AdwStyleManagerClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object AdwStyleManagerClass:
  given _tag: Tag[AdwStyleManagerClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[AdwStyleManagerClass] = scala.scalanative.unsafe.alloc[AdwStyleManagerClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[AdwStyleManagerClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwStyleManagerClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
*/
opaque type AdwSwipeTracker = CStruct0
object AdwSwipeTracker:
  given _tag: Tag[AdwSwipeTracker] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
*/
opaque type AdwSwipeTrackerClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object AdwSwipeTrackerClass:
  given _tag: Tag[AdwSwipeTrackerClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[AdwSwipeTrackerClass] = scala.scalanative.unsafe.alloc[AdwSwipeTrackerClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[AdwSwipeTrackerClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwSwipeTrackerClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-swipeable.h
*/
opaque type AdwSwipeable = CStruct0
object AdwSwipeable:
  given _tag: Tag[AdwSwipeable] = Tag.materializeCStruct0Tag

/**
 * AdwSwipeableInterface: : The parent interface. _distance: Gets the swipe distance. _snap_points: Gets the snap points. _progress: Gets the current progress. _cancel_progress: Gets the cancel progress. _swipe_area: Gets the swipeable rectangle.

 * [bindgen] header: /usr/include/libadwaita-1/adw-swipeable.h
*/
opaque type AdwSwipeableInterface = CArray[CChar, Nat.Digit2[Nat._8, Nat._8]]
object AdwSwipeableInterface:
  given _tag: Tag[AdwSwipeableInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._8, Nat._8]](Tag.Byte, Tag.Digit2[Nat._8, Nat._8](Tag.Nat8, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwSwipeableInterface] = scala.scalanative.unsafe.alloc[AdwSwipeableInterface](1)
  def apply(parent : GTypeInterface, get_distance : CFuncPtr1[Ptr[AdwSwipeable], Double], get_snap_points : CFuncPtr2[Ptr[AdwSwipeable], Ptr[CInt], Ptr[Double]], get_progress : CFuncPtr1[Ptr[AdwSwipeable], Double], get_cancel_progress : CFuncPtr1[Ptr[AdwSwipeable], Double], get_swipe_area : CFuncPtr4[Ptr[AdwSwipeable], AdwNavigationDirection, gboolean, Ptr[GdkRectangle], Unit], padding : CArray[gpointer, Nat._4])(using Zone): Ptr[AdwSwipeableInterface] = 
    val ____ptr = apply()
    (!____ptr).parent = parent
    (!____ptr).get_distance = get_distance
    (!____ptr).get_snap_points = get_snap_points
    (!____ptr).get_progress = get_progress
    (!____ptr).get_cancel_progress = get_cancel_progress
    (!____ptr).get_swipe_area = get_swipe_area
    (!____ptr).padding = padding
    ____ptr
  extension (struct: AdwSwipeableInterface)
    def parent: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def parent_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def get_distance: CFuncPtr1[Ptr[AdwSwipeable], Double] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[AdwSwipeable], Double]]]
    def get_distance_=(value: CFuncPtr1[Ptr[AdwSwipeable], Double]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[AdwSwipeable], Double]]] = value
    def get_snap_points: CFuncPtr2[Ptr[AdwSwipeable], Ptr[CInt], Ptr[Double]] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr2[Ptr[AdwSwipeable], Ptr[CInt], Ptr[Double]]]]
    def get_snap_points_=(value: CFuncPtr2[Ptr[AdwSwipeable], Ptr[CInt], Ptr[Double]]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr2[Ptr[AdwSwipeable], Ptr[CInt], Ptr[Double]]]] = value
    def get_progress: CFuncPtr1[Ptr[AdwSwipeable], Double] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[AdwSwipeable], Double]]]
    def get_progress_=(value: CFuncPtr1[Ptr[AdwSwipeable], Double]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[AdwSwipeable], Double]]] = value
    def get_cancel_progress: CFuncPtr1[Ptr[AdwSwipeable], Double] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[AdwSwipeable], Double]]]
    def get_cancel_progress_=(value: CFuncPtr1[Ptr[AdwSwipeable], Double]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[AdwSwipeable], Double]]] = value
    def get_swipe_area: CFuncPtr4[Ptr[AdwSwipeable], AdwNavigationDirection, gboolean, Ptr[GdkRectangle], Unit] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr4[Ptr[AdwSwipeable], AdwNavigationDirection, gboolean, Ptr[GdkRectangle], Unit]]]
    def get_swipe_area_=(value: CFuncPtr4[Ptr[AdwSwipeable], AdwNavigationDirection, gboolean, Ptr[GdkRectangle], Unit]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr4[Ptr[AdwSwipeable], AdwNavigationDirection, gboolean, Ptr[GdkRectangle], Unit]]] = value
    def padding: CArray[gpointer, Nat._4] = !struct.at(56).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]]
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at(56).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
*/
opaque type AdwTabBar = CStruct0
object AdwTabBar:
  given _tag: Tag[AdwTabBar] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
*/
opaque type AdwTabBarClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwTabBarClass:
  given _tag: Tag[AdwTabBarClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwTabBarClass] = scala.scalanative.unsafe.alloc[AdwTabBarClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwTabBarClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwTabBarClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
*/
opaque type AdwTabPage = CStruct0
object AdwTabPage:
  given _tag: Tag[AdwTabPage] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
*/
opaque type AdwTabPageClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object AdwTabPageClass:
  given _tag: Tag[AdwTabPageClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[AdwTabPageClass] = scala.scalanative.unsafe.alloc[AdwTabPageClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[AdwTabPageClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwTabPageClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
*/
opaque type AdwTabView = CStruct0
object AdwTabView:
  given _tag: Tag[AdwTabView] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
*/
opaque type AdwTabViewClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwTabViewClass:
  given _tag: Tag[AdwTabViewClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwTabViewClass] = scala.scalanative.unsafe.alloc[AdwTabViewClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwTabViewClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwTabViewClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
*/
opaque type AdwTimedAnimation = CStruct0
object AdwTimedAnimation:
  given _tag: Tag[AdwTimedAnimation] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
*/
opaque type AdwTimedAnimationClass = CStruct0
object AdwTimedAnimationClass:
  given _tag: Tag[AdwTimedAnimationClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
*/
opaque type AdwToast = CStruct0
object AdwToast:
  given _tag: Tag[AdwToast] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
*/
opaque type AdwToastClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object AdwToastClass:
  given _tag: Tag[AdwToastClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[AdwToastClass] = scala.scalanative.unsafe.alloc[AdwToastClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[AdwToastClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwToastClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-toast-overlay.h
*/
opaque type AdwToastOverlay = CStruct0
object AdwToastOverlay:
  given _tag: Tag[AdwToastOverlay] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-toast-overlay.h
*/
opaque type AdwToastOverlayClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwToastOverlayClass:
  given _tag: Tag[AdwToastOverlayClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwToastOverlayClass] = scala.scalanative.unsafe.alloc[AdwToastOverlayClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwToastOverlayClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwToastOverlayClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
*/
opaque type AdwViewStack = CStruct0
object AdwViewStack:
  given _tag: Tag[AdwViewStack] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
*/
opaque type AdwViewStackClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwViewStackClass:
  given _tag: Tag[AdwViewStackClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwViewStackClass] = scala.scalanative.unsafe.alloc[AdwViewStackClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwViewStackClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwViewStackClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
*/
opaque type AdwViewStackPage = CStruct0
object AdwViewStackPage:
  given _tag: Tag[AdwViewStackPage] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
*/
opaque type AdwViewStackPageClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object AdwViewStackPageClass:
  given _tag: Tag[AdwViewStackPageClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[AdwViewStackPageClass] = scala.scalanative.unsafe.alloc[AdwViewStackPageClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[AdwViewStackPageClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwViewStackPageClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
*/
opaque type AdwViewSwitcher = CStruct0
object AdwViewSwitcher:
  given _tag: Tag[AdwViewSwitcher] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
*/
opaque type AdwViewSwitcherBar = CStruct0
object AdwViewSwitcherBar:
  given _tag: Tag[AdwViewSwitcherBar] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
*/
opaque type AdwViewSwitcherBarClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwViewSwitcherBarClass:
  given _tag: Tag[AdwViewSwitcherBarClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwViewSwitcherBarClass] = scala.scalanative.unsafe.alloc[AdwViewSwitcherBarClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwViewSwitcherBarClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwViewSwitcherBarClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
*/
opaque type AdwViewSwitcherClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwViewSwitcherClass:
  given _tag: Tag[AdwViewSwitcherClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwViewSwitcherClass] = scala.scalanative.unsafe.alloc[AdwViewSwitcherClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwViewSwitcherClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwViewSwitcherClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
*/
opaque type AdwViewSwitcherTitle = CStruct0
object AdwViewSwitcherTitle:
  given _tag: Tag[AdwViewSwitcherTitle] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
*/
opaque type AdwViewSwitcherTitleClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwViewSwitcherTitleClass:
  given _tag: Tag[AdwViewSwitcherTitleClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwViewSwitcherTitleClass] = scala.scalanative.unsafe.alloc[AdwViewSwitcherTitleClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwViewSwitcherTitleClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwViewSwitcherTitleClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
*/
opaque type AdwWindow = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object AdwWindow:
  given _tag: Tag[AdwWindow] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[AdwWindow] = scala.scalanative.unsafe.alloc[AdwWindow](1)
  def apply(parent_instance : _root_.gtk4.all.GtkWindow)(using Zone): Ptr[AdwWindow] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: AdwWindow)
    def parent_instance: _root_.gtk4.all.GtkWindow = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWindow]]
    def parent_instance_=(value: _root_.gtk4.all.GtkWindow): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWindow]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
*/
opaque type AdwWindowClass = CArray[CChar, Nat.Digit3[Nat._5, Nat._4, Nat._4]]
object AdwWindowClass:
  given _tag: Tag[AdwWindowClass] = Tag.CArray[CChar, Nat.Digit3[Nat._5, Nat._4, Nat._4]](Tag.Byte, Tag.Digit3[Nat._5, Nat._4, Nat._4](Tag.Nat5, Tag.Nat4, Tag.Nat4))
  def apply()(using Zone): Ptr[AdwWindowClass] = scala.scalanative.unsafe.alloc[AdwWindowClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWindowClass, padding : CArray[gpointer, Nat._4])(using Zone): Ptr[AdwWindowClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: AdwWindowClass)
    def parent_class: _root_.gtk4.all.GtkWindowClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWindowClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWindowClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWindowClass]] = value
    def padding: CArray[gpointer, Nat._4] = !struct.at(512).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]]
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at(512).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]] = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
*/
opaque type AdwWindowTitle = CStruct0
object AdwWindowTitle:
  given _tag: Tag[AdwWindowTitle] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
*/
opaque type AdwWindowTitleClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object AdwWindowTitleClass:
  given _tag: Tag[AdwWindowTitleClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[AdwWindowTitleClass] = scala.scalanative.unsafe.alloc[AdwWindowTitleClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[AdwWindowTitleClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: AdwWindowTitleClass)
    def parent_class: _root_.gtk4.all.GtkWidgetClass = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]]
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at(0).asInstanceOf[Ptr[_root_.gtk4.all.GtkWidgetClass]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GAction = CStruct0
object GAction:
  given _tag: Tag[GAction] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gactionmap.h
*/
opaque type GActionEntry = CArray[CChar, Nat.Digit2[Nat._6, Nat._4]]
object GActionEntry:
  given _tag: Tag[GActionEntry] = Tag.CArray[CChar, Nat.Digit2[Nat._6, Nat._4]](Tag.Byte, Tag.Digit2[Nat._6, Nat._4](Tag.Nat6, Tag.Nat4))
  def apply()(using Zone): Ptr[GActionEntry] = scala.scalanative.unsafe.alloc[GActionEntry](1)
  def apply(name : Ptr[gchar], activate : CFuncPtr3[Ptr[GSimpleAction], Ptr[GVariant], gpointer, Unit], parameter_type : Ptr[gchar], state : Ptr[gchar], change_state : CFuncPtr3[Ptr[GSimpleAction], Ptr[GVariant], gpointer, Unit], padding : CArray[gsize, Nat._3])(using Zone): Ptr[GActionEntry] = 
    val ____ptr = apply()
    (!____ptr).name = name
    (!____ptr).activate = activate
    (!____ptr).parameter_type = parameter_type
    (!____ptr).state = state
    (!____ptr).change_state = change_state
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GActionEntry)
    def name: Ptr[gchar] = !struct.at(0).asInstanceOf[Ptr[Ptr[gchar]]]
    def name_=(value: Ptr[gchar]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def activate: CFuncPtr3[Ptr[GSimpleAction], Ptr[GVariant], gpointer, Unit] = !struct.at(8).asInstanceOf[Ptr[CFuncPtr3[Ptr[GSimpleAction], Ptr[GVariant], gpointer, Unit]]]
    def activate_=(value: CFuncPtr3[Ptr[GSimpleAction], Ptr[GVariant], gpointer, Unit]): Unit = !struct.at(8).asInstanceOf[Ptr[CFuncPtr3[Ptr[GSimpleAction], Ptr[GVariant], gpointer, Unit]]] = value
    def parameter_type: Ptr[gchar] = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]]
    def parameter_type_=(value: Ptr[gchar]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def state: Ptr[gchar] = !struct.at(24).asInstanceOf[Ptr[Ptr[gchar]]]
    def state_=(value: Ptr[gchar]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def change_state: CFuncPtr3[Ptr[GSimpleAction], Ptr[GVariant], gpointer, Unit] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr3[Ptr[GSimpleAction], Ptr[GVariant], gpointer, Unit]]]
    def change_state_=(value: CFuncPtr3[Ptr[GSimpleAction], Ptr[GVariant], gpointer, Unit]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr3[Ptr[GSimpleAction], Ptr[GVariant], gpointer, Unit]]] = value
    def padding: CArray[gsize, Nat._3] = !struct.at(40).asInstanceOf[Ptr[CArray[gsize, Nat._3]]]
    def padding_=(value: CArray[gsize, Nat._3]): Unit = !struct.at(40).asInstanceOf[Ptr[CArray[gsize, Nat._3]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GActionGroup = CStruct0
object GActionGroup:
  given _tag: Tag[GActionGroup] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gactiongroup.h
*/
opaque type GActionGroupInterface = CArray[CChar, Nat.Digit3[Nat._1, Nat._2, Nat._8]]
object GActionGroupInterface:
  given _tag: Tag[GActionGroupInterface] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._2, Nat._8]](Tag.Byte, Tag.Digit3[Nat._1, Nat._2, Nat._8](Tag.Nat1, Tag.Nat2, Tag.Nat8))
  def apply()(using Zone): Ptr[GActionGroupInterface] = scala.scalanative.unsafe.alloc[GActionGroupInterface](1)
  def apply(g_iface : GTypeInterface, has_action : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], gboolean], list_actions : CFuncPtr1[Ptr[GActionGroup], Ptr[Ptr[gchar]]], get_action_enabled : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], gboolean], get_action_parameter_type : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariantType]], get_action_state_type : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariantType]], get_action_state_hint : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant]], get_action_state : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant]], change_action_state : CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit], activate_action : CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit], action_added : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Unit], action_removed : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Unit], action_enabled_changed : CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], gboolean, Unit], action_state_changed : CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit], query_action : CFuncPtr7[Ptr[GActionGroup], Ptr[gchar], Ptr[gboolean], Ptr[Ptr[GVariantType]], Ptr[Ptr[GVariantType]], Ptr[Ptr[GVariant]], Ptr[Ptr[GVariant]], gboolean])(using Zone): Ptr[GActionGroupInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).has_action = has_action
    (!____ptr).list_actions = list_actions
    (!____ptr).get_action_enabled = get_action_enabled
    (!____ptr).get_action_parameter_type = get_action_parameter_type
    (!____ptr).get_action_state_type = get_action_state_type
    (!____ptr).get_action_state_hint = get_action_state_hint
    (!____ptr).get_action_state = get_action_state
    (!____ptr).change_action_state = change_action_state
    (!____ptr).activate_action = activate_action
    (!____ptr).action_added = action_added
    (!____ptr).action_removed = action_removed
    (!____ptr).action_enabled_changed = action_enabled_changed
    (!____ptr).action_state_changed = action_state_changed
    (!____ptr).query_action = query_action
    ____ptr
  extension (struct: GActionGroupInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def has_action: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], gboolean] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], gboolean]]]
    def has_action_=(value: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], gboolean]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], gboolean]]] = value
    def list_actions: CFuncPtr1[Ptr[GActionGroup], Ptr[Ptr[gchar]]] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GActionGroup], Ptr[Ptr[gchar]]]]]
    def list_actions_=(value: CFuncPtr1[Ptr[GActionGroup], Ptr[Ptr[gchar]]]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GActionGroup], Ptr[Ptr[gchar]]]]] = value
    def get_action_enabled: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], gboolean] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], gboolean]]]
    def get_action_enabled_=(value: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], gboolean]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], gboolean]]] = value
    def get_action_parameter_type: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariantType]] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariantType]]]]
    def get_action_parameter_type_=(value: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariantType]]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariantType]]]] = value
    def get_action_state_type: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariantType]] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariantType]]]]
    def get_action_state_type_=(value: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariantType]]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariantType]]]] = value
    def get_action_state_hint: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant]] = !struct.at(56).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant]]]]
    def get_action_state_hint_=(value: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant]]): Unit = !struct.at(56).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant]]]] = value
    def get_action_state: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant]] = !struct.at(64).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant]]]]
    def get_action_state_=(value: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant]]): Unit = !struct.at(64).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant]]]] = value
    def change_action_state: CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit] = !struct.at(72).asInstanceOf[Ptr[CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit]]]
    def change_action_state_=(value: CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit]): Unit = !struct.at(72).asInstanceOf[Ptr[CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit]]] = value
    def activate_action: CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit] = !struct.at(80).asInstanceOf[Ptr[CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit]]]
    def activate_action_=(value: CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit]): Unit = !struct.at(80).asInstanceOf[Ptr[CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit]]] = value
    def action_added: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Unit] = !struct.at(88).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Unit]]]
    def action_added_=(value: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Unit]): Unit = !struct.at(88).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Unit]]] = value
    def action_removed: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Unit] = !struct.at(96).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Unit]]]
    def action_removed_=(value: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Unit]): Unit = !struct.at(96).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Unit]]] = value
    def action_enabled_changed: CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], gboolean, Unit] = !struct.at(104).asInstanceOf[Ptr[CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], gboolean, Unit]]]
    def action_enabled_changed_=(value: CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], gboolean, Unit]): Unit = !struct.at(104).asInstanceOf[Ptr[CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], gboolean, Unit]]] = value
    def action_state_changed: CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit] = !struct.at(112).asInstanceOf[Ptr[CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit]]]
    def action_state_changed_=(value: CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit]): Unit = !struct.at(112).asInstanceOf[Ptr[CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit]]] = value
    def query_action: CFuncPtr7[Ptr[GActionGroup], Ptr[gchar], Ptr[gboolean], Ptr[Ptr[GVariantType]], Ptr[Ptr[GVariantType]], Ptr[Ptr[GVariant]], Ptr[Ptr[GVariant]], gboolean] = !struct.at(120).asInstanceOf[Ptr[CFuncPtr7[Ptr[GActionGroup], Ptr[gchar], Ptr[gboolean], Ptr[Ptr[GVariantType]], Ptr[Ptr[GVariantType]], Ptr[Ptr[GVariant]], Ptr[Ptr[GVariant]], gboolean]]]
    def query_action_=(value: CFuncPtr7[Ptr[GActionGroup], Ptr[gchar], Ptr[gboolean], Ptr[Ptr[GVariantType]], Ptr[Ptr[GVariantType]], Ptr[Ptr[GVariant]], Ptr[Ptr[GVariant]], gboolean]): Unit = !struct.at(120).asInstanceOf[Ptr[CFuncPtr7[Ptr[GActionGroup], Ptr[gchar], Ptr[gboolean], Ptr[Ptr[GVariantType]], Ptr[Ptr[GVariantType]], Ptr[Ptr[GVariant]], Ptr[Ptr[GVariant]], gboolean]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gaction.h
*/
opaque type GActionInterface = CArray[CChar, Nat.Digit2[Nat._8, Nat._0]]
object GActionInterface:
  given _tag: Tag[GActionInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._8, Nat._0]](Tag.Byte, Tag.Digit2[Nat._8, Nat._0](Tag.Nat8, Tag.Nat0))
  def apply()(using Zone): Ptr[GActionInterface] = scala.scalanative.unsafe.alloc[GActionInterface](1)
  def apply(g_iface : GTypeInterface, get_name : CFuncPtr1[Ptr[GAction], Ptr[gchar]], get_parameter_type : CFuncPtr1[Ptr[GAction], Ptr[GVariantType]], get_state_type : CFuncPtr1[Ptr[GAction], Ptr[GVariantType]], get_state_hint : CFuncPtr1[Ptr[GAction], Ptr[GVariant]], get_enabled : CFuncPtr1[Ptr[GAction], gboolean], get_state : CFuncPtr1[Ptr[GAction], Ptr[GVariant]], change_state : CFuncPtr2[Ptr[GAction], Ptr[GVariant], Unit], activate : CFuncPtr2[Ptr[GAction], Ptr[GVariant], Unit])(using Zone): Ptr[GActionInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).get_name = get_name
    (!____ptr).get_parameter_type = get_parameter_type
    (!____ptr).get_state_type = get_state_type
    (!____ptr).get_state_hint = get_state_hint
    (!____ptr).get_enabled = get_enabled
    (!____ptr).get_state = get_state
    (!____ptr).change_state = change_state
    (!____ptr).activate = activate
    ____ptr
  extension (struct: GActionInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def get_name: CFuncPtr1[Ptr[GAction], Ptr[gchar]] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAction], Ptr[gchar]]]]
    def get_name_=(value: CFuncPtr1[Ptr[GAction], Ptr[gchar]]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAction], Ptr[gchar]]]] = value
    def get_parameter_type: CFuncPtr1[Ptr[GAction], Ptr[GVariantType]] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAction], Ptr[GVariantType]]]]
    def get_parameter_type_=(value: CFuncPtr1[Ptr[GAction], Ptr[GVariantType]]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAction], Ptr[GVariantType]]]] = value
    def get_state_type: CFuncPtr1[Ptr[GAction], Ptr[GVariantType]] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAction], Ptr[GVariantType]]]]
    def get_state_type_=(value: CFuncPtr1[Ptr[GAction], Ptr[GVariantType]]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAction], Ptr[GVariantType]]]] = value
    def get_state_hint: CFuncPtr1[Ptr[GAction], Ptr[GVariant]] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAction], Ptr[GVariant]]]]
    def get_state_hint_=(value: CFuncPtr1[Ptr[GAction], Ptr[GVariant]]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAction], Ptr[GVariant]]]] = value
    def get_enabled: CFuncPtr1[Ptr[GAction], gboolean] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAction], gboolean]]]
    def get_enabled_=(value: CFuncPtr1[Ptr[GAction], gboolean]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAction], gboolean]]] = value
    def get_state: CFuncPtr1[Ptr[GAction], Ptr[GVariant]] = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAction], Ptr[GVariant]]]]
    def get_state_=(value: CFuncPtr1[Ptr[GAction], Ptr[GVariant]]): Unit = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAction], Ptr[GVariant]]]] = value
    def change_state: CFuncPtr2[Ptr[GAction], Ptr[GVariant], Unit] = !struct.at(64).asInstanceOf[Ptr[CFuncPtr2[Ptr[GAction], Ptr[GVariant], Unit]]]
    def change_state_=(value: CFuncPtr2[Ptr[GAction], Ptr[GVariant], Unit]): Unit = !struct.at(64).asInstanceOf[Ptr[CFuncPtr2[Ptr[GAction], Ptr[GVariant], Unit]]] = value
    def activate: CFuncPtr2[Ptr[GAction], Ptr[GVariant], Unit] = !struct.at(72).asInstanceOf[Ptr[CFuncPtr2[Ptr[GAction], Ptr[GVariant], Unit]]]
    def activate_=(value: CFuncPtr2[Ptr[GAction], Ptr[GVariant], Unit]): Unit = !struct.at(72).asInstanceOf[Ptr[CFuncPtr2[Ptr[GAction], Ptr[GVariant], Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GActionMap = CStruct0
object GActionMap:
  given _tag: Tag[GActionMap] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gactionmap.h
*/
opaque type GActionMapInterface = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GActionMapInterface:
  given _tag: Tag[GActionMapInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GActionMapInterface] = scala.scalanative.unsafe.alloc[GActionMapInterface](1)
  def apply(g_iface : GTypeInterface, lookup_action : CFuncPtr2[Ptr[GActionMap], Ptr[gchar], Ptr[GAction]], add_action : CFuncPtr2[Ptr[GActionMap], Ptr[GAction], Unit], remove_action : CFuncPtr2[Ptr[GActionMap], Ptr[gchar], Unit])(using Zone): Ptr[GActionMapInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).lookup_action = lookup_action
    (!____ptr).add_action = add_action
    (!____ptr).remove_action = remove_action
    ____ptr
  extension (struct: GActionMapInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def lookup_action: CFuncPtr2[Ptr[GActionMap], Ptr[gchar], Ptr[GAction]] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionMap], Ptr[gchar], Ptr[GAction]]]]
    def lookup_action_=(value: CFuncPtr2[Ptr[GActionMap], Ptr[gchar], Ptr[GAction]]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionMap], Ptr[gchar], Ptr[GAction]]]] = value
    def add_action: CFuncPtr2[Ptr[GActionMap], Ptr[GAction], Unit] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionMap], Ptr[GAction], Unit]]]
    def add_action_=(value: CFuncPtr2[Ptr[GActionMap], Ptr[GAction], Unit]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionMap], Ptr[GAction], Unit]]] = value
    def remove_action: CFuncPtr2[Ptr[GActionMap], Ptr[gchar], Unit] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionMap], Ptr[gchar], Unit]]]
    def remove_action_=(value: CFuncPtr2[Ptr[GActionMap], Ptr[gchar], Unit]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GActionMap], Ptr[gchar], Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
*/
opaque type GAllocator = CStruct0
object GAllocator:
  given _tag: Tag[GAllocator] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GAppInfo = CStruct0
object GAppInfo:
  given _tag: Tag[GAppInfo] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
*/
opaque type GAppInfoIface = CArray[CChar, Nat.Digit3[Nat._2, Nat._1, Nat._6]]
object GAppInfoIface:
  given _tag: Tag[GAppInfoIface] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._1, Nat._6]](Tag.Byte, Tag.Digit3[Nat._2, Nat._1, Nat._6](Tag.Nat2, Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GAppInfoIface] = scala.scalanative.unsafe.alloc[GAppInfoIface](1)
  def apply(g_iface : GTypeInterface, dup : CFuncPtr1[Ptr[GAppInfo], Ptr[GAppInfo]], equal : CFuncPtr2[Ptr[GAppInfo], Ptr[GAppInfo], gboolean], get_id : CFuncPtr1[Ptr[GAppInfo], CString], get_name : CFuncPtr1[Ptr[GAppInfo], CString], get_description : CFuncPtr1[Ptr[GAppInfo], CString], get_executable : CFuncPtr1[Ptr[GAppInfo], CString], get_icon : CFuncPtr1[Ptr[GAppInfo], Ptr[GIcon]], launch : CFuncPtr4[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[Ptr[GError]], gboolean], supports_uris : CFuncPtr1[Ptr[GAppInfo], gboolean], supports_files : CFuncPtr1[Ptr[GAppInfo], gboolean], launch_uris : CFuncPtr4[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[Ptr[GError]], gboolean], should_show : CFuncPtr1[Ptr[GAppInfo], gboolean], set_as_default_for_type : CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean], set_as_default_for_extension : CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean], add_supports_type : CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean], can_remove_supports_type : CFuncPtr1[Ptr[GAppInfo], gboolean], remove_supports_type : CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean], can_delete : CFuncPtr1[Ptr[GAppInfo], gboolean], do_delete : CFuncPtr1[Ptr[GAppInfo], gboolean], get_commandline : CFuncPtr1[Ptr[GAppInfo], CString], get_display_name : CFuncPtr1[Ptr[GAppInfo], CString], set_as_last_used_for_type : CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean], get_supported_types : CFuncPtr1[Ptr[GAppInfo], Ptr[CString]], launch_uris_async : CFuncPtr6[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], launch_uris_finish : CFuncPtr3[Ptr[GAppInfo], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean])(using Zone): Ptr[GAppInfoIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).dup = dup
    (!____ptr).equal = equal
    (!____ptr).get_id = get_id
    (!____ptr).get_name = get_name
    (!____ptr).get_description = get_description
    (!____ptr).get_executable = get_executable
    (!____ptr).get_icon = get_icon
    (!____ptr).launch = launch
    (!____ptr).supports_uris = supports_uris
    (!____ptr).supports_files = supports_files
    (!____ptr).launch_uris = launch_uris
    (!____ptr).should_show = should_show
    (!____ptr).set_as_default_for_type = set_as_default_for_type
    (!____ptr).set_as_default_for_extension = set_as_default_for_extension
    (!____ptr).add_supports_type = add_supports_type
    (!____ptr).can_remove_supports_type = can_remove_supports_type
    (!____ptr).remove_supports_type = remove_supports_type
    (!____ptr).can_delete = can_delete
    (!____ptr).do_delete = do_delete
    (!____ptr).get_commandline = get_commandline
    (!____ptr).get_display_name = get_display_name
    (!____ptr).set_as_last_used_for_type = set_as_last_used_for_type
    (!____ptr).get_supported_types = get_supported_types
    (!____ptr).launch_uris_async = launch_uris_async
    (!____ptr).launch_uris_finish = launch_uris_finish
    ____ptr
  extension (struct: GAppInfoIface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def dup: CFuncPtr1[Ptr[GAppInfo], Ptr[GAppInfo]] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], Ptr[GAppInfo]]]]
    def dup_=(value: CFuncPtr1[Ptr[GAppInfo], Ptr[GAppInfo]]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], Ptr[GAppInfo]]]] = value
    def equal: CFuncPtr2[Ptr[GAppInfo], Ptr[GAppInfo], gboolean] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr2[Ptr[GAppInfo], Ptr[GAppInfo], gboolean]]]
    def equal_=(value: CFuncPtr2[Ptr[GAppInfo], Ptr[GAppInfo], gboolean]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr2[Ptr[GAppInfo], Ptr[GAppInfo], gboolean]]] = value
    def get_id: CFuncPtr1[Ptr[GAppInfo], CString] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]]
    def get_id_=(value: CFuncPtr1[Ptr[GAppInfo], CString]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]] = value
    def get_name: CFuncPtr1[Ptr[GAppInfo], CString] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]]
    def get_name_=(value: CFuncPtr1[Ptr[GAppInfo], CString]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]] = value
    def get_description: CFuncPtr1[Ptr[GAppInfo], CString] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]]
    def get_description_=(value: CFuncPtr1[Ptr[GAppInfo], CString]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]] = value
    def get_executable: CFuncPtr1[Ptr[GAppInfo], CString] = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]]
    def get_executable_=(value: CFuncPtr1[Ptr[GAppInfo], CString]): Unit = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]] = value
    def get_icon: CFuncPtr1[Ptr[GAppInfo], Ptr[GIcon]] = !struct.at(64).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], Ptr[GIcon]]]]
    def get_icon_=(value: CFuncPtr1[Ptr[GAppInfo], Ptr[GIcon]]): Unit = !struct.at(64).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], Ptr[GIcon]]]] = value
    def launch: CFuncPtr4[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[Ptr[GError]], gboolean] = !struct.at(72).asInstanceOf[Ptr[CFuncPtr4[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[Ptr[GError]], gboolean]]]
    def launch_=(value: CFuncPtr4[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(72).asInstanceOf[Ptr[CFuncPtr4[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[Ptr[GError]], gboolean]]] = value
    def supports_uris: CFuncPtr1[Ptr[GAppInfo], gboolean] = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]]
    def supports_uris_=(value: CFuncPtr1[Ptr[GAppInfo], gboolean]): Unit = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]] = value
    def supports_files: CFuncPtr1[Ptr[GAppInfo], gboolean] = !struct.at(88).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]]
    def supports_files_=(value: CFuncPtr1[Ptr[GAppInfo], gboolean]): Unit = !struct.at(88).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]] = value
    def launch_uris: CFuncPtr4[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[Ptr[GError]], gboolean] = !struct.at(96).asInstanceOf[Ptr[CFuncPtr4[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[Ptr[GError]], gboolean]]]
    def launch_uris_=(value: CFuncPtr4[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(96).asInstanceOf[Ptr[CFuncPtr4[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[Ptr[GError]], gboolean]]] = value
    def should_show: CFuncPtr1[Ptr[GAppInfo], gboolean] = !struct.at(104).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]]
    def should_show_=(value: CFuncPtr1[Ptr[GAppInfo], gboolean]): Unit = !struct.at(104).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]] = value
    def set_as_default_for_type: CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean] = !struct.at(112).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]]]
    def set_as_default_for_type_=(value: CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(112).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]]] = value
    def set_as_default_for_extension: CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean] = !struct.at(120).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]]]
    def set_as_default_for_extension_=(value: CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(120).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]]] = value
    def add_supports_type: CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean] = !struct.at(128).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]]]
    def add_supports_type_=(value: CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(128).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]]] = value
    def can_remove_supports_type: CFuncPtr1[Ptr[GAppInfo], gboolean] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]]
    def can_remove_supports_type_=(value: CFuncPtr1[Ptr[GAppInfo], gboolean]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]] = value
    def remove_supports_type: CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]]]
    def remove_supports_type_=(value: CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]]] = value
    def can_delete: CFuncPtr1[Ptr[GAppInfo], gboolean] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]]
    def can_delete_=(value: CFuncPtr1[Ptr[GAppInfo], gboolean]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]] = value
    def do_delete: CFuncPtr1[Ptr[GAppInfo], gboolean] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]]
    def do_delete_=(value: CFuncPtr1[Ptr[GAppInfo], gboolean]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]] = value
    def get_commandline: CFuncPtr1[Ptr[GAppInfo], CString] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]]
    def get_commandline_=(value: CFuncPtr1[Ptr[GAppInfo], CString]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]] = value
    def get_display_name: CFuncPtr1[Ptr[GAppInfo], CString] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]]
    def get_display_name_=(value: CFuncPtr1[Ptr[GAppInfo], CString]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]] = value
    def set_as_last_used_for_type: CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]]]
    def set_as_last_used_for_type_=(value: CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]]] = value
    def get_supported_types: CFuncPtr1[Ptr[GAppInfo], Ptr[CString]] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], Ptr[CString]]]]
    def get_supported_types_=(value: CFuncPtr1[Ptr[GAppInfo], Ptr[CString]]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], Ptr[CString]]]] = value
    def launch_uris_async: CFuncPtr6[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr6[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def launch_uris_async_=(value: CFuncPtr6[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr6[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def launch_uris_finish: CFuncPtr3[Ptr[GAppInfo], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def launch_uris_finish_=(value: CFuncPtr3[Ptr[GAppInfo], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
*/
opaque type GAppInfoMonitor = CStruct0
object GAppInfoMonitor:
  given _tag: Tag[GAppInfoMonitor] = Tag.materializeCStruct0Tag

/**
 * GAppLaunchContext:

 * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
*/
opaque type GAppLaunchContext = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GAppLaunchContext:
  given _tag: Tag[GAppLaunchContext] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GAppLaunchContext] = scala.scalanative.unsafe.alloc[GAppLaunchContext](1)
  def apply(parent_instance : GObject, priv : Ptr[GAppLaunchContextPrivate])(using Zone): Ptr[GAppLaunchContext] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GAppLaunchContext)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GAppLaunchContextPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GAppLaunchContextPrivate]]]
    def priv_=(value: Ptr[GAppLaunchContextPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GAppLaunchContextPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
*/
opaque type GAppLaunchContextClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._0, Nat._0]]
object GAppLaunchContextClass:
  given _tag: Tag[GAppLaunchContextClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._0, Nat._0]](Tag.Byte, Tag.Digit3[Nat._2, Nat._0, Nat._0](Tag.Nat2, Tag.Nat0, Tag.Nat0))
  def apply()(using Zone): Ptr[GAppLaunchContextClass] = scala.scalanative.unsafe.alloc[GAppLaunchContextClass](1)
  def apply(parent_class : GObjectClass, get_display : CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GList], CString], get_startup_notify_id : CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GList], CString], launch_failed : CFuncPtr2[Ptr[GAppLaunchContext], CString, Unit], launched : CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GVariant], Unit], launch_started : CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GVariant], Unit], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit])(using Zone): Ptr[GAppLaunchContextClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_display = get_display
    (!____ptr).get_startup_notify_id = get_startup_notify_id
    (!____ptr).launch_failed = launch_failed
    (!____ptr).launched = launched
    (!____ptr).launch_started = launch_started
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    ____ptr
  extension (struct: GAppLaunchContextClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def get_display: CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GList], CString] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GList], CString]]]
    def get_display_=(value: CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GList], CString]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GList], CString]]] = value
    def get_startup_notify_id: CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GList], CString] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GList], CString]]]
    def get_startup_notify_id_=(value: CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GList], CString]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GList], CString]]] = value
    def launch_failed: CFuncPtr2[Ptr[GAppLaunchContext], CString, Unit] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr2[Ptr[GAppLaunchContext], CString, Unit]]]
    def launch_failed_=(value: CFuncPtr2[Ptr[GAppLaunchContext], CString, Unit]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr2[Ptr[GAppLaunchContext], CString, Unit]]] = value
    def launched: CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GVariant], Unit] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GVariant], Unit]]]
    def launched_=(value: CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GVariant], Unit]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GVariant], Unit]]] = value
    def launch_started: CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GVariant], Unit] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GVariant], Unit]]]
    def launch_started_=(value: CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GVariant], Unit]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GVariant], Unit]]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
*/
opaque type GAppLaunchContextPrivate = CStruct0
object GAppLaunchContextPrivate:
  given _tag: Tag[GAppLaunchContextPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
*/
opaque type GApplication = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GApplication:
  given _tag: Tag[GApplication] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GApplication] = scala.scalanative.unsafe.alloc[GApplication](1)
  def apply(parent_instance : GObject, priv : Ptr[GApplicationPrivate])(using Zone): Ptr[GApplication] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GApplication)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GApplicationPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GApplicationPrivate]]]
    def priv_=(value: Ptr[GApplicationPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GApplicationPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
*/
opaque type GApplicationClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._1, Nat._2]]
object GApplicationClass:
  given _tag: Tag[GApplicationClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._1, Nat._2]](Tag.Byte, Tag.Digit3[Nat._3, Nat._1, Nat._2](Tag.Nat3, Tag.Nat1, Tag.Nat2))
  def apply()(using Zone): Ptr[GApplicationClass] = scala.scalanative.unsafe.alloc[GApplicationClass](1)
  def apply(parent_class : GObjectClass, startup : CFuncPtr1[Ptr[GApplication], Unit], activate : CFuncPtr1[Ptr[GApplication], Unit], open : CFuncPtr4[Ptr[GApplication], Ptr[Ptr[GFile]], gint, Ptr[gchar], Unit], command_line : CFuncPtr2[Ptr[GApplication], Ptr[GApplicationCommandLine], CInt], local_command_line : CFuncPtr3[Ptr[GApplication], Ptr[Ptr[Ptr[gchar]]], Ptr[CInt], gboolean], before_emit : CFuncPtr2[Ptr[GApplication], Ptr[GVariant], Unit], after_emit : CFuncPtr2[Ptr[GApplication], Ptr[GVariant], Unit], add_platform_data : CFuncPtr2[Ptr[GApplication], Ptr[GVariantBuilder], Unit], quit_mainloop : CFuncPtr1[Ptr[GApplication], Unit], run_mainloop : CFuncPtr1[Ptr[GApplication], Unit], shutdown : CFuncPtr1[Ptr[GApplication], Unit], dbus_register : CFuncPtr4[Ptr[GApplication], Ptr[GDBusConnection], Ptr[gchar], Ptr[Ptr[GError]], gboolean], dbus_unregister : CFuncPtr3[Ptr[GApplication], Ptr[GDBusConnection], Ptr[gchar], Unit], handle_local_options : CFuncPtr2[Ptr[GApplication], Ptr[GVariantDict], gint], name_lost : CFuncPtr1[Ptr[GApplication], gboolean], padding : CArray[gpointer, Nat._7])(using Zone): Ptr[GApplicationClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).startup = startup
    (!____ptr).activate = activate
    (!____ptr).open = open
    (!____ptr).command_line = command_line
    (!____ptr).local_command_line = local_command_line
    (!____ptr).before_emit = before_emit
    (!____ptr).after_emit = after_emit
    (!____ptr).add_platform_data = add_platform_data
    (!____ptr).quit_mainloop = quit_mainloop
    (!____ptr).run_mainloop = run_mainloop
    (!____ptr).shutdown = shutdown
    (!____ptr).dbus_register = dbus_register
    (!____ptr).dbus_unregister = dbus_unregister
    (!____ptr).handle_local_options = handle_local_options
    (!____ptr).name_lost = name_lost
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GApplicationClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def startup: CFuncPtr1[Ptr[GApplication], Unit] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GApplication], Unit]]]
    def startup_=(value: CFuncPtr1[Ptr[GApplication], Unit]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GApplication], Unit]]] = value
    def activate: CFuncPtr1[Ptr[GApplication], Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GApplication], Unit]]]
    def activate_=(value: CFuncPtr1[Ptr[GApplication], Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GApplication], Unit]]] = value
    def open: CFuncPtr4[Ptr[GApplication], Ptr[Ptr[GFile]], gint, Ptr[gchar], Unit] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr4[Ptr[GApplication], Ptr[Ptr[GFile]], gint, Ptr[gchar], Unit]]]
    def open_=(value: CFuncPtr4[Ptr[GApplication], Ptr[Ptr[GFile]], gint, Ptr[gchar], Unit]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr4[Ptr[GApplication], Ptr[Ptr[GFile]], gint, Ptr[gchar], Unit]]] = value
    def command_line: CFuncPtr2[Ptr[GApplication], Ptr[GApplicationCommandLine], CInt] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr2[Ptr[GApplication], Ptr[GApplicationCommandLine], CInt]]]
    def command_line_=(value: CFuncPtr2[Ptr[GApplication], Ptr[GApplicationCommandLine], CInt]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr2[Ptr[GApplication], Ptr[GApplicationCommandLine], CInt]]] = value
    def local_command_line: CFuncPtr3[Ptr[GApplication], Ptr[Ptr[Ptr[gchar]]], Ptr[CInt], gboolean] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr3[Ptr[GApplication], Ptr[Ptr[Ptr[gchar]]], Ptr[CInt], gboolean]]]
    def local_command_line_=(value: CFuncPtr3[Ptr[GApplication], Ptr[Ptr[Ptr[gchar]]], Ptr[CInt], gboolean]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr3[Ptr[GApplication], Ptr[Ptr[Ptr[gchar]]], Ptr[CInt], gboolean]]] = value
    def before_emit: CFuncPtr2[Ptr[GApplication], Ptr[GVariant], Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr2[Ptr[GApplication], Ptr[GVariant], Unit]]]
    def before_emit_=(value: CFuncPtr2[Ptr[GApplication], Ptr[GVariant], Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr2[Ptr[GApplication], Ptr[GVariant], Unit]]] = value
    def after_emit: CFuncPtr2[Ptr[GApplication], Ptr[GVariant], Unit] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr2[Ptr[GApplication], Ptr[GVariant], Unit]]]
    def after_emit_=(value: CFuncPtr2[Ptr[GApplication], Ptr[GVariant], Unit]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr2[Ptr[GApplication], Ptr[GVariant], Unit]]] = value
    def add_platform_data: CFuncPtr2[Ptr[GApplication], Ptr[GVariantBuilder], Unit] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr2[Ptr[GApplication], Ptr[GVariantBuilder], Unit]]]
    def add_platform_data_=(value: CFuncPtr2[Ptr[GApplication], Ptr[GVariantBuilder], Unit]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr2[Ptr[GApplication], Ptr[GVariantBuilder], Unit]]] = value
    def quit_mainloop: CFuncPtr1[Ptr[GApplication], Unit] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr1[Ptr[GApplication], Unit]]]
    def quit_mainloop_=(value: CFuncPtr1[Ptr[GApplication], Unit]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr1[Ptr[GApplication], Unit]]] = value
    def run_mainloop: CFuncPtr1[Ptr[GApplication], Unit] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr1[Ptr[GApplication], Unit]]]
    def run_mainloop_=(value: CFuncPtr1[Ptr[GApplication], Unit]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr1[Ptr[GApplication], Unit]]] = value
    def shutdown: CFuncPtr1[Ptr[GApplication], Unit] = !struct.at(216).asInstanceOf[Ptr[CFuncPtr1[Ptr[GApplication], Unit]]]
    def shutdown_=(value: CFuncPtr1[Ptr[GApplication], Unit]): Unit = !struct.at(216).asInstanceOf[Ptr[CFuncPtr1[Ptr[GApplication], Unit]]] = value
    def dbus_register: CFuncPtr4[Ptr[GApplication], Ptr[GDBusConnection], Ptr[gchar], Ptr[Ptr[GError]], gboolean] = !struct.at(224).asInstanceOf[Ptr[CFuncPtr4[Ptr[GApplication], Ptr[GDBusConnection], Ptr[gchar], Ptr[Ptr[GError]], gboolean]]]
    def dbus_register_=(value: CFuncPtr4[Ptr[GApplication], Ptr[GDBusConnection], Ptr[gchar], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(224).asInstanceOf[Ptr[CFuncPtr4[Ptr[GApplication], Ptr[GDBusConnection], Ptr[gchar], Ptr[Ptr[GError]], gboolean]]] = value
    def dbus_unregister: CFuncPtr3[Ptr[GApplication], Ptr[GDBusConnection], Ptr[gchar], Unit] = !struct.at(232).asInstanceOf[Ptr[CFuncPtr3[Ptr[GApplication], Ptr[GDBusConnection], Ptr[gchar], Unit]]]
    def dbus_unregister_=(value: CFuncPtr3[Ptr[GApplication], Ptr[GDBusConnection], Ptr[gchar], Unit]): Unit = !struct.at(232).asInstanceOf[Ptr[CFuncPtr3[Ptr[GApplication], Ptr[GDBusConnection], Ptr[gchar], Unit]]] = value
    def handle_local_options: CFuncPtr2[Ptr[GApplication], Ptr[GVariantDict], gint] = !struct.at(240).asInstanceOf[Ptr[CFuncPtr2[Ptr[GApplication], Ptr[GVariantDict], gint]]]
    def handle_local_options_=(value: CFuncPtr2[Ptr[GApplication], Ptr[GVariantDict], gint]): Unit = !struct.at(240).asInstanceOf[Ptr[CFuncPtr2[Ptr[GApplication], Ptr[GVariantDict], gint]]] = value
    def name_lost: CFuncPtr1[Ptr[GApplication], gboolean] = !struct.at(248).asInstanceOf[Ptr[CFuncPtr1[Ptr[GApplication], gboolean]]]
    def name_lost_=(value: CFuncPtr1[Ptr[GApplication], gboolean]): Unit = !struct.at(248).asInstanceOf[Ptr[CFuncPtr1[Ptr[GApplication], gboolean]]] = value
    def padding: CArray[gpointer, Nat._7] = !struct.at(256).asInstanceOf[Ptr[CArray[gpointer, Nat._7]]]
    def padding_=(value: CArray[gpointer, Nat._7]): Unit = !struct.at(256).asInstanceOf[Ptr[CArray[gpointer, Nat._7]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gapplicationcommandline.h
*/
opaque type GApplicationCommandLine = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GApplicationCommandLine:
  given _tag: Tag[GApplicationCommandLine] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GApplicationCommandLine] = scala.scalanative.unsafe.alloc[GApplicationCommandLine](1)
  def apply(parent_instance : GObject, priv : Ptr[GApplicationCommandLinePrivate])(using Zone): Ptr[GApplicationCommandLine] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GApplicationCommandLine)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GApplicationCommandLinePrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GApplicationCommandLinePrivate]]]
    def priv_=(value: Ptr[GApplicationCommandLinePrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GApplicationCommandLinePrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gapplicationcommandline.h
*/
opaque type GApplicationCommandLineClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._4, Nat._8]]
object GApplicationCommandLineClass:
  given _tag: Tag[GApplicationCommandLineClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._4, Nat._8]](Tag.Byte, Tag.Digit3[Nat._2, Nat._4, Nat._8](Tag.Nat2, Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GApplicationCommandLineClass] = scala.scalanative.unsafe.alloc[GApplicationCommandLineClass](1)
  def apply(parent_class : GObjectClass, print_literal : CFuncPtr2[Ptr[GApplicationCommandLine], Ptr[gchar], Unit], printerr_literal : CFuncPtr2[Ptr[GApplicationCommandLine], Ptr[gchar], Unit], get_stdin : CFuncPtr1[Ptr[GApplicationCommandLine], Ptr[GInputStream]], padding : CArray[gpointer, Nat.Digit2[Nat._1, Nat._1]])(using Zone): Ptr[GApplicationCommandLineClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).print_literal = print_literal
    (!____ptr).printerr_literal = printerr_literal
    (!____ptr).get_stdin = get_stdin
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GApplicationCommandLineClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def print_literal: CFuncPtr2[Ptr[GApplicationCommandLine], Ptr[gchar], Unit] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr2[Ptr[GApplicationCommandLine], Ptr[gchar], Unit]]]
    def print_literal_=(value: CFuncPtr2[Ptr[GApplicationCommandLine], Ptr[gchar], Unit]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr2[Ptr[GApplicationCommandLine], Ptr[gchar], Unit]]] = value
    def printerr_literal: CFuncPtr2[Ptr[GApplicationCommandLine], Ptr[gchar], Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr2[Ptr[GApplicationCommandLine], Ptr[gchar], Unit]]]
    def printerr_literal_=(value: CFuncPtr2[Ptr[GApplicationCommandLine], Ptr[gchar], Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr2[Ptr[GApplicationCommandLine], Ptr[gchar], Unit]]] = value
    def get_stdin: CFuncPtr1[Ptr[GApplicationCommandLine], Ptr[GInputStream]] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr1[Ptr[GApplicationCommandLine], Ptr[GInputStream]]]]
    def get_stdin_=(value: CFuncPtr1[Ptr[GApplicationCommandLine], Ptr[GInputStream]]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr1[Ptr[GApplicationCommandLine], Ptr[GInputStream]]]] = value
    def padding: CArray[gpointer, Nat.Digit2[Nat._1, Nat._1]] = !struct.at(160).asInstanceOf[Ptr[CArray[gpointer, Nat.Digit2[Nat._1, Nat._1]]]]
    def padding_=(value: CArray[gpointer, Nat.Digit2[Nat._1, Nat._1]]): Unit = !struct.at(160).asInstanceOf[Ptr[CArray[gpointer, Nat.Digit2[Nat._1, Nat._1]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gapplicationcommandline.h
*/
opaque type GApplicationCommandLinePrivate = CStruct0
object GApplicationCommandLinePrivate:
  given _tag: Tag[GApplicationCommandLinePrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
*/
opaque type GApplicationPrivate = CStruct0
object GApplicationPrivate:
  given _tag: Tag[GApplicationPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
*/
opaque type GArray = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GArray:
  given _tag: Tag[GArray] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GArray] = scala.scalanative.unsafe.alloc[GArray](1)
  def apply(data : Ptr[gchar], len : guint)(using Zone): Ptr[GArray] = 
    val ____ptr = apply()
    (!____ptr).data = data
    (!____ptr).len = len
    ____ptr
  extension (struct: GArray)
    def data: Ptr[gchar] = !struct.at(0).asInstanceOf[Ptr[Ptr[gchar]]]
    def data_=(value: Ptr[gchar]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def len: guint = !struct.at(8).asInstanceOf[Ptr[guint]]
    def len_=(value: guint): Unit = !struct.at(8).asInstanceOf[Ptr[guint]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GAsyncInitable = CStruct0
object GAsyncInitable:
  given _tag: Tag[GAsyncInitable] = Tag.materializeCStruct0Tag

/**
 * GAsyncInitableIface: _iface: The parent interface. _async: Starts initialization of the object. _finish: Finishes initialization of the object.

 * [bindgen] header: /usr/include/glib-2.0/gio/gasyncinitable.h
*/
opaque type GAsyncInitableIface = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GAsyncInitableIface:
  given _tag: Tag[GAsyncInitableIface] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GAsyncInitableIface] = scala.scalanative.unsafe.alloc[GAsyncInitableIface](1)
  def apply(g_iface : GTypeInterface, init_async : CFuncPtr5[Ptr[GAsyncInitable], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], init_finish : CFuncPtr3[Ptr[GAsyncInitable], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean])(using Zone): Ptr[GAsyncInitableIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).init_async = init_async
    (!____ptr).init_finish = init_finish
    ____ptr
  extension (struct: GAsyncInitableIface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def init_async: CFuncPtr5[Ptr[GAsyncInitable], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr5[Ptr[GAsyncInitable], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def init_async_=(value: CFuncPtr5[Ptr[GAsyncInitable], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr5[Ptr[GAsyncInitable], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def init_finish: CFuncPtr3[Ptr[GAsyncInitable], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAsyncInitable], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def init_finish_=(value: CFuncPtr3[Ptr[GAsyncInitable], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAsyncInitable], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
*/
opaque type GAsyncQueue = CStruct0
object GAsyncQueue:
  given _tag: Tag[GAsyncQueue] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GAsyncResult = CStruct0
object GAsyncResult:
  given _tag: Tag[GAsyncResult] = Tag.materializeCStruct0Tag

/**
 * GAsyncResultIface: _iface: The parent interface. _user_data: Gets the user data passed to the callback. _source_object: Gets the source object that issued the asynchronous operation.

 * [bindgen] header: /usr/include/glib-2.0/gio/gasyncresult.h
*/
opaque type GAsyncResultIface = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GAsyncResultIface:
  given _tag: Tag[GAsyncResultIface] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GAsyncResultIface] = scala.scalanative.unsafe.alloc[GAsyncResultIface](1)
  def apply(g_iface : GTypeInterface, get_user_data : CFuncPtr1[Ptr[GAsyncResult], gpointer], get_source_object : CFuncPtr1[Ptr[GAsyncResult], Ptr[GObject]], is_tagged : CFuncPtr2[Ptr[GAsyncResult], gpointer, gboolean])(using Zone): Ptr[GAsyncResultIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).get_user_data = get_user_data
    (!____ptr).get_source_object = get_source_object
    (!____ptr).is_tagged = is_tagged
    ____ptr
  extension (struct: GAsyncResultIface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def get_user_data: CFuncPtr1[Ptr[GAsyncResult], gpointer] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAsyncResult], gpointer]]]
    def get_user_data_=(value: CFuncPtr1[Ptr[GAsyncResult], gpointer]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAsyncResult], gpointer]]] = value
    def get_source_object: CFuncPtr1[Ptr[GAsyncResult], Ptr[GObject]] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAsyncResult], Ptr[GObject]]]]
    def get_source_object_=(value: CFuncPtr1[Ptr[GAsyncResult], Ptr[GObject]]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAsyncResult], Ptr[GObject]]]] = value
    def is_tagged: CFuncPtr2[Ptr[GAsyncResult], gpointer, gboolean] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GAsyncResult], gpointer, gboolean]]]
    def is_tagged_=(value: CFuncPtr2[Ptr[GAsyncResult], gpointer, gboolean]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GAsyncResult], gpointer, gboolean]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gobject/gbinding.h
*/
opaque type GBinding = CStruct0
object GBinding:
  given _tag: Tag[GBinding] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gobject/gbindinggroup.h
*/
opaque type GBindingGroup = CStruct0
object GBindingGroup:
  given _tag: Tag[GBindingGroup] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
*/
opaque type GBookmarkFile = CStruct0
object GBookmarkFile:
  given _tag: Tag[GBookmarkFile] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedinputstream.h
*/
opaque type GBufferedInputStream = CArray[CChar, Nat.Digit2[Nat._4, Nat._8]]
object GBufferedInputStream:
  given _tag: Tag[GBufferedInputStream] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._8]](Tag.Byte, Tag.Digit2[Nat._4, Nat._8](Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GBufferedInputStream] = scala.scalanative.unsafe.alloc[GBufferedInputStream](1)
  def apply(parent_instance : GFilterInputStream, priv : Ptr[GBufferedInputStreamPrivate])(using Zone): Ptr[GBufferedInputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GBufferedInputStream)
    def parent_instance: GFilterInputStream = !struct.at(0).asInstanceOf[Ptr[GFilterInputStream]]
    def parent_instance_=(value: GFilterInputStream): Unit = !struct.at(0).asInstanceOf[Ptr[GFilterInputStream]] = value
    def priv: Ptr[GBufferedInputStreamPrivate] = !struct.at(40).asInstanceOf[Ptr[Ptr[GBufferedInputStreamPrivate]]]
    def priv_=(value: Ptr[GBufferedInputStreamPrivate]): Unit = !struct.at(40).asInstanceOf[Ptr[Ptr[GBufferedInputStreamPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedinputstream.h
*/
opaque type GBufferedInputStreamClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._3, Nat._6]]
object GBufferedInputStreamClass:
  given _tag: Tag[GBufferedInputStreamClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._3, Nat._3, Nat._6](Tag.Nat3, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[GBufferedInputStreamClass] = scala.scalanative.unsafe.alloc[GBufferedInputStreamClass](1)
  def apply(parent_class : GFilterInputStreamClass, fill : CFuncPtr4[Ptr[GBufferedInputStream], gssize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize], fill_async : CFuncPtr6[Ptr[GBufferedInputStream], gssize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], fill_finish : CFuncPtr3[Ptr[GBufferedInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[GBufferedInputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).fill = fill
    (!____ptr).fill_async = fill_async
    (!____ptr).fill_finish = fill_finish
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: GBufferedInputStreamClass)
    def parent_class: GFilterInputStreamClass = !struct.at(0).asInstanceOf[Ptr[GFilterInputStreamClass]]
    def parent_class_=(value: GFilterInputStreamClass): Unit = !struct.at(0).asInstanceOf[Ptr[GFilterInputStreamClass]] = value
    def fill: CFuncPtr4[Ptr[GBufferedInputStream], gssize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize] = !struct.at(272).asInstanceOf[Ptr[CFuncPtr4[Ptr[GBufferedInputStream], gssize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize]]]
    def fill_=(value: CFuncPtr4[Ptr[GBufferedInputStream], gssize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize]): Unit = !struct.at(272).asInstanceOf[Ptr[CFuncPtr4[Ptr[GBufferedInputStream], gssize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize]]] = value
    def fill_async: CFuncPtr6[Ptr[GBufferedInputStream], gssize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(280).asInstanceOf[Ptr[CFuncPtr6[Ptr[GBufferedInputStream], gssize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def fill_async_=(value: CFuncPtr6[Ptr[GBufferedInputStream], gssize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(280).asInstanceOf[Ptr[CFuncPtr6[Ptr[GBufferedInputStream], gssize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def fill_finish: CFuncPtr3[Ptr[GBufferedInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize] = !struct.at(288).asInstanceOf[Ptr[CFuncPtr3[Ptr[GBufferedInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize]]]
    def fill_finish_=(value: CFuncPtr3[Ptr[GBufferedInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize]): Unit = !struct.at(288).asInstanceOf[Ptr[CFuncPtr3[Ptr[GBufferedInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize]]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(296).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(296).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(304).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(304).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(312).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(312).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(320).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(320).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(328).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(328).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedinputstream.h
*/
opaque type GBufferedInputStreamPrivate = CStruct0
object GBufferedInputStreamPrivate:
  given _tag: Tag[GBufferedInputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedoutputstream.h
*/
opaque type GBufferedOutputStream = CArray[CChar, Nat.Digit2[Nat._4, Nat._8]]
object GBufferedOutputStream:
  given _tag: Tag[GBufferedOutputStream] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._8]](Tag.Byte, Tag.Digit2[Nat._4, Nat._8](Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GBufferedOutputStream] = scala.scalanative.unsafe.alloc[GBufferedOutputStream](1)
  def apply(parent_instance : GFilterOutputStream, priv : Ptr[GBufferedOutputStreamPrivate])(using Zone): Ptr[GBufferedOutputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GBufferedOutputStream)
    def parent_instance: GFilterOutputStream = !struct.at(0).asInstanceOf[Ptr[GFilterOutputStream]]
    def parent_instance_=(value: GFilterOutputStream): Unit = !struct.at(0).asInstanceOf[Ptr[GFilterOutputStream]] = value
    def priv: Ptr[GBufferedOutputStreamPrivate] = !struct.at(40).asInstanceOf[Ptr[Ptr[GBufferedOutputStreamPrivate]]]
    def priv_=(value: Ptr[GBufferedOutputStreamPrivate]): Unit = !struct.at(40).asInstanceOf[Ptr[Ptr[GBufferedOutputStreamPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedoutputstream.h
*/
opaque type GBufferedOutputStreamClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._3, Nat._6]]
object GBufferedOutputStreamClass:
  given _tag: Tag[GBufferedOutputStreamClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._3, Nat._3, Nat._6](Tag.Nat3, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[GBufferedOutputStreamClass] = scala.scalanative.unsafe.alloc[GBufferedOutputStreamClass](1)
  def apply(parent_class : GFilterOutputStreamClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit])(using Zone): Ptr[GBufferedOutputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    ____ptr
  extension (struct: GBufferedOutputStreamClass)
    def parent_class: GFilterOutputStreamClass = !struct.at(0).asInstanceOf[Ptr[GFilterOutputStreamClass]]
    def parent_class_=(value: GFilterOutputStreamClass): Unit = !struct.at(0).asInstanceOf[Ptr[GFilterOutputStreamClass]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(320).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(320).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(328).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(328).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedoutputstream.h
*/
opaque type GBufferedOutputStreamPrivate = CStruct0
object GBufferedOutputStreamPrivate:
  given _tag: Tag[GBufferedOutputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
*/
opaque type GByteArray = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GByteArray:
  given _tag: Tag[GByteArray] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GByteArray] = scala.scalanative.unsafe.alloc[GByteArray](1)
  def apply(data : Ptr[guint8], len : guint)(using Zone): Ptr[GByteArray] = 
    val ____ptr = apply()
    (!____ptr).data = data
    (!____ptr).len = len
    ____ptr
  extension (struct: GByteArray)
    def data: Ptr[guint8] = !struct.at(0).asInstanceOf[Ptr[Ptr[guint8]]]
    def data_=(value: Ptr[guint8]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[guint8]]] = value
    def len: guint = !struct.at(8).asInstanceOf[Ptr[guint]]
    def len_=(value: guint): Unit = !struct.at(8).asInstanceOf[Ptr[guint]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
*/
opaque type GBytes = CStruct0
object GBytes:
  given _tag: Tag[GBytes] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GBytesIcon = CStruct0
object GBytesIcon:
  given _tag: Tag[GBytesIcon] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
*/
opaque type GCClosure = CArray[CChar, Nat.Digit2[Nat._7, Nat._2]]
object GCClosure:
  given _tag: Tag[GCClosure] = Tag.CArray[CChar, Nat.Digit2[Nat._7, Nat._2]](Tag.Byte, Tag.Digit2[Nat._7, Nat._2](Tag.Nat7, Tag.Nat2))
  def apply()(using Zone): Ptr[GCClosure] = scala.scalanative.unsafe.alloc[GCClosure](1)
  def apply(closure : GClosure, callback : gpointer)(using Zone): Ptr[GCClosure] = 
    val ____ptr = apply()
    (!____ptr).closure = closure
    (!____ptr).callback = callback
    ____ptr
  extension (struct: GCClosure)
    def closure: GClosure = !struct.at(0).asInstanceOf[Ptr[GClosure]]
    def closure_=(value: GClosure): Unit = !struct.at(0).asInstanceOf[Ptr[GClosure]] = value
    def callback: gpointer = !struct.at(64).asInstanceOf[Ptr[gpointer]]
    def callback_=(value: gpointer): Unit = !struct.at(64).asInstanceOf[Ptr[gpointer]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gcache.h
*/
opaque type GCache = CStruct0
object GCache:
  given _tag: Tag[GCache] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
*/
opaque type GCancellable = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GCancellable:
  given _tag: Tag[GCancellable] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GCancellable] = scala.scalanative.unsafe.alloc[GCancellable](1)
  def apply(parent_instance : GObject, priv : Ptr[GCancellablePrivate])(using Zone): Ptr[GCancellable] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GCancellable)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GCancellablePrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GCancellablePrivate]]]
    def priv_=(value: Ptr[GCancellablePrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GCancellablePrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
*/
opaque type GCancellableClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._8, Nat._4]]
object GCancellableClass:
  given _tag: Tag[GCancellableClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._8, Nat._4]](Tag.Byte, Tag.Digit3[Nat._1, Nat._8, Nat._4](Tag.Nat1, Tag.Nat8, Tag.Nat4))
  def apply()(using Zone): Ptr[GCancellableClass] = scala.scalanative.unsafe.alloc[GCancellableClass](1)
  def apply(parent_class : GObjectClass, cancelled : CFuncPtr1[Ptr[GCancellable], Unit], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[GCancellableClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).cancelled = cancelled
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: GCancellableClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def cancelled: CFuncPtr1[Ptr[GCancellable], Unit] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GCancellable], Unit]]]
    def cancelled_=(value: CFuncPtr1[Ptr[GCancellable], Unit]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GCancellable], Unit]]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
*/
opaque type GCancellablePrivate = CStruct0
object GCancellablePrivate:
  given _tag: Tag[GCancellablePrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GCharsetConverter = CStruct0
object GCharsetConverter:
  given _tag: Tag[GCharsetConverter] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gcharsetconverter.h
*/
opaque type GCharsetConverterClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object GCharsetConverterClass:
  given _tag: Tag[GCharsetConverterClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[GCharsetConverterClass] = scala.scalanative.unsafe.alloc[GCharsetConverterClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[GCharsetConverterClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: GCharsetConverterClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gchecksum.h
*/
opaque type GChecksum = CStruct0
object GChecksum:
  given _tag: Tag[GChecksum] = Tag.materializeCStruct0Tag

/**
 * GClosure: _marshal: Indicates whether the closure is currently being invoked with g_closure_invoke() g_closure_invalidate()

 * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
*/
opaque type GClosure = CArray[CChar, Nat.Digit2[Nat._6, Nat._4]]
object GClosure:
  given _tag: Tag[GClosure] = Tag.CArray[CChar, Nat.Digit2[Nat._6, Nat._4]](Tag.Byte, Tag.Digit2[Nat._6, Nat._4](Tag.Nat6, Tag.Nat4))
  def apply()(using Zone): Ptr[GClosure] = scala.scalanative.unsafe.alloc[GClosure](1)
  def apply(ref_count : guint, meta_marshal_nouse : guint, n_guards : guint, n_fnotifiers : guint, n_inotifiers : guint, in_inotify : guint, floating : guint, derivative_flag : guint, in_marshal : guint, is_invalid : guint, marshal : CFuncPtr6[Ptr[GClosure], Ptr[GValue], guint, Ptr[GValue], gpointer, gpointer, Unit], data : gpointer, notifiers : Ptr[GClosureNotifyData])(using Zone): Ptr[GClosure] = 
    val ____ptr = apply()
    (!____ptr).ref_count = ref_count
    (!____ptr).meta_marshal_nouse = meta_marshal_nouse
    (!____ptr).n_guards = n_guards
    (!____ptr).n_fnotifiers = n_fnotifiers
    (!____ptr).n_inotifiers = n_inotifiers
    (!____ptr).in_inotify = in_inotify
    (!____ptr).floating = floating
    (!____ptr).derivative_flag = derivative_flag
    (!____ptr).in_marshal = in_marshal
    (!____ptr).is_invalid = is_invalid
    (!____ptr).marshal = marshal
    (!____ptr).data = data
    (!____ptr).notifiers = notifiers
    ____ptr
  extension (struct: GClosure)
    def ref_count: guint = !struct.at(0).asInstanceOf[Ptr[guint]]
    def ref_count_=(value: guint): Unit = !struct.at(0).asInstanceOf[Ptr[guint]] = value
    def meta_marshal_nouse: guint = !struct.at(4).asInstanceOf[Ptr[guint]]
    def meta_marshal_nouse_=(value: guint): Unit = !struct.at(4).asInstanceOf[Ptr[guint]] = value
    def n_guards: guint = !struct.at(8).asInstanceOf[Ptr[guint]]
    def n_guards_=(value: guint): Unit = !struct.at(8).asInstanceOf[Ptr[guint]] = value
    def n_fnotifiers: guint = !struct.at(12).asInstanceOf[Ptr[guint]]
    def n_fnotifiers_=(value: guint): Unit = !struct.at(12).asInstanceOf[Ptr[guint]] = value
    def n_inotifiers: guint = !struct.at(16).asInstanceOf[Ptr[guint]]
    def n_inotifiers_=(value: guint): Unit = !struct.at(16).asInstanceOf[Ptr[guint]] = value
    def in_inotify: guint = !struct.at(20).asInstanceOf[Ptr[guint]]
    def in_inotify_=(value: guint): Unit = !struct.at(20).asInstanceOf[Ptr[guint]] = value
    def floating: guint = !struct.at(24).asInstanceOf[Ptr[guint]]
    def floating_=(value: guint): Unit = !struct.at(24).asInstanceOf[Ptr[guint]] = value
    def derivative_flag: guint = !struct.at(28).asInstanceOf[Ptr[guint]]
    def derivative_flag_=(value: guint): Unit = !struct.at(28).asInstanceOf[Ptr[guint]] = value
    def in_marshal: guint = !struct.at(32).asInstanceOf[Ptr[guint]]
    def in_marshal_=(value: guint): Unit = !struct.at(32).asInstanceOf[Ptr[guint]] = value
    def is_invalid: guint = !struct.at(36).asInstanceOf[Ptr[guint]]
    def is_invalid_=(value: guint): Unit = !struct.at(36).asInstanceOf[Ptr[guint]] = value
    def marshal: CFuncPtr6[Ptr[GClosure], Ptr[GValue], guint, Ptr[GValue], gpointer, gpointer, Unit] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr6[Ptr[GClosure], Ptr[GValue], guint, Ptr[GValue], gpointer, gpointer, Unit]]]
    def marshal_=(value: CFuncPtr6[Ptr[GClosure], Ptr[GValue], guint, Ptr[GValue], gpointer, gpointer, Unit]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr6[Ptr[GClosure], Ptr[GValue], guint, Ptr[GValue], gpointer, gpointer, Unit]]] = value
    def data: gpointer = !struct.at(48).asInstanceOf[Ptr[gpointer]]
    def data_=(value: gpointer): Unit = !struct.at(48).asInstanceOf[Ptr[gpointer]] = value
    def notifiers: Ptr[GClosureNotifyData] = !struct.at(56).asInstanceOf[Ptr[Ptr[GClosureNotifyData]]]
    def notifiers_=(value: Ptr[GClosureNotifyData]): Unit = !struct.at(56).asInstanceOf[Ptr[Ptr[GClosureNotifyData]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
*/
opaque type GClosureNotifyData = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GClosureNotifyData:
  given _tag: Tag[GClosureNotifyData] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GClosureNotifyData] = scala.scalanative.unsafe.alloc[GClosureNotifyData](1)
  def apply(data : gpointer, _notify : GClosureNotify)(using Zone): Ptr[GClosureNotifyData] = 
    val ____ptr = apply()
    (!____ptr).data = data
    (!____ptr)._notify = _notify
    ____ptr
  extension (struct: GClosureNotifyData)
    def data: gpointer = !struct.at(0).asInstanceOf[Ptr[gpointer]]
    def data_=(value: gpointer): Unit = !struct.at(0).asInstanceOf[Ptr[gpointer]] = value
    def _notify: GClosureNotify = !struct.at(8).asInstanceOf[Ptr[GClosureNotify]]
    def _notify_=(value: GClosureNotify): Unit = !struct.at(8).asInstanceOf[Ptr[GClosureNotify]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gcompletion.h
*/
opaque type GCompletion = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GCompletion:
  given _tag: Tag[GCompletion] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GCompletion] = scala.scalanative.unsafe.alloc[GCompletion](1)
  def apply(items : Ptr[GList], func : GCompletionFunc, prefix : Ptr[gchar], cache : Ptr[GList], strncmp_func : GCompletionStrncmpFunc)(using Zone): Ptr[GCompletion] = 
    val ____ptr = apply()
    (!____ptr).items = items
    (!____ptr).func = func
    (!____ptr).prefix = prefix
    (!____ptr).cache = cache
    (!____ptr).strncmp_func = strncmp_func
    ____ptr
  extension (struct: GCompletion)
    def items: Ptr[GList] = !struct.at(0).asInstanceOf[Ptr[Ptr[GList]]]
    def items_=(value: Ptr[GList]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[GList]]] = value
    def func: GCompletionFunc = !struct.at(8).asInstanceOf[Ptr[GCompletionFunc]]
    def func_=(value: GCompletionFunc): Unit = !struct.at(8).asInstanceOf[Ptr[GCompletionFunc]] = value
    def prefix: Ptr[gchar] = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]]
    def prefix_=(value: Ptr[gchar]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def cache: Ptr[GList] = !struct.at(24).asInstanceOf[Ptr[Ptr[GList]]]
    def cache_=(value: Ptr[GList]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GList]]] = value
    def strncmp_func: GCompletionStrncmpFunc = !struct.at(32).asInstanceOf[Ptr[GCompletionStrncmpFunc]]
    def strncmp_func_=(value: GCompletionStrncmpFunc): Unit = !struct.at(32).asInstanceOf[Ptr[GCompletionStrncmpFunc]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
*/
opaque type GCond = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GCond:
  given _tag: Tag[GCond] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GCond] = scala.scalanative.unsafe.alloc[GCond](1)
  def apply(p : gpointer, i : CArray[guint, Nat._2])(using Zone): Ptr[GCond] = 
    val ____ptr = apply()
    (!____ptr).p = p
    (!____ptr).i = i
    ____ptr
  extension (struct: GCond)
    def p: gpointer = !struct.at(0).asInstanceOf[Ptr[gpointer]]
    def p_=(value: gpointer): Unit = !struct.at(0).asInstanceOf[Ptr[gpointer]] = value
    def i: CArray[guint, Nat._2] = !struct.at(8).asInstanceOf[Ptr[CArray[guint, Nat._2]]]
    def i_=(value: CArray[guint, Nat._2]): Unit = !struct.at(8).asInstanceOf[Ptr[CArray[guint, Nat._2]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GConverter = CStruct0
object GConverter:
  given _tag: Tag[GConverter] = Tag.materializeCStruct0Tag

/**
 * GConverterIface: _iface: The parent interface. : Converts data. : Reverts the internal state of the converter to its initial state.

 * [bindgen] header: /usr/include/glib-2.0/gio/gconverter.h
*/
opaque type GConverterIface = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GConverterIface:
  given _tag: Tag[GConverterIface] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GConverterIface] = scala.scalanative.unsafe.alloc[GConverterIface](1)
  def apply(g_iface : GTypeInterface, convert : CFuncPtr9[Ptr[GConverter], Ptr[Byte], gsize, Ptr[Byte], gsize, GConverterFlags, Ptr[gsize], Ptr[gsize], Ptr[Ptr[GError]], GConverterResult], reset : CFuncPtr1[Ptr[GConverter], Unit])(using Zone): Ptr[GConverterIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).convert = convert
    (!____ptr).reset = reset
    ____ptr
  extension (struct: GConverterIface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def convert: CFuncPtr9[Ptr[GConverter], Ptr[Byte], gsize, Ptr[Byte], gsize, GConverterFlags, Ptr[gsize], Ptr[gsize], Ptr[Ptr[GError]], GConverterResult] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr9[Ptr[GConverter], Ptr[Byte], gsize, Ptr[Byte], gsize, GConverterFlags, Ptr[gsize], Ptr[gsize], Ptr[Ptr[GError]], GConverterResult]]]
    def convert_=(value: CFuncPtr9[Ptr[GConverter], Ptr[Byte], gsize, Ptr[Byte], gsize, GConverterFlags, Ptr[gsize], Ptr[gsize], Ptr[Ptr[GError]], GConverterResult]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr9[Ptr[GConverter], Ptr[Byte], gsize, Ptr[Byte], gsize, GConverterFlags, Ptr[gsize], Ptr[gsize], Ptr[Ptr[GError]], GConverterResult]]] = value
    def reset: CFuncPtr1[Ptr[GConverter], Unit] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GConverter], Unit]]]
    def reset_=(value: CFuncPtr1[Ptr[GConverter], Unit]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GConverter], Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gconverterinputstream.h
*/
opaque type GConverterInputStream = CArray[CChar, Nat.Digit2[Nat._4, Nat._8]]
object GConverterInputStream:
  given _tag: Tag[GConverterInputStream] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._8]](Tag.Byte, Tag.Digit2[Nat._4, Nat._8](Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GConverterInputStream] = scala.scalanative.unsafe.alloc[GConverterInputStream](1)
  def apply(parent_instance : GFilterInputStream, priv : Ptr[GConverterInputStreamPrivate])(using Zone): Ptr[GConverterInputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GConverterInputStream)
    def parent_instance: GFilterInputStream = !struct.at(0).asInstanceOf[Ptr[GFilterInputStream]]
    def parent_instance_=(value: GFilterInputStream): Unit = !struct.at(0).asInstanceOf[Ptr[GFilterInputStream]] = value
    def priv: Ptr[GConverterInputStreamPrivate] = !struct.at(40).asInstanceOf[Ptr[Ptr[GConverterInputStreamPrivate]]]
    def priv_=(value: Ptr[GConverterInputStreamPrivate]): Unit = !struct.at(40).asInstanceOf[Ptr[Ptr[GConverterInputStreamPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gconverterinputstream.h
*/
opaque type GConverterInputStreamClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._1, Nat._2]]
object GConverterInputStreamClass:
  given _tag: Tag[GConverterInputStreamClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._1, Nat._2]](Tag.Byte, Tag.Digit3[Nat._3, Nat._1, Nat._2](Tag.Nat3, Tag.Nat1, Tag.Nat2))
  def apply()(using Zone): Ptr[GConverterInputStreamClass] = scala.scalanative.unsafe.alloc[GConverterInputStreamClass](1)
  def apply(parent_class : GFilterInputStreamClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[GConverterInputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: GConverterInputStreamClass)
    def parent_class: GFilterInputStreamClass = !struct.at(0).asInstanceOf[Ptr[GFilterInputStreamClass]]
    def parent_class_=(value: GFilterInputStreamClass): Unit = !struct.at(0).asInstanceOf[Ptr[GFilterInputStreamClass]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(272).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(272).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(280).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(280).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(288).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(288).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(296).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(296).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(304).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(304).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gconverterinputstream.h
*/
opaque type GConverterInputStreamPrivate = CStruct0
object GConverterInputStreamPrivate:
  given _tag: Tag[GConverterInputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gconverteroutputstream.h
*/
opaque type GConverterOutputStream = CArray[CChar, Nat.Digit2[Nat._4, Nat._8]]
object GConverterOutputStream:
  given _tag: Tag[GConverterOutputStream] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._8]](Tag.Byte, Tag.Digit2[Nat._4, Nat._8](Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GConverterOutputStream] = scala.scalanative.unsafe.alloc[GConverterOutputStream](1)
  def apply(parent_instance : GFilterOutputStream, priv : Ptr[GConverterOutputStreamPrivate])(using Zone): Ptr[GConverterOutputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GConverterOutputStream)
    def parent_instance: GFilterOutputStream = !struct.at(0).asInstanceOf[Ptr[GFilterOutputStream]]
    def parent_instance_=(value: GFilterOutputStream): Unit = !struct.at(0).asInstanceOf[Ptr[GFilterOutputStream]] = value
    def priv: Ptr[GConverterOutputStreamPrivate] = !struct.at(40).asInstanceOf[Ptr[Ptr[GConverterOutputStreamPrivate]]]
    def priv_=(value: Ptr[GConverterOutputStreamPrivate]): Unit = !struct.at(40).asInstanceOf[Ptr[Ptr[GConverterOutputStreamPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gconverteroutputstream.h
*/
opaque type GConverterOutputStreamClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._6, Nat._0]]
object GConverterOutputStreamClass:
  given _tag: Tag[GConverterOutputStreamClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._6, Nat._0]](Tag.Byte, Tag.Digit3[Nat._3, Nat._6, Nat._0](Tag.Nat3, Tag.Nat6, Tag.Nat0))
  def apply()(using Zone): Ptr[GConverterOutputStreamClass] = scala.scalanative.unsafe.alloc[GConverterOutputStreamClass](1)
  def apply(parent_class : GFilterOutputStreamClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[GConverterOutputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: GConverterOutputStreamClass)
    def parent_class: GFilterOutputStreamClass = !struct.at(0).asInstanceOf[Ptr[GFilterOutputStreamClass]]
    def parent_class_=(value: GFilterOutputStreamClass): Unit = !struct.at(0).asInstanceOf[Ptr[GFilterOutputStreamClass]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(320).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(320).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(328).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(328).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(336).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(336).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(344).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(344).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(352).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(352).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gconverteroutputstream.h
*/
opaque type GConverterOutputStreamPrivate = CStruct0
object GConverterOutputStreamPrivate:
  given _tag: Tag[GConverterOutputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GCredentials = CStruct0
object GCredentials:
  given _tag: Tag[GCredentials] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gcredentials.h
*/
opaque type GCredentialsClass = CStruct0
object GCredentialsClass:
  given _tag: Tag[GCredentialsClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GDBusActionGroup = CStruct0
object GDBusActionGroup:
  given _tag: Tag[GDBusActionGroup] = Tag.materializeCStruct0Tag

/**
 * GDBusAnnotationInfo: _count: The reference count or -1 if statically allocated. : The name of the annotation, e.g. "org.freedesktop.DBus.Deprecated". : The value of the annotation. : (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
*/
opaque type GDBusAnnotationInfo = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GDBusAnnotationInfo:
  given _tag: Tag[GDBusAnnotationInfo] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GDBusAnnotationInfo] = scala.scalanative.unsafe.alloc[GDBusAnnotationInfo](1)
  def apply(ref_count : gint, key : Ptr[gchar], value : Ptr[gchar], annotations : Ptr[Ptr[GDBusAnnotationInfo]])(using Zone): Ptr[GDBusAnnotationInfo] = 
    val ____ptr = apply()
    (!____ptr).ref_count = ref_count
    (!____ptr).key = key
    (!____ptr).value = value
    (!____ptr).annotations = annotations
    ____ptr
  extension (struct: GDBusAnnotationInfo)
    def ref_count: gint = !struct.at(0).asInstanceOf[Ptr[gint]]
    def ref_count_=(value: gint): Unit = !struct.at(0).asInstanceOf[Ptr[gint]] = value
    def key: Ptr[gchar] = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]]
    def key_=(value: Ptr[gchar]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def value: Ptr[gchar] = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]]
    def value_=(value: Ptr[gchar]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def annotations: Ptr[Ptr[GDBusAnnotationInfo]] = !struct.at(24).asInstanceOf[Ptr[Ptr[Ptr[GDBusAnnotationInfo]]]]
    def annotations_=(value: Ptr[Ptr[GDBusAnnotationInfo]]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[Ptr[GDBusAnnotationInfo]]]] = value

/**
 * GDBusArgInfo: _count: The reference count or -1 if statically allocated. : D-Bus signature of the argument (a single complete type). : (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
*/
opaque type GDBusArgInfo = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GDBusArgInfo:
  given _tag: Tag[GDBusArgInfo] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GDBusArgInfo] = scala.scalanative.unsafe.alloc[GDBusArgInfo](1)
  def apply(ref_count : gint, name : Ptr[gchar], signature : Ptr[gchar], annotations : Ptr[Ptr[GDBusAnnotationInfo]])(using Zone): Ptr[GDBusArgInfo] = 
    val ____ptr = apply()
    (!____ptr).ref_count = ref_count
    (!____ptr).name = name
    (!____ptr).signature = signature
    (!____ptr).annotations = annotations
    ____ptr
  extension (struct: GDBusArgInfo)
    def ref_count: gint = !struct.at(0).asInstanceOf[Ptr[gint]]
    def ref_count_=(value: gint): Unit = !struct.at(0).asInstanceOf[Ptr[gint]] = value
    def name: Ptr[gchar] = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]]
    def name_=(value: Ptr[gchar]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def signature: Ptr[gchar] = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]]
    def signature_=(value: Ptr[gchar]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def annotations: Ptr[Ptr[GDBusAnnotationInfo]] = !struct.at(24).asInstanceOf[Ptr[Ptr[Ptr[GDBusAnnotationInfo]]]]
    def annotations_=(value: Ptr[Ptr[GDBusAnnotationInfo]]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[Ptr[GDBusAnnotationInfo]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GDBusAuthObserver = CStruct0
object GDBusAuthObserver:
  given _tag: Tag[GDBusAuthObserver] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GDBusConnection = CStruct0
object GDBusConnection:
  given _tag: Tag[GDBusConnection] = Tag.materializeCStruct0Tag

/**
 * GDBusErrorEntry: _code: An error code. _error_name: The D-Bus error name to associate with _code.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbuserror.h
*/
opaque type GDBusErrorEntry = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GDBusErrorEntry:
  given _tag: Tag[GDBusErrorEntry] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GDBusErrorEntry] = scala.scalanative.unsafe.alloc[GDBusErrorEntry](1)
  def apply(error_code : gint, dbus_error_name : Ptr[gchar])(using Zone): Ptr[GDBusErrorEntry] = 
    val ____ptr = apply()
    (!____ptr).error_code = error_code
    (!____ptr).dbus_error_name = dbus_error_name
    ____ptr
  extension (struct: GDBusErrorEntry)
    def error_code: gint = !struct.at(0).asInstanceOf[Ptr[gint]]
    def error_code_=(value: gint): Unit = !struct.at(0).asInstanceOf[Ptr[gint]] = value
    def dbus_error_name: Ptr[gchar] = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]]
    def dbus_error_name_=(value: Ptr[gchar]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GDBusInterface = CStruct0
object GDBusInterface:
  given _tag: Tag[GDBusInterface] = Tag.materializeCStruct0Tag

/**
 * GDBusInterfaceIface: _iface: The parent interface. _info: Returns a #GDBusInterfaceInfo. See g_dbus_interface_get_info(). _object: Gets the enclosing #GDBusObject. See g_dbus_interface_get_object().

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterface.h
*/
opaque type GDBusInterfaceIface = CArray[CChar, Nat.Digit2[Nat._4, Nat._8]]
object GDBusInterfaceIface:
  given _tag: Tag[GDBusInterfaceIface] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._8]](Tag.Byte, Tag.Digit2[Nat._4, Nat._8](Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GDBusInterfaceIface] = scala.scalanative.unsafe.alloc[GDBusInterfaceIface](1)
  def apply(parent_iface : GTypeInterface, get_info : CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusInterfaceInfo]], get_object : CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusObject]], set_object : CFuncPtr2[Ptr[GDBusInterface], Ptr[GDBusObject], Unit], dup_object : CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusObject]])(using Zone): Ptr[GDBusInterfaceIface] = 
    val ____ptr = apply()
    (!____ptr).parent_iface = parent_iface
    (!____ptr).get_info = get_info
    (!____ptr).get_object = get_object
    (!____ptr).set_object = set_object
    (!____ptr).dup_object = dup_object
    ____ptr
  extension (struct: GDBusInterfaceIface)
    def parent_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def parent_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def get_info: CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusInterfaceInfo]] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusInterfaceInfo]]]]
    def get_info_=(value: CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusInterfaceInfo]]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusInterfaceInfo]]]] = value
    def get_object: CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusObject]] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusObject]]]]
    def get_object_=(value: CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusObject]]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusObject]]]] = value
    def set_object: CFuncPtr2[Ptr[GDBusInterface], Ptr[GDBusObject], Unit] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDBusInterface], Ptr[GDBusObject], Unit]]]
    def set_object_=(value: CFuncPtr2[Ptr[GDBusInterface], Ptr[GDBusObject], Unit]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDBusInterface], Ptr[GDBusObject], Unit]]] = value
    def dup_object: CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusObject]] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusObject]]]]
    def dup_object_=(value: CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusObject]]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusObject]]]] = value

/**
 * GDBusInterfaceInfo: _count: The reference count or -1 if statically allocated. : (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusSignalInfo structures or %NULL if there are no signals. : (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusPropertyInfo structures or %NULL if there are no properties. : (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
*/
opaque type GDBusInterfaceInfo = CArray[CChar, Nat.Digit2[Nat._4, Nat._8]]
object GDBusInterfaceInfo:
  given _tag: Tag[GDBusInterfaceInfo] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._8]](Tag.Byte, Tag.Digit2[Nat._4, Nat._8](Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GDBusInterfaceInfo] = scala.scalanative.unsafe.alloc[GDBusInterfaceInfo](1)
  def apply(ref_count : gint, name : Ptr[gchar], methods : Ptr[Ptr[GDBusMethodInfo]], signals : Ptr[Ptr[GDBusSignalInfo]], properties : Ptr[Ptr[GDBusPropertyInfo]], annotations : Ptr[Ptr[GDBusAnnotationInfo]])(using Zone): Ptr[GDBusInterfaceInfo] = 
    val ____ptr = apply()
    (!____ptr).ref_count = ref_count
    (!____ptr).name = name
    (!____ptr).methods = methods
    (!____ptr).signals = signals
    (!____ptr).properties = properties
    (!____ptr).annotations = annotations
    ____ptr
  extension (struct: GDBusInterfaceInfo)
    def ref_count: gint = !struct.at(0).asInstanceOf[Ptr[gint]]
    def ref_count_=(value: gint): Unit = !struct.at(0).asInstanceOf[Ptr[gint]] = value
    def name: Ptr[gchar] = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]]
    def name_=(value: Ptr[gchar]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def methods: Ptr[Ptr[GDBusMethodInfo]] = !struct.at(16).asInstanceOf[Ptr[Ptr[Ptr[GDBusMethodInfo]]]]
    def methods_=(value: Ptr[Ptr[GDBusMethodInfo]]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[Ptr[GDBusMethodInfo]]]] = value
    def signals: Ptr[Ptr[GDBusSignalInfo]] = !struct.at(24).asInstanceOf[Ptr[Ptr[Ptr[GDBusSignalInfo]]]]
    def signals_=(value: Ptr[Ptr[GDBusSignalInfo]]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[Ptr[GDBusSignalInfo]]]] = value
    def properties: Ptr[Ptr[GDBusPropertyInfo]] = !struct.at(32).asInstanceOf[Ptr[Ptr[Ptr[GDBusPropertyInfo]]]]
    def properties_=(value: Ptr[Ptr[GDBusPropertyInfo]]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[Ptr[GDBusPropertyInfo]]]] = value
    def annotations: Ptr[Ptr[GDBusAnnotationInfo]] = !struct.at(40).asInstanceOf[Ptr[Ptr[Ptr[GDBusAnnotationInfo]]]]
    def annotations_=(value: Ptr[Ptr[GDBusAnnotationInfo]]): Unit = !struct.at(40).asInstanceOf[Ptr[Ptr[Ptr[GDBusAnnotationInfo]]]] = value

/**
 * GDBusInterfaceSkeleton:

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
*/
opaque type GDBusInterfaceSkeleton = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GDBusInterfaceSkeleton:
  given _tag: Tag[GDBusInterfaceSkeleton] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GDBusInterfaceSkeleton] = scala.scalanative.unsafe.alloc[GDBusInterfaceSkeleton](1)
  def apply(parent_instance : GObject, priv : Ptr[GDBusInterfaceSkeletonPrivate])(using Zone): Ptr[GDBusInterfaceSkeleton] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GDBusInterfaceSkeleton)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GDBusInterfaceSkeletonPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GDBusInterfaceSkeletonPrivate]]]
    def priv_=(value: Ptr[GDBusInterfaceSkeletonPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GDBusInterfaceSkeletonPrivate]]] = value

/**
 * GDBusInterfaceSkeletonClass: _class: The parent class. _info: Returns a #GDBusInterfaceInfo. See g_dbus_interface_skeleton_get_info() for details. _vtable: Returns a #GDBusInterfaceVTable. See g_dbus_interface_skeleton_get_vtable() for details. _properties: Returns a #GVariant with all properties. See g_dbus_interface_skeleton_get_properties(). : Emits outstanding changes, if any. See g_dbus_interface_skeleton_flush(). _authorize_method: Signal class handler for the #GDBusInterfaceSkeleton::g-authorize-method signal.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
*/
opaque type GDBusInterfaceSkeletonClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._0, Nat._4]]
object GDBusInterfaceSkeletonClass:
  given _tag: Tag[GDBusInterfaceSkeletonClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._0, Nat._4]](Tag.Byte, Tag.Digit3[Nat._3, Nat._0, Nat._4](Tag.Nat3, Tag.Nat0, Tag.Nat4))
  def apply()(using Zone): Ptr[GDBusInterfaceSkeletonClass] = scala.scalanative.unsafe.alloc[GDBusInterfaceSkeletonClass](1)
  def apply(parent_class : GObjectClass, get_info : CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusInterfaceInfo]], get_vtable : CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusInterfaceVTable]], get_properties : CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GVariant]], flush : CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Unit], vfunc_padding : CArray[gpointer, Nat._8], g_authorize_method : CFuncPtr2[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusMethodInvocation], gboolean], signal_padding : CArray[gpointer, Nat._8])(using Zone): Ptr[GDBusInterfaceSkeletonClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_info = get_info
    (!____ptr).get_vtable = get_vtable
    (!____ptr).get_properties = get_properties
    (!____ptr).flush = flush
    (!____ptr).vfunc_padding = vfunc_padding
    (!____ptr).g_authorize_method = g_authorize_method
    (!____ptr).signal_padding = signal_padding
    ____ptr
  extension (struct: GDBusInterfaceSkeletonClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def get_info: CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusInterfaceInfo]] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusInterfaceInfo]]]]
    def get_info_=(value: CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusInterfaceInfo]]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusInterfaceInfo]]]] = value
    def get_vtable: CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusInterfaceVTable]] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusInterfaceVTable]]]]
    def get_vtable_=(value: CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusInterfaceVTable]]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusInterfaceVTable]]]] = value
    def get_properties: CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GVariant]] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GVariant]]]]
    def get_properties_=(value: CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GVariant]]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GVariant]]]] = value
    def flush: CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Unit] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Unit]]]
    def flush_=(value: CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Unit]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Unit]]] = value
    def vfunc_padding: CArray[gpointer, Nat._8] = !struct.at(168).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]]
    def vfunc_padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at(168).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]] = value
    def g_authorize_method: CFuncPtr2[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusMethodInvocation], gboolean] = !struct.at(232).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusMethodInvocation], gboolean]]]
    def g_authorize_method_=(value: CFuncPtr2[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusMethodInvocation], gboolean]): Unit = !struct.at(232).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusMethodInvocation], gboolean]]] = value
    def signal_padding: CArray[gpointer, Nat._8] = !struct.at(240).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]]
    def signal_padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at(240).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
*/
opaque type GDBusInterfaceSkeletonPrivate = CStruct0
object GDBusInterfaceSkeletonPrivate:
  given _tag: Tag[GDBusInterfaceSkeletonPrivate] = Tag.materializeCStruct0Tag

/**
 * GDBusInterfaceVTable: _property: Function for getting a property.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
*/
opaque type GDBusInterfaceVTable = CArray[CChar, Nat.Digit2[Nat._8, Nat._8]]
object GDBusInterfaceVTable:
  given _tag: Tag[GDBusInterfaceVTable] = Tag.CArray[CChar, Nat.Digit2[Nat._8, Nat._8]](Tag.Byte, Tag.Digit2[Nat._8, Nat._8](Tag.Nat8, Tag.Nat8))
  def apply()(using Zone): Ptr[GDBusInterfaceVTable] = scala.scalanative.unsafe.alloc[GDBusInterfaceVTable](1)
  def apply(method_call : GDBusInterfaceMethodCallFunc, get_property : GDBusInterfaceGetPropertyFunc, set_property : GDBusInterfaceSetPropertyFunc, padding : CArray[gpointer, Nat._8])(using Zone): Ptr[GDBusInterfaceVTable] = 
    val ____ptr = apply()
    (!____ptr).method_call = method_call
    (!____ptr).get_property = get_property
    (!____ptr).set_property = set_property
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GDBusInterfaceVTable)
    def method_call: GDBusInterfaceMethodCallFunc = !struct.at(0).asInstanceOf[Ptr[GDBusInterfaceMethodCallFunc]]
    def method_call_=(value: GDBusInterfaceMethodCallFunc): Unit = !struct.at(0).asInstanceOf[Ptr[GDBusInterfaceMethodCallFunc]] = value
    def get_property: GDBusInterfaceGetPropertyFunc = !struct.at(8).asInstanceOf[Ptr[GDBusInterfaceGetPropertyFunc]]
    def get_property_=(value: GDBusInterfaceGetPropertyFunc): Unit = !struct.at(8).asInstanceOf[Ptr[GDBusInterfaceGetPropertyFunc]] = value
    def set_property: GDBusInterfaceSetPropertyFunc = !struct.at(16).asInstanceOf[Ptr[GDBusInterfaceSetPropertyFunc]]
    def set_property_=(value: GDBusInterfaceSetPropertyFunc): Unit = !struct.at(16).asInstanceOf[Ptr[GDBusInterfaceSetPropertyFunc]] = value
    def padding: CArray[gpointer, Nat._8] = !struct.at(24).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]]
    def padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at(24).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmenumodel.h
*/
opaque type GDBusMenuModel = CStruct0
object GDBusMenuModel:
  given _tag: Tag[GDBusMenuModel] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GDBusMessage = CStruct0
object GDBusMessage:
  given _tag: Tag[GDBusMessage] = Tag.materializeCStruct0Tag

/**
 * GDBusMethodInfo: _count: The reference count or -1 if statically allocated. _args: (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusArgInfo structures or %NULL if there are no in arguments. _args: (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusArgInfo structures or %NULL if there are no out arguments. : (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
*/
opaque type GDBusMethodInfo = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GDBusMethodInfo:
  given _tag: Tag[GDBusMethodInfo] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GDBusMethodInfo] = scala.scalanative.unsafe.alloc[GDBusMethodInfo](1)
  def apply(ref_count : gint, name : Ptr[gchar], in_args : Ptr[Ptr[GDBusArgInfo]], out_args : Ptr[Ptr[GDBusArgInfo]], annotations : Ptr[Ptr[GDBusAnnotationInfo]])(using Zone): Ptr[GDBusMethodInfo] = 
    val ____ptr = apply()
    (!____ptr).ref_count = ref_count
    (!____ptr).name = name
    (!____ptr).in_args = in_args
    (!____ptr).out_args = out_args
    (!____ptr).annotations = annotations
    ____ptr
  extension (struct: GDBusMethodInfo)
    def ref_count: gint = !struct.at(0).asInstanceOf[Ptr[gint]]
    def ref_count_=(value: gint): Unit = !struct.at(0).asInstanceOf[Ptr[gint]] = value
    def name: Ptr[gchar] = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]]
    def name_=(value: Ptr[gchar]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def in_args: Ptr[Ptr[GDBusArgInfo]] = !struct.at(16).asInstanceOf[Ptr[Ptr[Ptr[GDBusArgInfo]]]]
    def in_args_=(value: Ptr[Ptr[GDBusArgInfo]]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[Ptr[GDBusArgInfo]]]] = value
    def out_args: Ptr[Ptr[GDBusArgInfo]] = !struct.at(24).asInstanceOf[Ptr[Ptr[Ptr[GDBusArgInfo]]]]
    def out_args_=(value: Ptr[Ptr[GDBusArgInfo]]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[Ptr[GDBusArgInfo]]]] = value
    def annotations: Ptr[Ptr[GDBusAnnotationInfo]] = !struct.at(32).asInstanceOf[Ptr[Ptr[Ptr[GDBusAnnotationInfo]]]]
    def annotations_=(value: Ptr[Ptr[GDBusAnnotationInfo]]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[Ptr[GDBusAnnotationInfo]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GDBusMethodInvocation = CStruct0
object GDBusMethodInvocation:
  given _tag: Tag[GDBusMethodInvocation] = Tag.materializeCStruct0Tag

/**
 * GDBusNodeInfo: _count: The reference count or -1 if statically allocated. : The path of the node or %NULL if omitted. Note that this may be a relative path. See the D-Bus specification for more details. : (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusNodeInfo structures or %NULL if there are no nodes. : (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
*/
opaque type GDBusNodeInfo = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GDBusNodeInfo:
  given _tag: Tag[GDBusNodeInfo] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GDBusNodeInfo] = scala.scalanative.unsafe.alloc[GDBusNodeInfo](1)
  def apply(ref_count : gint, path : Ptr[gchar], interfaces : Ptr[Ptr[GDBusInterfaceInfo]], nodes : Ptr[Ptr[GDBusNodeInfo]], annotations : Ptr[Ptr[GDBusAnnotationInfo]])(using Zone): Ptr[GDBusNodeInfo] = 
    val ____ptr = apply()
    (!____ptr).ref_count = ref_count
    (!____ptr).path = path
    (!____ptr).interfaces = interfaces
    (!____ptr).nodes = nodes
    (!____ptr).annotations = annotations
    ____ptr
  extension (struct: GDBusNodeInfo)
    def ref_count: gint = !struct.at(0).asInstanceOf[Ptr[gint]]
    def ref_count_=(value: gint): Unit = !struct.at(0).asInstanceOf[Ptr[gint]] = value
    def path: Ptr[gchar] = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]]
    def path_=(value: Ptr[gchar]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def interfaces: Ptr[Ptr[GDBusInterfaceInfo]] = !struct.at(16).asInstanceOf[Ptr[Ptr[Ptr[GDBusInterfaceInfo]]]]
    def interfaces_=(value: Ptr[Ptr[GDBusInterfaceInfo]]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[Ptr[GDBusInterfaceInfo]]]] = value
    def nodes: Ptr[Ptr[GDBusNodeInfo]] = !struct.at(24).asInstanceOf[Ptr[Ptr[Ptr[GDBusNodeInfo]]]]
    def nodes_=(value: Ptr[Ptr[GDBusNodeInfo]]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[Ptr[GDBusNodeInfo]]]] = value
    def annotations: Ptr[Ptr[GDBusAnnotationInfo]] = !struct.at(32).asInstanceOf[Ptr[Ptr[Ptr[GDBusAnnotationInfo]]]]
    def annotations_=(value: Ptr[Ptr[GDBusAnnotationInfo]]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[Ptr[GDBusAnnotationInfo]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GDBusObject = CStruct0
object GDBusObject:
  given _tag: Tag[GDBusObject] = Tag.materializeCStruct0Tag

/**
 * GDBusObjectIface: _iface: The parent interface. _object_path: Returns the object path. See g_dbus_object_get_object_path(). _interfaces: Returns all interfaces. See g_dbus_object_get_interfaces(). _interface: Returns an interface by name. See g_dbus_object_get_interface().

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobject.h
*/
opaque type GDBusObjectIface = CArray[CChar, Nat.Digit2[Nat._5, Nat._6]]
object GDBusObjectIface:
  given _tag: Tag[GDBusObjectIface] = Tag.CArray[CChar, Nat.Digit2[Nat._5, Nat._6]](Tag.Byte, Tag.Digit2[Nat._5, Nat._6](Tag.Nat5, Tag.Nat6))
  def apply()(using Zone): Ptr[GDBusObjectIface] = scala.scalanative.unsafe.alloc[GDBusObjectIface](1)
  def apply(parent_iface : GTypeInterface, get_object_path : CFuncPtr1[Ptr[GDBusObject], Ptr[gchar]], get_interfaces : CFuncPtr1[Ptr[GDBusObject], Ptr[GList]], get_interface : CFuncPtr2[Ptr[GDBusObject], Ptr[gchar], Ptr[GDBusInterface]], interface_added : CFuncPtr2[Ptr[GDBusObject], Ptr[GDBusInterface], Unit], interface_removed : CFuncPtr2[Ptr[GDBusObject], Ptr[GDBusInterface], Unit])(using Zone): Ptr[GDBusObjectIface] = 
    val ____ptr = apply()
    (!____ptr).parent_iface = parent_iface
    (!____ptr).get_object_path = get_object_path
    (!____ptr).get_interfaces = get_interfaces
    (!____ptr).get_interface = get_interface
    (!____ptr).interface_added = interface_added
    (!____ptr).interface_removed = interface_removed
    ____ptr
  extension (struct: GDBusObjectIface)
    def parent_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def parent_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def get_object_path: CFuncPtr1[Ptr[GDBusObject], Ptr[gchar]] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusObject], Ptr[gchar]]]]
    def get_object_path_=(value: CFuncPtr1[Ptr[GDBusObject], Ptr[gchar]]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusObject], Ptr[gchar]]]] = value
    def get_interfaces: CFuncPtr1[Ptr[GDBusObject], Ptr[GList]] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusObject], Ptr[GList]]]]
    def get_interfaces_=(value: CFuncPtr1[Ptr[GDBusObject], Ptr[GList]]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusObject], Ptr[GList]]]] = value
    def get_interface: CFuncPtr2[Ptr[GDBusObject], Ptr[gchar], Ptr[GDBusInterface]] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDBusObject], Ptr[gchar], Ptr[GDBusInterface]]]]
    def get_interface_=(value: CFuncPtr2[Ptr[GDBusObject], Ptr[gchar], Ptr[GDBusInterface]]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDBusObject], Ptr[gchar], Ptr[GDBusInterface]]]] = value
    def interface_added: CFuncPtr2[Ptr[GDBusObject], Ptr[GDBusInterface], Unit] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDBusObject], Ptr[GDBusInterface], Unit]]]
    def interface_added_=(value: CFuncPtr2[Ptr[GDBusObject], Ptr[GDBusInterface], Unit]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDBusObject], Ptr[GDBusInterface], Unit]]] = value
    def interface_removed: CFuncPtr2[Ptr[GDBusObject], Ptr[GDBusInterface], Unit] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDBusObject], Ptr[GDBusInterface], Unit]]]
    def interface_removed_=(value: CFuncPtr2[Ptr[GDBusObject], Ptr[GDBusInterface], Unit]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDBusObject], Ptr[GDBusInterface], Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GDBusObjectManager = CStruct0
object GDBusObjectManager:
  given _tag: Tag[GDBusObjectManager] = Tag.materializeCStruct0Tag

/**
 * GDBusObjectManagerClient:

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h
*/
opaque type GDBusObjectManagerClient = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GDBusObjectManagerClient:
  given _tag: Tag[GDBusObjectManagerClient] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GDBusObjectManagerClient] = scala.scalanative.unsafe.alloc[GDBusObjectManagerClient](1)
  def apply(parent_instance : GObject, priv : Ptr[GDBusObjectManagerClientPrivate])(using Zone): Ptr[GDBusObjectManagerClient] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GDBusObjectManagerClient)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GDBusObjectManagerClientPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GDBusObjectManagerClientPrivate]]]
    def priv_=(value: Ptr[GDBusObjectManagerClientPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GDBusObjectManagerClientPrivate]]] = value

/**
 * GDBusObjectManagerClientClass: _class: The parent class.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h
*/
opaque type GDBusObjectManagerClientClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._1, Nat._6]]
object GDBusObjectManagerClientClass:
  given _tag: Tag[GDBusObjectManagerClientClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._1, Nat._6]](Tag.Byte, Tag.Digit3[Nat._2, Nat._1, Nat._6](Tag.Nat2, Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GDBusObjectManagerClientClass] = scala.scalanative.unsafe.alloc[GDBusObjectManagerClientClass](1)
  def apply(parent_class : GObjectClass, interface_proxy_signal : CFuncPtr6[Ptr[GDBusObjectManagerClient], Ptr[GDBusObjectProxy], Ptr[GDBusProxy], Ptr[gchar], Ptr[gchar], Ptr[GVariant], Unit], interface_proxy_properties_changed : CFuncPtr5[Ptr[GDBusObjectManagerClient], Ptr[GDBusObjectProxy], Ptr[GDBusProxy], Ptr[GVariant], Ptr[Ptr[gchar]], Unit], padding : CArray[gpointer, Nat._8])(using Zone): Ptr[GDBusObjectManagerClientClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).interface_proxy_signal = interface_proxy_signal
    (!____ptr).interface_proxy_properties_changed = interface_proxy_properties_changed
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GDBusObjectManagerClientClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def interface_proxy_signal: CFuncPtr6[Ptr[GDBusObjectManagerClient], Ptr[GDBusObjectProxy], Ptr[GDBusProxy], Ptr[gchar], Ptr[gchar], Ptr[GVariant], Unit] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr6[Ptr[GDBusObjectManagerClient], Ptr[GDBusObjectProxy], Ptr[GDBusProxy], Ptr[gchar], Ptr[gchar], Ptr[GVariant], Unit]]]
    def interface_proxy_signal_=(value: CFuncPtr6[Ptr[GDBusObjectManagerClient], Ptr[GDBusObjectProxy], Ptr[GDBusProxy], Ptr[gchar], Ptr[gchar], Ptr[GVariant], Unit]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr6[Ptr[GDBusObjectManagerClient], Ptr[GDBusObjectProxy], Ptr[GDBusProxy], Ptr[gchar], Ptr[gchar], Ptr[GVariant], Unit]]] = value
    def interface_proxy_properties_changed: CFuncPtr5[Ptr[GDBusObjectManagerClient], Ptr[GDBusObjectProxy], Ptr[GDBusProxy], Ptr[GVariant], Ptr[Ptr[gchar]], Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr5[Ptr[GDBusObjectManagerClient], Ptr[GDBusObjectProxy], Ptr[GDBusProxy], Ptr[GVariant], Ptr[Ptr[gchar]], Unit]]]
    def interface_proxy_properties_changed_=(value: CFuncPtr5[Ptr[GDBusObjectManagerClient], Ptr[GDBusObjectProxy], Ptr[GDBusProxy], Ptr[GVariant], Ptr[Ptr[gchar]], Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr5[Ptr[GDBusObjectManagerClient], Ptr[GDBusObjectProxy], Ptr[GDBusProxy], Ptr[GVariant], Ptr[Ptr[gchar]], Unit]]] = value
    def padding: CArray[gpointer, Nat._8] = !struct.at(152).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]]
    def padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at(152).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h
*/
opaque type GDBusObjectManagerClientPrivate = CStruct0
object GDBusObjectManagerClientPrivate:
  given _tag: Tag[GDBusObjectManagerClientPrivate] = Tag.materializeCStruct0Tag

/**
 * GDBusObjectManagerIface: _iface: The parent interface. _object_path: Virtual function for g_dbus_object_manager_get_object_path(). _objects: Virtual function for g_dbus_object_manager_get_objects(). _object: Virtual function for g_dbus_object_manager_get_object(). _interface: Virtual function for g_dbus_object_manager_get_interface(). _added: Signal handler for the #GDBusObjectManager::object-added signal. _removed: Signal handler for the #GDBusObjectManager::object-removed signal.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanager.h
*/
opaque type GDBusObjectManagerIface = CArray[CChar, Nat.Digit2[Nat._8, Nat._0]]
object GDBusObjectManagerIface:
  given _tag: Tag[GDBusObjectManagerIface] = Tag.CArray[CChar, Nat.Digit2[Nat._8, Nat._0]](Tag.Byte, Tag.Digit2[Nat._8, Nat._0](Tag.Nat8, Tag.Nat0))
  def apply()(using Zone): Ptr[GDBusObjectManagerIface] = scala.scalanative.unsafe.alloc[GDBusObjectManagerIface](1)
  def apply(parent_iface : GTypeInterface, get_object_path : CFuncPtr1[Ptr[GDBusObjectManager], Ptr[gchar]], get_objects : CFuncPtr1[Ptr[GDBusObjectManager], Ptr[GList]], get_object : CFuncPtr2[Ptr[GDBusObjectManager], Ptr[gchar], Ptr[GDBusObject]], get_interface : CFuncPtr3[Ptr[GDBusObjectManager], Ptr[gchar], Ptr[gchar], Ptr[GDBusInterface]], object_added : CFuncPtr2[Ptr[GDBusObjectManager], Ptr[GDBusObject], Unit], object_removed : CFuncPtr2[Ptr[GDBusObjectManager], Ptr[GDBusObject], Unit], interface_added : CFuncPtr3[Ptr[GDBusObjectManager], Ptr[GDBusObject], Ptr[GDBusInterface], Unit], interface_removed : CFuncPtr3[Ptr[GDBusObjectManager], Ptr[GDBusObject], Ptr[GDBusInterface], Unit])(using Zone): Ptr[GDBusObjectManagerIface] = 
    val ____ptr = apply()
    (!____ptr).parent_iface = parent_iface
    (!____ptr).get_object_path = get_object_path
    (!____ptr).get_objects = get_objects
    (!____ptr).get_object = get_object
    (!____ptr).get_interface = get_interface
    (!____ptr).object_added = object_added
    (!____ptr).object_removed = object_removed
    (!____ptr).interface_added = interface_added
    (!____ptr).interface_removed = interface_removed
    ____ptr
  extension (struct: GDBusObjectManagerIface)
    def parent_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def parent_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def get_object_path: CFuncPtr1[Ptr[GDBusObjectManager], Ptr[gchar]] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusObjectManager], Ptr[gchar]]]]
    def get_object_path_=(value: CFuncPtr1[Ptr[GDBusObjectManager], Ptr[gchar]]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusObjectManager], Ptr[gchar]]]] = value
    def get_objects: CFuncPtr1[Ptr[GDBusObjectManager], Ptr[GList]] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusObjectManager], Ptr[GList]]]]
    def get_objects_=(value: CFuncPtr1[Ptr[GDBusObjectManager], Ptr[GList]]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDBusObjectManager], Ptr[GList]]]] = value
    def get_object: CFuncPtr2[Ptr[GDBusObjectManager], Ptr[gchar], Ptr[GDBusObject]] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDBusObjectManager], Ptr[gchar], Ptr[GDBusObject]]]]
    def get_object_=(value: CFuncPtr2[Ptr[GDBusObjectManager], Ptr[gchar], Ptr[GDBusObject]]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDBusObjectManager], Ptr[gchar], Ptr[GDBusObject]]]] = value
    def get_interface: CFuncPtr3[Ptr[GDBusObjectManager], Ptr[gchar], Ptr[gchar], Ptr[GDBusInterface]] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDBusObjectManager], Ptr[gchar], Ptr[gchar], Ptr[GDBusInterface]]]]
    def get_interface_=(value: CFuncPtr3[Ptr[GDBusObjectManager], Ptr[gchar], Ptr[gchar], Ptr[GDBusInterface]]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDBusObjectManager], Ptr[gchar], Ptr[gchar], Ptr[GDBusInterface]]]] = value
    def object_added: CFuncPtr2[Ptr[GDBusObjectManager], Ptr[GDBusObject], Unit] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDBusObjectManager], Ptr[GDBusObject], Unit]]]
    def object_added_=(value: CFuncPtr2[Ptr[GDBusObjectManager], Ptr[GDBusObject], Unit]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDBusObjectManager], Ptr[GDBusObject], Unit]]] = value
    def object_removed: CFuncPtr2[Ptr[GDBusObjectManager], Ptr[GDBusObject], Unit] = !struct.at(56).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDBusObjectManager], Ptr[GDBusObject], Unit]]]
    def object_removed_=(value: CFuncPtr2[Ptr[GDBusObjectManager], Ptr[GDBusObject], Unit]): Unit = !struct.at(56).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDBusObjectManager], Ptr[GDBusObject], Unit]]] = value
    def interface_added: CFuncPtr3[Ptr[GDBusObjectManager], Ptr[GDBusObject], Ptr[GDBusInterface], Unit] = !struct.at(64).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDBusObjectManager], Ptr[GDBusObject], Ptr[GDBusInterface], Unit]]]
    def interface_added_=(value: CFuncPtr3[Ptr[GDBusObjectManager], Ptr[GDBusObject], Ptr[GDBusInterface], Unit]): Unit = !struct.at(64).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDBusObjectManager], Ptr[GDBusObject], Ptr[GDBusInterface], Unit]]] = value
    def interface_removed: CFuncPtr3[Ptr[GDBusObjectManager], Ptr[GDBusObject], Ptr[GDBusInterface], Unit] = !struct.at(72).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDBusObjectManager], Ptr[GDBusObject], Ptr[GDBusInterface], Unit]]]
    def interface_removed_=(value: CFuncPtr3[Ptr[GDBusObjectManager], Ptr[GDBusObject], Ptr[GDBusInterface], Unit]): Unit = !struct.at(72).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDBusObjectManager], Ptr[GDBusObject], Ptr[GDBusInterface], Unit]]] = value

/**
 * GDBusObjectManagerServer:

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h
*/
opaque type GDBusObjectManagerServer = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GDBusObjectManagerServer:
  given _tag: Tag[GDBusObjectManagerServer] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GDBusObjectManagerServer] = scala.scalanative.unsafe.alloc[GDBusObjectManagerServer](1)
  def apply(parent_instance : GObject, priv : Ptr[GDBusObjectManagerServerPrivate])(using Zone): Ptr[GDBusObjectManagerServer] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GDBusObjectManagerServer)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GDBusObjectManagerServerPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GDBusObjectManagerServerPrivate]]]
    def priv_=(value: Ptr[GDBusObjectManagerServerPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GDBusObjectManagerServerPrivate]]] = value

/**
 * GDBusObjectManagerServerClass: _class: The parent class.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h
*/
opaque type GDBusObjectManagerServerClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._0, Nat._0]]
object GDBusObjectManagerServerClass:
  given _tag: Tag[GDBusObjectManagerServerClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._0, Nat._0]](Tag.Byte, Tag.Digit3[Nat._2, Nat._0, Nat._0](Tag.Nat2, Tag.Nat0, Tag.Nat0))
  def apply()(using Zone): Ptr[GDBusObjectManagerServerClass] = scala.scalanative.unsafe.alloc[GDBusObjectManagerServerClass](1)
  def apply(parent_class : GObjectClass, padding : CArray[gpointer, Nat._8])(using Zone): Ptr[GDBusObjectManagerServerClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GDBusObjectManagerServerClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def padding: CArray[gpointer, Nat._8] = !struct.at(136).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]]
    def padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at(136).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h
*/
opaque type GDBusObjectManagerServerPrivate = CStruct0
object GDBusObjectManagerServerPrivate:
  given _tag: Tag[GDBusObjectManagerServerPrivate] = Tag.materializeCStruct0Tag

/**
 * GDBusObjectProxy:

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectproxy.h
*/
opaque type GDBusObjectProxy = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GDBusObjectProxy:
  given _tag: Tag[GDBusObjectProxy] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GDBusObjectProxy] = scala.scalanative.unsafe.alloc[GDBusObjectProxy](1)
  def apply(parent_instance : GObject, priv : Ptr[GDBusObjectProxyPrivate])(using Zone): Ptr[GDBusObjectProxy] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GDBusObjectProxy)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GDBusObjectProxyPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GDBusObjectProxyPrivate]]]
    def priv_=(value: Ptr[GDBusObjectProxyPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GDBusObjectProxyPrivate]]] = value

/**
 * GDBusObjectProxyClass: _class: The parent class.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectproxy.h
*/
opaque type GDBusObjectProxyClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._0, Nat._0]]
object GDBusObjectProxyClass:
  given _tag: Tag[GDBusObjectProxyClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._0, Nat._0]](Tag.Byte, Tag.Digit3[Nat._2, Nat._0, Nat._0](Tag.Nat2, Tag.Nat0, Tag.Nat0))
  def apply()(using Zone): Ptr[GDBusObjectProxyClass] = scala.scalanative.unsafe.alloc[GDBusObjectProxyClass](1)
  def apply(parent_class : GObjectClass, padding : CArray[gpointer, Nat._8])(using Zone): Ptr[GDBusObjectProxyClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GDBusObjectProxyClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def padding: CArray[gpointer, Nat._8] = !struct.at(136).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]]
    def padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at(136).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectproxy.h
*/
opaque type GDBusObjectProxyPrivate = CStruct0
object GDBusObjectProxyPrivate:
  given _tag: Tag[GDBusObjectProxyPrivate] = Tag.materializeCStruct0Tag

/**
 * GDBusObjectSkeleton:

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectskeleton.h
*/
opaque type GDBusObjectSkeleton = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GDBusObjectSkeleton:
  given _tag: Tag[GDBusObjectSkeleton] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GDBusObjectSkeleton] = scala.scalanative.unsafe.alloc[GDBusObjectSkeleton](1)
  def apply(parent_instance : GObject, priv : Ptr[GDBusObjectSkeletonPrivate])(using Zone): Ptr[GDBusObjectSkeleton] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GDBusObjectSkeleton)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GDBusObjectSkeletonPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GDBusObjectSkeletonPrivate]]]
    def priv_=(value: Ptr[GDBusObjectSkeletonPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GDBusObjectSkeletonPrivate]]] = value

/**
 * GDBusObjectSkeletonClass: _class: The parent class. _method: Signal class handler for the #GDBusObjectSkeleton::authorize-method signal.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectskeleton.h
*/
opaque type GDBusObjectSkeletonClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._0, Nat._8]]
object GDBusObjectSkeletonClass:
  given _tag: Tag[GDBusObjectSkeletonClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._2, Nat._0, Nat._8](Tag.Nat2, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[GDBusObjectSkeletonClass] = scala.scalanative.unsafe.alloc[GDBusObjectSkeletonClass](1)
  def apply(parent_class : GObjectClass, authorize_method : CFuncPtr3[Ptr[GDBusObjectSkeleton], Ptr[GDBusInterfaceSkeleton], Ptr[GDBusMethodInvocation], gboolean], padding : CArray[gpointer, Nat._8])(using Zone): Ptr[GDBusObjectSkeletonClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).authorize_method = authorize_method
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GDBusObjectSkeletonClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def authorize_method: CFuncPtr3[Ptr[GDBusObjectSkeleton], Ptr[GDBusInterfaceSkeleton], Ptr[GDBusMethodInvocation], gboolean] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDBusObjectSkeleton], Ptr[GDBusInterfaceSkeleton], Ptr[GDBusMethodInvocation], gboolean]]]
    def authorize_method_=(value: CFuncPtr3[Ptr[GDBusObjectSkeleton], Ptr[GDBusInterfaceSkeleton], Ptr[GDBusMethodInvocation], gboolean]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDBusObjectSkeleton], Ptr[GDBusInterfaceSkeleton], Ptr[GDBusMethodInvocation], gboolean]]] = value
    def padding: CArray[gpointer, Nat._8] = !struct.at(144).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]]
    def padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at(144).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectskeleton.h
*/
opaque type GDBusObjectSkeletonPrivate = CStruct0
object GDBusObjectSkeletonPrivate:
  given _tag: Tag[GDBusObjectSkeletonPrivate] = Tag.materializeCStruct0Tag

/**
 * GDBusPropertyInfo: _count: The reference count or -1 if statically allocated. : The D-Bus signature of the property (a single complete type). : Access control flags for the property. : (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
*/
opaque type GDBusPropertyInfo = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GDBusPropertyInfo:
  given _tag: Tag[GDBusPropertyInfo] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GDBusPropertyInfo] = scala.scalanative.unsafe.alloc[GDBusPropertyInfo](1)
  def apply(ref_count : gint, name : Ptr[gchar], signature : Ptr[gchar], flags : GDBusPropertyInfoFlags, annotations : Ptr[Ptr[GDBusAnnotationInfo]])(using Zone): Ptr[GDBusPropertyInfo] = 
    val ____ptr = apply()
    (!____ptr).ref_count = ref_count
    (!____ptr).name = name
    (!____ptr).signature = signature
    (!____ptr).flags = flags
    (!____ptr).annotations = annotations
    ____ptr
  extension (struct: GDBusPropertyInfo)
    def ref_count: gint = !struct.at(0).asInstanceOf[Ptr[gint]]
    def ref_count_=(value: gint): Unit = !struct.at(0).asInstanceOf[Ptr[gint]] = value
    def name: Ptr[gchar] = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]]
    def name_=(value: Ptr[gchar]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def signature: Ptr[gchar] = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]]
    def signature_=(value: Ptr[gchar]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def flags: GDBusPropertyInfoFlags = !struct.at(24).asInstanceOf[Ptr[GDBusPropertyInfoFlags]]
    def flags_=(value: GDBusPropertyInfoFlags): Unit = !struct.at(24).asInstanceOf[Ptr[GDBusPropertyInfoFlags]] = value
    def annotations: Ptr[Ptr[GDBusAnnotationInfo]] = !struct.at(32).asInstanceOf[Ptr[Ptr[Ptr[GDBusAnnotationInfo]]]]
    def annotations_=(value: Ptr[Ptr[GDBusAnnotationInfo]]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[Ptr[GDBusAnnotationInfo]]]] = value

/**
 * GDBusProxy:

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
*/
opaque type GDBusProxy = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GDBusProxy:
  given _tag: Tag[GDBusProxy] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GDBusProxy] = scala.scalanative.unsafe.alloc[GDBusProxy](1)
  def apply(parent_instance : GObject, priv : Ptr[GDBusProxyPrivate])(using Zone): Ptr[GDBusProxy] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GDBusProxy)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GDBusProxyPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GDBusProxyPrivate]]]
    def priv_=(value: Ptr[GDBusProxyPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GDBusProxyPrivate]]] = value

/**
 * GDBusProxyClass: _properties_changed: Signal class handler for the #GDBusProxy::g-properties-changed signal. _signal: Signal class handler for the #GDBusProxy::g-signal signal.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
*/
opaque type GDBusProxyClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object GDBusProxyClass:
  given _tag: Tag[GDBusProxyClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[GDBusProxyClass] = scala.scalanative.unsafe.alloc[GDBusProxyClass](1)
  def apply(parent_class : GObjectClass, g_properties_changed : CFuncPtr3[Ptr[GDBusProxy], Ptr[GVariant], Ptr[Ptr[gchar]], Unit], g_signal : CFuncPtr4[Ptr[GDBusProxy], Ptr[gchar], Ptr[gchar], Ptr[GVariant], Unit], padding : CArray[gpointer, Nat.Digit2[Nat._3, Nat._2]])(using Zone): Ptr[GDBusProxyClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).g_properties_changed = g_properties_changed
    (!____ptr).g_signal = g_signal
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GDBusProxyClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def g_properties_changed: CFuncPtr3[Ptr[GDBusProxy], Ptr[GVariant], Ptr[Ptr[gchar]], Unit] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDBusProxy], Ptr[GVariant], Ptr[Ptr[gchar]], Unit]]]
    def g_properties_changed_=(value: CFuncPtr3[Ptr[GDBusProxy], Ptr[GVariant], Ptr[Ptr[gchar]], Unit]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDBusProxy], Ptr[GVariant], Ptr[Ptr[gchar]], Unit]]] = value
    def g_signal: CFuncPtr4[Ptr[GDBusProxy], Ptr[gchar], Ptr[gchar], Ptr[GVariant], Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr4[Ptr[GDBusProxy], Ptr[gchar], Ptr[gchar], Ptr[GVariant], Unit]]]
    def g_signal_=(value: CFuncPtr4[Ptr[GDBusProxy], Ptr[gchar], Ptr[gchar], Ptr[GVariant], Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr4[Ptr[GDBusProxy], Ptr[gchar], Ptr[gchar], Ptr[GVariant], Unit]]] = value
    def padding: CArray[gpointer, Nat.Digit2[Nat._3, Nat._2]] = !struct.at(152).asInstanceOf[Ptr[CArray[gpointer, Nat.Digit2[Nat._3, Nat._2]]]]
    def padding_=(value: CArray[gpointer, Nat.Digit2[Nat._3, Nat._2]]): Unit = !struct.at(152).asInstanceOf[Ptr[CArray[gpointer, Nat.Digit2[Nat._3, Nat._2]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
*/
opaque type GDBusProxyPrivate = CStruct0
object GDBusProxyPrivate:
  given _tag: Tag[GDBusProxyPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GDBusServer = CStruct0
object GDBusServer:
  given _tag: Tag[GDBusServer] = Tag.materializeCStruct0Tag

/**
 * GDBusSignalInfo: _count: The reference count or -1 if statically allocated.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
*/
opaque type GDBusSignalInfo = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GDBusSignalInfo:
  given _tag: Tag[GDBusSignalInfo] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GDBusSignalInfo] = scala.scalanative.unsafe.alloc[GDBusSignalInfo](1)
  def apply(ref_count : gint, name : Ptr[gchar], args : Ptr[Ptr[GDBusArgInfo]], annotations : Ptr[Ptr[GDBusAnnotationInfo]])(using Zone): Ptr[GDBusSignalInfo] = 
    val ____ptr = apply()
    (!____ptr).ref_count = ref_count
    (!____ptr).name = name
    (!____ptr).args = args
    (!____ptr).annotations = annotations
    ____ptr
  extension (struct: GDBusSignalInfo)
    def ref_count: gint = !struct.at(0).asInstanceOf[Ptr[gint]]
    def ref_count_=(value: gint): Unit = !struct.at(0).asInstanceOf[Ptr[gint]] = value
    def name: Ptr[gchar] = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]]
    def name_=(value: Ptr[gchar]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def args: Ptr[Ptr[GDBusArgInfo]] = !struct.at(16).asInstanceOf[Ptr[Ptr[Ptr[GDBusArgInfo]]]]
    def args_=(value: Ptr[Ptr[GDBusArgInfo]]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[Ptr[GDBusArgInfo]]]] = value
    def annotations: Ptr[Ptr[GDBusAnnotationInfo]] = !struct.at(24).asInstanceOf[Ptr[Ptr[Ptr[GDBusAnnotationInfo]]]]
    def annotations_=(value: Ptr[Ptr[GDBusAnnotationInfo]]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[Ptr[GDBusAnnotationInfo]]]] = value

/**
 * GDBusSubtreeVTable: : Function for enumerating child nodes. : Function for introspecting a child node. : Function for dispatching a remote call on a child node.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
*/
opaque type GDBusSubtreeVTable = CArray[CChar, Nat.Digit2[Nat._8, Nat._8]]
object GDBusSubtreeVTable:
  given _tag: Tag[GDBusSubtreeVTable] = Tag.CArray[CChar, Nat.Digit2[Nat._8, Nat._8]](Tag.Byte, Tag.Digit2[Nat._8, Nat._8](Tag.Nat8, Tag.Nat8))
  def apply()(using Zone): Ptr[GDBusSubtreeVTable] = scala.scalanative.unsafe.alloc[GDBusSubtreeVTable](1)
  def apply(enumerate : GDBusSubtreeEnumerateFunc, introspect : GDBusSubtreeIntrospectFunc, dispatch : GDBusSubtreeDispatchFunc, padding : CArray[gpointer, Nat._8])(using Zone): Ptr[GDBusSubtreeVTable] = 
    val ____ptr = apply()
    (!____ptr).enumerate = enumerate
    (!____ptr).introspect = introspect
    (!____ptr).dispatch = dispatch
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GDBusSubtreeVTable)
    def enumerate: GDBusSubtreeEnumerateFunc = !struct.at(0).asInstanceOf[Ptr[GDBusSubtreeEnumerateFunc]]
    def enumerate_=(value: GDBusSubtreeEnumerateFunc): Unit = !struct.at(0).asInstanceOf[Ptr[GDBusSubtreeEnumerateFunc]] = value
    def introspect: GDBusSubtreeIntrospectFunc = !struct.at(8).asInstanceOf[Ptr[GDBusSubtreeIntrospectFunc]]
    def introspect_=(value: GDBusSubtreeIntrospectFunc): Unit = !struct.at(8).asInstanceOf[Ptr[GDBusSubtreeIntrospectFunc]] = value
    def dispatch: GDBusSubtreeDispatchFunc = !struct.at(16).asInstanceOf[Ptr[GDBusSubtreeDispatchFunc]]
    def dispatch_=(value: GDBusSubtreeDispatchFunc): Unit = !struct.at(16).asInstanceOf[Ptr[GDBusSubtreeDispatchFunc]] = value
    def padding: CArray[gpointer, Nat._8] = !struct.at(24).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]]
    def padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at(24).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gdataset.h
*/
opaque type GData = CStruct0
object GData:
  given _tag: Tag[GData] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
*/
opaque type GDataInputStream = CArray[CChar, Nat.Digit2[Nat._5, Nat._6]]
object GDataInputStream:
  given _tag: Tag[GDataInputStream] = Tag.CArray[CChar, Nat.Digit2[Nat._5, Nat._6]](Tag.Byte, Tag.Digit2[Nat._5, Nat._6](Tag.Nat5, Tag.Nat6))
  def apply()(using Zone): Ptr[GDataInputStream] = scala.scalanative.unsafe.alloc[GDataInputStream](1)
  def apply(parent_instance : GBufferedInputStream, priv : Ptr[GDataInputStreamPrivate])(using Zone): Ptr[GDataInputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GDataInputStream)
    def parent_instance: GBufferedInputStream = !struct.at(0).asInstanceOf[Ptr[GBufferedInputStream]]
    def parent_instance_=(value: GBufferedInputStream): Unit = !struct.at(0).asInstanceOf[Ptr[GBufferedInputStream]] = value
    def priv: Ptr[GDataInputStreamPrivate] = !struct.at(48).asInstanceOf[Ptr[Ptr[GDataInputStreamPrivate]]]
    def priv_=(value: Ptr[GDataInputStreamPrivate]): Unit = !struct.at(48).asInstanceOf[Ptr[Ptr[GDataInputStreamPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
*/
opaque type GDataInputStreamClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._7, Nat._6]]
object GDataInputStreamClass:
  given _tag: Tag[GDataInputStreamClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._7, Nat._6]](Tag.Byte, Tag.Digit3[Nat._3, Nat._7, Nat._6](Tag.Nat3, Tag.Nat7, Tag.Nat6))
  def apply()(using Zone): Ptr[GDataInputStreamClass] = scala.scalanative.unsafe.alloc[GDataInputStreamClass](1)
  def apply(parent_class : GBufferedInputStreamClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[GDataInputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: GDataInputStreamClass)
    def parent_class: GBufferedInputStreamClass = !struct.at(0).asInstanceOf[Ptr[GBufferedInputStreamClass]]
    def parent_class_=(value: GBufferedInputStreamClass): Unit = !struct.at(0).asInstanceOf[Ptr[GBufferedInputStreamClass]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(336).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(336).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(344).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(344).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(352).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(352).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(360).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(360).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(368).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(368).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
*/
opaque type GDataInputStreamPrivate = CStruct0
object GDataInputStreamPrivate:
  given _tag: Tag[GDataInputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdataoutputstream.h
*/
opaque type GDataOutputStream = CArray[CChar, Nat.Digit2[Nat._4, Nat._8]]
object GDataOutputStream:
  given _tag: Tag[GDataOutputStream] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._8]](Tag.Byte, Tag.Digit2[Nat._4, Nat._8](Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GDataOutputStream] = scala.scalanative.unsafe.alloc[GDataOutputStream](1)
  def apply(parent_instance : GFilterOutputStream, priv : Ptr[GDataOutputStreamPrivate])(using Zone): Ptr[GDataOutputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GDataOutputStream)
    def parent_instance: GFilterOutputStream = !struct.at(0).asInstanceOf[Ptr[GFilterOutputStream]]
    def parent_instance_=(value: GFilterOutputStream): Unit = !struct.at(0).asInstanceOf[Ptr[GFilterOutputStream]] = value
    def priv: Ptr[GDataOutputStreamPrivate] = !struct.at(40).asInstanceOf[Ptr[Ptr[GDataOutputStreamPrivate]]]
    def priv_=(value: Ptr[GDataOutputStreamPrivate]): Unit = !struct.at(40).asInstanceOf[Ptr[Ptr[GDataOutputStreamPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdataoutputstream.h
*/
opaque type GDataOutputStreamClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._6, Nat._0]]
object GDataOutputStreamClass:
  given _tag: Tag[GDataOutputStreamClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._6, Nat._0]](Tag.Byte, Tag.Digit3[Nat._3, Nat._6, Nat._0](Tag.Nat3, Tag.Nat6, Tag.Nat0))
  def apply()(using Zone): Ptr[GDataOutputStreamClass] = scala.scalanative.unsafe.alloc[GDataOutputStreamClass](1)
  def apply(parent_class : GFilterOutputStreamClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[GDataOutputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: GDataOutputStreamClass)
    def parent_class: GFilterOutputStreamClass = !struct.at(0).asInstanceOf[Ptr[GFilterOutputStreamClass]]
    def parent_class_=(value: GFilterOutputStreamClass): Unit = !struct.at(0).asInstanceOf[Ptr[GFilterOutputStreamClass]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(320).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(320).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(328).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(328).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(336).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(336).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(344).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(344).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(352).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(352).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdataoutputstream.h
*/
opaque type GDataOutputStreamPrivate = CStruct0
object GDataOutputStreamPrivate:
  given _tag: Tag[GDataOutputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GDatagramBased = CStruct0
object GDatagramBased:
  given _tag: Tag[GDatagramBased] = Tag.materializeCStruct0Tag

/**
 * GDatagramBasedInterface: _iface: The parent interface. _messages: Virtual method for g_datagram_based_receive_messages(). _messages: Virtual method for g_datagram_based_send_messages(). _source: Virtual method for g_datagram_based_create_source(). _check: Virtual method for g_datagram_based_condition_check(). _wait: Virtual method for g_datagram_based_condition_wait().

 * [bindgen] header: /usr/include/glib-2.0/gio/gdatagrambased.h
*/
opaque type GDatagramBasedInterface = CArray[CChar, Nat.Digit2[Nat._5, Nat._6]]
object GDatagramBasedInterface:
  given _tag: Tag[GDatagramBasedInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._5, Nat._6]](Tag.Byte, Tag.Digit2[Nat._5, Nat._6](Tag.Nat5, Tag.Nat6))
  def apply()(using Zone): Ptr[GDatagramBasedInterface] = scala.scalanative.unsafe.alloc[GDatagramBasedInterface](1)
  def apply(g_iface : GTypeInterface, receive_messages : CFuncPtr7[Ptr[GDatagramBased], Ptr[GInputMessage], guint, gint, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gint], send_messages : CFuncPtr7[Ptr[GDatagramBased], Ptr[GOutputMessage], guint, gint, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gint], create_source : CFuncPtr3[Ptr[GDatagramBased], GIOCondition, Ptr[GCancellable], Ptr[GSource]], condition_check : CFuncPtr2[Ptr[GDatagramBased], GIOCondition, GIOCondition], condition_wait : CFuncPtr5[Ptr[GDatagramBased], GIOCondition, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean])(using Zone): Ptr[GDatagramBasedInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).receive_messages = receive_messages
    (!____ptr).send_messages = send_messages
    (!____ptr).create_source = create_source
    (!____ptr).condition_check = condition_check
    (!____ptr).condition_wait = condition_wait
    ____ptr
  extension (struct: GDatagramBasedInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def receive_messages: CFuncPtr7[Ptr[GDatagramBased], Ptr[GInputMessage], guint, gint, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gint] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr7[Ptr[GDatagramBased], Ptr[GInputMessage], guint, gint, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gint]]]
    def receive_messages_=(value: CFuncPtr7[Ptr[GDatagramBased], Ptr[GInputMessage], guint, gint, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gint]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr7[Ptr[GDatagramBased], Ptr[GInputMessage], guint, gint, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gint]]] = value
    def send_messages: CFuncPtr7[Ptr[GDatagramBased], Ptr[GOutputMessage], guint, gint, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gint] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr7[Ptr[GDatagramBased], Ptr[GOutputMessage], guint, gint, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gint]]]
    def send_messages_=(value: CFuncPtr7[Ptr[GDatagramBased], Ptr[GOutputMessage], guint, gint, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gint]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr7[Ptr[GDatagramBased], Ptr[GOutputMessage], guint, gint, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gint]]] = value
    def create_source: CFuncPtr3[Ptr[GDatagramBased], GIOCondition, Ptr[GCancellable], Ptr[GSource]] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDatagramBased], GIOCondition, Ptr[GCancellable], Ptr[GSource]]]]
    def create_source_=(value: CFuncPtr3[Ptr[GDatagramBased], GIOCondition, Ptr[GCancellable], Ptr[GSource]]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDatagramBased], GIOCondition, Ptr[GCancellable], Ptr[GSource]]]] = value
    def condition_check: CFuncPtr2[Ptr[GDatagramBased], GIOCondition, GIOCondition] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDatagramBased], GIOCondition, GIOCondition]]]
    def condition_check_=(value: CFuncPtr2[Ptr[GDatagramBased], GIOCondition, GIOCondition]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDatagramBased], GIOCondition, GIOCondition]]] = value
    def condition_wait: CFuncPtr5[Ptr[GDatagramBased], GIOCondition, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr5[Ptr[GDatagramBased], GIOCondition, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def condition_wait_=(value: CFuncPtr5[Ptr[GDatagramBased], GIOCondition, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr5[Ptr[GDatagramBased], GIOCondition, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
*/
opaque type GDate = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GDate:
  given _tag: Tag[GDate] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GDate] = scala.scalanative.unsafe.alloc[GDate](1)
  def apply(julian_days : guint, julian : guint, dmy : guint, day : guint, month : guint, year : guint)(using Zone): Ptr[GDate] = 
    val ____ptr = apply()
    (!____ptr).julian_days = julian_days
    (!____ptr).julian = julian
    (!____ptr).dmy = dmy
    (!____ptr).day = day
    (!____ptr).month = month
    (!____ptr).year = year
    ____ptr
  extension (struct: GDate)
    def julian_days: guint = !struct.at(0).asInstanceOf[Ptr[guint]]
    def julian_days_=(value: guint): Unit = !struct.at(0).asInstanceOf[Ptr[guint]] = value
    def julian: guint = !struct.at(4).asInstanceOf[Ptr[guint]]
    def julian_=(value: guint): Unit = !struct.at(4).asInstanceOf[Ptr[guint]] = value
    def dmy: guint = !struct.at(8).asInstanceOf[Ptr[guint]]
    def dmy_=(value: guint): Unit = !struct.at(8).asInstanceOf[Ptr[guint]] = value
    def day: guint = !struct.at(12).asInstanceOf[Ptr[guint]]
    def day_=(value: guint): Unit = !struct.at(12).asInstanceOf[Ptr[guint]] = value
    def month: guint = !struct.at(16).asInstanceOf[Ptr[guint]]
    def month_=(value: guint): Unit = !struct.at(16).asInstanceOf[Ptr[guint]] = value
    def year: guint = !struct.at(20).asInstanceOf[Ptr[guint]]
    def year_=(value: guint): Unit = !struct.at(20).asInstanceOf[Ptr[guint]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
*/
opaque type GDateTime = CStruct0
object GDateTime:
  given _tag: Tag[GDateTime] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontroller.h
*/
opaque type GDebugController = CStruct0
object GDebugController:
  given _tag: Tag[GDebugController] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
*/
opaque type GDebugControllerDBus = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GDebugControllerDBus:
  given _tag: Tag[GDebugControllerDBus] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GDebugControllerDBus] = scala.scalanative.unsafe.alloc[GDebugControllerDBus](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[GDebugControllerDBus] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: GDebugControllerDBus)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value

/**
 * GDebugControllerDBusClass: _class: The parent class. : Default handler for the #GDebugControllerDBus::authorize signal.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
*/
opaque type GDebugControllerDBusClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._4, Nat._0]]
object GDebugControllerDBusClass:
  given _tag: Tag[GDebugControllerDBusClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._4, Nat._0]](Tag.Byte, Tag.Digit3[Nat._2, Nat._4, Nat._0](Tag.Nat2, Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GDebugControllerDBusClass] = scala.scalanative.unsafe.alloc[GDebugControllerDBusClass](1)
  def apply(parent_class : GObjectClass, authorize : CFuncPtr2[Ptr[GDebugControllerDBus], Ptr[GDBusMethodInvocation], gboolean], padding : CArray[gpointer, Nat.Digit2[Nat._1, Nat._2]])(using Zone): Ptr[GDebugControllerDBusClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).authorize = authorize
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GDebugControllerDBusClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def authorize: CFuncPtr2[Ptr[GDebugControllerDBus], Ptr[GDBusMethodInvocation], gboolean] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDebugControllerDBus], Ptr[GDBusMethodInvocation], gboolean]]]
    def authorize_=(value: CFuncPtr2[Ptr[GDebugControllerDBus], Ptr[GDBusMethodInvocation], gboolean]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDebugControllerDBus], Ptr[GDBusMethodInvocation], gboolean]]] = value
    def padding: CArray[gpointer, Nat.Digit2[Nat._1, Nat._2]] = !struct.at(144).asInstanceOf[Ptr[CArray[gpointer, Nat.Digit2[Nat._1, Nat._2]]]]
    def padding_=(value: CArray[gpointer, Nat.Digit2[Nat._1, Nat._2]]): Unit = !struct.at(144).asInstanceOf[Ptr[CArray[gpointer, Nat.Digit2[Nat._1, Nat._2]]]] = value

/**
 * GDebugControllerInterface: _iface: The parent interface.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontroller.h
*/
opaque type GDebugControllerInterface = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GDebugControllerInterface:
  given _tag: Tag[GDebugControllerInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GDebugControllerInterface] = scala.scalanative.unsafe.alloc[GDebugControllerInterface](1)
  def apply(g_iface : GTypeInterface)(using Zone): Ptr[GDebugControllerInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    ____ptr
  extension (struct: GDebugControllerInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
*/
opaque type GDebugKey = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GDebugKey:
  given _tag: Tag[GDebugKey] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GDebugKey] = scala.scalanative.unsafe.alloc[GDebugKey](1)
  def apply(key : Ptr[gchar], value : guint)(using Zone): Ptr[GDebugKey] = 
    val ____ptr = apply()
    (!____ptr).key = key
    (!____ptr).value = value
    ____ptr
  extension (struct: GDebugKey)
    def key: Ptr[gchar] = !struct.at(0).asInstanceOf[Ptr[Ptr[gchar]]]
    def key_=(value: Ptr[gchar]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def value: guint = !struct.at(8).asInstanceOf[Ptr[guint]]
    def value_=(value: guint): Unit = !struct.at(8).asInstanceOf[Ptr[guint]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gdir.h
*/
opaque type GDir = CStruct0
object GDir:
  given _tag: Tag[GDir] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GDrive = CStruct0
object GDrive:
  given _tag: Tag[GDrive] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
*/
opaque type GDriveIface = CArray[CChar, Nat.Digit3[Nat._2, Nat._7, Nat._2]]
object GDriveIface:
  given _tag: Tag[GDriveIface] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._7, Nat._2]](Tag.Byte, Tag.Digit3[Nat._2, Nat._7, Nat._2](Tag.Nat2, Tag.Nat7, Tag.Nat2))
  def apply()(using Zone): Ptr[GDriveIface] = scala.scalanative.unsafe.alloc[GDriveIface](1)
  def apply(g_iface : GTypeInterface, changed : CFuncPtr1[Ptr[GDrive], Unit], disconnected : CFuncPtr1[Ptr[GDrive], Unit], eject_button : CFuncPtr1[Ptr[GDrive], Unit], get_name : CFuncPtr1[Ptr[GDrive], CString], get_icon : CFuncPtr1[Ptr[GDrive], Ptr[GIcon]], has_volumes : CFuncPtr1[Ptr[GDrive], gboolean], get_volumes : CFuncPtr1[Ptr[GDrive], Ptr[GList]], is_media_removable : CFuncPtr1[Ptr[GDrive], gboolean], has_media : CFuncPtr1[Ptr[GDrive], gboolean], is_media_check_automatic : CFuncPtr1[Ptr[GDrive], gboolean], can_eject : CFuncPtr1[Ptr[GDrive], gboolean], can_poll_for_media : CFuncPtr1[Ptr[GDrive], gboolean], eject : CFuncPtr5[Ptr[GDrive], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], eject_finish : CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], poll_for_media : CFuncPtr4[Ptr[GDrive], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], poll_for_media_finish : CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], get_identifier : CFuncPtr2[Ptr[GDrive], CString, CString], enumerate_identifiers : CFuncPtr1[Ptr[GDrive], Ptr[CString]], get_start_stop_type : CFuncPtr1[Ptr[GDrive], GDriveStartStopType], can_start : CFuncPtr1[Ptr[GDrive], gboolean], can_start_degraded : CFuncPtr1[Ptr[GDrive], gboolean], start : CFuncPtr6[Ptr[GDrive], GDriveStartFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], start_finish : CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], can_stop : CFuncPtr1[Ptr[GDrive], gboolean], stop : CFuncPtr6[Ptr[GDrive], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], stop_finish : CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], stop_button : CFuncPtr1[Ptr[GDrive], Unit], eject_with_operation : CFuncPtr6[Ptr[GDrive], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], eject_with_operation_finish : CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], get_sort_key : CFuncPtr1[Ptr[GDrive], Ptr[gchar]], get_symbolic_icon : CFuncPtr1[Ptr[GDrive], Ptr[GIcon]], is_removable : CFuncPtr1[Ptr[GDrive], gboolean])(using Zone): Ptr[GDriveIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).changed = changed
    (!____ptr).disconnected = disconnected
    (!____ptr).eject_button = eject_button
    (!____ptr).get_name = get_name
    (!____ptr).get_icon = get_icon
    (!____ptr).has_volumes = has_volumes
    (!____ptr).get_volumes = get_volumes
    (!____ptr).is_media_removable = is_media_removable
    (!____ptr).has_media = has_media
    (!____ptr).is_media_check_automatic = is_media_check_automatic
    (!____ptr).can_eject = can_eject
    (!____ptr).can_poll_for_media = can_poll_for_media
    (!____ptr).eject = eject
    (!____ptr).eject_finish = eject_finish
    (!____ptr).poll_for_media = poll_for_media
    (!____ptr).poll_for_media_finish = poll_for_media_finish
    (!____ptr).get_identifier = get_identifier
    (!____ptr).enumerate_identifiers = enumerate_identifiers
    (!____ptr).get_start_stop_type = get_start_stop_type
    (!____ptr).can_start = can_start
    (!____ptr).can_start_degraded = can_start_degraded
    (!____ptr).start = start
    (!____ptr).start_finish = start_finish
    (!____ptr).can_stop = can_stop
    (!____ptr).stop = stop
    (!____ptr).stop_finish = stop_finish
    (!____ptr).stop_button = stop_button
    (!____ptr).eject_with_operation = eject_with_operation
    (!____ptr).eject_with_operation_finish = eject_with_operation_finish
    (!____ptr).get_sort_key = get_sort_key
    (!____ptr).get_symbolic_icon = get_symbolic_icon
    (!____ptr).is_removable = is_removable
    ____ptr
  extension (struct: GDriveIface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def changed: CFuncPtr1[Ptr[GDrive], Unit] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Unit]]]
    def changed_=(value: CFuncPtr1[Ptr[GDrive], Unit]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Unit]]] = value
    def disconnected: CFuncPtr1[Ptr[GDrive], Unit] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Unit]]]
    def disconnected_=(value: CFuncPtr1[Ptr[GDrive], Unit]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Unit]]] = value
    def eject_button: CFuncPtr1[Ptr[GDrive], Unit] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Unit]]]
    def eject_button_=(value: CFuncPtr1[Ptr[GDrive], Unit]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Unit]]] = value
    def get_name: CFuncPtr1[Ptr[GDrive], CString] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], CString]]]
    def get_name_=(value: CFuncPtr1[Ptr[GDrive], CString]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], CString]]] = value
    def get_icon: CFuncPtr1[Ptr[GDrive], Ptr[GIcon]] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Ptr[GIcon]]]]
    def get_icon_=(value: CFuncPtr1[Ptr[GDrive], Ptr[GIcon]]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Ptr[GIcon]]]] = value
    def has_volumes: CFuncPtr1[Ptr[GDrive], gboolean] = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]]
    def has_volumes_=(value: CFuncPtr1[Ptr[GDrive], gboolean]): Unit = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]] = value
    def get_volumes: CFuncPtr1[Ptr[GDrive], Ptr[GList]] = !struct.at(64).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Ptr[GList]]]]
    def get_volumes_=(value: CFuncPtr1[Ptr[GDrive], Ptr[GList]]): Unit = !struct.at(64).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Ptr[GList]]]] = value
    def is_media_removable: CFuncPtr1[Ptr[GDrive], gboolean] = !struct.at(72).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]]
    def is_media_removable_=(value: CFuncPtr1[Ptr[GDrive], gboolean]): Unit = !struct.at(72).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]] = value
    def has_media: CFuncPtr1[Ptr[GDrive], gboolean] = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]]
    def has_media_=(value: CFuncPtr1[Ptr[GDrive], gboolean]): Unit = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]] = value
    def is_media_check_automatic: CFuncPtr1[Ptr[GDrive], gboolean] = !struct.at(88).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]]
    def is_media_check_automatic_=(value: CFuncPtr1[Ptr[GDrive], gboolean]): Unit = !struct.at(88).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]] = value
    def can_eject: CFuncPtr1[Ptr[GDrive], gboolean] = !struct.at(96).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]]
    def can_eject_=(value: CFuncPtr1[Ptr[GDrive], gboolean]): Unit = !struct.at(96).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]] = value
    def can_poll_for_media: CFuncPtr1[Ptr[GDrive], gboolean] = !struct.at(104).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]]
    def can_poll_for_media_=(value: CFuncPtr1[Ptr[GDrive], gboolean]): Unit = !struct.at(104).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]] = value
    def eject: CFuncPtr5[Ptr[GDrive], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(112).asInstanceOf[Ptr[CFuncPtr5[Ptr[GDrive], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def eject_=(value: CFuncPtr5[Ptr[GDrive], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(112).asInstanceOf[Ptr[CFuncPtr5[Ptr[GDrive], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def eject_finish: CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(120).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def eject_finish_=(value: CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(120).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def poll_for_media: CFuncPtr4[Ptr[GDrive], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(128).asInstanceOf[Ptr[CFuncPtr4[Ptr[GDrive], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def poll_for_media_=(value: CFuncPtr4[Ptr[GDrive], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(128).asInstanceOf[Ptr[CFuncPtr4[Ptr[GDrive], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def poll_for_media_finish: CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def poll_for_media_finish_=(value: CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def get_identifier: CFuncPtr2[Ptr[GDrive], CString, CString] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDrive], CString, CString]]]
    def get_identifier_=(value: CFuncPtr2[Ptr[GDrive], CString, CString]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDrive], CString, CString]]] = value
    def enumerate_identifiers: CFuncPtr1[Ptr[GDrive], Ptr[CString]] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Ptr[CString]]]]
    def enumerate_identifiers_=(value: CFuncPtr1[Ptr[GDrive], Ptr[CString]]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Ptr[CString]]]] = value
    def get_start_stop_type: CFuncPtr1[Ptr[GDrive], GDriveStartStopType] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], GDriveStartStopType]]]
    def get_start_stop_type_=(value: CFuncPtr1[Ptr[GDrive], GDriveStartStopType]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], GDriveStartStopType]]] = value
    def can_start: CFuncPtr1[Ptr[GDrive], gboolean] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]]
    def can_start_=(value: CFuncPtr1[Ptr[GDrive], gboolean]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]] = value
    def can_start_degraded: CFuncPtr1[Ptr[GDrive], gboolean] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]]
    def can_start_degraded_=(value: CFuncPtr1[Ptr[GDrive], gboolean]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]] = value
    def start: CFuncPtr6[Ptr[GDrive], GDriveStartFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr6[Ptr[GDrive], GDriveStartFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def start_=(value: CFuncPtr6[Ptr[GDrive], GDriveStartFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr6[Ptr[GDrive], GDriveStartFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def start_finish: CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def start_finish_=(value: CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def can_stop: CFuncPtr1[Ptr[GDrive], gboolean] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]]
    def can_stop_=(value: CFuncPtr1[Ptr[GDrive], gboolean]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]] = value
    def stop: CFuncPtr6[Ptr[GDrive], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr6[Ptr[GDrive], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def stop_=(value: CFuncPtr6[Ptr[GDrive], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr6[Ptr[GDrive], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def stop_finish: CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(216).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def stop_finish_=(value: CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(216).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def stop_button: CFuncPtr1[Ptr[GDrive], Unit] = !struct.at(224).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Unit]]]
    def stop_button_=(value: CFuncPtr1[Ptr[GDrive], Unit]): Unit = !struct.at(224).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Unit]]] = value
    def eject_with_operation: CFuncPtr6[Ptr[GDrive], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(232).asInstanceOf[Ptr[CFuncPtr6[Ptr[GDrive], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def eject_with_operation_=(value: CFuncPtr6[Ptr[GDrive], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(232).asInstanceOf[Ptr[CFuncPtr6[Ptr[GDrive], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def eject_with_operation_finish: CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(240).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def eject_with_operation_finish_=(value: CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(240).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def get_sort_key: CFuncPtr1[Ptr[GDrive], Ptr[gchar]] = !struct.at(248).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Ptr[gchar]]]]
    def get_sort_key_=(value: CFuncPtr1[Ptr[GDrive], Ptr[gchar]]): Unit = !struct.at(248).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Ptr[gchar]]]] = value
    def get_symbolic_icon: CFuncPtr1[Ptr[GDrive], Ptr[GIcon]] = !struct.at(256).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Ptr[GIcon]]]]
    def get_symbolic_icon_=(value: CFuncPtr1[Ptr[GDrive], Ptr[GIcon]]): Unit = !struct.at(256).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Ptr[GIcon]]]] = value
    def is_removable: CFuncPtr1[Ptr[GDrive], gboolean] = !struct.at(264).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]]
    def is_removable_=(value: CFuncPtr1[Ptr[GDrive], gboolean]): Unit = !struct.at(264).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GDtlsClientConnection = CStruct0
object GDtlsClientConnection:
  given _tag: Tag[GDtlsClientConnection] = Tag.materializeCStruct0Tag

/**
 * GDtlsClientConnectionInterface: _iface: The parent interface.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsclientconnection.h
*/
opaque type GDtlsClientConnectionInterface = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GDtlsClientConnectionInterface:
  given _tag: Tag[GDtlsClientConnectionInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GDtlsClientConnectionInterface] = scala.scalanative.unsafe.alloc[GDtlsClientConnectionInterface](1)
  def apply(g_iface : GTypeInterface)(using Zone): Ptr[GDtlsClientConnectionInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    ____ptr
  extension (struct: GDtlsClientConnectionInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GDtlsConnection = CStruct0
object GDtlsConnection:
  given _tag: Tag[GDtlsConnection] = Tag.materializeCStruct0Tag

/**
 * GDtlsConnectionInterface: _iface: The parent interface. _certificate: Check whether to accept a certificate. : Perform a handshake operation. _async: Start an asynchronous handshake operation. _finish: Finish an asynchronous handshake operation. : Shut down one or both directions of the connection. _async: Start an asynchronous shutdown operation. _finish: Finish an asynchronous shutdown operation.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
*/
opaque type GDtlsConnectionInterface = CArray[CChar, Nat.Digit2[Nat._9, Nat._6]]
object GDtlsConnectionInterface:
  given _tag: Tag[GDtlsConnectionInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._9, Nat._6]](Tag.Byte, Tag.Digit2[Nat._9, Nat._6](Tag.Nat9, Tag.Nat6))
  def apply()(using Zone): Ptr[GDtlsConnectionInterface] = scala.scalanative.unsafe.alloc[GDtlsConnectionInterface](1)
  def apply(g_iface : GTypeInterface, accept_certificate : CFuncPtr3[Ptr[GDtlsConnection], Ptr[GTlsCertificate], GTlsCertificateFlags, gboolean], handshake : CFuncPtr3[Ptr[GDtlsConnection], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], handshake_async : CFuncPtr5[Ptr[GDtlsConnection], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], handshake_finish : CFuncPtr3[Ptr[GDtlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], shutdown : CFuncPtr5[Ptr[GDtlsConnection], gboolean, gboolean, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], shutdown_async : CFuncPtr7[Ptr[GDtlsConnection], gboolean, gboolean, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], shutdown_finish : CFuncPtr3[Ptr[GDtlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], set_advertised_protocols : CFuncPtr2[Ptr[GDtlsConnection], Ptr[Ptr[gchar]], Unit], get_negotiated_protocol : CFuncPtr1[Ptr[GDtlsConnection], Ptr[gchar]], get_binding_data : CFuncPtr4[Ptr[GDtlsConnection], GTlsChannelBindingType, Ptr[GByteArray], Ptr[Ptr[GError]], gboolean])(using Zone): Ptr[GDtlsConnectionInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).accept_certificate = accept_certificate
    (!____ptr).handshake = handshake
    (!____ptr).handshake_async = handshake_async
    (!____ptr).handshake_finish = handshake_finish
    (!____ptr).shutdown = shutdown
    (!____ptr).shutdown_async = shutdown_async
    (!____ptr).shutdown_finish = shutdown_finish
    (!____ptr).set_advertised_protocols = set_advertised_protocols
    (!____ptr).get_negotiated_protocol = get_negotiated_protocol
    (!____ptr).get_binding_data = get_binding_data
    ____ptr
  extension (struct: GDtlsConnectionInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def accept_certificate: CFuncPtr3[Ptr[GDtlsConnection], Ptr[GTlsCertificate], GTlsCertificateFlags, gboolean] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDtlsConnection], Ptr[GTlsCertificate], GTlsCertificateFlags, gboolean]]]
    def accept_certificate_=(value: CFuncPtr3[Ptr[GDtlsConnection], Ptr[GTlsCertificate], GTlsCertificateFlags, gboolean]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDtlsConnection], Ptr[GTlsCertificate], GTlsCertificateFlags, gboolean]]] = value
    def handshake: CFuncPtr3[Ptr[GDtlsConnection], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDtlsConnection], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def handshake_=(value: CFuncPtr3[Ptr[GDtlsConnection], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDtlsConnection], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def handshake_async: CFuncPtr5[Ptr[GDtlsConnection], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr5[Ptr[GDtlsConnection], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def handshake_async_=(value: CFuncPtr5[Ptr[GDtlsConnection], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr5[Ptr[GDtlsConnection], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def handshake_finish: CFuncPtr3[Ptr[GDtlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDtlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def handshake_finish_=(value: CFuncPtr3[Ptr[GDtlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDtlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def shutdown: CFuncPtr5[Ptr[GDtlsConnection], gboolean, gboolean, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr5[Ptr[GDtlsConnection], gboolean, gboolean, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def shutdown_=(value: CFuncPtr5[Ptr[GDtlsConnection], gboolean, gboolean, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr5[Ptr[GDtlsConnection], gboolean, gboolean, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def shutdown_async: CFuncPtr7[Ptr[GDtlsConnection], gboolean, gboolean, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(56).asInstanceOf[Ptr[CFuncPtr7[Ptr[GDtlsConnection], gboolean, gboolean, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def shutdown_async_=(value: CFuncPtr7[Ptr[GDtlsConnection], gboolean, gboolean, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(56).asInstanceOf[Ptr[CFuncPtr7[Ptr[GDtlsConnection], gboolean, gboolean, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def shutdown_finish: CFuncPtr3[Ptr[GDtlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(64).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDtlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def shutdown_finish_=(value: CFuncPtr3[Ptr[GDtlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(64).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDtlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def set_advertised_protocols: CFuncPtr2[Ptr[GDtlsConnection], Ptr[Ptr[gchar]], Unit] = !struct.at(72).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDtlsConnection], Ptr[Ptr[gchar]], Unit]]]
    def set_advertised_protocols_=(value: CFuncPtr2[Ptr[GDtlsConnection], Ptr[Ptr[gchar]], Unit]): Unit = !struct.at(72).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDtlsConnection], Ptr[Ptr[gchar]], Unit]]] = value
    def get_negotiated_protocol: CFuncPtr1[Ptr[GDtlsConnection], Ptr[gchar]] = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDtlsConnection], Ptr[gchar]]]]
    def get_negotiated_protocol_=(value: CFuncPtr1[Ptr[GDtlsConnection], Ptr[gchar]]): Unit = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDtlsConnection], Ptr[gchar]]]] = value
    def get_binding_data: CFuncPtr4[Ptr[GDtlsConnection], GTlsChannelBindingType, Ptr[GByteArray], Ptr[Ptr[GError]], gboolean] = !struct.at(88).asInstanceOf[Ptr[CFuncPtr4[Ptr[GDtlsConnection], GTlsChannelBindingType, Ptr[GByteArray], Ptr[Ptr[GError]], gboolean]]]
    def get_binding_data_=(value: CFuncPtr4[Ptr[GDtlsConnection], GTlsChannelBindingType, Ptr[GByteArray], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(88).asInstanceOf[Ptr[CFuncPtr4[Ptr[GDtlsConnection], GTlsChannelBindingType, Ptr[GByteArray], Ptr[Ptr[GError]], gboolean]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GDtlsServerConnection = CStruct0
object GDtlsServerConnection:
  given _tag: Tag[GDtlsServerConnection] = Tag.materializeCStruct0Tag

/**
 * GDtlsServerConnectionInterface: _iface: The parent interface.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsserverconnection.h
*/
opaque type GDtlsServerConnectionInterface = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GDtlsServerConnectionInterface:
  given _tag: Tag[GDtlsServerConnectionInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GDtlsServerConnectionInterface] = scala.scalanative.unsafe.alloc[GDtlsServerConnectionInterface](1)
  def apply(g_iface : GTypeInterface)(using Zone): Ptr[GDtlsServerConnectionInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    ____ptr
  extension (struct: GDtlsServerConnectionInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gemblem.h
*/
opaque type GEmblem = CStruct0
object GEmblem:
  given _tag: Tag[GEmblem] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gemblem.h
*/
opaque type GEmblemClass = CStruct0
object GEmblemClass:
  given _tag: Tag[GEmblemClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gemblemedicon.h
*/
opaque type GEmblemedIcon = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GEmblemedIcon:
  given _tag: Tag[GEmblemedIcon] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GEmblemedIcon] = scala.scalanative.unsafe.alloc[GEmblemedIcon](1)
  def apply(parent_instance : GObject, priv : Ptr[GEmblemedIconPrivate])(using Zone): Ptr[GEmblemedIcon] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GEmblemedIcon)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GEmblemedIconPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GEmblemedIconPrivate]]]
    def priv_=(value: Ptr[GEmblemedIconPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GEmblemedIconPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gemblemedicon.h
*/
opaque type GEmblemedIconClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object GEmblemedIconClass:
  given _tag: Tag[GEmblemedIconClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[GEmblemedIconClass] = scala.scalanative.unsafe.alloc[GEmblemedIconClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[GEmblemedIconClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: GEmblemedIconClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gemblemedicon.h
*/
opaque type GEmblemedIconPrivate = CStruct0
object GEmblemedIconPrivate:
  given _tag: Tag[GEmblemedIconPrivate] = Tag.materializeCStruct0Tag

/**
 * GEnumClass: _type_class: the parent class : the smallest possible value. : the largest possible value. _values: the number of possible values. : an array of #GEnumValue structs describing the individual values.

 * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
*/
opaque type GEnumClass = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GEnumClass:
  given _tag: Tag[GEnumClass] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GEnumClass] = scala.scalanative.unsafe.alloc[GEnumClass](1)
  def apply(g_type_class : GTypeClass, minimum : gint, maximum : gint, n_values : guint, values : Ptr[GEnumValue])(using Zone): Ptr[GEnumClass] = 
    val ____ptr = apply()
    (!____ptr).g_type_class = g_type_class
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).n_values = n_values
    (!____ptr).values = values
    ____ptr
  extension (struct: GEnumClass)
    def g_type_class: GTypeClass = !struct.at(0).asInstanceOf[Ptr[GTypeClass]]
    def g_type_class_=(value: GTypeClass): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeClass]] = value
    def minimum: gint = !struct.at(8).asInstanceOf[Ptr[gint]]
    def minimum_=(value: gint): Unit = !struct.at(8).asInstanceOf[Ptr[gint]] = value
    def maximum: gint = !struct.at(12).asInstanceOf[Ptr[gint]]
    def maximum_=(value: gint): Unit = !struct.at(12).asInstanceOf[Ptr[gint]] = value
    def n_values: guint = !struct.at(16).asInstanceOf[Ptr[guint]]
    def n_values_=(value: guint): Unit = !struct.at(16).asInstanceOf[Ptr[guint]] = value
    def values: Ptr[GEnumValue] = !struct.at(24).asInstanceOf[Ptr[Ptr[GEnumValue]]]
    def values_=(value: Ptr[GEnumValue]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GEnumValue]]] = value

/**
 * GEnumValue: : the enum value _name: the name of the value _nick: the nickname of the value

 * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
*/
opaque type GEnumValue = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GEnumValue:
  given _tag: Tag[GEnumValue] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GEnumValue] = scala.scalanative.unsafe.alloc[GEnumValue](1)
  def apply(value : gint, value_name : Ptr[gchar], value_nick : Ptr[gchar])(using Zone): Ptr[GEnumValue] = 
    val ____ptr = apply()
    (!____ptr).value = value
    (!____ptr).value_name = value_name
    (!____ptr).value_nick = value_nick
    ____ptr
  extension (struct: GEnumValue)
    def value: gint = !struct.at(0).asInstanceOf[Ptr[gint]]
    def value_=(value: gint): Unit = !struct.at(0).asInstanceOf[Ptr[gint]] = value
    def value_name: Ptr[gchar] = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]]
    def value_name_=(value: Ptr[gchar]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def value_nick: Ptr[gchar] = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]]
    def value_nick_=(value: Ptr[gchar]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gerror.h
*/
opaque type GError = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GError:
  given _tag: Tag[GError] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GError] = scala.scalanative.unsafe.alloc[GError](1)
  def apply(domain : GQuark, code : gint, message : Ptr[gchar])(using Zone): Ptr[GError] = 
    val ____ptr = apply()
    (!____ptr).domain = domain
    (!____ptr).code = code
    (!____ptr).message = message
    ____ptr
  extension (struct: GError)
    def domain: GQuark = !struct.at(0).asInstanceOf[Ptr[GQuark]]
    def domain_=(value: GQuark): Unit = !struct.at(0).asInstanceOf[Ptr[GQuark]] = value
    def code: gint = !struct.at(4).asInstanceOf[Ptr[gint]]
    def code_=(value: gint): Unit = !struct.at(4).asInstanceOf[Ptr[gint]] = value
    def message: Ptr[gchar] = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]]
    def message_=(value: Ptr[gchar]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GFile = CStruct0
object GFile:
  given _tag: Tag[GFile] = Tag.materializeCStruct0Tag

/**
 * GFileAttributeInfo: : the #GFileAttributeType type of the attribute. : a set of #GFileAttributeInfoFlags.

 * [bindgen] header: /usr/include/glib-2.0/gio/gfileattribute.h
*/
opaque type GFileAttributeInfo = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GFileAttributeInfo:
  given _tag: Tag[GFileAttributeInfo] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GFileAttributeInfo] = scala.scalanative.unsafe.alloc[GFileAttributeInfo](1)
  def apply(name : CString, `type` : GFileAttributeType, flags : GFileAttributeInfoFlags)(using Zone): Ptr[GFileAttributeInfo] = 
    val ____ptr = apply()
    (!____ptr).name = name
    (!____ptr).`type` = `type`
    (!____ptr).flags = flags
    ____ptr
  extension (struct: GFileAttributeInfo)
    def name: CString = !struct.at(0).asInstanceOf[Ptr[CString]]
    def name_=(value: CString): Unit = !struct.at(0).asInstanceOf[Ptr[CString]] = value
    def `type`: GFileAttributeType = !struct.at(8).asInstanceOf[Ptr[GFileAttributeType]]
    def type_=(value: GFileAttributeType): Unit = !struct.at(8).asInstanceOf[Ptr[GFileAttributeType]] = value
    def flags: GFileAttributeInfoFlags = !struct.at(12).asInstanceOf[Ptr[GFileAttributeInfoFlags]]
    def flags_=(value: GFileAttributeInfoFlags): Unit = !struct.at(12).asInstanceOf[Ptr[GFileAttributeInfoFlags]] = value

/**
 * GFileAttributeInfoList: : an array of #GFileAttributeInfos. _infos: the number of values in the array.

 * [bindgen] header: /usr/include/glib-2.0/gio/gfileattribute.h
*/
opaque type GFileAttributeInfoList = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GFileAttributeInfoList:
  given _tag: Tag[GFileAttributeInfoList] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GFileAttributeInfoList] = scala.scalanative.unsafe.alloc[GFileAttributeInfoList](1)
  def apply(infos : Ptr[GFileAttributeInfo], n_infos : CInt)(using Zone): Ptr[GFileAttributeInfoList] = 
    val ____ptr = apply()
    (!____ptr).infos = infos
    (!____ptr).n_infos = n_infos
    ____ptr
  extension (struct: GFileAttributeInfoList)
    def infos: Ptr[GFileAttributeInfo] = !struct.at(0).asInstanceOf[Ptr[Ptr[GFileAttributeInfo]]]
    def infos_=(value: Ptr[GFileAttributeInfo]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[GFileAttributeInfo]]] = value
    def n_infos: CInt = !struct.at(8).asInstanceOf[Ptr[CInt]]
    def n_infos_=(value: CInt): Unit = !struct.at(8).asInstanceOf[Ptr[CInt]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GFileAttributeMatcher = CStruct0
object GFileAttributeMatcher:
  given _tag: Tag[GFileAttributeMatcher] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GFileDescriptorBased = CStruct0
object GFileDescriptorBased:
  given _tag: Tag[GFileDescriptorBased] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileenumerator.h
*/
opaque type GFileEnumerator = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GFileEnumerator:
  given _tag: Tag[GFileEnumerator] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GFileEnumerator] = scala.scalanative.unsafe.alloc[GFileEnumerator](1)
  def apply(parent_instance : GObject, priv : Ptr[GFileEnumeratorPrivate])(using Zone): Ptr[GFileEnumerator] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GFileEnumerator)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GFileEnumeratorPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GFileEnumeratorPrivate]]]
    def priv_=(value: Ptr[GFileEnumeratorPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GFileEnumeratorPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileenumerator.h
*/
opaque type GFileEnumeratorClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._4, Nat._0]]
object GFileEnumeratorClass:
  given _tag: Tag[GFileEnumeratorClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._4, Nat._0]](Tag.Byte, Tag.Digit3[Nat._2, Nat._4, Nat._0](Tag.Nat2, Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GFileEnumeratorClass] = scala.scalanative.unsafe.alloc[GFileEnumeratorClass](1)
  def apply(parent_class : GObjectClass, next_file : CFuncPtr3[Ptr[GFileEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]], close_fn : CFuncPtr3[Ptr[GFileEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], next_files_async : CFuncPtr6[Ptr[GFileEnumerator], CInt, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], next_files_finish : CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]], close_async : CFuncPtr5[Ptr[GFileEnumerator], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], close_finish : CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit], _g_reserved7 : CFuncPtr0[Unit])(using Zone): Ptr[GFileEnumeratorClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).next_file = next_file
    (!____ptr).close_fn = close_fn
    (!____ptr).next_files_async = next_files_async
    (!____ptr).next_files_finish = next_files_finish
    (!____ptr).close_async = close_async
    (!____ptr).close_finish = close_finish
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    (!____ptr)._g_reserved7 = _g_reserved7
    ____ptr
  extension (struct: GFileEnumeratorClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def next_file: CFuncPtr3[Ptr[GFileEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFileEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]]]
    def next_file_=(value: CFuncPtr3[Ptr[GFileEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFileEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]]] = value
    def close_fn: CFuncPtr3[Ptr[GFileEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFileEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def close_fn_=(value: CFuncPtr3[Ptr[GFileEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFileEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def next_files_async: CFuncPtr6[Ptr[GFileEnumerator], CInt, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFileEnumerator], CInt, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def next_files_async_=(value: CFuncPtr6[Ptr[GFileEnumerator], CInt, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFileEnumerator], CInt, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def next_files_finish: CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]]]
    def next_files_finish_=(value: CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]]] = value
    def close_async: CFuncPtr5[Ptr[GFileEnumerator], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFileEnumerator], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def close_async_=(value: CFuncPtr5[Ptr[GFileEnumerator], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFileEnumerator], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def close_finish: CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def close_finish_=(value: CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(216).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(216).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved6: CFuncPtr0[Unit] = !struct.at(224).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at(224).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved7: CFuncPtr0[Unit] = !struct.at(232).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved7_=(value: CFuncPtr0[Unit]): Unit = !struct.at(232).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileenumerator.h
*/
opaque type GFileEnumeratorPrivate = CStruct0
object GFileEnumeratorPrivate:
  given _tag: Tag[GFileEnumeratorPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileiostream.h
*/
opaque type GFileIOStream = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GFileIOStream:
  given _tag: Tag[GFileIOStream] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GFileIOStream] = scala.scalanative.unsafe.alloc[GFileIOStream](1)
  def apply(parent_instance : GIOStream, priv : Ptr[GFileIOStreamPrivate])(using Zone): Ptr[GFileIOStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GFileIOStream)
    def parent_instance: GIOStream = !struct.at(0).asInstanceOf[Ptr[GIOStream]]
    def parent_instance_=(value: GIOStream): Unit = !struct.at(0).asInstanceOf[Ptr[GIOStream]] = value
    def priv: Ptr[GFileIOStreamPrivate] = !struct.at(32).asInstanceOf[Ptr[Ptr[GFileIOStreamPrivate]]]
    def priv_=(value: Ptr[GFileIOStreamPrivate]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[GFileIOStreamPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileiostream.h
*/
opaque type GFileIOStreamClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._6, Nat._8]]
object GFileIOStreamClass:
  given _tag: Tag[GFileIOStreamClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._6, Nat._8]](Tag.Byte, Tag.Digit3[Nat._3, Nat._6, Nat._8](Tag.Nat3, Tag.Nat6, Tag.Nat8))
  def apply()(using Zone): Ptr[GFileIOStreamClass] = scala.scalanative.unsafe.alloc[GFileIOStreamClass](1)
  def apply(parent_class : GIOStreamClass, tell : CFuncPtr1[Ptr[GFileIOStream], goffset], can_seek : CFuncPtr1[Ptr[GFileIOStream], gboolean], seek : CFuncPtr5[Ptr[GFileIOStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], can_truncate : CFuncPtr1[Ptr[GFileIOStream], gboolean], truncate_fn : CFuncPtr4[Ptr[GFileIOStream], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], query_info : CFuncPtr4[Ptr[GFileIOStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]], query_info_async : CFuncPtr6[Ptr[GFileIOStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], query_info_finish : CFuncPtr3[Ptr[GFileIOStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]], get_etag : CFuncPtr1[Ptr[GFileIOStream], CString], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[GFileIOStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).tell = tell
    (!____ptr).can_seek = can_seek
    (!____ptr).seek = seek
    (!____ptr).can_truncate = can_truncate
    (!____ptr).truncate_fn = truncate_fn
    (!____ptr).query_info = query_info
    (!____ptr).query_info_async = query_info_async
    (!____ptr).query_info_finish = query_info_finish
    (!____ptr).get_etag = get_etag
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: GFileIOStreamClass)
    def parent_class: GIOStreamClass = !struct.at(0).asInstanceOf[Ptr[GIOStreamClass]]
    def parent_class_=(value: GIOStreamClass): Unit = !struct.at(0).asInstanceOf[Ptr[GIOStreamClass]] = value
    def tell: CFuncPtr1[Ptr[GFileIOStream], goffset] = !struct.at(256).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileIOStream], goffset]]]
    def tell_=(value: CFuncPtr1[Ptr[GFileIOStream], goffset]): Unit = !struct.at(256).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileIOStream], goffset]]] = value
    def can_seek: CFuncPtr1[Ptr[GFileIOStream], gboolean] = !struct.at(264).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileIOStream], gboolean]]]
    def can_seek_=(value: CFuncPtr1[Ptr[GFileIOStream], gboolean]): Unit = !struct.at(264).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileIOStream], gboolean]]] = value
    def seek: CFuncPtr5[Ptr[GFileIOStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(272).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFileIOStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def seek_=(value: CFuncPtr5[Ptr[GFileIOStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(272).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFileIOStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def can_truncate: CFuncPtr1[Ptr[GFileIOStream], gboolean] = !struct.at(280).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileIOStream], gboolean]]]
    def can_truncate_=(value: CFuncPtr1[Ptr[GFileIOStream], gboolean]): Unit = !struct.at(280).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileIOStream], gboolean]]] = value
    def truncate_fn: CFuncPtr4[Ptr[GFileIOStream], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(288).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFileIOStream], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def truncate_fn_=(value: CFuncPtr4[Ptr[GFileIOStream], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(288).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFileIOStream], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def query_info: CFuncPtr4[Ptr[GFileIOStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]] = !struct.at(296).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFileIOStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]]]
    def query_info_=(value: CFuncPtr4[Ptr[GFileIOStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at(296).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFileIOStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]]] = value
    def query_info_async: CFuncPtr6[Ptr[GFileIOStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(304).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFileIOStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def query_info_async_=(value: CFuncPtr6[Ptr[GFileIOStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(304).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFileIOStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def query_info_finish: CFuncPtr3[Ptr[GFileIOStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]] = !struct.at(312).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFileIOStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]]]
    def query_info_finish_=(value: CFuncPtr3[Ptr[GFileIOStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at(312).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFileIOStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]]] = value
    def get_etag: CFuncPtr1[Ptr[GFileIOStream], CString] = !struct.at(320).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileIOStream], CString]]]
    def get_etag_=(value: CFuncPtr1[Ptr[GFileIOStream], CString]): Unit = !struct.at(320).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileIOStream], CString]]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(328).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(328).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(336).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(336).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(344).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(344).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(352).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(352).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(360).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(360).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileiostream.h
*/
opaque type GFileIOStreamPrivate = CStruct0
object GFileIOStreamPrivate:
  given _tag: Tag[GFileIOStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GFileIcon = CStruct0
object GFileIcon:
  given _tag: Tag[GFileIcon] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileicon.h
*/
opaque type GFileIconClass = CStruct0
object GFileIconClass:
  given _tag: Tag[GFileIconClass] = Tag.materializeCStruct0Tag

/**
 * GFileIface: _iface: The parent interface. : Duplicates a #GFile. : Creates a hash of a #GFile. : Checks equality of two given #GFiles. _uri_scheme: Checks to see if a #GFile has a given URI scheme. _uri_scheme: Gets the URI scheme for a #GFile. _basename: Gets the basename for a given #GFile. _path: Gets the current path within a #GFile. _uri: Gets a URI for the path within a #GFile. _parse_name: Gets the parsed name for the #GFile. _parent: Gets the parent directory for the #GFile. _matches: Checks whether a #GFile contains a specified file. _relative_path: Gets the path for a #GFile relative to a given path. _relative_path: Resolves a relative path for a #GFile to an absolute path. _child_for_display_name: Gets the child #GFile for a given display name. _children: Gets a #GFileEnumerator with the children of a #GFile. _children_async: Asynchronously gets a #GFileEnumerator with the children of a #GFile. _children_finish: Finishes asynchronously enumerating the children. _info: Gets the #GFileInfo for a #GFile. _info_async: Asynchronously gets the #GFileInfo for a #GFile. _info_finish: Finishes an asynchronous query info operation. _filesystem_info: Gets a #GFileInfo for the file system #GFile is on. _filesystem_info_async: Asynchronously gets a #GFileInfo for the file system #GFile is on. _filesystem_info_finish: Finishes asynchronously getting the file system info. _enclosing_mount: Gets a #GMount for the #GFile. _enclosing_mount_async: Asynchronously gets the #GMount for a #GFile. _enclosing_mount_finish: Finishes asynchronously getting the volume.

 * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
*/
opaque type GFileIface = CArray[CChar, Nat.Digit3[Nat._8, Nat._4, Nat._0]]
object GFileIface:
  given _tag: Tag[GFileIface] = Tag.CArray[CChar, Nat.Digit3[Nat._8, Nat._4, Nat._0]](Tag.Byte, Tag.Digit3[Nat._8, Nat._4, Nat._0](Tag.Nat8, Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GFileIface] = scala.scalanative.unsafe.alloc[GFileIface](1)
  def apply(g_iface : GTypeInterface, dup : CFuncPtr1[Ptr[GFile], Ptr[GFile]], hash : CFuncPtr1[Ptr[GFile], guint], equal : CFuncPtr2[Ptr[GFile], Ptr[GFile], gboolean], is_native : CFuncPtr1[Ptr[GFile], gboolean], has_uri_scheme : CFuncPtr2[Ptr[GFile], CString, gboolean], get_uri_scheme : CFuncPtr1[Ptr[GFile], CString], get_basename : CFuncPtr1[Ptr[GFile], CString], get_path : CFuncPtr1[Ptr[GFile], CString], get_uri : CFuncPtr1[Ptr[GFile], CString], get_parse_name : CFuncPtr1[Ptr[GFile], CString], get_parent : CFuncPtr1[Ptr[GFile], Ptr[GFile]], prefix_matches : CFuncPtr2[Ptr[GFile], Ptr[GFile], gboolean], get_relative_path : CFuncPtr2[Ptr[GFile], Ptr[GFile], CString], resolve_relative_path : CFuncPtr2[Ptr[GFile], CString, Ptr[GFile]], get_child_for_display_name : CFuncPtr3[Ptr[GFile], CString, Ptr[Ptr[GError]], Ptr[GFile]], enumerate_children : CFuncPtr5[Ptr[GFile], CString, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileEnumerator]], enumerate_children_async : CFuncPtr7[Ptr[GFile], CString, GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], enumerate_children_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileEnumerator]], query_info : CFuncPtr5[Ptr[GFile], CString, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]], query_info_async : CFuncPtr7[Ptr[GFile], CString, GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], query_info_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]], query_filesystem_info : CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]], query_filesystem_info_async : CFuncPtr6[Ptr[GFile], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], query_filesystem_info_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]], find_enclosing_mount : CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GMount]], find_enclosing_mount_async : CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], find_enclosing_mount_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GMount]], set_display_name : CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFile]], set_display_name_async : CFuncPtr6[Ptr[GFile], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], set_display_name_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFile]], query_settable_attributes : CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileAttributeInfoList]], _query_settable_attributes_async : CFuncPtr0[Unit], _query_settable_attributes_finish : CFuncPtr0[Unit], query_writable_namespaces : CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileAttributeInfoList]], _query_writable_namespaces_async : CFuncPtr0[Unit], _query_writable_namespaces_finish : CFuncPtr0[Unit], set_attribute : CFuncPtr7[Ptr[GFile], CString, GFileAttributeType, gpointer, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], set_attributes_from_info : CFuncPtr5[Ptr[GFile], Ptr[GFileInfo], GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], set_attributes_async : CFuncPtr7[Ptr[GFile], Ptr[GFileInfo], GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], set_attributes_finish : CFuncPtr4[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GFileInfo]], Ptr[Ptr[GError]], gboolean], read_fn : CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInputStream]], read_async : CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], read_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInputStream]], append_to : CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]], append_to_async : CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], append_to_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]], create : CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]], create_async : CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], create_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]], replace : CFuncPtr6[Ptr[GFile], CString, gboolean, GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]], replace_async : CFuncPtr8[Ptr[GFile], CString, gboolean, GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], replace_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]], delete_file : CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], delete_file_async : CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], delete_file_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], trash : CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], trash_async : CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], trash_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], make_directory : CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], make_directory_async : CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], make_directory_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], make_symbolic_link : CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], _make_symbolic_link_async : CFuncPtr0[Unit], _make_symbolic_link_finish : CFuncPtr0[Unit], copy : CFuncPtr7[Ptr[GFile], Ptr[GFile], GFileCopyFlags, Ptr[GCancellable], GFileProgressCallback, gpointer, Ptr[Ptr[GError]], gboolean], copy_async : CFuncPtr9[Ptr[GFile], Ptr[GFile], GFileCopyFlags, CInt, Ptr[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit], copy_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], move : CFuncPtr7[Ptr[GFile], Ptr[GFile], GFileCopyFlags, Ptr[GCancellable], GFileProgressCallback, gpointer, Ptr[Ptr[GError]], gboolean], move_async : CFuncPtr9[Ptr[GFile], Ptr[GFile], GFileCopyFlags, CInt, Ptr[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit], move_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], mount_mountable : CFuncPtr6[Ptr[GFile], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], mount_mountable_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFile]], unmount_mountable : CFuncPtr5[Ptr[GFile], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], unmount_mountable_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], eject_mountable : CFuncPtr5[Ptr[GFile], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], eject_mountable_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], mount_enclosing_volume : CFuncPtr6[Ptr[GFile], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], mount_enclosing_volume_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], monitor_dir : CFuncPtr4[Ptr[GFile], GFileMonitorFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileMonitor]], monitor_file : CFuncPtr4[Ptr[GFile], GFileMonitorFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileMonitor]], open_readwrite : CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]], open_readwrite_async : CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], open_readwrite_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]], create_readwrite : CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]], create_readwrite_async : CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], create_readwrite_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]], replace_readwrite : CFuncPtr6[Ptr[GFile], CString, gboolean, GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]], replace_readwrite_async : CFuncPtr8[Ptr[GFile], CString, gboolean, GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], replace_readwrite_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]], start_mountable : CFuncPtr6[Ptr[GFile], GDriveStartFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], start_mountable_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], stop_mountable : CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], stop_mountable_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], supports_thread_contexts : gboolean, unmount_mountable_with_operation : CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], unmount_mountable_with_operation_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], eject_mountable_with_operation : CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], eject_mountable_with_operation_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], poll_mountable : CFuncPtr4[Ptr[GFile], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], poll_mountable_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], measure_disk_usage : CFuncPtr9[Ptr[GFile], GFileMeasureFlags, Ptr[GCancellable], GFileMeasureProgressCallback, gpointer, Ptr[guint64], Ptr[guint64], Ptr[guint64], Ptr[Ptr[GError]], gboolean], measure_disk_usage_async : CFuncPtr8[Ptr[GFile], GFileMeasureFlags, gint, Ptr[GCancellable], GFileMeasureProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit], measure_disk_usage_finish : CFuncPtr6[Ptr[GFile], Ptr[GAsyncResult], Ptr[guint64], Ptr[guint64], Ptr[guint64], Ptr[Ptr[GError]], gboolean])(using Zone): Ptr[GFileIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).dup = dup
    (!____ptr).hash = hash
    (!____ptr).equal = equal
    (!____ptr).is_native = is_native
    (!____ptr).has_uri_scheme = has_uri_scheme
    (!____ptr).get_uri_scheme = get_uri_scheme
    (!____ptr).get_basename = get_basename
    (!____ptr).get_path = get_path
    (!____ptr).get_uri = get_uri
    (!____ptr).get_parse_name = get_parse_name
    (!____ptr).get_parent = get_parent
    (!____ptr).prefix_matches = prefix_matches
    (!____ptr).get_relative_path = get_relative_path
    (!____ptr).resolve_relative_path = resolve_relative_path
    (!____ptr).get_child_for_display_name = get_child_for_display_name
    (!____ptr).enumerate_children = enumerate_children
    (!____ptr).enumerate_children_async = enumerate_children_async
    (!____ptr).enumerate_children_finish = enumerate_children_finish
    (!____ptr).query_info = query_info
    (!____ptr).query_info_async = query_info_async
    (!____ptr).query_info_finish = query_info_finish
    (!____ptr).query_filesystem_info = query_filesystem_info
    (!____ptr).query_filesystem_info_async = query_filesystem_info_async
    (!____ptr).query_filesystem_info_finish = query_filesystem_info_finish
    (!____ptr).find_enclosing_mount = find_enclosing_mount
    (!____ptr).find_enclosing_mount_async = find_enclosing_mount_async
    (!____ptr).find_enclosing_mount_finish = find_enclosing_mount_finish
    (!____ptr).set_display_name = set_display_name
    (!____ptr).set_display_name_async = set_display_name_async
    (!____ptr).set_display_name_finish = set_display_name_finish
    (!____ptr).query_settable_attributes = query_settable_attributes
    (!____ptr)._query_settable_attributes_async = _query_settable_attributes_async
    (!____ptr)._query_settable_attributes_finish = _query_settable_attributes_finish
    (!____ptr).query_writable_namespaces = query_writable_namespaces
    (!____ptr)._query_writable_namespaces_async = _query_writable_namespaces_async
    (!____ptr)._query_writable_namespaces_finish = _query_writable_namespaces_finish
    (!____ptr).set_attribute = set_attribute
    (!____ptr).set_attributes_from_info = set_attributes_from_info
    (!____ptr).set_attributes_async = set_attributes_async
    (!____ptr).set_attributes_finish = set_attributes_finish
    (!____ptr).read_fn = read_fn
    (!____ptr).read_async = read_async
    (!____ptr).read_finish = read_finish
    (!____ptr).append_to = append_to
    (!____ptr).append_to_async = append_to_async
    (!____ptr).append_to_finish = append_to_finish
    (!____ptr).create = create
    (!____ptr).create_async = create_async
    (!____ptr).create_finish = create_finish
    (!____ptr).replace = replace
    (!____ptr).replace_async = replace_async
    (!____ptr).replace_finish = replace_finish
    (!____ptr).delete_file = delete_file
    (!____ptr).delete_file_async = delete_file_async
    (!____ptr).delete_file_finish = delete_file_finish
    (!____ptr).trash = trash
    (!____ptr).trash_async = trash_async
    (!____ptr).trash_finish = trash_finish
    (!____ptr).make_directory = make_directory
    (!____ptr).make_directory_async = make_directory_async
    (!____ptr).make_directory_finish = make_directory_finish
    (!____ptr).make_symbolic_link = make_symbolic_link
    (!____ptr)._make_symbolic_link_async = _make_symbolic_link_async
    (!____ptr)._make_symbolic_link_finish = _make_symbolic_link_finish
    (!____ptr).copy = copy
    (!____ptr).copy_async = copy_async
    (!____ptr).copy_finish = copy_finish
    (!____ptr).move = move
    (!____ptr).move_async = move_async
    (!____ptr).move_finish = move_finish
    (!____ptr).mount_mountable = mount_mountable
    (!____ptr).mount_mountable_finish = mount_mountable_finish
    (!____ptr).unmount_mountable = unmount_mountable
    (!____ptr).unmount_mountable_finish = unmount_mountable_finish
    (!____ptr).eject_mountable = eject_mountable
    (!____ptr).eject_mountable_finish = eject_mountable_finish
    (!____ptr).mount_enclosing_volume = mount_enclosing_volume
    (!____ptr).mount_enclosing_volume_finish = mount_enclosing_volume_finish
    (!____ptr).monitor_dir = monitor_dir
    (!____ptr).monitor_file = monitor_file
    (!____ptr).open_readwrite = open_readwrite
    (!____ptr).open_readwrite_async = open_readwrite_async
    (!____ptr).open_readwrite_finish = open_readwrite_finish
    (!____ptr).create_readwrite = create_readwrite
    (!____ptr).create_readwrite_async = create_readwrite_async
    (!____ptr).create_readwrite_finish = create_readwrite_finish
    (!____ptr).replace_readwrite = replace_readwrite
    (!____ptr).replace_readwrite_async = replace_readwrite_async
    (!____ptr).replace_readwrite_finish = replace_readwrite_finish
    (!____ptr).start_mountable = start_mountable
    (!____ptr).start_mountable_finish = start_mountable_finish
    (!____ptr).stop_mountable = stop_mountable
    (!____ptr).stop_mountable_finish = stop_mountable_finish
    (!____ptr).supports_thread_contexts = supports_thread_contexts
    (!____ptr).unmount_mountable_with_operation = unmount_mountable_with_operation
    (!____ptr).unmount_mountable_with_operation_finish = unmount_mountable_with_operation_finish
    (!____ptr).eject_mountable_with_operation = eject_mountable_with_operation
    (!____ptr).eject_mountable_with_operation_finish = eject_mountable_with_operation_finish
    (!____ptr).poll_mountable = poll_mountable
    (!____ptr).poll_mountable_finish = poll_mountable_finish
    (!____ptr).measure_disk_usage = measure_disk_usage
    (!____ptr).measure_disk_usage_async = measure_disk_usage_async
    (!____ptr).measure_disk_usage_finish = measure_disk_usage_finish
    ____ptr
  extension (struct: GFileIface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def dup: CFuncPtr1[Ptr[GFile], Ptr[GFile]] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], Ptr[GFile]]]]
    def dup_=(value: CFuncPtr1[Ptr[GFile], Ptr[GFile]]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], Ptr[GFile]]]] = value
    def hash: CFuncPtr1[Ptr[GFile], guint] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], guint]]]
    def hash_=(value: CFuncPtr1[Ptr[GFile], guint]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], guint]]] = value
    def equal: CFuncPtr2[Ptr[GFile], Ptr[GFile], gboolean] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GFile], Ptr[GFile], gboolean]]]
    def equal_=(value: CFuncPtr2[Ptr[GFile], Ptr[GFile], gboolean]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GFile], Ptr[GFile], gboolean]]] = value
    def is_native: CFuncPtr1[Ptr[GFile], gboolean] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], gboolean]]]
    def is_native_=(value: CFuncPtr1[Ptr[GFile], gboolean]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], gboolean]]] = value
    def has_uri_scheme: CFuncPtr2[Ptr[GFile], CString, gboolean] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr2[Ptr[GFile], CString, gboolean]]]
    def has_uri_scheme_=(value: CFuncPtr2[Ptr[GFile], CString, gboolean]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr2[Ptr[GFile], CString, gboolean]]] = value
    def get_uri_scheme: CFuncPtr1[Ptr[GFile], CString] = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], CString]]]
    def get_uri_scheme_=(value: CFuncPtr1[Ptr[GFile], CString]): Unit = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], CString]]] = value
    def get_basename: CFuncPtr1[Ptr[GFile], CString] = !struct.at(64).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], CString]]]
    def get_basename_=(value: CFuncPtr1[Ptr[GFile], CString]): Unit = !struct.at(64).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], CString]]] = value
    def get_path: CFuncPtr1[Ptr[GFile], CString] = !struct.at(72).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], CString]]]
    def get_path_=(value: CFuncPtr1[Ptr[GFile], CString]): Unit = !struct.at(72).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], CString]]] = value
    def get_uri: CFuncPtr1[Ptr[GFile], CString] = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], CString]]]
    def get_uri_=(value: CFuncPtr1[Ptr[GFile], CString]): Unit = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], CString]]] = value
    def get_parse_name: CFuncPtr1[Ptr[GFile], CString] = !struct.at(88).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], CString]]]
    def get_parse_name_=(value: CFuncPtr1[Ptr[GFile], CString]): Unit = !struct.at(88).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], CString]]] = value
    def get_parent: CFuncPtr1[Ptr[GFile], Ptr[GFile]] = !struct.at(96).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], Ptr[GFile]]]]
    def get_parent_=(value: CFuncPtr1[Ptr[GFile], Ptr[GFile]]): Unit = !struct.at(96).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], Ptr[GFile]]]] = value
    def prefix_matches: CFuncPtr2[Ptr[GFile], Ptr[GFile], gboolean] = !struct.at(104).asInstanceOf[Ptr[CFuncPtr2[Ptr[GFile], Ptr[GFile], gboolean]]]
    def prefix_matches_=(value: CFuncPtr2[Ptr[GFile], Ptr[GFile], gboolean]): Unit = !struct.at(104).asInstanceOf[Ptr[CFuncPtr2[Ptr[GFile], Ptr[GFile], gboolean]]] = value
    def get_relative_path: CFuncPtr2[Ptr[GFile], Ptr[GFile], CString] = !struct.at(112).asInstanceOf[Ptr[CFuncPtr2[Ptr[GFile], Ptr[GFile], CString]]]
    def get_relative_path_=(value: CFuncPtr2[Ptr[GFile], Ptr[GFile], CString]): Unit = !struct.at(112).asInstanceOf[Ptr[CFuncPtr2[Ptr[GFile], Ptr[GFile], CString]]] = value
    def resolve_relative_path: CFuncPtr2[Ptr[GFile], CString, Ptr[GFile]] = !struct.at(120).asInstanceOf[Ptr[CFuncPtr2[Ptr[GFile], CString, Ptr[GFile]]]]
    def resolve_relative_path_=(value: CFuncPtr2[Ptr[GFile], CString, Ptr[GFile]]): Unit = !struct.at(120).asInstanceOf[Ptr[CFuncPtr2[Ptr[GFile], CString, Ptr[GFile]]]] = value
    def get_child_for_display_name: CFuncPtr3[Ptr[GFile], CString, Ptr[Ptr[GError]], Ptr[GFile]] = !struct.at(128).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], CString, Ptr[Ptr[GError]], Ptr[GFile]]]]
    def get_child_for_display_name_=(value: CFuncPtr3[Ptr[GFile], CString, Ptr[Ptr[GError]], Ptr[GFile]]): Unit = !struct.at(128).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], CString, Ptr[Ptr[GError]], Ptr[GFile]]]] = value
    def enumerate_children: CFuncPtr5[Ptr[GFile], CString, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileEnumerator]] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CString, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileEnumerator]]]]
    def enumerate_children_=(value: CFuncPtr5[Ptr[GFile], CString, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileEnumerator]]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CString, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileEnumerator]]]] = value
    def enumerate_children_async: CFuncPtr7[Ptr[GFile], CString, GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], CString, GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def enumerate_children_async_=(value: CFuncPtr7[Ptr[GFile], CString, GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], CString, GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def enumerate_children_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileEnumerator]] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileEnumerator]]]]
    def enumerate_children_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileEnumerator]]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileEnumerator]]]] = value
    def query_info: CFuncPtr5[Ptr[GFile], CString, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CString, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]]]
    def query_info_=(value: CFuncPtr5[Ptr[GFile], CString, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CString, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]]] = value
    def query_info_async: CFuncPtr7[Ptr[GFile], CString, GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], CString, GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def query_info_async_=(value: CFuncPtr7[Ptr[GFile], CString, GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], CString, GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def query_info_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]]]
    def query_info_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]]] = value
    def query_filesystem_info: CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]]]
    def query_filesystem_info_=(value: CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]]] = value
    def query_filesystem_info_async: CFuncPtr6[Ptr[GFile], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def query_filesystem_info_async_=(value: CFuncPtr6[Ptr[GFile], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def query_filesystem_info_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]]]
    def query_filesystem_info_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]]] = value
    def find_enclosing_mount: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GMount]] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GMount]]]]
    def find_enclosing_mount_=(value: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GMount]]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GMount]]]] = value
    def find_enclosing_mount_async: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(216).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def find_enclosing_mount_async_=(value: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(216).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def find_enclosing_mount_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GMount]] = !struct.at(224).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GMount]]]]
    def find_enclosing_mount_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GMount]]): Unit = !struct.at(224).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GMount]]]] = value
    def set_display_name: CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFile]] = !struct.at(232).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFile]]]]
    def set_display_name_=(value: CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFile]]): Unit = !struct.at(232).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFile]]]] = value
    def set_display_name_async: CFuncPtr6[Ptr[GFile], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(240).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def set_display_name_async_=(value: CFuncPtr6[Ptr[GFile], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(240).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def set_display_name_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFile]] = !struct.at(248).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFile]]]]
    def set_display_name_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFile]]): Unit = !struct.at(248).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFile]]]] = value
    def query_settable_attributes: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileAttributeInfoList]] = !struct.at(256).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileAttributeInfoList]]]]
    def query_settable_attributes_=(value: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileAttributeInfoList]]): Unit = !struct.at(256).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileAttributeInfoList]]]] = value
    def _query_settable_attributes_async: CFuncPtr0[Unit] = !struct.at(264).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _query_settable_attributes_async_=(value: CFuncPtr0[Unit]): Unit = !struct.at(264).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _query_settable_attributes_finish: CFuncPtr0[Unit] = !struct.at(272).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _query_settable_attributes_finish_=(value: CFuncPtr0[Unit]): Unit = !struct.at(272).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def query_writable_namespaces: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileAttributeInfoList]] = !struct.at(280).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileAttributeInfoList]]]]
    def query_writable_namespaces_=(value: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileAttributeInfoList]]): Unit = !struct.at(280).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileAttributeInfoList]]]] = value
    def _query_writable_namespaces_async: CFuncPtr0[Unit] = !struct.at(288).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _query_writable_namespaces_async_=(value: CFuncPtr0[Unit]): Unit = !struct.at(288).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _query_writable_namespaces_finish: CFuncPtr0[Unit] = !struct.at(296).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _query_writable_namespaces_finish_=(value: CFuncPtr0[Unit]): Unit = !struct.at(296).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def set_attribute: CFuncPtr7[Ptr[GFile], CString, GFileAttributeType, gpointer, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(304).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], CString, GFileAttributeType, gpointer, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def set_attribute_=(value: CFuncPtr7[Ptr[GFile], CString, GFileAttributeType, gpointer, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(304).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], CString, GFileAttributeType, gpointer, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def set_attributes_from_info: CFuncPtr5[Ptr[GFile], Ptr[GFileInfo], GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(312).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], Ptr[GFileInfo], GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def set_attributes_from_info_=(value: CFuncPtr5[Ptr[GFile], Ptr[GFileInfo], GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(312).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], Ptr[GFileInfo], GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def set_attributes_async: CFuncPtr7[Ptr[GFile], Ptr[GFileInfo], GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(320).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], Ptr[GFileInfo], GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def set_attributes_async_=(value: CFuncPtr7[Ptr[GFile], Ptr[GFileInfo], GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(320).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], Ptr[GFileInfo], GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def set_attributes_finish: CFuncPtr4[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GFileInfo]], Ptr[Ptr[GError]], gboolean] = !struct.at(328).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GFileInfo]], Ptr[Ptr[GError]], gboolean]]]
    def set_attributes_finish_=(value: CFuncPtr4[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GFileInfo]], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(328).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GFileInfo]], Ptr[Ptr[GError]], gboolean]]] = value
    def read_fn: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInputStream]] = !struct.at(336).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInputStream]]]]
    def read_fn_=(value: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInputStream]]): Unit = !struct.at(336).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInputStream]]]] = value
    def read_async: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(344).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def read_async_=(value: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(344).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def read_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInputStream]] = !struct.at(352).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInputStream]]]]
    def read_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInputStream]]): Unit = !struct.at(352).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInputStream]]]] = value
    def append_to: CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]] = !struct.at(360).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]]
    def append_to_=(value: CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]): Unit = !struct.at(360).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]] = value
    def append_to_async: CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(368).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def append_to_async_=(value: CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(368).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def append_to_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]] = !struct.at(376).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]]
    def append_to_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]): Unit = !struct.at(376).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]] = value
    def create: CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]] = !struct.at(384).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]]
    def create_=(value: CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]): Unit = !struct.at(384).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]] = value
    def create_async: CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(392).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def create_async_=(value: CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(392).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def create_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]] = !struct.at(400).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]]
    def create_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]): Unit = !struct.at(400).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]] = value
    def replace: CFuncPtr6[Ptr[GFile], CString, gboolean, GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]] = !struct.at(408).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], CString, gboolean, GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]]
    def replace_=(value: CFuncPtr6[Ptr[GFile], CString, gboolean, GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]): Unit = !struct.at(408).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], CString, gboolean, GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]] = value
    def replace_async: CFuncPtr8[Ptr[GFile], CString, gboolean, GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(416).asInstanceOf[Ptr[CFuncPtr8[Ptr[GFile], CString, gboolean, GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def replace_async_=(value: CFuncPtr8[Ptr[GFile], CString, gboolean, GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(416).asInstanceOf[Ptr[CFuncPtr8[Ptr[GFile], CString, gboolean, GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def replace_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]] = !struct.at(424).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]]
    def replace_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]): Unit = !struct.at(424).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]] = value
    def delete_file: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(432).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def delete_file_=(value: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(432).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def delete_file_async: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(440).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def delete_file_async_=(value: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(440).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def delete_file_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(448).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def delete_file_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(448).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def trash: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(456).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def trash_=(value: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(456).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def trash_async: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(464).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def trash_async_=(value: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(464).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def trash_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(472).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def trash_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(472).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def make_directory: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(480).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def make_directory_=(value: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(480).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def make_directory_async: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(488).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def make_directory_async_=(value: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(488).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def make_directory_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(496).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def make_directory_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(496).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def make_symbolic_link: CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(504).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def make_symbolic_link_=(value: CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(504).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def _make_symbolic_link_async: CFuncPtr0[Unit] = !struct.at(512).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _make_symbolic_link_async_=(value: CFuncPtr0[Unit]): Unit = !struct.at(512).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _make_symbolic_link_finish: CFuncPtr0[Unit] = !struct.at(520).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _make_symbolic_link_finish_=(value: CFuncPtr0[Unit]): Unit = !struct.at(520).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def copy: CFuncPtr7[Ptr[GFile], Ptr[GFile], GFileCopyFlags, Ptr[GCancellable], GFileProgressCallback, gpointer, Ptr[Ptr[GError]], gboolean] = !struct.at(528).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], Ptr[GFile], GFileCopyFlags, Ptr[GCancellable], GFileProgressCallback, gpointer, Ptr[Ptr[GError]], gboolean]]]
    def copy_=(value: CFuncPtr7[Ptr[GFile], Ptr[GFile], GFileCopyFlags, Ptr[GCancellable], GFileProgressCallback, gpointer, Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(528).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], Ptr[GFile], GFileCopyFlags, Ptr[GCancellable], GFileProgressCallback, gpointer, Ptr[Ptr[GError]], gboolean]]] = value
    def copy_async: CFuncPtr9[Ptr[GFile], Ptr[GFile], GFileCopyFlags, CInt, Ptr[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit] = !struct.at(536).asInstanceOf[Ptr[CFuncPtr9[Ptr[GFile], Ptr[GFile], GFileCopyFlags, CInt, Ptr[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit]]]
    def copy_async_=(value: CFuncPtr9[Ptr[GFile], Ptr[GFile], GFileCopyFlags, CInt, Ptr[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(536).asInstanceOf[Ptr[CFuncPtr9[Ptr[GFile], Ptr[GFile], GFileCopyFlags, CInt, Ptr[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit]]] = value
    def copy_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(544).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def copy_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(544).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def move: CFuncPtr7[Ptr[GFile], Ptr[GFile], GFileCopyFlags, Ptr[GCancellable], GFileProgressCallback, gpointer, Ptr[Ptr[GError]], gboolean] = !struct.at(552).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], Ptr[GFile], GFileCopyFlags, Ptr[GCancellable], GFileProgressCallback, gpointer, Ptr[Ptr[GError]], gboolean]]]
    def move_=(value: CFuncPtr7[Ptr[GFile], Ptr[GFile], GFileCopyFlags, Ptr[GCancellable], GFileProgressCallback, gpointer, Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(552).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], Ptr[GFile], GFileCopyFlags, Ptr[GCancellable], GFileProgressCallback, gpointer, Ptr[Ptr[GError]], gboolean]]] = value
    def move_async: CFuncPtr9[Ptr[GFile], Ptr[GFile], GFileCopyFlags, CInt, Ptr[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit] = !struct.at(560).asInstanceOf[Ptr[CFuncPtr9[Ptr[GFile], Ptr[GFile], GFileCopyFlags, CInt, Ptr[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit]]]
    def move_async_=(value: CFuncPtr9[Ptr[GFile], Ptr[GFile], GFileCopyFlags, CInt, Ptr[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(560).asInstanceOf[Ptr[CFuncPtr9[Ptr[GFile], Ptr[GFile], GFileCopyFlags, CInt, Ptr[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit]]] = value
    def move_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(568).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def move_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(568).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def mount_mountable: CFuncPtr6[Ptr[GFile], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(576).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def mount_mountable_=(value: CFuncPtr6[Ptr[GFile], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(576).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def mount_mountable_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFile]] = !struct.at(584).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFile]]]]
    def mount_mountable_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFile]]): Unit = !struct.at(584).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFile]]]] = value
    def unmount_mountable: CFuncPtr5[Ptr[GFile], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(592).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def unmount_mountable_=(value: CFuncPtr5[Ptr[GFile], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(592).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def unmount_mountable_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(600).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def unmount_mountable_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(600).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def eject_mountable: CFuncPtr5[Ptr[GFile], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(608).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def eject_mountable_=(value: CFuncPtr5[Ptr[GFile], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(608).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def eject_mountable_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(616).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def eject_mountable_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(616).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def mount_enclosing_volume: CFuncPtr6[Ptr[GFile], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(624).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def mount_enclosing_volume_=(value: CFuncPtr6[Ptr[GFile], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(624).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def mount_enclosing_volume_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(632).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def mount_enclosing_volume_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(632).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def monitor_dir: CFuncPtr4[Ptr[GFile], GFileMonitorFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileMonitor]] = !struct.at(640).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], GFileMonitorFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileMonitor]]]]
    def monitor_dir_=(value: CFuncPtr4[Ptr[GFile], GFileMonitorFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileMonitor]]): Unit = !struct.at(640).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], GFileMonitorFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileMonitor]]]] = value
    def monitor_file: CFuncPtr4[Ptr[GFile], GFileMonitorFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileMonitor]] = !struct.at(648).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], GFileMonitorFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileMonitor]]]]
    def monitor_file_=(value: CFuncPtr4[Ptr[GFile], GFileMonitorFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileMonitor]]): Unit = !struct.at(648).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], GFileMonitorFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileMonitor]]]] = value
    def open_readwrite: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]] = !struct.at(656).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]]
    def open_readwrite_=(value: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]]): Unit = !struct.at(656).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]] = value
    def open_readwrite_async: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(664).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def open_readwrite_async_=(value: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(664).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def open_readwrite_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]] = !struct.at(672).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]]
    def open_readwrite_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]]): Unit = !struct.at(672).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]] = value
    def create_readwrite: CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]] = !struct.at(680).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]]
    def create_readwrite_=(value: CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]]): Unit = !struct.at(680).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]] = value
    def create_readwrite_async: CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(688).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def create_readwrite_async_=(value: CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(688).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def create_readwrite_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]] = !struct.at(696).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]]
    def create_readwrite_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]]): Unit = !struct.at(696).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]] = value
    def replace_readwrite: CFuncPtr6[Ptr[GFile], CString, gboolean, GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]] = !struct.at(704).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], CString, gboolean, GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]]
    def replace_readwrite_=(value: CFuncPtr6[Ptr[GFile], CString, gboolean, GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]]): Unit = !struct.at(704).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], CString, gboolean, GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]] = value
    def replace_readwrite_async: CFuncPtr8[Ptr[GFile], CString, gboolean, GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(712).asInstanceOf[Ptr[CFuncPtr8[Ptr[GFile], CString, gboolean, GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def replace_readwrite_async_=(value: CFuncPtr8[Ptr[GFile], CString, gboolean, GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(712).asInstanceOf[Ptr[CFuncPtr8[Ptr[GFile], CString, gboolean, GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def replace_readwrite_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]] = !struct.at(720).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]]
    def replace_readwrite_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]]): Unit = !struct.at(720).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]] = value
    def start_mountable: CFuncPtr6[Ptr[GFile], GDriveStartFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(728).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GDriveStartFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def start_mountable_=(value: CFuncPtr6[Ptr[GFile], GDriveStartFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(728).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GDriveStartFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def start_mountable_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(736).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def start_mountable_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(736).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def stop_mountable: CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(744).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def stop_mountable_=(value: CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(744).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def stop_mountable_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(752).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def stop_mountable_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(752).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def supports_thread_contexts: gboolean = !struct.at(760).asInstanceOf[Ptr[gboolean]]
    def supports_thread_contexts_=(value: gboolean): Unit = !struct.at(760).asInstanceOf[Ptr[gboolean]] = value
    def unmount_mountable_with_operation: CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(768).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def unmount_mountable_with_operation_=(value: CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(768).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def unmount_mountable_with_operation_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(776).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def unmount_mountable_with_operation_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(776).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def eject_mountable_with_operation: CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(784).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def eject_mountable_with_operation_=(value: CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(784).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def eject_mountable_with_operation_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(792).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def eject_mountable_with_operation_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(792).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def poll_mountable: CFuncPtr4[Ptr[GFile], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(800).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def poll_mountable_=(value: CFuncPtr4[Ptr[GFile], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(800).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def poll_mountable_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(808).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def poll_mountable_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(808).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def measure_disk_usage: CFuncPtr9[Ptr[GFile], GFileMeasureFlags, Ptr[GCancellable], GFileMeasureProgressCallback, gpointer, Ptr[guint64], Ptr[guint64], Ptr[guint64], Ptr[Ptr[GError]], gboolean] = !struct.at(816).asInstanceOf[Ptr[CFuncPtr9[Ptr[GFile], GFileMeasureFlags, Ptr[GCancellable], GFileMeasureProgressCallback, gpointer, Ptr[guint64], Ptr[guint64], Ptr[guint64], Ptr[Ptr[GError]], gboolean]]]
    def measure_disk_usage_=(value: CFuncPtr9[Ptr[GFile], GFileMeasureFlags, Ptr[GCancellable], GFileMeasureProgressCallback, gpointer, Ptr[guint64], Ptr[guint64], Ptr[guint64], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(816).asInstanceOf[Ptr[CFuncPtr9[Ptr[GFile], GFileMeasureFlags, Ptr[GCancellable], GFileMeasureProgressCallback, gpointer, Ptr[guint64], Ptr[guint64], Ptr[guint64], Ptr[Ptr[GError]], gboolean]]] = value
    def measure_disk_usage_async: CFuncPtr8[Ptr[GFile], GFileMeasureFlags, gint, Ptr[GCancellable], GFileMeasureProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit] = !struct.at(824).asInstanceOf[Ptr[CFuncPtr8[Ptr[GFile], GFileMeasureFlags, gint, Ptr[GCancellable], GFileMeasureProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit]]]
    def measure_disk_usage_async_=(value: CFuncPtr8[Ptr[GFile], GFileMeasureFlags, gint, Ptr[GCancellable], GFileMeasureProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(824).asInstanceOf[Ptr[CFuncPtr8[Ptr[GFile], GFileMeasureFlags, gint, Ptr[GCancellable], GFileMeasureProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit]]] = value
    def measure_disk_usage_finish: CFuncPtr6[Ptr[GFile], Ptr[GAsyncResult], Ptr[guint64], Ptr[guint64], Ptr[guint64], Ptr[Ptr[GError]], gboolean] = !struct.at(832).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], Ptr[GAsyncResult], Ptr[guint64], Ptr[guint64], Ptr[guint64], Ptr[Ptr[GError]], gboolean]]]
    def measure_disk_usage_finish_=(value: CFuncPtr6[Ptr[GFile], Ptr[GAsyncResult], Ptr[guint64], Ptr[guint64], Ptr[guint64], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(832).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], Ptr[GAsyncResult], Ptr[guint64], Ptr[guint64], Ptr[guint64], Ptr[Ptr[GError]], gboolean]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GFileInfo = CStruct0
object GFileInfo:
  given _tag: Tag[GFileInfo] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
*/
opaque type GFileInfoClass = CStruct0
object GFileInfoClass:
  given _tag: Tag[GFileInfoClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileinputstream.h
*/
opaque type GFileInputStream = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GFileInputStream:
  given _tag: Tag[GFileInputStream] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GFileInputStream] = scala.scalanative.unsafe.alloc[GFileInputStream](1)
  def apply(parent_instance : GInputStream, priv : Ptr[GFileInputStreamPrivate])(using Zone): Ptr[GFileInputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GFileInputStream)
    def parent_instance: GInputStream = !struct.at(0).asInstanceOf[Ptr[GInputStream]]
    def parent_instance_=(value: GInputStream): Unit = !struct.at(0).asInstanceOf[Ptr[GInputStream]] = value
    def priv: Ptr[GFileInputStreamPrivate] = !struct.at(32).asInstanceOf[Ptr[Ptr[GFileInputStreamPrivate]]]
    def priv_=(value: Ptr[GFileInputStreamPrivate]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[GFileInputStreamPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileinputstream.h
*/
opaque type GFileInputStreamClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._3, Nat._6]]
object GFileInputStreamClass:
  given _tag: Tag[GFileInputStreamClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._3, Nat._3, Nat._6](Tag.Nat3, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[GFileInputStreamClass] = scala.scalanative.unsafe.alloc[GFileInputStreamClass](1)
  def apply(parent_class : GInputStreamClass, tell : CFuncPtr1[Ptr[GFileInputStream], goffset], can_seek : CFuncPtr1[Ptr[GFileInputStream], gboolean], seek : CFuncPtr5[Ptr[GFileInputStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], query_info : CFuncPtr4[Ptr[GFileInputStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]], query_info_async : CFuncPtr6[Ptr[GFileInputStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], query_info_finish : CFuncPtr3[Ptr[GFileInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[GFileInputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).tell = tell
    (!____ptr).can_seek = can_seek
    (!____ptr).seek = seek
    (!____ptr).query_info = query_info
    (!____ptr).query_info_async = query_info_async
    (!____ptr).query_info_finish = query_info_finish
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: GFileInputStreamClass)
    def parent_class: GInputStreamClass = !struct.at(0).asInstanceOf[Ptr[GInputStreamClass]]
    def parent_class_=(value: GInputStreamClass): Unit = !struct.at(0).asInstanceOf[Ptr[GInputStreamClass]] = value
    def tell: CFuncPtr1[Ptr[GFileInputStream], goffset] = !struct.at(248).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileInputStream], goffset]]]
    def tell_=(value: CFuncPtr1[Ptr[GFileInputStream], goffset]): Unit = !struct.at(248).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileInputStream], goffset]]] = value
    def can_seek: CFuncPtr1[Ptr[GFileInputStream], gboolean] = !struct.at(256).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileInputStream], gboolean]]]
    def can_seek_=(value: CFuncPtr1[Ptr[GFileInputStream], gboolean]): Unit = !struct.at(256).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileInputStream], gboolean]]] = value
    def seek: CFuncPtr5[Ptr[GFileInputStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(264).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFileInputStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def seek_=(value: CFuncPtr5[Ptr[GFileInputStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(264).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFileInputStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def query_info: CFuncPtr4[Ptr[GFileInputStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]] = !struct.at(272).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFileInputStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]]]
    def query_info_=(value: CFuncPtr4[Ptr[GFileInputStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at(272).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFileInputStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]]] = value
    def query_info_async: CFuncPtr6[Ptr[GFileInputStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(280).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFileInputStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def query_info_async_=(value: CFuncPtr6[Ptr[GFileInputStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(280).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFileInputStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def query_info_finish: CFuncPtr3[Ptr[GFileInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]] = !struct.at(288).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFileInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]]]
    def query_info_finish_=(value: CFuncPtr3[Ptr[GFileInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at(288).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFileInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(296).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(296).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(304).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(304).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(312).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(312).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(320).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(320).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(328).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(328).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileinputstream.h
*/
opaque type GFileInputStreamPrivate = CStruct0
object GFileInputStreamPrivate:
  given _tag: Tag[GFileInputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * GFileMonitor:

 * [bindgen] header: /usr/include/glib-2.0/gio/gfilemonitor.h
*/
opaque type GFileMonitor = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GFileMonitor:
  given _tag: Tag[GFileMonitor] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GFileMonitor] = scala.scalanative.unsafe.alloc[GFileMonitor](1)
  def apply(parent_instance : GObject, priv : Ptr[GFileMonitorPrivate])(using Zone): Ptr[GFileMonitor] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GFileMonitor)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GFileMonitorPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GFileMonitorPrivate]]]
    def priv_=(value: Ptr[GFileMonitorPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GFileMonitorPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfilemonitor.h
*/
opaque type GFileMonitorClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._9, Nat._2]]
object GFileMonitorClass:
  given _tag: Tag[GFileMonitorClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._9, Nat._2]](Tag.Byte, Tag.Digit3[Nat._1, Nat._9, Nat._2](Tag.Nat1, Tag.Nat9, Tag.Nat2))
  def apply()(using Zone): Ptr[GFileMonitorClass] = scala.scalanative.unsafe.alloc[GFileMonitorClass](1)
  def apply(parent_class : GObjectClass, changed : CFuncPtr4[Ptr[GFileMonitor], Ptr[GFile], Ptr[GFile], GFileMonitorEvent, Unit], cancel : CFuncPtr1[Ptr[GFileMonitor], gboolean], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[GFileMonitorClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).changed = changed
    (!____ptr).cancel = cancel
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: GFileMonitorClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def changed: CFuncPtr4[Ptr[GFileMonitor], Ptr[GFile], Ptr[GFile], GFileMonitorEvent, Unit] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFileMonitor], Ptr[GFile], Ptr[GFile], GFileMonitorEvent, Unit]]]
    def changed_=(value: CFuncPtr4[Ptr[GFileMonitor], Ptr[GFile], Ptr[GFile], GFileMonitorEvent, Unit]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFileMonitor], Ptr[GFile], Ptr[GFile], GFileMonitorEvent, Unit]]] = value
    def cancel: CFuncPtr1[Ptr[GFileMonitor], gboolean] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileMonitor], gboolean]]]
    def cancel_=(value: CFuncPtr1[Ptr[GFileMonitor], gboolean]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileMonitor], gboolean]]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfilemonitor.h
*/
opaque type GFileMonitorPrivate = CStruct0
object GFileMonitorPrivate:
  given _tag: Tag[GFileMonitorPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileoutputstream.h
*/
opaque type GFileOutputStream = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GFileOutputStream:
  given _tag: Tag[GFileOutputStream] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GFileOutputStream] = scala.scalanative.unsafe.alloc[GFileOutputStream](1)
  def apply(parent_instance : GOutputStream, priv : Ptr[GFileOutputStreamPrivate])(using Zone): Ptr[GFileOutputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GFileOutputStream)
    def parent_instance: GOutputStream = !struct.at(0).asInstanceOf[Ptr[GOutputStream]]
    def parent_instance_=(value: GOutputStream): Unit = !struct.at(0).asInstanceOf[Ptr[GOutputStream]] = value
    def priv: Ptr[GFileOutputStreamPrivate] = !struct.at(32).asInstanceOf[Ptr[Ptr[GFileOutputStreamPrivate]]]
    def priv_=(value: Ptr[GFileOutputStreamPrivate]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[GFileOutputStreamPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileoutputstream.h
*/
opaque type GFileOutputStreamClass = CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]]
object GFileOutputStreamClass:
  given _tag: Tag[GFileOutputStreamClass] = Tag.CArray[CChar, Nat.Digit3[Nat._4, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._4, Nat._0, Nat._8](Tag.Nat4, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[GFileOutputStreamClass] = scala.scalanative.unsafe.alloc[GFileOutputStreamClass](1)
  def apply(parent_class : GOutputStreamClass, tell : CFuncPtr1[Ptr[GFileOutputStream], goffset], can_seek : CFuncPtr1[Ptr[GFileOutputStream], gboolean], seek : CFuncPtr5[Ptr[GFileOutputStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], can_truncate : CFuncPtr1[Ptr[GFileOutputStream], gboolean], truncate_fn : CFuncPtr4[Ptr[GFileOutputStream], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], query_info : CFuncPtr4[Ptr[GFileOutputStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]], query_info_async : CFuncPtr6[Ptr[GFileOutputStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], query_info_finish : CFuncPtr3[Ptr[GFileOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]], get_etag : CFuncPtr1[Ptr[GFileOutputStream], CString], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[GFileOutputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).tell = tell
    (!____ptr).can_seek = can_seek
    (!____ptr).seek = seek
    (!____ptr).can_truncate = can_truncate
    (!____ptr).truncate_fn = truncate_fn
    (!____ptr).query_info = query_info
    (!____ptr).query_info_async = query_info_async
    (!____ptr).query_info_finish = query_info_finish
    (!____ptr).get_etag = get_etag
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: GFileOutputStreamClass)
    def parent_class: GOutputStreamClass = !struct.at(0).asInstanceOf[Ptr[GOutputStreamClass]]
    def parent_class_=(value: GOutputStreamClass): Unit = !struct.at(0).asInstanceOf[Ptr[GOutputStreamClass]] = value
    def tell: CFuncPtr1[Ptr[GFileOutputStream], goffset] = !struct.at(296).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileOutputStream], goffset]]]
    def tell_=(value: CFuncPtr1[Ptr[GFileOutputStream], goffset]): Unit = !struct.at(296).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileOutputStream], goffset]]] = value
    def can_seek: CFuncPtr1[Ptr[GFileOutputStream], gboolean] = !struct.at(304).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileOutputStream], gboolean]]]
    def can_seek_=(value: CFuncPtr1[Ptr[GFileOutputStream], gboolean]): Unit = !struct.at(304).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileOutputStream], gboolean]]] = value
    def seek: CFuncPtr5[Ptr[GFileOutputStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(312).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFileOutputStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def seek_=(value: CFuncPtr5[Ptr[GFileOutputStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(312).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFileOutputStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def can_truncate: CFuncPtr1[Ptr[GFileOutputStream], gboolean] = !struct.at(320).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileOutputStream], gboolean]]]
    def can_truncate_=(value: CFuncPtr1[Ptr[GFileOutputStream], gboolean]): Unit = !struct.at(320).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileOutputStream], gboolean]]] = value
    def truncate_fn: CFuncPtr4[Ptr[GFileOutputStream], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(328).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFileOutputStream], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def truncate_fn_=(value: CFuncPtr4[Ptr[GFileOutputStream], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(328).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFileOutputStream], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def query_info: CFuncPtr4[Ptr[GFileOutputStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]] = !struct.at(336).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFileOutputStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]]]
    def query_info_=(value: CFuncPtr4[Ptr[GFileOutputStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at(336).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFileOutputStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]]] = value
    def query_info_async: CFuncPtr6[Ptr[GFileOutputStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(344).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFileOutputStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def query_info_async_=(value: CFuncPtr6[Ptr[GFileOutputStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(344).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFileOutputStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def query_info_finish: CFuncPtr3[Ptr[GFileOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]] = !struct.at(352).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFileOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]]]
    def query_info_finish_=(value: CFuncPtr3[Ptr[GFileOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at(352).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFileOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]]] = value
    def get_etag: CFuncPtr1[Ptr[GFileOutputStream], CString] = !struct.at(360).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileOutputStream], CString]]]
    def get_etag_=(value: CFuncPtr1[Ptr[GFileOutputStream], CString]): Unit = !struct.at(360).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFileOutputStream], CString]]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(368).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(368).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(376).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(376).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(384).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(384).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(392).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(392).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(400).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(400).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileoutputstream.h
*/
opaque type GFileOutputStreamPrivate = CStruct0
object GFileOutputStreamPrivate:
  given _tag: Tag[GFileOutputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GFilenameCompleter = CStruct0
object GFilenameCompleter:
  given _tag: Tag[GFilenameCompleter] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfilenamecompleter.h
*/
opaque type GFilenameCompleterClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._6, Nat._8]]
object GFilenameCompleterClass:
  given _tag: Tag[GFilenameCompleterClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._6, Nat._8]](Tag.Byte, Tag.Digit3[Nat._1, Nat._6, Nat._8](Tag.Nat1, Tag.Nat6, Tag.Nat8))
  def apply()(using Zone): Ptr[GFilenameCompleterClass] = scala.scalanative.unsafe.alloc[GFilenameCompleterClass](1)
  def apply(parent_class : GObjectClass, got_completion_data : CFuncPtr1[Ptr[GFilenameCompleter], Unit], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit])(using Zone): Ptr[GFilenameCompleterClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).got_completion_data = got_completion_data
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    ____ptr
  extension (struct: GFilenameCompleterClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def got_completion_data: CFuncPtr1[Ptr[GFilenameCompleter], Unit] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFilenameCompleter], Unit]]]
    def got_completion_data_=(value: CFuncPtr1[Ptr[GFilenameCompleter], Unit]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFilenameCompleter], Unit]]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfilterinputstream.h
*/
opaque type GFilterInputStream = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GFilterInputStream:
  given _tag: Tag[GFilterInputStream] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GFilterInputStream] = scala.scalanative.unsafe.alloc[GFilterInputStream](1)
  def apply(parent_instance : GInputStream, base_stream : Ptr[GInputStream])(using Zone): Ptr[GFilterInputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).base_stream = base_stream
    ____ptr
  extension (struct: GFilterInputStream)
    def parent_instance: GInputStream = !struct.at(0).asInstanceOf[Ptr[GInputStream]]
    def parent_instance_=(value: GInputStream): Unit = !struct.at(0).asInstanceOf[Ptr[GInputStream]] = value
    def base_stream: Ptr[GInputStream] = !struct.at(32).asInstanceOf[Ptr[Ptr[GInputStream]]]
    def base_stream_=(value: Ptr[GInputStream]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[GInputStream]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfilterinputstream.h
*/
opaque type GFilterInputStreamClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._7, Nat._2]]
object GFilterInputStreamClass:
  given _tag: Tag[GFilterInputStreamClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._7, Nat._2]](Tag.Byte, Tag.Digit3[Nat._2, Nat._7, Nat._2](Tag.Nat2, Tag.Nat7, Tag.Nat2))
  def apply()(using Zone): Ptr[GFilterInputStreamClass] = scala.scalanative.unsafe.alloc[GFilterInputStreamClass](1)
  def apply(parent_class : GInputStreamClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit])(using Zone): Ptr[GFilterInputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    ____ptr
  extension (struct: GFilterInputStreamClass)
    def parent_class: GInputStreamClass = !struct.at(0).asInstanceOf[Ptr[GInputStreamClass]]
    def parent_class_=(value: GInputStreamClass): Unit = !struct.at(0).asInstanceOf[Ptr[GInputStreamClass]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(248).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(248).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(256).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(256).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(264).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(264).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfilteroutputstream.h
*/
opaque type GFilterOutputStream = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GFilterOutputStream:
  given _tag: Tag[GFilterOutputStream] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GFilterOutputStream] = scala.scalanative.unsafe.alloc[GFilterOutputStream](1)
  def apply(parent_instance : GOutputStream, base_stream : Ptr[GOutputStream])(using Zone): Ptr[GFilterOutputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).base_stream = base_stream
    ____ptr
  extension (struct: GFilterOutputStream)
    def parent_instance: GOutputStream = !struct.at(0).asInstanceOf[Ptr[GOutputStream]]
    def parent_instance_=(value: GOutputStream): Unit = !struct.at(0).asInstanceOf[Ptr[GOutputStream]] = value
    def base_stream: Ptr[GOutputStream] = !struct.at(32).asInstanceOf[Ptr[Ptr[GOutputStream]]]
    def base_stream_=(value: Ptr[GOutputStream]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[GOutputStream]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfilteroutputstream.h
*/
opaque type GFilterOutputStreamClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._2, Nat._0]]
object GFilterOutputStreamClass:
  given _tag: Tag[GFilterOutputStreamClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._2, Nat._0]](Tag.Byte, Tag.Digit3[Nat._3, Nat._2, Nat._0](Tag.Nat3, Tag.Nat2, Tag.Nat0))
  def apply()(using Zone): Ptr[GFilterOutputStreamClass] = scala.scalanative.unsafe.alloc[GFilterOutputStreamClass](1)
  def apply(parent_class : GOutputStreamClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit])(using Zone): Ptr[GFilterOutputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    ____ptr
  extension (struct: GFilterOutputStreamClass)
    def parent_class: GOutputStreamClass = !struct.at(0).asInstanceOf[Ptr[GOutputStreamClass]]
    def parent_class_=(value: GOutputStreamClass): Unit = !struct.at(0).asInstanceOf[Ptr[GOutputStreamClass]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(296).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(296).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(304).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(304).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(312).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(312).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * GFlagsClass: _type_class: the parent class : a mask covering all possible values. _values: the number of possible values. : an array of #GFlagsValue structs describing the individual values.

 * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
*/
opaque type GFlagsClass = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GFlagsClass:
  given _tag: Tag[GFlagsClass] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GFlagsClass] = scala.scalanative.unsafe.alloc[GFlagsClass](1)
  def apply(g_type_class : GTypeClass, mask : guint, n_values : guint, values : Ptr[GFlagsValue])(using Zone): Ptr[GFlagsClass] = 
    val ____ptr = apply()
    (!____ptr).g_type_class = g_type_class
    (!____ptr).mask = mask
    (!____ptr).n_values = n_values
    (!____ptr).values = values
    ____ptr
  extension (struct: GFlagsClass)
    def g_type_class: GTypeClass = !struct.at(0).asInstanceOf[Ptr[GTypeClass]]
    def g_type_class_=(value: GTypeClass): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeClass]] = value
    def mask: guint = !struct.at(8).asInstanceOf[Ptr[guint]]
    def mask_=(value: guint): Unit = !struct.at(8).asInstanceOf[Ptr[guint]] = value
    def n_values: guint = !struct.at(12).asInstanceOf[Ptr[guint]]
    def n_values_=(value: guint): Unit = !struct.at(12).asInstanceOf[Ptr[guint]] = value
    def values: Ptr[GFlagsValue] = !struct.at(16).asInstanceOf[Ptr[Ptr[GFlagsValue]]]
    def values_=(value: Ptr[GFlagsValue]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[GFlagsValue]]] = value

/**
 * GFlagsValue: : the flags value _name: the name of the value _nick: the nickname of the value

 * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
*/
opaque type GFlagsValue = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GFlagsValue:
  given _tag: Tag[GFlagsValue] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GFlagsValue] = scala.scalanative.unsafe.alloc[GFlagsValue](1)
  def apply(value : guint, value_name : Ptr[gchar], value_nick : Ptr[gchar])(using Zone): Ptr[GFlagsValue] = 
    val ____ptr = apply()
    (!____ptr).value = value
    (!____ptr).value_name = value_name
    (!____ptr).value_nick = value_nick
    ____ptr
  extension (struct: GFlagsValue)
    def value: guint = !struct.at(0).asInstanceOf[Ptr[guint]]
    def value_=(value: guint): Unit = !struct.at(0).asInstanceOf[Ptr[guint]] = value
    def value_name: Ptr[gchar] = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]]
    def value_name_=(value: Ptr[gchar]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def value_nick: Ptr[gchar] = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]]
    def value_nick_=(value: Ptr[gchar]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
*/
opaque type GHashTable = CStruct0
object GHashTable:
  given _tag: Tag[GHashTable] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
*/
opaque type GHashTableIter = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GHashTableIter:
  given _tag: Tag[GHashTableIter] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GHashTableIter] = scala.scalanative.unsafe.alloc[GHashTableIter](1)
  def apply(dummy1 : gpointer, dummy2 : gpointer, dummy3 : gpointer, dummy4 : CInt, dummy5 : gboolean, dummy6 : gpointer)(using Zone): Ptr[GHashTableIter] = 
    val ____ptr = apply()
    (!____ptr).dummy1 = dummy1
    (!____ptr).dummy2 = dummy2
    (!____ptr).dummy3 = dummy3
    (!____ptr).dummy4 = dummy4
    (!____ptr).dummy5 = dummy5
    (!____ptr).dummy6 = dummy6
    ____ptr
  extension (struct: GHashTableIter)
    def dummy1: gpointer = !struct.at(0).asInstanceOf[Ptr[gpointer]]
    def dummy1_=(value: gpointer): Unit = !struct.at(0).asInstanceOf[Ptr[gpointer]] = value
    def dummy2: gpointer = !struct.at(8).asInstanceOf[Ptr[gpointer]]
    def dummy2_=(value: gpointer): Unit = !struct.at(8).asInstanceOf[Ptr[gpointer]] = value
    def dummy3: gpointer = !struct.at(16).asInstanceOf[Ptr[gpointer]]
    def dummy3_=(value: gpointer): Unit = !struct.at(16).asInstanceOf[Ptr[gpointer]] = value
    def dummy4: CInt = !struct.at(24).asInstanceOf[Ptr[CInt]]
    def dummy4_=(value: CInt): Unit = !struct.at(24).asInstanceOf[Ptr[CInt]] = value
    def dummy5: gboolean = !struct.at(28).asInstanceOf[Ptr[gboolean]]
    def dummy5_=(value: gboolean): Unit = !struct.at(28).asInstanceOf[Ptr[gboolean]] = value
    def dummy6: gpointer = !struct.at(32).asInstanceOf[Ptr[gpointer]]
    def dummy6_=(value: gpointer): Unit = !struct.at(32).asInstanceOf[Ptr[gpointer]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/ghmac.h
*/
opaque type GHmac = CStruct0
object GHmac:
  given _tag: Tag[GHmac] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
*/
opaque type GHook = CArray[CChar, Nat.Digit2[Nat._6, Nat._4]]
object GHook:
  given _tag: Tag[GHook] = Tag.CArray[CChar, Nat.Digit2[Nat._6, Nat._4]](Tag.Byte, Tag.Digit2[Nat._6, Nat._4](Tag.Nat6, Tag.Nat4))
  def apply()(using Zone): Ptr[GHook] = scala.scalanative.unsafe.alloc[GHook](1)
  def apply(data : gpointer, next : Ptr[GHook], prev : Ptr[GHook], ref_count : guint, hook_id : gulong, flags : guint, func : gpointer, destroy : GDestroyNotify)(using Zone): Ptr[GHook] = 
    val ____ptr = apply()
    (!____ptr).data = data
    (!____ptr).next = next
    (!____ptr).prev = prev
    (!____ptr).ref_count = ref_count
    (!____ptr).hook_id = hook_id
    (!____ptr).flags = flags
    (!____ptr).func = func
    (!____ptr).destroy = destroy
    ____ptr
  extension (struct: GHook)
    def data: gpointer = !struct.at(0).asInstanceOf[Ptr[gpointer]]
    def data_=(value: gpointer): Unit = !struct.at(0).asInstanceOf[Ptr[gpointer]] = value
    def next: Ptr[GHook] = !struct.at(8).asInstanceOf[Ptr[Ptr[GHook]]]
    def next_=(value: Ptr[GHook]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[GHook]]] = value
    def prev: Ptr[GHook] = !struct.at(16).asInstanceOf[Ptr[Ptr[GHook]]]
    def prev_=(value: Ptr[GHook]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[GHook]]] = value
    def ref_count: guint = !struct.at(24).asInstanceOf[Ptr[guint]]
    def ref_count_=(value: guint): Unit = !struct.at(24).asInstanceOf[Ptr[guint]] = value
    def hook_id: gulong = !struct.at(32).asInstanceOf[Ptr[gulong]]
    def hook_id_=(value: gulong): Unit = !struct.at(32).asInstanceOf[Ptr[gulong]] = value
    def flags: guint = !struct.at(40).asInstanceOf[Ptr[guint]]
    def flags_=(value: guint): Unit = !struct.at(40).asInstanceOf[Ptr[guint]] = value
    def func: gpointer = !struct.at(48).asInstanceOf[Ptr[gpointer]]
    def func_=(value: gpointer): Unit = !struct.at(48).asInstanceOf[Ptr[gpointer]] = value
    def destroy: GDestroyNotify = !struct.at(56).asInstanceOf[Ptr[GDestroyNotify]]
    def destroy_=(value: GDestroyNotify): Unit = !struct.at(56).asInstanceOf[Ptr[GDestroyNotify]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
*/
opaque type GHookList = CArray[CChar, Nat.Digit2[Nat._5, Nat._6]]
object GHookList:
  given _tag: Tag[GHookList] = Tag.CArray[CChar, Nat.Digit2[Nat._5, Nat._6]](Tag.Byte, Tag.Digit2[Nat._5, Nat._6](Tag.Nat5, Tag.Nat6))
  def apply()(using Zone): Ptr[GHookList] = scala.scalanative.unsafe.alloc[GHookList](1)
  def apply(seq_id : gulong, hook_size : guint, is_setup : guint, hooks : Ptr[GHook], dummy3 : gpointer, finalize_hook : GHookFinalizeFunc, dummy : CArray[gpointer, Nat._2])(using Zone): Ptr[GHookList] = 
    val ____ptr = apply()
    (!____ptr).seq_id = seq_id
    (!____ptr).hook_size = hook_size
    (!____ptr).is_setup = is_setup
    (!____ptr).hooks = hooks
    (!____ptr).dummy3 = dummy3
    (!____ptr).finalize_hook = finalize_hook
    (!____ptr).dummy = dummy
    ____ptr
  extension (struct: GHookList)
    def seq_id: gulong = !struct.at(0).asInstanceOf[Ptr[gulong]]
    def seq_id_=(value: gulong): Unit = !struct.at(0).asInstanceOf[Ptr[gulong]] = value
    def hook_size: guint = !struct.at(8).asInstanceOf[Ptr[guint]]
    def hook_size_=(value: guint): Unit = !struct.at(8).asInstanceOf[Ptr[guint]] = value
    def is_setup: guint = !struct.at(12).asInstanceOf[Ptr[guint]]
    def is_setup_=(value: guint): Unit = !struct.at(12).asInstanceOf[Ptr[guint]] = value
    def hooks: Ptr[GHook] = !struct.at(16).asInstanceOf[Ptr[Ptr[GHook]]]
    def hooks_=(value: Ptr[GHook]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[GHook]]] = value
    def dummy3: gpointer = !struct.at(24).asInstanceOf[Ptr[gpointer]]
    def dummy3_=(value: gpointer): Unit = !struct.at(24).asInstanceOf[Ptr[gpointer]] = value
    def finalize_hook: GHookFinalizeFunc = !struct.at(32).asInstanceOf[Ptr[GHookFinalizeFunc]]
    def finalize_hook_=(value: GHookFinalizeFunc): Unit = !struct.at(32).asInstanceOf[Ptr[GHookFinalizeFunc]] = value
    def dummy: CArray[gpointer, Nat._2] = !struct.at(40).asInstanceOf[Ptr[CArray[gpointer, Nat._2]]]
    def dummy_=(value: CArray[gpointer, Nat._2]): Unit = !struct.at(40).asInstanceOf[Ptr[CArray[gpointer, Nat._2]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
*/
opaque type GIOChannel = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object GIOChannel:
  given _tag: Tag[GIOChannel] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[GIOChannel] = scala.scalanative.unsafe.alloc[GIOChannel](1)
  def apply(ref_count : gint, funcs : Ptr[GIOFuncs], encoding : Ptr[gchar], read_cd : GIConv, write_cd : GIConv, line_term : Ptr[gchar], line_term_len : guint, buf_size : gsize, read_buf : Ptr[GString], encoded_read_buf : Ptr[GString], write_buf : Ptr[GString], partial_write_buf : CArray[gchar, Nat._6], use_buffer : guint, do_encode : guint, close_on_unref : guint, is_readable : guint, is_writeable : guint, is_seekable : guint, reserved1 : gpointer, reserved2 : gpointer)(using Zone): Ptr[GIOChannel] = 
    val ____ptr = apply()
    (!____ptr).ref_count = ref_count
    (!____ptr).funcs = funcs
    (!____ptr).encoding = encoding
    (!____ptr).read_cd = read_cd
    (!____ptr).write_cd = write_cd
    (!____ptr).line_term = line_term
    (!____ptr).line_term_len = line_term_len
    (!____ptr).buf_size = buf_size
    (!____ptr).read_buf = read_buf
    (!____ptr).encoded_read_buf = encoded_read_buf
    (!____ptr).write_buf = write_buf
    (!____ptr).partial_write_buf = partial_write_buf
    (!____ptr).use_buffer = use_buffer
    (!____ptr).do_encode = do_encode
    (!____ptr).close_on_unref = close_on_unref
    (!____ptr).is_readable = is_readable
    (!____ptr).is_writeable = is_writeable
    (!____ptr).is_seekable = is_seekable
    (!____ptr).reserved1 = reserved1
    (!____ptr).reserved2 = reserved2
    ____ptr
  extension (struct: GIOChannel)
    def ref_count: gint = !struct.at(0).asInstanceOf[Ptr[gint]]
    def ref_count_=(value: gint): Unit = !struct.at(0).asInstanceOf[Ptr[gint]] = value
    def funcs: Ptr[GIOFuncs] = !struct.at(8).asInstanceOf[Ptr[Ptr[GIOFuncs]]]
    def funcs_=(value: Ptr[GIOFuncs]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[GIOFuncs]]] = value
    def encoding: Ptr[gchar] = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]]
    def encoding_=(value: Ptr[gchar]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def read_cd: GIConv = !struct.at(24).asInstanceOf[Ptr[GIConv]]
    def read_cd_=(value: GIConv): Unit = !struct.at(24).asInstanceOf[Ptr[GIConv]] = value
    def write_cd: GIConv = !struct.at(32).asInstanceOf[Ptr[GIConv]]
    def write_cd_=(value: GIConv): Unit = !struct.at(32).asInstanceOf[Ptr[GIConv]] = value
    def line_term: Ptr[gchar] = !struct.at(40).asInstanceOf[Ptr[Ptr[gchar]]]
    def line_term_=(value: Ptr[gchar]): Unit = !struct.at(40).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def line_term_len: guint = !struct.at(48).asInstanceOf[Ptr[guint]]
    def line_term_len_=(value: guint): Unit = !struct.at(48).asInstanceOf[Ptr[guint]] = value
    def buf_size: gsize = !struct.at(56).asInstanceOf[Ptr[gsize]]
    def buf_size_=(value: gsize): Unit = !struct.at(56).asInstanceOf[Ptr[gsize]] = value
    def read_buf: Ptr[GString] = !struct.at(64).asInstanceOf[Ptr[Ptr[GString]]]
    def read_buf_=(value: Ptr[GString]): Unit = !struct.at(64).asInstanceOf[Ptr[Ptr[GString]]] = value
    def encoded_read_buf: Ptr[GString] = !struct.at(72).asInstanceOf[Ptr[Ptr[GString]]]
    def encoded_read_buf_=(value: Ptr[GString]): Unit = !struct.at(72).asInstanceOf[Ptr[Ptr[GString]]] = value
    def write_buf: Ptr[GString] = !struct.at(80).asInstanceOf[Ptr[Ptr[GString]]]
    def write_buf_=(value: Ptr[GString]): Unit = !struct.at(80).asInstanceOf[Ptr[Ptr[GString]]] = value
    def partial_write_buf: CArray[gchar, Nat._6] = !struct.at(88).asInstanceOf[Ptr[CArray[gchar, Nat._6]]]
    def partial_write_buf_=(value: CArray[gchar, Nat._6]): Unit = !struct.at(88).asInstanceOf[Ptr[CArray[gchar, Nat._6]]] = value
    def use_buffer: guint = !struct.at(96).asInstanceOf[Ptr[guint]]
    def use_buffer_=(value: guint): Unit = !struct.at(96).asInstanceOf[Ptr[guint]] = value
    def do_encode: guint = !struct.at(100).asInstanceOf[Ptr[guint]]
    def do_encode_=(value: guint): Unit = !struct.at(100).asInstanceOf[Ptr[guint]] = value
    def close_on_unref: guint = !struct.at(104).asInstanceOf[Ptr[guint]]
    def close_on_unref_=(value: guint): Unit = !struct.at(104).asInstanceOf[Ptr[guint]] = value
    def is_readable: guint = !struct.at(108).asInstanceOf[Ptr[guint]]
    def is_readable_=(value: guint): Unit = !struct.at(108).asInstanceOf[Ptr[guint]] = value
    def is_writeable: guint = !struct.at(112).asInstanceOf[Ptr[guint]]
    def is_writeable_=(value: guint): Unit = !struct.at(112).asInstanceOf[Ptr[guint]] = value
    def is_seekable: guint = !struct.at(116).asInstanceOf[Ptr[guint]]
    def is_seekable_=(value: guint): Unit = !struct.at(116).asInstanceOf[Ptr[guint]] = value
    def reserved1: gpointer = !struct.at(120).asInstanceOf[Ptr[gpointer]]
    def reserved1_=(value: gpointer): Unit = !struct.at(120).asInstanceOf[Ptr[gpointer]] = value
    def reserved2: gpointer = !struct.at(128).asInstanceOf[Ptr[gpointer]]
    def reserved2_=(value: gpointer): Unit = !struct.at(128).asInstanceOf[Ptr[gpointer]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GIOExtension = CStruct0
object GIOExtension:
  given _tag: Tag[GIOExtension] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GIOExtensionPoint = CStruct0
object GIOExtensionPoint:
  given _tag: Tag[GIOExtensionPoint] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
*/
opaque type GIOFuncs = CArray[CChar, Nat.Digit2[Nat._6, Nat._4]]
object GIOFuncs:
  given _tag: Tag[GIOFuncs] = Tag.CArray[CChar, Nat.Digit2[Nat._6, Nat._4]](Tag.Byte, Tag.Digit2[Nat._6, Nat._4](Tag.Nat6, Tag.Nat4))
  def apply()(using Zone): Ptr[GIOFuncs] = scala.scalanative.unsafe.alloc[GIOFuncs](1)
  def apply(io_read : CFuncPtr5[Ptr[GIOChannel], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus], io_write : CFuncPtr5[Ptr[GIOChannel], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus], io_seek : CFuncPtr4[Ptr[GIOChannel], gint64, GSeekType, Ptr[Ptr[GError]], GIOStatus], io_close : CFuncPtr2[Ptr[GIOChannel], Ptr[Ptr[GError]], GIOStatus], io_create_watch : CFuncPtr2[Ptr[GIOChannel], GIOCondition, Ptr[GSource]], io_free : CFuncPtr1[Ptr[GIOChannel], Unit], io_set_flags : CFuncPtr3[Ptr[GIOChannel], GIOFlags, Ptr[Ptr[GError]], GIOStatus], io_get_flags : CFuncPtr1[Ptr[GIOChannel], GIOFlags])(using Zone): Ptr[GIOFuncs] = 
    val ____ptr = apply()
    (!____ptr).io_read = io_read
    (!____ptr).io_write = io_write
    (!____ptr).io_seek = io_seek
    (!____ptr).io_close = io_close
    (!____ptr).io_create_watch = io_create_watch
    (!____ptr).io_free = io_free
    (!____ptr).io_set_flags = io_set_flags
    (!____ptr).io_get_flags = io_get_flags
    ____ptr
  extension (struct: GIOFuncs)
    def io_read: CFuncPtr5[Ptr[GIOChannel], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus] = !struct.at(0).asInstanceOf[Ptr[CFuncPtr5[Ptr[GIOChannel], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus]]]
    def io_read_=(value: CFuncPtr5[Ptr[GIOChannel], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus]): Unit = !struct.at(0).asInstanceOf[Ptr[CFuncPtr5[Ptr[GIOChannel], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus]]] = value
    def io_write: CFuncPtr5[Ptr[GIOChannel], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus] = !struct.at(8).asInstanceOf[Ptr[CFuncPtr5[Ptr[GIOChannel], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus]]]
    def io_write_=(value: CFuncPtr5[Ptr[GIOChannel], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus]): Unit = !struct.at(8).asInstanceOf[Ptr[CFuncPtr5[Ptr[GIOChannel], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus]]] = value
    def io_seek: CFuncPtr4[Ptr[GIOChannel], gint64, GSeekType, Ptr[Ptr[GError]], GIOStatus] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr4[Ptr[GIOChannel], gint64, GSeekType, Ptr[Ptr[GError]], GIOStatus]]]
    def io_seek_=(value: CFuncPtr4[Ptr[GIOChannel], gint64, GSeekType, Ptr[Ptr[GError]], GIOStatus]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr4[Ptr[GIOChannel], gint64, GSeekType, Ptr[Ptr[GError]], GIOStatus]]] = value
    def io_close: CFuncPtr2[Ptr[GIOChannel], Ptr[Ptr[GError]], GIOStatus] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr2[Ptr[GIOChannel], Ptr[Ptr[GError]], GIOStatus]]]
    def io_close_=(value: CFuncPtr2[Ptr[GIOChannel], Ptr[Ptr[GError]], GIOStatus]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr2[Ptr[GIOChannel], Ptr[Ptr[GError]], GIOStatus]]] = value
    def io_create_watch: CFuncPtr2[Ptr[GIOChannel], GIOCondition, Ptr[GSource]] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GIOChannel], GIOCondition, Ptr[GSource]]]]
    def io_create_watch_=(value: CFuncPtr2[Ptr[GIOChannel], GIOCondition, Ptr[GSource]]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GIOChannel], GIOCondition, Ptr[GSource]]]] = value
    def io_free: CFuncPtr1[Ptr[GIOChannel], Unit] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GIOChannel], Unit]]]
    def io_free_=(value: CFuncPtr1[Ptr[GIOChannel], Unit]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GIOChannel], Unit]]] = value
    def io_set_flags: CFuncPtr3[Ptr[GIOChannel], GIOFlags, Ptr[Ptr[GError]], GIOStatus] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr3[Ptr[GIOChannel], GIOFlags, Ptr[Ptr[GError]], GIOStatus]]]
    def io_set_flags_=(value: CFuncPtr3[Ptr[GIOChannel], GIOFlags, Ptr[Ptr[GError]], GIOStatus]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr3[Ptr[GIOChannel], GIOFlags, Ptr[Ptr[GError]], GIOStatus]]] = value
    def io_get_flags: CFuncPtr1[Ptr[GIOChannel], GIOFlags] = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GIOChannel], GIOFlags]]]
    def io_get_flags_=(value: CFuncPtr1[Ptr[GIOChannel], GIOFlags]): Unit = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GIOChannel], GIOFlags]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GIOModule = CStruct0
object GIOModule:
  given _tag: Tag[GIOModule] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
*/
opaque type GIOModuleClass = CStruct0
object GIOModuleClass:
  given _tag: Tag[GIOModuleClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
*/
opaque type GIOModuleScope = CStruct0
object GIOModuleScope:
  given _tag: Tag[GIOModuleScope] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GIOSchedulerJob = CStruct0
object GIOSchedulerJob:
  given _tag: Tag[GIOSchedulerJob] = Tag.materializeCStruct0Tag

/**
 * GIOStream:

 * [bindgen] header: /usr/include/glib-2.0/gio/giostream.h
*/
opaque type GIOStream = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GIOStream:
  given _tag: Tag[GIOStream] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GIOStream] = scala.scalanative.unsafe.alloc[GIOStream](1)
  def apply(parent_instance : GObject, priv : Ptr[GIOStreamPrivate])(using Zone): Ptr[GIOStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GIOStream)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GIOStreamPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GIOStreamPrivate]]]
    def priv_=(value: Ptr[GIOStreamPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GIOStreamPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GIOStreamAdapter = CStruct0
object GIOStreamAdapter:
  given _tag: Tag[GIOStreamAdapter] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giostream.h
*/
opaque type GIOStreamClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._5, Nat._6]]
object GIOStreamClass:
  given _tag: Tag[GIOStreamClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._5, Nat._6]](Tag.Byte, Tag.Digit3[Nat._2, Nat._5, Nat._6](Tag.Nat2, Tag.Nat5, Tag.Nat6))
  def apply()(using Zone): Ptr[GIOStreamClass] = scala.scalanative.unsafe.alloc[GIOStreamClass](1)
  def apply(parent_class : GObjectClass, get_input_stream : CFuncPtr1[Ptr[GIOStream], Ptr[GInputStream]], get_output_stream : CFuncPtr1[Ptr[GIOStream], Ptr[GOutputStream]], close_fn : CFuncPtr3[Ptr[GIOStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], close_async : CFuncPtr5[Ptr[GIOStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], close_finish : CFuncPtr3[Ptr[GIOStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit], _g_reserved7 : CFuncPtr0[Unit], _g_reserved8 : CFuncPtr0[Unit], _g_reserved9 : CFuncPtr0[Unit], _g_reserved10 : CFuncPtr0[Unit])(using Zone): Ptr[GIOStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_input_stream = get_input_stream
    (!____ptr).get_output_stream = get_output_stream
    (!____ptr).close_fn = close_fn
    (!____ptr).close_async = close_async
    (!____ptr).close_finish = close_finish
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    (!____ptr)._g_reserved7 = _g_reserved7
    (!____ptr)._g_reserved8 = _g_reserved8
    (!____ptr)._g_reserved9 = _g_reserved9
    (!____ptr)._g_reserved10 = _g_reserved10
    ____ptr
  extension (struct: GIOStreamClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def get_input_stream: CFuncPtr1[Ptr[GIOStream], Ptr[GInputStream]] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GIOStream], Ptr[GInputStream]]]]
    def get_input_stream_=(value: CFuncPtr1[Ptr[GIOStream], Ptr[GInputStream]]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GIOStream], Ptr[GInputStream]]]] = value
    def get_output_stream: CFuncPtr1[Ptr[GIOStream], Ptr[GOutputStream]] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GIOStream], Ptr[GOutputStream]]]]
    def get_output_stream_=(value: CFuncPtr1[Ptr[GIOStream], Ptr[GOutputStream]]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GIOStream], Ptr[GOutputStream]]]] = value
    def close_fn: CFuncPtr3[Ptr[GIOStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GIOStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def close_fn_=(value: CFuncPtr3[Ptr[GIOStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GIOStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def close_async: CFuncPtr5[Ptr[GIOStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr5[Ptr[GIOStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def close_async_=(value: CFuncPtr5[Ptr[GIOStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr5[Ptr[GIOStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def close_finish: CFuncPtr3[Ptr[GIOStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr3[Ptr[GIOStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def close_finish_=(value: CFuncPtr3[Ptr[GIOStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr3[Ptr[GIOStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved6: CFuncPtr0[Unit] = !struct.at(216).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at(216).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved7: CFuncPtr0[Unit] = !struct.at(224).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved7_=(value: CFuncPtr0[Unit]): Unit = !struct.at(224).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved8: CFuncPtr0[Unit] = !struct.at(232).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved8_=(value: CFuncPtr0[Unit]): Unit = !struct.at(232).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved9: CFuncPtr0[Unit] = !struct.at(240).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved9_=(value: CFuncPtr0[Unit]): Unit = !struct.at(240).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved10: CFuncPtr0[Unit] = !struct.at(248).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved10_=(value: CFuncPtr0[Unit]): Unit = !struct.at(248).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giostream.h
*/
opaque type GIOStreamPrivate = CStruct0
object GIOStreamPrivate:
  given _tag: Tag[GIOStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GIcon = CStruct0
object GIcon:
  given _tag: Tag[GIcon] = Tag.materializeCStruct0Tag

/**
 * GIconIface: _iface: The parent interface. : A hash for a given #GIcon. : Checks if two #GIcons are equal. _tokens: Serializes a #GIcon into tokens. The tokens must not contain any whitespace. Don't implement if the #GIcon can't be serialized (Since 2.20). _tokens: Constructs a #GIcon from tokens. Set the #GError if the tokens are malformed. Don't implement if the #GIcon can't be serialized (Since 2.20). : Serializes a #GIcon into a #GVariant. Since: 2.38

 * [bindgen] header: /usr/include/glib-2.0/gio/gicon.h
*/
opaque type GIconIface = CArray[CChar, Nat.Digit2[Nat._5, Nat._6]]
object GIconIface:
  given _tag: Tag[GIconIface] = Tag.CArray[CChar, Nat.Digit2[Nat._5, Nat._6]](Tag.Byte, Tag.Digit2[Nat._5, Nat._6](Tag.Nat5, Tag.Nat6))
  def apply()(using Zone): Ptr[GIconIface] = scala.scalanative.unsafe.alloc[GIconIface](1)
  def apply(g_iface : GTypeInterface, hash : CFuncPtr1[Ptr[GIcon], guint], equal : CFuncPtr2[Ptr[GIcon], Ptr[GIcon], gboolean], to_tokens : CFuncPtr3[Ptr[GIcon], Ptr[GPtrArray], Ptr[gint], gboolean], from_tokens : CFuncPtr4[Ptr[Ptr[gchar]], gint, gint, Ptr[Ptr[GError]], Ptr[GIcon]], serialize : CFuncPtr1[Ptr[GIcon], Ptr[GVariant]])(using Zone): Ptr[GIconIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).hash = hash
    (!____ptr).equal = equal
    (!____ptr).to_tokens = to_tokens
    (!____ptr).from_tokens = from_tokens
    (!____ptr).serialize = serialize
    ____ptr
  extension (struct: GIconIface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def hash: CFuncPtr1[Ptr[GIcon], guint] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GIcon], guint]]]
    def hash_=(value: CFuncPtr1[Ptr[GIcon], guint]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GIcon], guint]]] = value
    def equal: CFuncPtr2[Ptr[GIcon], Ptr[GIcon], gboolean] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr2[Ptr[GIcon], Ptr[GIcon], gboolean]]]
    def equal_=(value: CFuncPtr2[Ptr[GIcon], Ptr[GIcon], gboolean]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr2[Ptr[GIcon], Ptr[GIcon], gboolean]]] = value
    def to_tokens: CFuncPtr3[Ptr[GIcon], Ptr[GPtrArray], Ptr[gint], gboolean] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr3[Ptr[GIcon], Ptr[GPtrArray], Ptr[gint], gboolean]]]
    def to_tokens_=(value: CFuncPtr3[Ptr[GIcon], Ptr[GPtrArray], Ptr[gint], gboolean]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr3[Ptr[GIcon], Ptr[GPtrArray], Ptr[gint], gboolean]]] = value
    def from_tokens: CFuncPtr4[Ptr[Ptr[gchar]], gint, gint, Ptr[Ptr[GError]], Ptr[GIcon]] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr4[Ptr[Ptr[gchar]], gint, gint, Ptr[Ptr[GError]], Ptr[GIcon]]]]
    def from_tokens_=(value: CFuncPtr4[Ptr[Ptr[gchar]], gint, gint, Ptr[Ptr[GError]], Ptr[GIcon]]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr4[Ptr[Ptr[gchar]], gint, gint, Ptr[Ptr[GError]], Ptr[GIcon]]]] = value
    def serialize: CFuncPtr1[Ptr[GIcon], Ptr[GVariant]] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GIcon], Ptr[GVariant]]]]
    def serialize_=(value: CFuncPtr1[Ptr[GIcon], Ptr[GVariant]]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GIcon], Ptr[GVariant]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
*/
opaque type GInetAddress = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GInetAddress:
  given _tag: Tag[GInetAddress] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GInetAddress] = scala.scalanative.unsafe.alloc[GInetAddress](1)
  def apply(parent_instance : GObject, priv : Ptr[GInetAddressPrivate])(using Zone): Ptr[GInetAddress] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GInetAddress)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GInetAddressPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GInetAddressPrivate]]]
    def priv_=(value: Ptr[GInetAddressPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GInetAddressPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
*/
opaque type GInetAddressClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._5, Nat._2]]
object GInetAddressClass:
  given _tag: Tag[GInetAddressClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._5, Nat._2]](Tag.Byte, Tag.Digit3[Nat._1, Nat._5, Nat._2](Tag.Nat1, Tag.Nat5, Tag.Nat2))
  def apply()(using Zone): Ptr[GInetAddressClass] = scala.scalanative.unsafe.alloc[GInetAddressClass](1)
  def apply(parent_class : GObjectClass, to_string : CFuncPtr1[Ptr[GInetAddress], Ptr[gchar]], to_bytes : CFuncPtr1[Ptr[GInetAddress], Ptr[guint8]])(using Zone): Ptr[GInetAddressClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).to_string = to_string
    (!____ptr).to_bytes = to_bytes
    ____ptr
  extension (struct: GInetAddressClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def to_string: CFuncPtr1[Ptr[GInetAddress], Ptr[gchar]] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GInetAddress], Ptr[gchar]]]]
    def to_string_=(value: CFuncPtr1[Ptr[GInetAddress], Ptr[gchar]]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GInetAddress], Ptr[gchar]]]] = value
    def to_bytes: CFuncPtr1[Ptr[GInetAddress], Ptr[guint8]] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GInetAddress], Ptr[guint8]]]]
    def to_bytes_=(value: CFuncPtr1[Ptr[GInetAddress], Ptr[guint8]]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GInetAddress], Ptr[guint8]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddressmask.h
*/
opaque type GInetAddressMask = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GInetAddressMask:
  given _tag: Tag[GInetAddressMask] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GInetAddressMask] = scala.scalanative.unsafe.alloc[GInetAddressMask](1)
  def apply(parent_instance : GObject, priv : Ptr[GInetAddressMaskPrivate])(using Zone): Ptr[GInetAddressMask] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GInetAddressMask)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GInetAddressMaskPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GInetAddressMaskPrivate]]]
    def priv_=(value: Ptr[GInetAddressMaskPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GInetAddressMaskPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddressmask.h
*/
opaque type GInetAddressMaskClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object GInetAddressMaskClass:
  given _tag: Tag[GInetAddressMaskClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[GInetAddressMaskClass] = scala.scalanative.unsafe.alloc[GInetAddressMaskClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[GInetAddressMaskClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: GInetAddressMaskClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddressmask.h
*/
opaque type GInetAddressMaskPrivate = CStruct0
object GInetAddressMaskPrivate:
  given _tag: Tag[GInetAddressMaskPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
*/
opaque type GInetAddressPrivate = CStruct0
object GInetAddressPrivate:
  given _tag: Tag[GInetAddressPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginetsocketaddress.h
*/
opaque type GInetSocketAddress = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GInetSocketAddress:
  given _tag: Tag[GInetSocketAddress] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GInetSocketAddress] = scala.scalanative.unsafe.alloc[GInetSocketAddress](1)
  def apply(parent_instance : GSocketAddress, priv : Ptr[GInetSocketAddressPrivate])(using Zone): Ptr[GInetSocketAddress] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GInetSocketAddress)
    def parent_instance: GSocketAddress = !struct.at(0).asInstanceOf[Ptr[GSocketAddress]]
    def parent_instance_=(value: GSocketAddress): Unit = !struct.at(0).asInstanceOf[Ptr[GSocketAddress]] = value
    def priv: Ptr[GInetSocketAddressPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GInetSocketAddressPrivate]]]
    def priv_=(value: Ptr[GInetSocketAddressPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GInetSocketAddressPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginetsocketaddress.h
*/
opaque type GInetSocketAddressClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._6, Nat._0]]
object GInetSocketAddressClass:
  given _tag: Tag[GInetSocketAddressClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._6, Nat._0]](Tag.Byte, Tag.Digit3[Nat._1, Nat._6, Nat._0](Tag.Nat1, Tag.Nat6, Tag.Nat0))
  def apply()(using Zone): Ptr[GInetSocketAddressClass] = scala.scalanative.unsafe.alloc[GInetSocketAddressClass](1)
  def apply(parent_class : GSocketAddressClass)(using Zone): Ptr[GInetSocketAddressClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: GInetSocketAddressClass)
    def parent_class: GSocketAddressClass = !struct.at(0).asInstanceOf[Ptr[GSocketAddressClass]]
    def parent_class_=(value: GSocketAddressClass): Unit = !struct.at(0).asInstanceOf[Ptr[GSocketAddressClass]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginetsocketaddress.h
*/
opaque type GInetSocketAddressPrivate = CStruct0
object GInetSocketAddressPrivate:
  given _tag: Tag[GInetSocketAddressPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GInitable = CStruct0
object GInitable:
  given _tag: Tag[GInitable] = Tag.materializeCStruct0Tag

/**
 * GInitableIface: _iface: The parent interface. : Initializes the object.

 * [bindgen] header: /usr/include/glib-2.0/gio/ginitable.h
*/
opaque type GInitableIface = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GInitableIface:
  given _tag: Tag[GInitableIface] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GInitableIface] = scala.scalanative.unsafe.alloc[GInitableIface](1)
  def apply(g_iface : GTypeInterface, init : CFuncPtr3[Ptr[GInitable], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean])(using Zone): Ptr[GInitableIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).init = init
    ____ptr
  extension (struct: GInitableIface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def init: CFuncPtr3[Ptr[GInitable], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr3[Ptr[GInitable], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def init_=(value: CFuncPtr3[Ptr[GInitable], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr3[Ptr[GInitable], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value

/**
 * GObject:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
*/
opaque type GInitiallyUnowned = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GInitiallyUnowned:
  given _tag: Tag[GInitiallyUnowned] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GInitiallyUnowned] = scala.scalanative.unsafe.alloc[GInitiallyUnowned](1)
  def apply(g_type_instance : GTypeInstance, ref_count : guint, qdata : Ptr[GData])(using Zone): Ptr[GInitiallyUnowned] = 
    val ____ptr = apply()
    (!____ptr).g_type_instance = g_type_instance
    (!____ptr).ref_count = ref_count
    (!____ptr).qdata = qdata
    ____ptr
  extension (struct: GInitiallyUnowned)
    def g_type_instance: GTypeInstance = !struct.at(0).asInstanceOf[Ptr[GTypeInstance]]
    def g_type_instance_=(value: GTypeInstance): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInstance]] = value
    def ref_count: guint = !struct.at(8).asInstanceOf[Ptr[guint]]
    def ref_count_=(value: guint): Unit = !struct.at(8).asInstanceOf[Ptr[guint]] = value
    def qdata: Ptr[GData] = !struct.at(16).asInstanceOf[Ptr[Ptr[GData]]]
    def qdata_=(value: Ptr[GData]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[GData]]] = value

/**
 * GObjectClass: _type_class: the parent class : the function is called by g_object_new () to complete the object initialization after all the construction properties are set. The first thing a implementation must do is chain up to the of the parent class. Overriding should be rarely needed, e.g. to handle construct properties, or to implement singletons.

 * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
*/
opaque type GInitiallyUnownedClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object GInitiallyUnownedClass:
  given _tag: Tag[GInitiallyUnownedClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[GInitiallyUnownedClass] = scala.scalanative.unsafe.alloc[GInitiallyUnownedClass](1)
  def apply(g_type_class : GTypeClass, construct_properties : Ptr[GSList], constructor : CFuncPtr3[GType, guint, Ptr[GObjectConstructParam], Ptr[GObject]], set_property : CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit], get_property : CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit], dispose : CFuncPtr1[Ptr[GObject], Unit], finalize : CFuncPtr1[Ptr[GObject], Unit], dispatch_properties_changed : CFuncPtr3[Ptr[GObject], guint, Ptr[Ptr[GParamSpec]], Unit], _notify : CFuncPtr2[Ptr[GObject], Ptr[GParamSpec], Unit], constructed : CFuncPtr1[Ptr[GObject], Unit], flags : gsize, pdummy : CArray[gpointer, Nat._6])(using Zone): Ptr[GInitiallyUnownedClass] = 
    val ____ptr = apply()
    (!____ptr).g_type_class = g_type_class
    (!____ptr).construct_properties = construct_properties
    (!____ptr).constructor = constructor
    (!____ptr).set_property = set_property
    (!____ptr).get_property = get_property
    (!____ptr).dispose = dispose
    (!____ptr).finalize = finalize
    (!____ptr).dispatch_properties_changed = dispatch_properties_changed
    (!____ptr)._notify = _notify
    (!____ptr).constructed = constructed
    (!____ptr).flags = flags
    (!____ptr).pdummy = pdummy
    ____ptr
  extension (struct: GInitiallyUnownedClass)
    def g_type_class: GTypeClass = !struct.at(0).asInstanceOf[Ptr[GTypeClass]]
    def g_type_class_=(value: GTypeClass): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeClass]] = value
    def construct_properties: Ptr[GSList] = !struct.at(8).asInstanceOf[Ptr[Ptr[GSList]]]
    def construct_properties_=(value: Ptr[GSList]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[GSList]]] = value
    def constructor: CFuncPtr3[GType, guint, Ptr[GObjectConstructParam], Ptr[GObject]] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr3[GType, guint, Ptr[GObjectConstructParam], Ptr[GObject]]]]
    def constructor_=(value: CFuncPtr3[GType, guint, Ptr[GObjectConstructParam], Ptr[GObject]]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr3[GType, guint, Ptr[GObjectConstructParam], Ptr[GObject]]]] = value
    def set_property: CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit]]]
    def set_property_=(value: CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit]]] = value
    def get_property: CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit]]]
    def get_property_=(value: CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit]]] = value
    def dispose: CFuncPtr1[Ptr[GObject], Unit] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GObject], Unit]]]
    def dispose_=(value: CFuncPtr1[Ptr[GObject], Unit]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GObject], Unit]]] = value
    def finalize: CFuncPtr1[Ptr[GObject], Unit] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GObject], Unit]]]
    def finalize_=(value: CFuncPtr1[Ptr[GObject], Unit]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GObject], Unit]]] = value
    def dispatch_properties_changed: CFuncPtr3[Ptr[GObject], guint, Ptr[Ptr[GParamSpec]], Unit] = !struct.at(56).asInstanceOf[Ptr[CFuncPtr3[Ptr[GObject], guint, Ptr[Ptr[GParamSpec]], Unit]]]
    def dispatch_properties_changed_=(value: CFuncPtr3[Ptr[GObject], guint, Ptr[Ptr[GParamSpec]], Unit]): Unit = !struct.at(56).asInstanceOf[Ptr[CFuncPtr3[Ptr[GObject], guint, Ptr[Ptr[GParamSpec]], Unit]]] = value
    def _notify: CFuncPtr2[Ptr[GObject], Ptr[GParamSpec], Unit] = !struct.at(64).asInstanceOf[Ptr[CFuncPtr2[Ptr[GObject], Ptr[GParamSpec], Unit]]]
    def _notify_=(value: CFuncPtr2[Ptr[GObject], Ptr[GParamSpec], Unit]): Unit = !struct.at(64).asInstanceOf[Ptr[CFuncPtr2[Ptr[GObject], Ptr[GParamSpec], Unit]]] = value
    def constructed: CFuncPtr1[Ptr[GObject], Unit] = !struct.at(72).asInstanceOf[Ptr[CFuncPtr1[Ptr[GObject], Unit]]]
    def constructed_=(value: CFuncPtr1[Ptr[GObject], Unit]): Unit = !struct.at(72).asInstanceOf[Ptr[CFuncPtr1[Ptr[GObject], Unit]]] = value
    def flags: gsize = !struct.at(80).asInstanceOf[Ptr[gsize]]
    def flags_=(value: gsize): Unit = !struct.at(80).asInstanceOf[Ptr[gsize]] = value
    def pdummy: CArray[gpointer, Nat._6] = !struct.at(88).asInstanceOf[Ptr[CArray[gpointer, Nat._6]]]
    def pdummy_=(value: CArray[gpointer, Nat._6]): Unit = !struct.at(88).asInstanceOf[Ptr[CArray[gpointer, Nat._6]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GInputMessage = CArray[CChar, Nat.Digit2[Nat._5, Nat._6]]
object GInputMessage:
  given _tag: Tag[GInputMessage] = Tag.CArray[CChar, Nat.Digit2[Nat._5, Nat._6]](Tag.Byte, Tag.Digit2[Nat._5, Nat._6](Tag.Nat5, Tag.Nat6))
  def apply()(using Zone): Ptr[GInputMessage] = scala.scalanative.unsafe.alloc[GInputMessage](1)
  def apply(address : Ptr[Ptr[GSocketAddress]], vectors : Ptr[GInputVector], num_vectors : guint, bytes_received : gsize, flags : gint, control_messages : Ptr[Ptr[Ptr[GSocketControlMessage]]], num_control_messages : Ptr[guint])(using Zone): Ptr[GInputMessage] = 
    val ____ptr = apply()
    (!____ptr).address = address
    (!____ptr).vectors = vectors
    (!____ptr).num_vectors = num_vectors
    (!____ptr).bytes_received = bytes_received
    (!____ptr).flags = flags
    (!____ptr).control_messages = control_messages
    (!____ptr).num_control_messages = num_control_messages
    ____ptr
  extension (struct: GInputMessage)
    def address: Ptr[Ptr[GSocketAddress]] = !struct.at(0).asInstanceOf[Ptr[Ptr[Ptr[GSocketAddress]]]]
    def address_=(value: Ptr[Ptr[GSocketAddress]]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[Ptr[GSocketAddress]]]] = value
    def vectors: Ptr[GInputVector] = !struct.at(8).asInstanceOf[Ptr[Ptr[GInputVector]]]
    def vectors_=(value: Ptr[GInputVector]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[GInputVector]]] = value
    def num_vectors: guint = !struct.at(16).asInstanceOf[Ptr[guint]]
    def num_vectors_=(value: guint): Unit = !struct.at(16).asInstanceOf[Ptr[guint]] = value
    def bytes_received: gsize = !struct.at(24).asInstanceOf[Ptr[gsize]]
    def bytes_received_=(value: gsize): Unit = !struct.at(24).asInstanceOf[Ptr[gsize]] = value
    def flags: gint = !struct.at(32).asInstanceOf[Ptr[gint]]
    def flags_=(value: gint): Unit = !struct.at(32).asInstanceOf[Ptr[gint]] = value
    def control_messages: Ptr[Ptr[Ptr[GSocketControlMessage]]] = !struct.at(40).asInstanceOf[Ptr[Ptr[Ptr[Ptr[GSocketControlMessage]]]]]
    def control_messages_=(value: Ptr[Ptr[Ptr[GSocketControlMessage]]]): Unit = !struct.at(40).asInstanceOf[Ptr[Ptr[Ptr[Ptr[GSocketControlMessage]]]]] = value
    def num_control_messages: Ptr[guint] = !struct.at(48).asInstanceOf[Ptr[Ptr[guint]]]
    def num_control_messages_=(value: Ptr[guint]): Unit = !struct.at(48).asInstanceOf[Ptr[Ptr[guint]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
*/
opaque type GInputStream = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GInputStream:
  given _tag: Tag[GInputStream] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GInputStream] = scala.scalanative.unsafe.alloc[GInputStream](1)
  def apply(parent_instance : GObject, priv : Ptr[GInputStreamPrivate])(using Zone): Ptr[GInputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GInputStream)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GInputStreamPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GInputStreamPrivate]]]
    def priv_=(value: Ptr[GInputStreamPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GInputStreamPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
*/
opaque type GInputStreamClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._4, Nat._8]]
object GInputStreamClass:
  given _tag: Tag[GInputStreamClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._4, Nat._8]](Tag.Byte, Tag.Digit3[Nat._2, Nat._4, Nat._8](Tag.Nat2, Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GInputStreamClass] = scala.scalanative.unsafe.alloc[GInputStreamClass](1)
  def apply(parent_class : GObjectClass, read_fn : CFuncPtr5[Ptr[GInputStream], Ptr[Byte], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize], skip : CFuncPtr4[Ptr[GInputStream], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize], close_fn : CFuncPtr3[Ptr[GInputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], read_async : CFuncPtr7[Ptr[GInputStream], Ptr[Byte], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], read_finish : CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize], skip_async : CFuncPtr6[Ptr[GInputStream], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], skip_finish : CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize], close_async : CFuncPtr5[Ptr[GInputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], close_finish : CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[GInputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).read_fn = read_fn
    (!____ptr).skip = skip
    (!____ptr).close_fn = close_fn
    (!____ptr).read_async = read_async
    (!____ptr).read_finish = read_finish
    (!____ptr).skip_async = skip_async
    (!____ptr).skip_finish = skip_finish
    (!____ptr).close_async = close_async
    (!____ptr).close_finish = close_finish
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: GInputStreamClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def read_fn: CFuncPtr5[Ptr[GInputStream], Ptr[Byte], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr5[Ptr[GInputStream], Ptr[Byte], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize]]]
    def read_fn_=(value: CFuncPtr5[Ptr[GInputStream], Ptr[Byte], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr5[Ptr[GInputStream], Ptr[Byte], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize]]] = value
    def skip: CFuncPtr4[Ptr[GInputStream], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr4[Ptr[GInputStream], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize]]]
    def skip_=(value: CFuncPtr4[Ptr[GInputStream], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr4[Ptr[GInputStream], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize]]] = value
    def close_fn: CFuncPtr3[Ptr[GInputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GInputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def close_fn_=(value: CFuncPtr3[Ptr[GInputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GInputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def read_async: CFuncPtr7[Ptr[GInputStream], Ptr[Byte], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr7[Ptr[GInputStream], Ptr[Byte], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def read_async_=(value: CFuncPtr7[Ptr[GInputStream], Ptr[Byte], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr7[Ptr[GInputStream], Ptr[Byte], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def read_finish: CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize]]]
    def read_finish_=(value: CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize]]] = value
    def skip_async: CFuncPtr6[Ptr[GInputStream], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr6[Ptr[GInputStream], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def skip_async_=(value: CFuncPtr6[Ptr[GInputStream], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr6[Ptr[GInputStream], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def skip_finish: CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize]]]
    def skip_finish_=(value: CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize]]] = value
    def close_async: CFuncPtr5[Ptr[GInputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr5[Ptr[GInputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def close_async_=(value: CFuncPtr5[Ptr[GInputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr5[Ptr[GInputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def close_finish: CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def close_finish_=(value: CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(216).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(216).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(224).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(224).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(232).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(232).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(240).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(240).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
*/
opaque type GInputStreamPrivate = CStruct0
object GInputStreamPrivate:
  given _tag: Tag[GInputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GInputVector = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GInputVector:
  given _tag: Tag[GInputVector] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GInputVector] = scala.scalanative.unsafe.alloc[GInputVector](1)
  def apply(buffer : gpointer, size : gsize)(using Zone): Ptr[GInputVector] = 
    val ____ptr = apply()
    (!____ptr).buffer = buffer
    (!____ptr).size = size
    ____ptr
  extension (struct: GInputVector)
    def buffer: gpointer = !struct.at(0).asInstanceOf[Ptr[gpointer]]
    def buffer_=(value: gpointer): Unit = !struct.at(0).asInstanceOf[Ptr[gpointer]] = value
    def size: gsize = !struct.at(8).asInstanceOf[Ptr[gsize]]
    def size_=(value: gsize): Unit = !struct.at(8).asInstanceOf[Ptr[gsize]] = value

/**
 * GInterfaceInfo:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
*/
opaque type GInterfaceInfo = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GInterfaceInfo:
  given _tag: Tag[GInterfaceInfo] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GInterfaceInfo] = scala.scalanative.unsafe.alloc[GInterfaceInfo](1)
  def apply(interface_init : GInterfaceInitFunc, interface_finalize : GInterfaceFinalizeFunc, interface_data : gpointer)(using Zone): Ptr[GInterfaceInfo] = 
    val ____ptr = apply()
    (!____ptr).interface_init = interface_init
    (!____ptr).interface_finalize = interface_finalize
    (!____ptr).interface_data = interface_data
    ____ptr
  extension (struct: GInterfaceInfo)
    def interface_init: GInterfaceInitFunc = !struct.at(0).asInstanceOf[Ptr[GInterfaceInitFunc]]
    def interface_init_=(value: GInterfaceInitFunc): Unit = !struct.at(0).asInstanceOf[Ptr[GInterfaceInitFunc]] = value
    def interface_finalize: GInterfaceFinalizeFunc = !struct.at(8).asInstanceOf[Ptr[GInterfaceFinalizeFunc]]
    def interface_finalize_=(value: GInterfaceFinalizeFunc): Unit = !struct.at(8).asInstanceOf[Ptr[GInterfaceFinalizeFunc]] = value
    def interface_data: gpointer = !struct.at(16).asInstanceOf[Ptr[gpointer]]
    def interface_data_=(value: gpointer): Unit = !struct.at(16).asInstanceOf[Ptr[gpointer]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
*/
opaque type GKeyFile = CStruct0
object GKeyFile:
  given _tag: Tag[GKeyFile] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
*/
opaque type GList = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GList:
  given _tag: Tag[GList] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GList] = scala.scalanative.unsafe.alloc[GList](1)
  def apply(data : gpointer, next : Ptr[GList], prev : Ptr[GList])(using Zone): Ptr[GList] = 
    val ____ptr = apply()
    (!____ptr).data = data
    (!____ptr).next = next
    (!____ptr).prev = prev
    ____ptr
  extension (struct: GList)
    def data: gpointer = !struct.at(0).asInstanceOf[Ptr[gpointer]]
    def data_=(value: gpointer): Unit = !struct.at(0).asInstanceOf[Ptr[gpointer]] = value
    def next: Ptr[GList] = !struct.at(8).asInstanceOf[Ptr[Ptr[GList]]]
    def next_=(value: Ptr[GList]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[GList]]] = value
    def prev: Ptr[GList] = !struct.at(16).asInstanceOf[Ptr[Ptr[GList]]]
    def prev_=(value: Ptr[GList]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[GList]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/glistmodel.h
*/
opaque type GListModel = CStruct0
object GListModel:
  given _tag: Tag[GListModel] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/glistmodel.h
*/
opaque type GListModelInterface = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GListModelInterface:
  given _tag: Tag[GListModelInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GListModelInterface] = scala.scalanative.unsafe.alloc[GListModelInterface](1)
  def apply(g_iface : GTypeInterface, get_item_type : CFuncPtr1[Ptr[GListModel], GType], get_n_items : CFuncPtr1[Ptr[GListModel], guint], get_item : CFuncPtr2[Ptr[GListModel], guint, gpointer])(using Zone): Ptr[GListModelInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).get_item_type = get_item_type
    (!____ptr).get_n_items = get_n_items
    (!____ptr).get_item = get_item
    ____ptr
  extension (struct: GListModelInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def get_item_type: CFuncPtr1[Ptr[GListModel], GType] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GListModel], GType]]]
    def get_item_type_=(value: CFuncPtr1[Ptr[GListModel], GType]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GListModel], GType]]] = value
    def get_n_items: CFuncPtr1[Ptr[GListModel], guint] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GListModel], guint]]]
    def get_n_items_=(value: CFuncPtr1[Ptr[GListModel], guint]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GListModel], guint]]] = value
    def get_item: CFuncPtr2[Ptr[GListModel], guint, gpointer] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GListModel], guint, gpointer]]]
    def get_item_=(value: CFuncPtr2[Ptr[GListModel], guint, gpointer]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GListModel], guint, gpointer]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
*/
opaque type GListStore = CStruct0
object GListStore:
  given _tag: Tag[GListStore] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
*/
opaque type GListStoreClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object GListStoreClass:
  given _tag: Tag[GListStoreClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[GListStoreClass] = scala.scalanative.unsafe.alloc[GListStoreClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[GListStoreClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: GListStoreClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GLoadableIcon = CStruct0
object GLoadableIcon:
  given _tag: Tag[GLoadableIcon] = Tag.materializeCStruct0Tag

/**
 * GLoadableIconIface: _iface: The parent interface. : Loads an icon. _async: Loads an icon asynchronously. _finish: Finishes an asynchronous icon load.

 * [bindgen] header: /usr/include/glib-2.0/gio/gloadableicon.h
*/
opaque type GLoadableIconIface = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GLoadableIconIface:
  given _tag: Tag[GLoadableIconIface] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GLoadableIconIface] = scala.scalanative.unsafe.alloc[GLoadableIconIface](1)
  def apply(g_iface : GTypeInterface, load : CFuncPtr5[Ptr[GLoadableIcon], CInt, Ptr[CString], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GInputStream]], load_async : CFuncPtr5[Ptr[GLoadableIcon], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], load_finish : CFuncPtr4[Ptr[GLoadableIcon], Ptr[GAsyncResult], Ptr[CString], Ptr[Ptr[GError]], Ptr[GInputStream]])(using Zone): Ptr[GLoadableIconIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).load = load
    (!____ptr).load_async = load_async
    (!____ptr).load_finish = load_finish
    ____ptr
  extension (struct: GLoadableIconIface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def load: CFuncPtr5[Ptr[GLoadableIcon], CInt, Ptr[CString], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GInputStream]] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr5[Ptr[GLoadableIcon], CInt, Ptr[CString], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GInputStream]]]]
    def load_=(value: CFuncPtr5[Ptr[GLoadableIcon], CInt, Ptr[CString], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GInputStream]]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr5[Ptr[GLoadableIcon], CInt, Ptr[CString], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GInputStream]]]] = value
    def load_async: CFuncPtr5[Ptr[GLoadableIcon], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr5[Ptr[GLoadableIcon], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def load_async_=(value: CFuncPtr5[Ptr[GLoadableIcon], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr5[Ptr[GLoadableIcon], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def load_finish: CFuncPtr4[Ptr[GLoadableIcon], Ptr[GAsyncResult], Ptr[CString], Ptr[Ptr[GError]], Ptr[GInputStream]] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr4[Ptr[GLoadableIcon], Ptr[GAsyncResult], Ptr[CString], Ptr[Ptr[GError]], Ptr[GInputStream]]]]
    def load_finish_=(value: CFuncPtr4[Ptr[GLoadableIcon], Ptr[GAsyncResult], Ptr[CString], Ptr[Ptr[GError]], Ptr[GInputStream]]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr4[Ptr[GLoadableIcon], Ptr[GAsyncResult], Ptr[CString], Ptr[Ptr[GError]], Ptr[GInputStream]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
*/
opaque type GLogField = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GLogField:
  given _tag: Tag[GLogField] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GLogField] = scala.scalanative.unsafe.alloc[GLogField](1)
  def apply(key : Ptr[gchar], value : gconstpointer, _length : gssize)(using Zone): Ptr[GLogField] = 
    val ____ptr = apply()
    (!____ptr).key = key
    (!____ptr).value = value
    (!____ptr)._length = _length
    ____ptr
  extension (struct: GLogField)
    def key: Ptr[gchar] = !struct.at(0).asInstanceOf[Ptr[Ptr[gchar]]]
    def key_=(value: Ptr[gchar]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def value: gconstpointer = !struct.at(8).asInstanceOf[Ptr[gconstpointer]]
    def value_=(value: gconstpointer): Unit = !struct.at(8).asInstanceOf[Ptr[gconstpointer]] = value
    def _length: gssize = !struct.at(16).asInstanceOf[Ptr[gssize]]
    def _length_=(value: gssize): Unit = !struct.at(16).asInstanceOf[Ptr[gssize]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
*/
opaque type GMainContext = CStruct0
object GMainContext:
  given _tag: Tag[GMainContext] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
*/
opaque type GMainLoop = CStruct0
object GMainLoop:
  given _tag: Tag[GMainLoop] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gmappedfile.h
*/
opaque type GMappedFile = CStruct0
object GMappedFile:
  given _tag: Tag[GMappedFile] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
*/
opaque type GMarkupParseContext = CStruct0
object GMarkupParseContext:
  given _tag: Tag[GMarkupParseContext] = Tag.materializeCStruct0Tag

/**
 * GMarkupParser: _element: Callback to invoke when the opening tag of an element is seen. The callback's _names and _values parameters are %NULL-terminated. _element: Callback to invoke when the closing tag of an element is seen. Note that this is also called for empty tags like `<empty/>`.

 * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
*/
opaque type GMarkupParser = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GMarkupParser:
  given _tag: Tag[GMarkupParser] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GMarkupParser] = scala.scalanative.unsafe.alloc[GMarkupParser](1)
  def apply(start_element : CFuncPtr6[Ptr[GMarkupParseContext], Ptr[gchar], Ptr[Ptr[gchar]], Ptr[Ptr[gchar]], gpointer, Ptr[Ptr[GError]], Unit], end_element : CFuncPtr4[Ptr[GMarkupParseContext], Ptr[gchar], gpointer, Ptr[Ptr[GError]], Unit], text : CFuncPtr5[Ptr[GMarkupParseContext], Ptr[gchar], gsize, gpointer, Ptr[Ptr[GError]], Unit], passthrough : CFuncPtr5[Ptr[GMarkupParseContext], Ptr[gchar], gsize, gpointer, Ptr[Ptr[GError]], Unit], error : CFuncPtr3[Ptr[GMarkupParseContext], Ptr[GError], gpointer, Unit])(using Zone): Ptr[GMarkupParser] = 
    val ____ptr = apply()
    (!____ptr).start_element = start_element
    (!____ptr).end_element = end_element
    (!____ptr).text = text
    (!____ptr).passthrough = passthrough
    (!____ptr).error = error
    ____ptr
  extension (struct: GMarkupParser)
    def start_element: CFuncPtr6[Ptr[GMarkupParseContext], Ptr[gchar], Ptr[Ptr[gchar]], Ptr[Ptr[gchar]], gpointer, Ptr[Ptr[GError]], Unit] = !struct.at(0).asInstanceOf[Ptr[CFuncPtr6[Ptr[GMarkupParseContext], Ptr[gchar], Ptr[Ptr[gchar]], Ptr[Ptr[gchar]], gpointer, Ptr[Ptr[GError]], Unit]]]
    def start_element_=(value: CFuncPtr6[Ptr[GMarkupParseContext], Ptr[gchar], Ptr[Ptr[gchar]], Ptr[Ptr[gchar]], gpointer, Ptr[Ptr[GError]], Unit]): Unit = !struct.at(0).asInstanceOf[Ptr[CFuncPtr6[Ptr[GMarkupParseContext], Ptr[gchar], Ptr[Ptr[gchar]], Ptr[Ptr[gchar]], gpointer, Ptr[Ptr[GError]], Unit]]] = value
    def end_element: CFuncPtr4[Ptr[GMarkupParseContext], Ptr[gchar], gpointer, Ptr[Ptr[GError]], Unit] = !struct.at(8).asInstanceOf[Ptr[CFuncPtr4[Ptr[GMarkupParseContext], Ptr[gchar], gpointer, Ptr[Ptr[GError]], Unit]]]
    def end_element_=(value: CFuncPtr4[Ptr[GMarkupParseContext], Ptr[gchar], gpointer, Ptr[Ptr[GError]], Unit]): Unit = !struct.at(8).asInstanceOf[Ptr[CFuncPtr4[Ptr[GMarkupParseContext], Ptr[gchar], gpointer, Ptr[Ptr[GError]], Unit]]] = value
    def text: CFuncPtr5[Ptr[GMarkupParseContext], Ptr[gchar], gsize, gpointer, Ptr[Ptr[GError]], Unit] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr5[Ptr[GMarkupParseContext], Ptr[gchar], gsize, gpointer, Ptr[Ptr[GError]], Unit]]]
    def text_=(value: CFuncPtr5[Ptr[GMarkupParseContext], Ptr[gchar], gsize, gpointer, Ptr[Ptr[GError]], Unit]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr5[Ptr[GMarkupParseContext], Ptr[gchar], gsize, gpointer, Ptr[Ptr[GError]], Unit]]] = value
    def passthrough: CFuncPtr5[Ptr[GMarkupParseContext], Ptr[gchar], gsize, gpointer, Ptr[Ptr[GError]], Unit] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr5[Ptr[GMarkupParseContext], Ptr[gchar], gsize, gpointer, Ptr[Ptr[GError]], Unit]]]
    def passthrough_=(value: CFuncPtr5[Ptr[GMarkupParseContext], Ptr[gchar], gsize, gpointer, Ptr[Ptr[GError]], Unit]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr5[Ptr[GMarkupParseContext], Ptr[gchar], gsize, gpointer, Ptr[Ptr[GError]], Unit]]] = value
    def error: CFuncPtr3[Ptr[GMarkupParseContext], Ptr[GError], gpointer, Unit] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMarkupParseContext], Ptr[GError], gpointer, Unit]]]
    def error_=(value: CFuncPtr3[Ptr[GMarkupParseContext], Ptr[GError], gpointer, Unit]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMarkupParseContext], Ptr[GError], gpointer, Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
*/
opaque type GMatchInfo = CStruct0
object GMatchInfo:
  given _tag: Tag[GMatchInfo] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
*/
opaque type GMemChunk = CStruct0
object GMemChunk:
  given _tag: Tag[GMemChunk] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
*/
opaque type GMemVTable = CArray[CChar, Nat.Digit2[Nat._4, Nat._8]]
object GMemVTable:
  given _tag: Tag[GMemVTable] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._8]](Tag.Byte, Tag.Digit2[Nat._4, Nat._8](Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GMemVTable] = scala.scalanative.unsafe.alloc[GMemVTable](1)
  def apply(malloc : CFuncPtr1[gsize, gpointer], realloc : CFuncPtr2[gpointer, gsize, gpointer], free : CFuncPtr1[gpointer, Unit], calloc : CFuncPtr2[gsize, gsize, gpointer], try_malloc : CFuncPtr1[gsize, gpointer], try_realloc : CFuncPtr2[gpointer, gsize, gpointer])(using Zone): Ptr[GMemVTable] = 
    val ____ptr = apply()
    (!____ptr).malloc = malloc
    (!____ptr).realloc = realloc
    (!____ptr).free = free
    (!____ptr).calloc = calloc
    (!____ptr).try_malloc = try_malloc
    (!____ptr).try_realloc = try_realloc
    ____ptr
  extension (struct: GMemVTable)
    def malloc: CFuncPtr1[gsize, gpointer] = !struct.at(0).asInstanceOf[Ptr[CFuncPtr1[gsize, gpointer]]]
    def malloc_=(value: CFuncPtr1[gsize, gpointer]): Unit = !struct.at(0).asInstanceOf[Ptr[CFuncPtr1[gsize, gpointer]]] = value
    def realloc: CFuncPtr2[gpointer, gsize, gpointer] = !struct.at(8).asInstanceOf[Ptr[CFuncPtr2[gpointer, gsize, gpointer]]]
    def realloc_=(value: CFuncPtr2[gpointer, gsize, gpointer]): Unit = !struct.at(8).asInstanceOf[Ptr[CFuncPtr2[gpointer, gsize, gpointer]]] = value
    def free: CFuncPtr1[gpointer, Unit] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[gpointer, Unit]]]
    def free_=(value: CFuncPtr1[gpointer, Unit]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[gpointer, Unit]]] = value
    def calloc: CFuncPtr2[gsize, gsize, gpointer] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr2[gsize, gsize, gpointer]]]
    def calloc_=(value: CFuncPtr2[gsize, gsize, gpointer]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr2[gsize, gsize, gpointer]]] = value
    def try_malloc: CFuncPtr1[gsize, gpointer] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[gsize, gpointer]]]
    def try_malloc_=(value: CFuncPtr1[gsize, gpointer]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[gsize, gpointer]]] = value
    def try_realloc: CFuncPtr2[gpointer, gsize, gpointer] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr2[gpointer, gsize, gpointer]]]
    def try_realloc_=(value: CFuncPtr2[gpointer, gsize, gpointer]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr2[gpointer, gsize, gpointer]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryinputstream.h
*/
opaque type GMemoryInputStream = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GMemoryInputStream:
  given _tag: Tag[GMemoryInputStream] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GMemoryInputStream] = scala.scalanative.unsafe.alloc[GMemoryInputStream](1)
  def apply(parent_instance : GInputStream, priv : Ptr[GMemoryInputStreamPrivate])(using Zone): Ptr[GMemoryInputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GMemoryInputStream)
    def parent_instance: GInputStream = !struct.at(0).asInstanceOf[Ptr[GInputStream]]
    def parent_instance_=(value: GInputStream): Unit = !struct.at(0).asInstanceOf[Ptr[GInputStream]] = value
    def priv: Ptr[GMemoryInputStreamPrivate] = !struct.at(32).asInstanceOf[Ptr[Ptr[GMemoryInputStreamPrivate]]]
    def priv_=(value: Ptr[GMemoryInputStreamPrivate]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[GMemoryInputStreamPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryinputstream.h
*/
opaque type GMemoryInputStreamClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._8, Nat._8]]
object GMemoryInputStreamClass:
  given _tag: Tag[GMemoryInputStreamClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._8, Nat._8]](Tag.Byte, Tag.Digit3[Nat._2, Nat._8, Nat._8](Tag.Nat2, Tag.Nat8, Tag.Nat8))
  def apply()(using Zone): Ptr[GMemoryInputStreamClass] = scala.scalanative.unsafe.alloc[GMemoryInputStreamClass](1)
  def apply(parent_class : GInputStreamClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[GMemoryInputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: GMemoryInputStreamClass)
    def parent_class: GInputStreamClass = !struct.at(0).asInstanceOf[Ptr[GInputStreamClass]]
    def parent_class_=(value: GInputStreamClass): Unit = !struct.at(0).asInstanceOf[Ptr[GInputStreamClass]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(248).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(248).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(256).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(256).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(264).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(264).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(272).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(272).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(280).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(280).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryinputstream.h
*/
opaque type GMemoryInputStreamPrivate = CStruct0
object GMemoryInputStreamPrivate:
  given _tag: Tag[GMemoryInputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmemorymonitor.h
*/
opaque type GMemoryMonitor = CStruct0
object GMemoryMonitor:
  given _tag: Tag[GMemoryMonitor] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmemorymonitor.h
*/
opaque type GMemoryMonitorInterface = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GMemoryMonitorInterface:
  given _tag: Tag[GMemoryMonitorInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GMemoryMonitorInterface] = scala.scalanative.unsafe.alloc[GMemoryMonitorInterface](1)
  def apply(g_iface : GTypeInterface, low_memory_warning : CFuncPtr2[Ptr[GMemoryMonitor], GMemoryMonitorWarningLevel, Unit])(using Zone): Ptr[GMemoryMonitorInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).low_memory_warning = low_memory_warning
    ____ptr
  extension (struct: GMemoryMonitorInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def low_memory_warning: CFuncPtr2[Ptr[GMemoryMonitor], GMemoryMonitorWarningLevel, Unit] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr2[Ptr[GMemoryMonitor], GMemoryMonitorWarningLevel, Unit]]]
    def low_memory_warning_=(value: CFuncPtr2[Ptr[GMemoryMonitor], GMemoryMonitorWarningLevel, Unit]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr2[Ptr[GMemoryMonitor], GMemoryMonitorWarningLevel, Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryoutputstream.h
*/
opaque type GMemoryOutputStream = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GMemoryOutputStream:
  given _tag: Tag[GMemoryOutputStream] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GMemoryOutputStream] = scala.scalanative.unsafe.alloc[GMemoryOutputStream](1)
  def apply(parent_instance : GOutputStream, priv : Ptr[GMemoryOutputStreamPrivate])(using Zone): Ptr[GMemoryOutputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GMemoryOutputStream)
    def parent_instance: GOutputStream = !struct.at(0).asInstanceOf[Ptr[GOutputStream]]
    def parent_instance_=(value: GOutputStream): Unit = !struct.at(0).asInstanceOf[Ptr[GOutputStream]] = value
    def priv: Ptr[GMemoryOutputStreamPrivate] = !struct.at(32).asInstanceOf[Ptr[Ptr[GMemoryOutputStreamPrivate]]]
    def priv_=(value: Ptr[GMemoryOutputStreamPrivate]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[GMemoryOutputStreamPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryoutputstream.h
*/
opaque type GMemoryOutputStreamClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._3, Nat._6]]
object GMemoryOutputStreamClass:
  given _tag: Tag[GMemoryOutputStreamClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._3, Nat._3, Nat._6](Tag.Nat3, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[GMemoryOutputStreamClass] = scala.scalanative.unsafe.alloc[GMemoryOutputStreamClass](1)
  def apply(parent_class : GOutputStreamClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[GMemoryOutputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: GMemoryOutputStreamClass)
    def parent_class: GOutputStreamClass = !struct.at(0).asInstanceOf[Ptr[GOutputStreamClass]]
    def parent_class_=(value: GOutputStreamClass): Unit = !struct.at(0).asInstanceOf[Ptr[GOutputStreamClass]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(296).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(296).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(304).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(304).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(312).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(312).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(320).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(320).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(328).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(328).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryoutputstream.h
*/
opaque type GMemoryOutputStreamPrivate = CStruct0
object GMemoryOutputStreamPrivate:
  given _tag: Tag[GMemoryOutputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
*/
opaque type GMenu = CStruct0
object GMenu:
  given _tag: Tag[GMenu] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
*/
opaque type GMenuAttributeIter = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GMenuAttributeIter:
  given _tag: Tag[GMenuAttributeIter] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GMenuAttributeIter] = scala.scalanative.unsafe.alloc[GMenuAttributeIter](1)
  def apply(parent_instance : GObject, priv : Ptr[GMenuAttributeIterPrivate])(using Zone): Ptr[GMenuAttributeIter] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GMenuAttributeIter)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GMenuAttributeIterPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GMenuAttributeIterPrivate]]]
    def priv_=(value: Ptr[GMenuAttributeIterPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GMenuAttributeIterPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
*/
opaque type GMenuAttributeIterClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._4, Nat._4]]
object GMenuAttributeIterClass:
  given _tag: Tag[GMenuAttributeIterClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._4, Nat._4]](Tag.Byte, Tag.Digit3[Nat._1, Nat._4, Nat._4](Tag.Nat1, Tag.Nat4, Tag.Nat4))
  def apply()(using Zone): Ptr[GMenuAttributeIterClass] = scala.scalanative.unsafe.alloc[GMenuAttributeIterClass](1)
  def apply(parent_class : GObjectClass, get_next : CFuncPtr3[Ptr[GMenuAttributeIter], Ptr[Ptr[gchar]], Ptr[Ptr[GVariant]], gboolean])(using Zone): Ptr[GMenuAttributeIterClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_next = get_next
    ____ptr
  extension (struct: GMenuAttributeIterClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def get_next: CFuncPtr3[Ptr[GMenuAttributeIter], Ptr[Ptr[gchar]], Ptr[Ptr[GVariant]], gboolean] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMenuAttributeIter], Ptr[Ptr[gchar]], Ptr[Ptr[GVariant]], gboolean]]]
    def get_next_=(value: CFuncPtr3[Ptr[GMenuAttributeIter], Ptr[Ptr[gchar]], Ptr[Ptr[GVariant]], gboolean]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMenuAttributeIter], Ptr[Ptr[gchar]], Ptr[Ptr[GVariant]], gboolean]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
*/
opaque type GMenuAttributeIterPrivate = CStruct0
object GMenuAttributeIterPrivate:
  given _tag: Tag[GMenuAttributeIterPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
*/
opaque type GMenuItem = CStruct0
object GMenuItem:
  given _tag: Tag[GMenuItem] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
*/
opaque type GMenuLinkIter = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GMenuLinkIter:
  given _tag: Tag[GMenuLinkIter] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GMenuLinkIter] = scala.scalanative.unsafe.alloc[GMenuLinkIter](1)
  def apply(parent_instance : GObject, priv : Ptr[GMenuLinkIterPrivate])(using Zone): Ptr[GMenuLinkIter] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GMenuLinkIter)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GMenuLinkIterPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GMenuLinkIterPrivate]]]
    def priv_=(value: Ptr[GMenuLinkIterPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GMenuLinkIterPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
*/
opaque type GMenuLinkIterClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._4, Nat._4]]
object GMenuLinkIterClass:
  given _tag: Tag[GMenuLinkIterClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._4, Nat._4]](Tag.Byte, Tag.Digit3[Nat._1, Nat._4, Nat._4](Tag.Nat1, Tag.Nat4, Tag.Nat4))
  def apply()(using Zone): Ptr[GMenuLinkIterClass] = scala.scalanative.unsafe.alloc[GMenuLinkIterClass](1)
  def apply(parent_class : GObjectClass, get_next : CFuncPtr3[Ptr[GMenuLinkIter], Ptr[Ptr[gchar]], Ptr[Ptr[GMenuModel]], gboolean])(using Zone): Ptr[GMenuLinkIterClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_next = get_next
    ____ptr
  extension (struct: GMenuLinkIterClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def get_next: CFuncPtr3[Ptr[GMenuLinkIter], Ptr[Ptr[gchar]], Ptr[Ptr[GMenuModel]], gboolean] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMenuLinkIter], Ptr[Ptr[gchar]], Ptr[Ptr[GMenuModel]], gboolean]]]
    def get_next_=(value: CFuncPtr3[Ptr[GMenuLinkIter], Ptr[Ptr[gchar]], Ptr[Ptr[GMenuModel]], gboolean]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMenuLinkIter], Ptr[Ptr[gchar]], Ptr[Ptr[GMenuModel]], gboolean]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
*/
opaque type GMenuLinkIterPrivate = CStruct0
object GMenuLinkIterPrivate:
  given _tag: Tag[GMenuLinkIterPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
*/
opaque type GMenuModel = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GMenuModel:
  given _tag: Tag[GMenuModel] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GMenuModel] = scala.scalanative.unsafe.alloc[GMenuModel](1)
  def apply(parent_instance : GObject, priv : Ptr[GMenuModelPrivate])(using Zone): Ptr[GMenuModel] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GMenuModel)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GMenuModelPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GMenuModelPrivate]]]
    def priv_=(value: Ptr[GMenuModelPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GMenuModelPrivate]]] = value

/**
 * GMenuModelClass::get_item_attributes: : the #GMenuModel to query _index: The #GMenuItem to query : (out) (element-type utf8 GLib.Variant): Attributes on the item

 * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
*/
opaque type GMenuModelClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._0, Nat._0]]
object GMenuModelClass:
  given _tag: Tag[GMenuModelClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._0, Nat._0]](Tag.Byte, Tag.Digit3[Nat._2, Nat._0, Nat._0](Tag.Nat2, Tag.Nat0, Tag.Nat0))
  def apply()(using Zone): Ptr[GMenuModelClass] = scala.scalanative.unsafe.alloc[GMenuModelClass](1)
  def apply(parent_class : GObjectClass, is_mutable : CFuncPtr1[Ptr[GMenuModel], gboolean], get_n_items : CFuncPtr1[Ptr[GMenuModel], gint], get_item_attributes : CFuncPtr3[Ptr[GMenuModel], gint, Ptr[Ptr[GHashTable]], Unit], iterate_item_attributes : CFuncPtr2[Ptr[GMenuModel], gint, Ptr[GMenuAttributeIter]], get_item_attribute_value : CFuncPtr4[Ptr[GMenuModel], gint, Ptr[gchar], Ptr[GVariantType], Ptr[GVariant]], get_item_links : CFuncPtr3[Ptr[GMenuModel], gint, Ptr[Ptr[GHashTable]], Unit], iterate_item_links : CFuncPtr2[Ptr[GMenuModel], gint, Ptr[GMenuLinkIter]], get_item_link : CFuncPtr3[Ptr[GMenuModel], gint, Ptr[gchar], Ptr[GMenuModel]])(using Zone): Ptr[GMenuModelClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).is_mutable = is_mutable
    (!____ptr).get_n_items = get_n_items
    (!____ptr).get_item_attributes = get_item_attributes
    (!____ptr).iterate_item_attributes = iterate_item_attributes
    (!____ptr).get_item_attribute_value = get_item_attribute_value
    (!____ptr).get_item_links = get_item_links
    (!____ptr).iterate_item_links = iterate_item_links
    (!____ptr).get_item_link = get_item_link
    ____ptr
  extension (struct: GMenuModelClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def is_mutable: CFuncPtr1[Ptr[GMenuModel], gboolean] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMenuModel], gboolean]]]
    def is_mutable_=(value: CFuncPtr1[Ptr[GMenuModel], gboolean]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMenuModel], gboolean]]] = value
    def get_n_items: CFuncPtr1[Ptr[GMenuModel], gint] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMenuModel], gint]]]
    def get_n_items_=(value: CFuncPtr1[Ptr[GMenuModel], gint]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMenuModel], gint]]] = value
    def get_item_attributes: CFuncPtr3[Ptr[GMenuModel], gint, Ptr[Ptr[GHashTable]], Unit] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMenuModel], gint, Ptr[Ptr[GHashTable]], Unit]]]
    def get_item_attributes_=(value: CFuncPtr3[Ptr[GMenuModel], gint, Ptr[Ptr[GHashTable]], Unit]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMenuModel], gint, Ptr[Ptr[GHashTable]], Unit]]] = value
    def iterate_item_attributes: CFuncPtr2[Ptr[GMenuModel], gint, Ptr[GMenuAttributeIter]] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr2[Ptr[GMenuModel], gint, Ptr[GMenuAttributeIter]]]]
    def iterate_item_attributes_=(value: CFuncPtr2[Ptr[GMenuModel], gint, Ptr[GMenuAttributeIter]]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr2[Ptr[GMenuModel], gint, Ptr[GMenuAttributeIter]]]] = value
    def get_item_attribute_value: CFuncPtr4[Ptr[GMenuModel], gint, Ptr[gchar], Ptr[GVariantType], Ptr[GVariant]] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr4[Ptr[GMenuModel], gint, Ptr[gchar], Ptr[GVariantType], Ptr[GVariant]]]]
    def get_item_attribute_value_=(value: CFuncPtr4[Ptr[GMenuModel], gint, Ptr[gchar], Ptr[GVariantType], Ptr[GVariant]]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr4[Ptr[GMenuModel], gint, Ptr[gchar], Ptr[GVariantType], Ptr[GVariant]]]] = value
    def get_item_links: CFuncPtr3[Ptr[GMenuModel], gint, Ptr[Ptr[GHashTable]], Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMenuModel], gint, Ptr[Ptr[GHashTable]], Unit]]]
    def get_item_links_=(value: CFuncPtr3[Ptr[GMenuModel], gint, Ptr[Ptr[GHashTable]], Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMenuModel], gint, Ptr[Ptr[GHashTable]], Unit]]] = value
    def iterate_item_links: CFuncPtr2[Ptr[GMenuModel], gint, Ptr[GMenuLinkIter]] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr2[Ptr[GMenuModel], gint, Ptr[GMenuLinkIter]]]]
    def iterate_item_links_=(value: CFuncPtr2[Ptr[GMenuModel], gint, Ptr[GMenuLinkIter]]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr2[Ptr[GMenuModel], gint, Ptr[GMenuLinkIter]]]] = value
    def get_item_link: CFuncPtr3[Ptr[GMenuModel], gint, Ptr[gchar], Ptr[GMenuModel]] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMenuModel], gint, Ptr[gchar], Ptr[GMenuModel]]]]
    def get_item_link_=(value: CFuncPtr3[Ptr[GMenuModel], gint, Ptr[gchar], Ptr[GMenuModel]]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMenuModel], gint, Ptr[gchar], Ptr[GMenuModel]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
*/
opaque type GMenuModelPrivate = CStruct0
object GMenuModelPrivate:
  given _tag: Tag[GMenuModelPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gmodule.h
*/
opaque type GModule = CStruct0
object GModule:
  given _tag: Tag[GModule] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GMount = CStruct0
object GMount:
  given _tag: Tag[GMount] = Tag.materializeCStruct0Tag

/**
 * GMountIface: _iface: The parent interface. : Changed signal that is emitted when the mount's state has changed. : The unmounted signal that is emitted when the #GMount have been unmounted. If the recipient is holding references to the object they should release them so the object can be finalized.

 * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
*/
opaque type GMountIface = CArray[CChar, Nat.Digit3[Nat._2, Nat._3, Nat._2]]
object GMountIface:
  given _tag: Tag[GMountIface] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._3, Nat._2]](Tag.Byte, Tag.Digit3[Nat._2, Nat._3, Nat._2](Tag.Nat2, Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GMountIface] = scala.scalanative.unsafe.alloc[GMountIface](1)
  def apply(g_iface : GTypeInterface, changed : CFuncPtr1[Ptr[GMount], Unit], unmounted : CFuncPtr1[Ptr[GMount], Unit], get_root : CFuncPtr1[Ptr[GMount], Ptr[GFile]], get_name : CFuncPtr1[Ptr[GMount], CString], get_icon : CFuncPtr1[Ptr[GMount], Ptr[GIcon]], get_uuid : CFuncPtr1[Ptr[GMount], CString], get_volume : CFuncPtr1[Ptr[GMount], Ptr[GVolume]], get_drive : CFuncPtr1[Ptr[GMount], Ptr[GDrive]], can_unmount : CFuncPtr1[Ptr[GMount], gboolean], can_eject : CFuncPtr1[Ptr[GMount], gboolean], unmount : CFuncPtr5[Ptr[GMount], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], unmount_finish : CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], eject : CFuncPtr5[Ptr[GMount], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], eject_finish : CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], remount : CFuncPtr6[Ptr[GMount], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], remount_finish : CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], guess_content_type : CFuncPtr5[Ptr[GMount], gboolean, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], guess_content_type_finish : CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]], guess_content_type_sync : CFuncPtr4[Ptr[GMount], gboolean, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]], pre_unmount : CFuncPtr1[Ptr[GMount], Unit], unmount_with_operation : CFuncPtr6[Ptr[GMount], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], unmount_with_operation_finish : CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], eject_with_operation : CFuncPtr6[Ptr[GMount], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], eject_with_operation_finish : CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], get_default_location : CFuncPtr1[Ptr[GMount], Ptr[GFile]], get_sort_key : CFuncPtr1[Ptr[GMount], Ptr[gchar]], get_symbolic_icon : CFuncPtr1[Ptr[GMount], Ptr[GIcon]])(using Zone): Ptr[GMountIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).changed = changed
    (!____ptr).unmounted = unmounted
    (!____ptr).get_root = get_root
    (!____ptr).get_name = get_name
    (!____ptr).get_icon = get_icon
    (!____ptr).get_uuid = get_uuid
    (!____ptr).get_volume = get_volume
    (!____ptr).get_drive = get_drive
    (!____ptr).can_unmount = can_unmount
    (!____ptr).can_eject = can_eject
    (!____ptr).unmount = unmount
    (!____ptr).unmount_finish = unmount_finish
    (!____ptr).eject = eject
    (!____ptr).eject_finish = eject_finish
    (!____ptr).remount = remount
    (!____ptr).remount_finish = remount_finish
    (!____ptr).guess_content_type = guess_content_type
    (!____ptr).guess_content_type_finish = guess_content_type_finish
    (!____ptr).guess_content_type_sync = guess_content_type_sync
    (!____ptr).pre_unmount = pre_unmount
    (!____ptr).unmount_with_operation = unmount_with_operation
    (!____ptr).unmount_with_operation_finish = unmount_with_operation_finish
    (!____ptr).eject_with_operation = eject_with_operation
    (!____ptr).eject_with_operation_finish = eject_with_operation_finish
    (!____ptr).get_default_location = get_default_location
    (!____ptr).get_sort_key = get_sort_key
    (!____ptr).get_symbolic_icon = get_symbolic_icon
    ____ptr
  extension (struct: GMountIface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def changed: CFuncPtr1[Ptr[GMount], Unit] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Unit]]]
    def changed_=(value: CFuncPtr1[Ptr[GMount], Unit]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Unit]]] = value
    def unmounted: CFuncPtr1[Ptr[GMount], Unit] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Unit]]]
    def unmounted_=(value: CFuncPtr1[Ptr[GMount], Unit]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Unit]]] = value
    def get_root: CFuncPtr1[Ptr[GMount], Ptr[GFile]] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GFile]]]]
    def get_root_=(value: CFuncPtr1[Ptr[GMount], Ptr[GFile]]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GFile]]]] = value
    def get_name: CFuncPtr1[Ptr[GMount], CString] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], CString]]]
    def get_name_=(value: CFuncPtr1[Ptr[GMount], CString]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], CString]]] = value
    def get_icon: CFuncPtr1[Ptr[GMount], Ptr[GIcon]] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GIcon]]]]
    def get_icon_=(value: CFuncPtr1[Ptr[GMount], Ptr[GIcon]]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GIcon]]]] = value
    def get_uuid: CFuncPtr1[Ptr[GMount], CString] = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], CString]]]
    def get_uuid_=(value: CFuncPtr1[Ptr[GMount], CString]): Unit = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], CString]]] = value
    def get_volume: CFuncPtr1[Ptr[GMount], Ptr[GVolume]] = !struct.at(64).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GVolume]]]]
    def get_volume_=(value: CFuncPtr1[Ptr[GMount], Ptr[GVolume]]): Unit = !struct.at(64).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GVolume]]]] = value
    def get_drive: CFuncPtr1[Ptr[GMount], Ptr[GDrive]] = !struct.at(72).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GDrive]]]]
    def get_drive_=(value: CFuncPtr1[Ptr[GMount], Ptr[GDrive]]): Unit = !struct.at(72).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GDrive]]]] = value
    def can_unmount: CFuncPtr1[Ptr[GMount], gboolean] = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], gboolean]]]
    def can_unmount_=(value: CFuncPtr1[Ptr[GMount], gboolean]): Unit = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], gboolean]]] = value
    def can_eject: CFuncPtr1[Ptr[GMount], gboolean] = !struct.at(88).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], gboolean]]]
    def can_eject_=(value: CFuncPtr1[Ptr[GMount], gboolean]): Unit = !struct.at(88).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], gboolean]]] = value
    def unmount: CFuncPtr5[Ptr[GMount], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(96).asInstanceOf[Ptr[CFuncPtr5[Ptr[GMount], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def unmount_=(value: CFuncPtr5[Ptr[GMount], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(96).asInstanceOf[Ptr[CFuncPtr5[Ptr[GMount], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def unmount_finish: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(104).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def unmount_finish_=(value: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(104).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def eject: CFuncPtr5[Ptr[GMount], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(112).asInstanceOf[Ptr[CFuncPtr5[Ptr[GMount], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def eject_=(value: CFuncPtr5[Ptr[GMount], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(112).asInstanceOf[Ptr[CFuncPtr5[Ptr[GMount], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def eject_finish: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(120).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def eject_finish_=(value: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(120).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def remount: CFuncPtr6[Ptr[GMount], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(128).asInstanceOf[Ptr[CFuncPtr6[Ptr[GMount], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def remount_=(value: CFuncPtr6[Ptr[GMount], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(128).asInstanceOf[Ptr[CFuncPtr6[Ptr[GMount], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def remount_finish: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def remount_finish_=(value: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def guess_content_type: CFuncPtr5[Ptr[GMount], gboolean, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr5[Ptr[GMount], gboolean, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def guess_content_type_=(value: CFuncPtr5[Ptr[GMount], gboolean, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr5[Ptr[GMount], gboolean, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def guess_content_type_finish: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]]]
    def guess_content_type_finish_=(value: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]]] = value
    def guess_content_type_sync: CFuncPtr4[Ptr[GMount], gboolean, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr4[Ptr[GMount], gboolean, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]]]
    def guess_content_type_sync_=(value: CFuncPtr4[Ptr[GMount], gboolean, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr4[Ptr[GMount], gboolean, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]]] = value
    def pre_unmount: CFuncPtr1[Ptr[GMount], Unit] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Unit]]]
    def pre_unmount_=(value: CFuncPtr1[Ptr[GMount], Unit]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Unit]]] = value
    def unmount_with_operation: CFuncPtr6[Ptr[GMount], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr6[Ptr[GMount], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def unmount_with_operation_=(value: CFuncPtr6[Ptr[GMount], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr6[Ptr[GMount], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def unmount_with_operation_finish: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def unmount_with_operation_finish_=(value: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def eject_with_operation: CFuncPtr6[Ptr[GMount], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr6[Ptr[GMount], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def eject_with_operation_=(value: CFuncPtr6[Ptr[GMount], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr6[Ptr[GMount], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def eject_with_operation_finish: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def eject_with_operation_finish_=(value: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def get_default_location: CFuncPtr1[Ptr[GMount], Ptr[GFile]] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GFile]]]]
    def get_default_location_=(value: CFuncPtr1[Ptr[GMount], Ptr[GFile]]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GFile]]]] = value
    def get_sort_key: CFuncPtr1[Ptr[GMount], Ptr[gchar]] = !struct.at(216).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[gchar]]]]
    def get_sort_key_=(value: CFuncPtr1[Ptr[GMount], Ptr[gchar]]): Unit = !struct.at(216).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[gchar]]]] = value
    def get_symbolic_icon: CFuncPtr1[Ptr[GMount], Ptr[GIcon]] = !struct.at(224).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GIcon]]]]
    def get_symbolic_icon_=(value: CFuncPtr1[Ptr[GMount], Ptr[GIcon]]): Unit = !struct.at(224).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GIcon]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
*/
opaque type GMountOperation = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GMountOperation:
  given _tag: Tag[GMountOperation] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GMountOperation] = scala.scalanative.unsafe.alloc[GMountOperation](1)
  def apply(parent_instance : GObject, priv : Ptr[GMountOperationPrivate])(using Zone): Ptr[GMountOperation] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GMountOperation)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GMountOperationPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GMountOperationPrivate]]]
    def priv_=(value: Ptr[GMountOperationPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GMountOperationPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
*/
opaque type GMountOperationClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._5, Nat._6]]
object GMountOperationClass:
  given _tag: Tag[GMountOperationClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._5, Nat._6]](Tag.Byte, Tag.Digit3[Nat._2, Nat._5, Nat._6](Tag.Nat2, Tag.Nat5, Tag.Nat6))
  def apply()(using Zone): Ptr[GMountOperationClass] = scala.scalanative.unsafe.alloc[GMountOperationClass](1)
  def apply(parent_class : GObjectClass, ask_password : CFuncPtr5[Ptr[GMountOperation], CString, CString, CString, GAskPasswordFlags, Unit], ask_question : CFuncPtr3[Ptr[GMountOperation], CString, Ptr[CString], Unit], reply : CFuncPtr2[Ptr[GMountOperation], GMountOperationResult, Unit], aborted : CFuncPtr1[Ptr[GMountOperation], Unit], show_processes : CFuncPtr4[Ptr[GMountOperation], Ptr[gchar], Ptr[GArray], Ptr[Ptr[gchar]], Unit], show_unmount_progress : CFuncPtr4[Ptr[GMountOperation], Ptr[gchar], gint64, gint64, Unit], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit], _g_reserved7 : CFuncPtr0[Unit], _g_reserved8 : CFuncPtr0[Unit], _g_reserved9 : CFuncPtr0[Unit])(using Zone): Ptr[GMountOperationClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).ask_password = ask_password
    (!____ptr).ask_question = ask_question
    (!____ptr).reply = reply
    (!____ptr).aborted = aborted
    (!____ptr).show_processes = show_processes
    (!____ptr).show_unmount_progress = show_unmount_progress
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    (!____ptr)._g_reserved7 = _g_reserved7
    (!____ptr)._g_reserved8 = _g_reserved8
    (!____ptr)._g_reserved9 = _g_reserved9
    ____ptr
  extension (struct: GMountOperationClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def ask_password: CFuncPtr5[Ptr[GMountOperation], CString, CString, CString, GAskPasswordFlags, Unit] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr5[Ptr[GMountOperation], CString, CString, CString, GAskPasswordFlags, Unit]]]
    def ask_password_=(value: CFuncPtr5[Ptr[GMountOperation], CString, CString, CString, GAskPasswordFlags, Unit]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr5[Ptr[GMountOperation], CString, CString, CString, GAskPasswordFlags, Unit]]] = value
    def ask_question: CFuncPtr3[Ptr[GMountOperation], CString, Ptr[CString], Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMountOperation], CString, Ptr[CString], Unit]]]
    def ask_question_=(value: CFuncPtr3[Ptr[GMountOperation], CString, Ptr[CString], Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMountOperation], CString, Ptr[CString], Unit]]] = value
    def reply: CFuncPtr2[Ptr[GMountOperation], GMountOperationResult, Unit] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr2[Ptr[GMountOperation], GMountOperationResult, Unit]]]
    def reply_=(value: CFuncPtr2[Ptr[GMountOperation], GMountOperationResult, Unit]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr2[Ptr[GMountOperation], GMountOperationResult, Unit]]] = value
    def aborted: CFuncPtr1[Ptr[GMountOperation], Unit] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMountOperation], Unit]]]
    def aborted_=(value: CFuncPtr1[Ptr[GMountOperation], Unit]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMountOperation], Unit]]] = value
    def show_processes: CFuncPtr4[Ptr[GMountOperation], Ptr[gchar], Ptr[GArray], Ptr[Ptr[gchar]], Unit] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr4[Ptr[GMountOperation], Ptr[gchar], Ptr[GArray], Ptr[Ptr[gchar]], Unit]]]
    def show_processes_=(value: CFuncPtr4[Ptr[GMountOperation], Ptr[gchar], Ptr[GArray], Ptr[Ptr[gchar]], Unit]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr4[Ptr[GMountOperation], Ptr[gchar], Ptr[GArray], Ptr[Ptr[gchar]], Unit]]] = value
    def show_unmount_progress: CFuncPtr4[Ptr[GMountOperation], Ptr[gchar], gint64, gint64, Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr4[Ptr[GMountOperation], Ptr[gchar], gint64, gint64, Unit]]]
    def show_unmount_progress_=(value: CFuncPtr4[Ptr[GMountOperation], Ptr[gchar], gint64, gint64, Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr4[Ptr[GMountOperation], Ptr[gchar], gint64, gint64, Unit]]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(216).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(216).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved6: CFuncPtr0[Unit] = !struct.at(224).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at(224).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved7: CFuncPtr0[Unit] = !struct.at(232).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved7_=(value: CFuncPtr0[Unit]): Unit = !struct.at(232).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved8: CFuncPtr0[Unit] = !struct.at(240).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved8_=(value: CFuncPtr0[Unit]): Unit = !struct.at(240).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved9: CFuncPtr0[Unit] = !struct.at(248).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved9_=(value: CFuncPtr0[Unit]): Unit = !struct.at(248).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
*/
opaque type GMountOperationPrivate = CStruct0
object GMountOperationPrivate:
  given _tag: Tag[GMountOperationPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnativesocketaddress.h
*/
opaque type GNativeSocketAddress = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GNativeSocketAddress:
  given _tag: Tag[GNativeSocketAddress] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GNativeSocketAddress] = scala.scalanative.unsafe.alloc[GNativeSocketAddress](1)
  def apply(parent_instance : GSocketAddress, priv : Ptr[GNativeSocketAddressPrivate])(using Zone): Ptr[GNativeSocketAddress] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GNativeSocketAddress)
    def parent_instance: GSocketAddress = !struct.at(0).asInstanceOf[Ptr[GSocketAddress]]
    def parent_instance_=(value: GSocketAddress): Unit = !struct.at(0).asInstanceOf[Ptr[GSocketAddress]] = value
    def priv: Ptr[GNativeSocketAddressPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GNativeSocketAddressPrivate]]]
    def priv_=(value: Ptr[GNativeSocketAddressPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GNativeSocketAddressPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnativesocketaddress.h
*/
opaque type GNativeSocketAddressClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._6, Nat._0]]
object GNativeSocketAddressClass:
  given _tag: Tag[GNativeSocketAddressClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._6, Nat._0]](Tag.Byte, Tag.Digit3[Nat._1, Nat._6, Nat._0](Tag.Nat1, Tag.Nat6, Tag.Nat0))
  def apply()(using Zone): Ptr[GNativeSocketAddressClass] = scala.scalanative.unsafe.alloc[GNativeSocketAddressClass](1)
  def apply(parent_class : GSocketAddressClass)(using Zone): Ptr[GNativeSocketAddressClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: GNativeSocketAddressClass)
    def parent_class: GSocketAddressClass = !struct.at(0).asInstanceOf[Ptr[GSocketAddressClass]]
    def parent_class_=(value: GSocketAddressClass): Unit = !struct.at(0).asInstanceOf[Ptr[GSocketAddressClass]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnativesocketaddress.h
*/
opaque type GNativeSocketAddressPrivate = CStruct0
object GNativeSocketAddressPrivate:
  given _tag: Tag[GNativeSocketAddressPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnativevolumemonitor.h
*/
opaque type GNativeVolumeMonitor = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GNativeVolumeMonitor:
  given _tag: Tag[GNativeVolumeMonitor] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GNativeVolumeMonitor] = scala.scalanative.unsafe.alloc[GNativeVolumeMonitor](1)
  def apply(parent_instance : GVolumeMonitor)(using Zone): Ptr[GNativeVolumeMonitor] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: GNativeVolumeMonitor)
    def parent_instance: GVolumeMonitor = !struct.at(0).asInstanceOf[Ptr[GVolumeMonitor]]
    def parent_instance_=(value: GVolumeMonitor): Unit = !struct.at(0).asInstanceOf[Ptr[GVolumeMonitor]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnativevolumemonitor.h
*/
opaque type GNativeVolumeMonitorClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._4, Nat._4]]
object GNativeVolumeMonitorClass:
  given _tag: Tag[GNativeVolumeMonitorClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._4, Nat._4]](Tag.Byte, Tag.Digit3[Nat._3, Nat._4, Nat._4](Tag.Nat3, Tag.Nat4, Tag.Nat4))
  def apply()(using Zone): Ptr[GNativeVolumeMonitorClass] = scala.scalanative.unsafe.alloc[GNativeVolumeMonitorClass](1)
  def apply(parent_class : GVolumeMonitorClass, get_mount_for_mount_path : CFuncPtr2[CString, Ptr[GCancellable], Ptr[GMount]])(using Zone): Ptr[GNativeVolumeMonitorClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_mount_for_mount_path = get_mount_for_mount_path
    ____ptr
  extension (struct: GNativeVolumeMonitorClass)
    def parent_class: GVolumeMonitorClass = !struct.at(0).asInstanceOf[Ptr[GVolumeMonitorClass]]
    def parent_class_=(value: GVolumeMonitorClass): Unit = !struct.at(0).asInstanceOf[Ptr[GVolumeMonitorClass]] = value
    def get_mount_for_mount_path: CFuncPtr2[CString, Ptr[GCancellable], Ptr[GMount]] = !struct.at(336).asInstanceOf[Ptr[CFuncPtr2[CString, Ptr[GCancellable], Ptr[GMount]]]]
    def get_mount_for_mount_path_=(value: CFuncPtr2[CString, Ptr[GCancellable], Ptr[GMount]]): Unit = !struct.at(336).asInstanceOf[Ptr[CFuncPtr2[CString, Ptr[GCancellable], Ptr[GMount]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkaddress.h
*/
opaque type GNetworkAddress = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GNetworkAddress:
  given _tag: Tag[GNetworkAddress] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GNetworkAddress] = scala.scalanative.unsafe.alloc[GNetworkAddress](1)
  def apply(parent_instance : GObject, priv : Ptr[GNetworkAddressPrivate])(using Zone): Ptr[GNetworkAddress] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GNetworkAddress)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GNetworkAddressPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GNetworkAddressPrivate]]]
    def priv_=(value: Ptr[GNetworkAddressPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GNetworkAddressPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkaddress.h
*/
opaque type GNetworkAddressClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object GNetworkAddressClass:
  given _tag: Tag[GNetworkAddressClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[GNetworkAddressClass] = scala.scalanative.unsafe.alloc[GNetworkAddressClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[GNetworkAddressClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: GNetworkAddressClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkaddress.h
*/
opaque type GNetworkAddressPrivate = CStruct0
object GNetworkAddressPrivate:
  given _tag: Tag[GNetworkAddressPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GNetworkMonitor = CStruct0
object GNetworkMonitor:
  given _tag: Tag[GNetworkMonitor] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkmonitor.h
*/
opaque type GNetworkMonitorInterface = CArray[CChar, Nat.Digit2[Nat._4, Nat._8]]
object GNetworkMonitorInterface:
  given _tag: Tag[GNetworkMonitorInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._8]](Tag.Byte, Tag.Digit2[Nat._4, Nat._8](Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GNetworkMonitorInterface] = scala.scalanative.unsafe.alloc[GNetworkMonitorInterface](1)
  def apply(g_iface : GTypeInterface, network_changed : CFuncPtr2[Ptr[GNetworkMonitor], gboolean, Unit], can_reach : CFuncPtr4[Ptr[GNetworkMonitor], Ptr[GSocketConnectable], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], can_reach_async : CFuncPtr5[Ptr[GNetworkMonitor], Ptr[GSocketConnectable], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], can_reach_finish : CFuncPtr3[Ptr[GNetworkMonitor], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean])(using Zone): Ptr[GNetworkMonitorInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).network_changed = network_changed
    (!____ptr).can_reach = can_reach
    (!____ptr).can_reach_async = can_reach_async
    (!____ptr).can_reach_finish = can_reach_finish
    ____ptr
  extension (struct: GNetworkMonitorInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def network_changed: CFuncPtr2[Ptr[GNetworkMonitor], gboolean, Unit] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr2[Ptr[GNetworkMonitor], gboolean, Unit]]]
    def network_changed_=(value: CFuncPtr2[Ptr[GNetworkMonitor], gboolean, Unit]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr2[Ptr[GNetworkMonitor], gboolean, Unit]]] = value
    def can_reach: CFuncPtr4[Ptr[GNetworkMonitor], Ptr[GSocketConnectable], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr4[Ptr[GNetworkMonitor], Ptr[GSocketConnectable], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def can_reach_=(value: CFuncPtr4[Ptr[GNetworkMonitor], Ptr[GSocketConnectable], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr4[Ptr[GNetworkMonitor], Ptr[GSocketConnectable], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def can_reach_async: CFuncPtr5[Ptr[GNetworkMonitor], Ptr[GSocketConnectable], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr5[Ptr[GNetworkMonitor], Ptr[GSocketConnectable], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def can_reach_async_=(value: CFuncPtr5[Ptr[GNetworkMonitor], Ptr[GSocketConnectable], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr5[Ptr[GNetworkMonitor], Ptr[GSocketConnectable], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def can_reach_finish: CFuncPtr3[Ptr[GNetworkMonitor], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr3[Ptr[GNetworkMonitor], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def can_reach_finish_=(value: CFuncPtr3[Ptr[GNetworkMonitor], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr3[Ptr[GNetworkMonitor], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkservice.h
*/
opaque type GNetworkService = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GNetworkService:
  given _tag: Tag[GNetworkService] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GNetworkService] = scala.scalanative.unsafe.alloc[GNetworkService](1)
  def apply(parent_instance : GObject, priv : Ptr[GNetworkServicePrivate])(using Zone): Ptr[GNetworkService] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GNetworkService)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GNetworkServicePrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GNetworkServicePrivate]]]
    def priv_=(value: Ptr[GNetworkServicePrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GNetworkServicePrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkservice.h
*/
opaque type GNetworkServiceClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object GNetworkServiceClass:
  given _tag: Tag[GNetworkServiceClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[GNetworkServiceClass] = scala.scalanative.unsafe.alloc[GNetworkServiceClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[GNetworkServiceClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: GNetworkServiceClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkservice.h
*/
opaque type GNetworkServicePrivate = CStruct0
object GNetworkServicePrivate:
  given _tag: Tag[GNetworkServicePrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
*/
opaque type GNode = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GNode:
  given _tag: Tag[GNode] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GNode] = scala.scalanative.unsafe.alloc[GNode](1)
  def apply(data : gpointer, next : Ptr[GNode], prev : Ptr[GNode], parent : Ptr[GNode], children : Ptr[GNode])(using Zone): Ptr[GNode] = 
    val ____ptr = apply()
    (!____ptr).data = data
    (!____ptr).next = next
    (!____ptr).prev = prev
    (!____ptr).parent = parent
    (!____ptr).children = children
    ____ptr
  extension (struct: GNode)
    def data: gpointer = !struct.at(0).asInstanceOf[Ptr[gpointer]]
    def data_=(value: gpointer): Unit = !struct.at(0).asInstanceOf[Ptr[gpointer]] = value
    def next: Ptr[GNode] = !struct.at(8).asInstanceOf[Ptr[Ptr[GNode]]]
    def next_=(value: Ptr[GNode]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[GNode]]] = value
    def prev: Ptr[GNode] = !struct.at(16).asInstanceOf[Ptr[Ptr[GNode]]]
    def prev_=(value: Ptr[GNode]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[GNode]]] = value
    def parent: Ptr[GNode] = !struct.at(24).asInstanceOf[Ptr[Ptr[GNode]]]
    def parent_=(value: Ptr[GNode]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GNode]]] = value
    def children: Ptr[GNode] = !struct.at(32).asInstanceOf[Ptr[Ptr[GNode]]]
    def children_=(value: Ptr[GNode]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[GNode]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GNotification = CStruct0
object GNotification:
  given _tag: Tag[GNotification] = Tag.materializeCStruct0Tag

/**
 * GObject:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
*/
opaque type GObject = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GObject:
  given _tag: Tag[GObject] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GObject] = scala.scalanative.unsafe.alloc[GObject](1)
  def apply(g_type_instance : GTypeInstance, ref_count : guint, qdata : Ptr[GData])(using Zone): Ptr[GObject] = 
    val ____ptr = apply()
    (!____ptr).g_type_instance = g_type_instance
    (!____ptr).ref_count = ref_count
    (!____ptr).qdata = qdata
    ____ptr
  extension (struct: GObject)
    def g_type_instance: GTypeInstance = !struct.at(0).asInstanceOf[Ptr[GTypeInstance]]
    def g_type_instance_=(value: GTypeInstance): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInstance]] = value
    def ref_count: guint = !struct.at(8).asInstanceOf[Ptr[guint]]
    def ref_count_=(value: guint): Unit = !struct.at(8).asInstanceOf[Ptr[guint]] = value
    def qdata: Ptr[GData] = !struct.at(16).asInstanceOf[Ptr[Ptr[GData]]]
    def qdata_=(value: Ptr[GData]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[GData]]] = value

/**
 * GObjectClass: _type_class: the parent class : the function is called by g_object_new () to complete the object initialization after all the construction properties are set. The first thing a implementation must do is chain up to the of the parent class. Overriding should be rarely needed, e.g. to handle construct properties, or to implement singletons.

 * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
*/
opaque type GObjectClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object GObjectClass:
  given _tag: Tag[GObjectClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[GObjectClass] = scala.scalanative.unsafe.alloc[GObjectClass](1)
  def apply(g_type_class : GTypeClass, construct_properties : Ptr[GSList], constructor : CFuncPtr3[GType, guint, Ptr[GObjectConstructParam], Ptr[GObject]], set_property : CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit], get_property : CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit], dispose : CFuncPtr1[Ptr[GObject], Unit], finalize : CFuncPtr1[Ptr[GObject], Unit], dispatch_properties_changed : CFuncPtr3[Ptr[GObject], guint, Ptr[Ptr[GParamSpec]], Unit], _notify : CFuncPtr2[Ptr[GObject], Ptr[GParamSpec], Unit], constructed : CFuncPtr1[Ptr[GObject], Unit], flags : gsize, pdummy : CArray[gpointer, Nat._6])(using Zone): Ptr[GObjectClass] = 
    val ____ptr = apply()
    (!____ptr).g_type_class = g_type_class
    (!____ptr).construct_properties = construct_properties
    (!____ptr).constructor = constructor
    (!____ptr).set_property = set_property
    (!____ptr).get_property = get_property
    (!____ptr).dispose = dispose
    (!____ptr).finalize = finalize
    (!____ptr).dispatch_properties_changed = dispatch_properties_changed
    (!____ptr)._notify = _notify
    (!____ptr).constructed = constructed
    (!____ptr).flags = flags
    (!____ptr).pdummy = pdummy
    ____ptr
  extension (struct: GObjectClass)
    def g_type_class: GTypeClass = !struct.at(0).asInstanceOf[Ptr[GTypeClass]]
    def g_type_class_=(value: GTypeClass): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeClass]] = value
    def construct_properties: Ptr[GSList] = !struct.at(8).asInstanceOf[Ptr[Ptr[GSList]]]
    def construct_properties_=(value: Ptr[GSList]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[GSList]]] = value
    def constructor: CFuncPtr3[GType, guint, Ptr[GObjectConstructParam], Ptr[GObject]] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr3[GType, guint, Ptr[GObjectConstructParam], Ptr[GObject]]]]
    def constructor_=(value: CFuncPtr3[GType, guint, Ptr[GObjectConstructParam], Ptr[GObject]]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr3[GType, guint, Ptr[GObjectConstructParam], Ptr[GObject]]]] = value
    def set_property: CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit]]]
    def set_property_=(value: CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit]]] = value
    def get_property: CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit]]]
    def get_property_=(value: CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit]]] = value
    def dispose: CFuncPtr1[Ptr[GObject], Unit] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GObject], Unit]]]
    def dispose_=(value: CFuncPtr1[Ptr[GObject], Unit]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GObject], Unit]]] = value
    def finalize: CFuncPtr1[Ptr[GObject], Unit] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GObject], Unit]]]
    def finalize_=(value: CFuncPtr1[Ptr[GObject], Unit]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GObject], Unit]]] = value
    def dispatch_properties_changed: CFuncPtr3[Ptr[GObject], guint, Ptr[Ptr[GParamSpec]], Unit] = !struct.at(56).asInstanceOf[Ptr[CFuncPtr3[Ptr[GObject], guint, Ptr[Ptr[GParamSpec]], Unit]]]
    def dispatch_properties_changed_=(value: CFuncPtr3[Ptr[GObject], guint, Ptr[Ptr[GParamSpec]], Unit]): Unit = !struct.at(56).asInstanceOf[Ptr[CFuncPtr3[Ptr[GObject], guint, Ptr[Ptr[GParamSpec]], Unit]]] = value
    def _notify: CFuncPtr2[Ptr[GObject], Ptr[GParamSpec], Unit] = !struct.at(64).asInstanceOf[Ptr[CFuncPtr2[Ptr[GObject], Ptr[GParamSpec], Unit]]]
    def _notify_=(value: CFuncPtr2[Ptr[GObject], Ptr[GParamSpec], Unit]): Unit = !struct.at(64).asInstanceOf[Ptr[CFuncPtr2[Ptr[GObject], Ptr[GParamSpec], Unit]]] = value
    def constructed: CFuncPtr1[Ptr[GObject], Unit] = !struct.at(72).asInstanceOf[Ptr[CFuncPtr1[Ptr[GObject], Unit]]]
    def constructed_=(value: CFuncPtr1[Ptr[GObject], Unit]): Unit = !struct.at(72).asInstanceOf[Ptr[CFuncPtr1[Ptr[GObject], Unit]]] = value
    def flags: gsize = !struct.at(80).asInstanceOf[Ptr[gsize]]
    def flags_=(value: gsize): Unit = !struct.at(80).asInstanceOf[Ptr[gsize]] = value
    def pdummy: CArray[gpointer, Nat._6] = !struct.at(88).asInstanceOf[Ptr[CArray[gpointer, Nat._6]]]
    def pdummy_=(value: CArray[gpointer, Nat._6]): Unit = !struct.at(88).asInstanceOf[Ptr[CArray[gpointer, Nat._6]]] = value

/**
 * GObjectConstructParam: : the #GParamSpec of the construct parameter : the value to set the parameter to

 * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
*/
opaque type GObjectConstructParam = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GObjectConstructParam:
  given _tag: Tag[GObjectConstructParam] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GObjectConstructParam] = scala.scalanative.unsafe.alloc[GObjectConstructParam](1)
  def apply(pspec : Ptr[GParamSpec], value : Ptr[GValue])(using Zone): Ptr[GObjectConstructParam] = 
    val ____ptr = apply()
    (!____ptr).pspec = pspec
    (!____ptr).value = value
    ____ptr
  extension (struct: GObjectConstructParam)
    def pspec: Ptr[GParamSpec] = !struct.at(0).asInstanceOf[Ptr[Ptr[GParamSpec]]]
    def pspec_=(value: Ptr[GParamSpec]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[GParamSpec]]] = value
    def value: Ptr[GValue] = !struct.at(8).asInstanceOf[Ptr[Ptr[GValue]]]
    def value_=(value: Ptr[GValue]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[GValue]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
*/
opaque type GOnce = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GOnce:
  given _tag: Tag[GOnce] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GOnce] = scala.scalanative.unsafe.alloc[GOnce](1)
  def apply(status : GOnceStatus, retval : gpointer)(using Zone): Ptr[GOnce] = 
    val ____ptr = apply()
    (!____ptr).status = status
    (!____ptr).retval = retval
    ____ptr
  extension (struct: GOnce)
    def status: GOnceStatus = !struct.at(0).asInstanceOf[Ptr[GOnceStatus]]
    def status_=(value: GOnceStatus): Unit = !struct.at(0).asInstanceOf[Ptr[GOnceStatus]] = value
    def retval: gpointer = !struct.at(8).asInstanceOf[Ptr[gpointer]]
    def retval_=(value: gpointer): Unit = !struct.at(8).asInstanceOf[Ptr[gpointer]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
*/
opaque type GOptionContext = CStruct0
object GOptionContext:
  given _tag: Tag[GOptionContext] = Tag.materializeCStruct0Tag

/**
 * _name must be a printable ASCII character different from '-', or zero if the option has no short name. : Flags from #GOptionFlags

 * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
*/
opaque type GOptionEntry = CArray[CChar, Nat.Digit2[Nat._4, Nat._8]]
object GOptionEntry:
  given _tag: Tag[GOptionEntry] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._8]](Tag.Byte, Tag.Digit2[Nat._4, Nat._8](Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GOptionEntry] = scala.scalanative.unsafe.alloc[GOptionEntry](1)
  def apply(long_name : Ptr[gchar], short_name : gchar, flags : gint, arg : GOptionArg, arg_data : gpointer, description : Ptr[gchar], arg_description : Ptr[gchar])(using Zone): Ptr[GOptionEntry] = 
    val ____ptr = apply()
    (!____ptr).long_name = long_name
    (!____ptr).short_name = short_name
    (!____ptr).flags = flags
    (!____ptr).arg = arg
    (!____ptr).arg_data = arg_data
    (!____ptr).description = description
    (!____ptr).arg_description = arg_description
    ____ptr
  extension (struct: GOptionEntry)
    def long_name: Ptr[gchar] = !struct.at(0).asInstanceOf[Ptr[Ptr[gchar]]]
    def long_name_=(value: Ptr[gchar]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def short_name: gchar = !struct.at(8).asInstanceOf[Ptr[gchar]]
    def short_name_=(value: gchar): Unit = !struct.at(8).asInstanceOf[Ptr[gchar]] = value
    def flags: gint = !struct.at(12).asInstanceOf[Ptr[gint]]
    def flags_=(value: gint): Unit = !struct.at(12).asInstanceOf[Ptr[gint]] = value
    def arg: GOptionArg = !struct.at(16).asInstanceOf[Ptr[GOptionArg]]
    def arg_=(value: GOptionArg): Unit = !struct.at(16).asInstanceOf[Ptr[GOptionArg]] = value
    def arg_data: gpointer = !struct.at(24).asInstanceOf[Ptr[gpointer]]
    def arg_data_=(value: gpointer): Unit = !struct.at(24).asInstanceOf[Ptr[gpointer]] = value
    def description: Ptr[gchar] = !struct.at(32).asInstanceOf[Ptr[Ptr[gchar]]]
    def description_=(value: Ptr[gchar]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def arg_description: Ptr[gchar] = !struct.at(40).asInstanceOf[Ptr[Ptr[gchar]]]
    def arg_description_=(value: Ptr[gchar]): Unit = !struct.at(40).asInstanceOf[Ptr[Ptr[gchar]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
*/
opaque type GOptionGroup = CStruct0
object GOptionGroup:
  given _tag: Tag[GOptionGroup] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GOutputMessage = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GOutputMessage:
  given _tag: Tag[GOutputMessage] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GOutputMessage] = scala.scalanative.unsafe.alloc[GOutputMessage](1)
  def apply(address : Ptr[GSocketAddress], vectors : Ptr[GOutputVector], num_vectors : guint, bytes_sent : guint, control_messages : Ptr[Ptr[GSocketControlMessage]], num_control_messages : guint)(using Zone): Ptr[GOutputMessage] = 
    val ____ptr = apply()
    (!____ptr).address = address
    (!____ptr).vectors = vectors
    (!____ptr).num_vectors = num_vectors
    (!____ptr).bytes_sent = bytes_sent
    (!____ptr).control_messages = control_messages
    (!____ptr).num_control_messages = num_control_messages
    ____ptr
  extension (struct: GOutputMessage)
    def address: Ptr[GSocketAddress] = !struct.at(0).asInstanceOf[Ptr[Ptr[GSocketAddress]]]
    def address_=(value: Ptr[GSocketAddress]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[GSocketAddress]]] = value
    def vectors: Ptr[GOutputVector] = !struct.at(8).asInstanceOf[Ptr[Ptr[GOutputVector]]]
    def vectors_=(value: Ptr[GOutputVector]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[GOutputVector]]] = value
    def num_vectors: guint = !struct.at(16).asInstanceOf[Ptr[guint]]
    def num_vectors_=(value: guint): Unit = !struct.at(16).asInstanceOf[Ptr[guint]] = value
    def bytes_sent: guint = !struct.at(20).asInstanceOf[Ptr[guint]]
    def bytes_sent_=(value: guint): Unit = !struct.at(20).asInstanceOf[Ptr[guint]] = value
    def control_messages: Ptr[Ptr[GSocketControlMessage]] = !struct.at(24).asInstanceOf[Ptr[Ptr[Ptr[GSocketControlMessage]]]]
    def control_messages_=(value: Ptr[Ptr[GSocketControlMessage]]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[Ptr[GSocketControlMessage]]]] = value
    def num_control_messages: guint = !struct.at(32).asInstanceOf[Ptr[guint]]
    def num_control_messages_=(value: guint): Unit = !struct.at(32).asInstanceOf[Ptr[guint]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
*/
opaque type GOutputStream = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GOutputStream:
  given _tag: Tag[GOutputStream] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GOutputStream] = scala.scalanative.unsafe.alloc[GOutputStream](1)
  def apply(parent_instance : GObject, priv : Ptr[GOutputStreamPrivate])(using Zone): Ptr[GOutputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GOutputStream)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GOutputStreamPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GOutputStreamPrivate]]]
    def priv_=(value: Ptr[GOutputStreamPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GOutputStreamPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
*/
opaque type GOutputStreamClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._9, Nat._6]]
object GOutputStreamClass:
  given _tag: Tag[GOutputStreamClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._9, Nat._6]](Tag.Byte, Tag.Digit3[Nat._2, Nat._9, Nat._6](Tag.Nat2, Tag.Nat9, Tag.Nat6))
  def apply()(using Zone): Ptr[GOutputStreamClass] = scala.scalanative.unsafe.alloc[GOutputStreamClass](1)
  def apply(parent_class : GObjectClass, write_fn : CFuncPtr5[Ptr[GOutputStream], Ptr[Byte], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize], splice : CFuncPtr5[Ptr[GOutputStream], Ptr[GInputStream], GOutputStreamSpliceFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gssize], flush : CFuncPtr3[Ptr[GOutputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], close_fn : CFuncPtr3[Ptr[GOutputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], write_async : CFuncPtr7[Ptr[GOutputStream], Ptr[Byte], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], write_finish : CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize], splice_async : CFuncPtr7[Ptr[GOutputStream], Ptr[GInputStream], GOutputStreamSpliceFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], splice_finish : CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize], flush_async : CFuncPtr5[Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], flush_finish : CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], close_async : CFuncPtr5[Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], close_finish : CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], writev_fn : CFuncPtr6[Ptr[GOutputStream], Ptr[GOutputVector], gsize, Ptr[gsize], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], writev_async : CFuncPtr7[Ptr[GOutputStream], Ptr[GOutputVector], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], writev_finish : CFuncPtr4[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[gsize], Ptr[Ptr[GError]], gboolean], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit], _g_reserved7 : CFuncPtr0[Unit], _g_reserved8 : CFuncPtr0[Unit])(using Zone): Ptr[GOutputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).write_fn = write_fn
    (!____ptr).splice = splice
    (!____ptr).flush = flush
    (!____ptr).close_fn = close_fn
    (!____ptr).write_async = write_async
    (!____ptr).write_finish = write_finish
    (!____ptr).splice_async = splice_async
    (!____ptr).splice_finish = splice_finish
    (!____ptr).flush_async = flush_async
    (!____ptr).flush_finish = flush_finish
    (!____ptr).close_async = close_async
    (!____ptr).close_finish = close_finish
    (!____ptr).writev_fn = writev_fn
    (!____ptr).writev_async = writev_async
    (!____ptr).writev_finish = writev_finish
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    (!____ptr)._g_reserved7 = _g_reserved7
    (!____ptr)._g_reserved8 = _g_reserved8
    ____ptr
  extension (struct: GOutputStreamClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def write_fn: CFuncPtr5[Ptr[GOutputStream], Ptr[Byte], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr5[Ptr[GOutputStream], Ptr[Byte], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize]]]
    def write_fn_=(value: CFuncPtr5[Ptr[GOutputStream], Ptr[Byte], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr5[Ptr[GOutputStream], Ptr[Byte], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize]]] = value
    def splice: CFuncPtr5[Ptr[GOutputStream], Ptr[GInputStream], GOutputStreamSpliceFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gssize] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr5[Ptr[GOutputStream], Ptr[GInputStream], GOutputStreamSpliceFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gssize]]]
    def splice_=(value: CFuncPtr5[Ptr[GOutputStream], Ptr[GInputStream], GOutputStreamSpliceFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gssize]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr5[Ptr[GOutputStream], Ptr[GInputStream], GOutputStreamSpliceFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gssize]]] = value
    def flush: CFuncPtr3[Ptr[GOutputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GOutputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def flush_=(value: CFuncPtr3[Ptr[GOutputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GOutputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def close_fn: CFuncPtr3[Ptr[GOutputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr3[Ptr[GOutputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def close_fn_=(value: CFuncPtr3[Ptr[GOutputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr3[Ptr[GOutputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def write_async: CFuncPtr7[Ptr[GOutputStream], Ptr[Byte], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr7[Ptr[GOutputStream], Ptr[Byte], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def write_async_=(value: CFuncPtr7[Ptr[GOutputStream], Ptr[Byte], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr7[Ptr[GOutputStream], Ptr[Byte], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def write_finish: CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize]]]
    def write_finish_=(value: CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize]]] = value
    def splice_async: CFuncPtr7[Ptr[GOutputStream], Ptr[GInputStream], GOutputStreamSpliceFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr7[Ptr[GOutputStream], Ptr[GInputStream], GOutputStreamSpliceFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def splice_async_=(value: CFuncPtr7[Ptr[GOutputStream], Ptr[GInputStream], GOutputStreamSpliceFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr7[Ptr[GOutputStream], Ptr[GInputStream], GOutputStreamSpliceFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def splice_finish: CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize]]]
    def splice_finish_=(value: CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize]]] = value
    def flush_async: CFuncPtr5[Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr5[Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def flush_async_=(value: CFuncPtr5[Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr5[Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def flush_finish: CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def flush_finish_=(value: CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def close_async: CFuncPtr5[Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(216).asInstanceOf[Ptr[CFuncPtr5[Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def close_async_=(value: CFuncPtr5[Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(216).asInstanceOf[Ptr[CFuncPtr5[Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def close_finish: CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(224).asInstanceOf[Ptr[CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def close_finish_=(value: CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(224).asInstanceOf[Ptr[CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def writev_fn: CFuncPtr6[Ptr[GOutputStream], Ptr[GOutputVector], gsize, Ptr[gsize], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(232).asInstanceOf[Ptr[CFuncPtr6[Ptr[GOutputStream], Ptr[GOutputVector], gsize, Ptr[gsize], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def writev_fn_=(value: CFuncPtr6[Ptr[GOutputStream], Ptr[GOutputVector], gsize, Ptr[gsize], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(232).asInstanceOf[Ptr[CFuncPtr6[Ptr[GOutputStream], Ptr[GOutputVector], gsize, Ptr[gsize], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def writev_async: CFuncPtr7[Ptr[GOutputStream], Ptr[GOutputVector], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(240).asInstanceOf[Ptr[CFuncPtr7[Ptr[GOutputStream], Ptr[GOutputVector], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def writev_async_=(value: CFuncPtr7[Ptr[GOutputStream], Ptr[GOutputVector], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(240).asInstanceOf[Ptr[CFuncPtr7[Ptr[GOutputStream], Ptr[GOutputVector], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def writev_finish: CFuncPtr4[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[gsize], Ptr[Ptr[GError]], gboolean] = !struct.at(248).asInstanceOf[Ptr[CFuncPtr4[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[gsize], Ptr[Ptr[GError]], gboolean]]]
    def writev_finish_=(value: CFuncPtr4[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[gsize], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(248).asInstanceOf[Ptr[CFuncPtr4[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[gsize], Ptr[Ptr[GError]], gboolean]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(256).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(256).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(264).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(264).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved6: CFuncPtr0[Unit] = !struct.at(272).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at(272).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved7: CFuncPtr0[Unit] = !struct.at(280).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved7_=(value: CFuncPtr0[Unit]): Unit = !struct.at(280).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved8: CFuncPtr0[Unit] = !struct.at(288).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved8_=(value: CFuncPtr0[Unit]): Unit = !struct.at(288).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
*/
opaque type GOutputStreamPrivate = CStruct0
object GOutputStreamPrivate:
  given _tag: Tag[GOutputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GOutputVector = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GOutputVector:
  given _tag: Tag[GOutputVector] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GOutputVector] = scala.scalanative.unsafe.alloc[GOutputVector](1)
  def apply(buffer : gconstpointer, size : gsize)(using Zone): Ptr[GOutputVector] = 
    val ____ptr = apply()
    (!____ptr).buffer = buffer
    (!____ptr).size = size
    ____ptr
  extension (struct: GOutputVector)
    def buffer: gconstpointer = !struct.at(0).asInstanceOf[Ptr[gconstpointer]]
    def buffer_=(value: gconstpointer): Unit = !struct.at(0).asInstanceOf[Ptr[gconstpointer]] = value
    def size: gsize = !struct.at(8).asInstanceOf[Ptr[gsize]]
    def size_=(value: gsize): Unit = !struct.at(8).asInstanceOf[Ptr[gsize]] = value

/**
 * GParamSpec: (ref-func g_param_spec_ref_sink) (unref-func g_param_spec_unref) (set-value-func g_value_set_param) (get-value-func g_value_get_param) _type_instance: private #GTypeInstance portion : #GParamFlags flags for this parameter _type: the #GValue type for this parameter _type: #GType type that uses (introduces) this parameter

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
*/
opaque type GParamSpec = CArray[CChar, Nat.Digit2[Nat._7, Nat._2]]
object GParamSpec:
  given _tag: Tag[GParamSpec] = Tag.CArray[CChar, Nat.Digit2[Nat._7, Nat._2]](Tag.Byte, Tag.Digit2[Nat._7, Nat._2](Tag.Nat7, Tag.Nat2))
  def apply()(using Zone): Ptr[GParamSpec] = scala.scalanative.unsafe.alloc[GParamSpec](1)
  def apply(g_type_instance : GTypeInstance, name : Ptr[gchar], flags : GParamFlags, value_type : GType, owner_type : GType, _nick : Ptr[gchar], _blurb : Ptr[gchar], qdata : Ptr[GData], ref_count : guint, param_id : guint)(using Zone): Ptr[GParamSpec] = 
    val ____ptr = apply()
    (!____ptr).g_type_instance = g_type_instance
    (!____ptr).name = name
    (!____ptr).flags = flags
    (!____ptr).value_type = value_type
    (!____ptr).owner_type = owner_type
    (!____ptr)._nick = _nick
    (!____ptr)._blurb = _blurb
    (!____ptr).qdata = qdata
    (!____ptr).ref_count = ref_count
    (!____ptr).param_id = param_id
    ____ptr
  extension (struct: GParamSpec)
    def g_type_instance: GTypeInstance = !struct.at(0).asInstanceOf[Ptr[GTypeInstance]]
    def g_type_instance_=(value: GTypeInstance): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInstance]] = value
    def name: Ptr[gchar] = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]]
    def name_=(value: Ptr[gchar]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def flags: GParamFlags = !struct.at(16).asInstanceOf[Ptr[GParamFlags]]
    def flags_=(value: GParamFlags): Unit = !struct.at(16).asInstanceOf[Ptr[GParamFlags]] = value
    def value_type: GType = !struct.at(24).asInstanceOf[Ptr[GType]]
    def value_type_=(value: GType): Unit = !struct.at(24).asInstanceOf[Ptr[GType]] = value
    def owner_type: GType = !struct.at(32).asInstanceOf[Ptr[GType]]
    def owner_type_=(value: GType): Unit = !struct.at(32).asInstanceOf[Ptr[GType]] = value
    def _nick: Ptr[gchar] = !struct.at(40).asInstanceOf[Ptr[Ptr[gchar]]]
    def _nick_=(value: Ptr[gchar]): Unit = !struct.at(40).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def _blurb: Ptr[gchar] = !struct.at(48).asInstanceOf[Ptr[Ptr[gchar]]]
    def _blurb_=(value: Ptr[gchar]): Unit = !struct.at(48).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def qdata: Ptr[GData] = !struct.at(56).asInstanceOf[Ptr[Ptr[GData]]]
    def qdata_=(value: Ptr[GData]): Unit = !struct.at(56).asInstanceOf[Ptr[Ptr[GData]]] = value
    def ref_count: guint = !struct.at(64).asInstanceOf[Ptr[guint]]
    def ref_count_=(value: guint): Unit = !struct.at(64).asInstanceOf[Ptr[guint]] = value
    def param_id: guint = !struct.at(68).asInstanceOf[Ptr[guint]]
    def param_id_=(value: guint): Unit = !struct.at(68).asInstanceOf[Ptr[guint]] = value

/**
 * GParamSpecBoolean: _instance: private #GParamSpec portion _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecBoolean = CArray[CChar, Nat.Digit2[Nat._8, Nat._0]]
object GParamSpecBoolean:
  given _tag: Tag[GParamSpecBoolean] = Tag.CArray[CChar, Nat.Digit2[Nat._8, Nat._0]](Tag.Byte, Tag.Digit2[Nat._8, Nat._0](Tag.Nat8, Tag.Nat0))
  def apply()(using Zone): Ptr[GParamSpecBoolean] = scala.scalanative.unsafe.alloc[GParamSpecBoolean](1)
  def apply(parent_instance : GParamSpec, default_value : gboolean)(using Zone): Ptr[GParamSpecBoolean] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: GParamSpecBoolean)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value
    def default_value: gboolean = !struct.at(72).asInstanceOf[Ptr[gboolean]]
    def default_value_=(value: gboolean): Unit = !struct.at(72).asInstanceOf[Ptr[gboolean]] = value

/**
 * GParamSpecBoxed: _instance: private #GParamSpec portion

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecBoxed = CArray[CChar, Nat.Digit2[Nat._7, Nat._2]]
object GParamSpecBoxed:
  given _tag: Tag[GParamSpecBoxed] = Tag.CArray[CChar, Nat.Digit2[Nat._7, Nat._2]](Tag.Byte, Tag.Digit2[Nat._7, Nat._2](Tag.Nat7, Tag.Nat2))
  def apply()(using Zone): Ptr[GParamSpecBoxed] = scala.scalanative.unsafe.alloc[GParamSpecBoxed](1)
  def apply(parent_instance : GParamSpec)(using Zone): Ptr[GParamSpecBoxed] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: GParamSpecBoxed)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value

/**
 * GParamSpecChar: _instance: private #GParamSpec portion : minimum value for the property specified : maximum value for the property specified _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecChar = CArray[CChar, Nat.Digit2[Nat._8, Nat._0]]
object GParamSpecChar:
  given _tag: Tag[GParamSpecChar] = Tag.CArray[CChar, Nat.Digit2[Nat._8, Nat._0]](Tag.Byte, Tag.Digit2[Nat._8, Nat._0](Tag.Nat8, Tag.Nat0))
  def apply()(using Zone): Ptr[GParamSpecChar] = scala.scalanative.unsafe.alloc[GParamSpecChar](1)
  def apply(parent_instance : GParamSpec, minimum : gint8, maximum : gint8, default_value : gint8)(using Zone): Ptr[GParamSpecChar] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: GParamSpecChar)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value
    def minimum: gint8 = !struct.at(72).asInstanceOf[Ptr[gint8]]
    def minimum_=(value: gint8): Unit = !struct.at(72).asInstanceOf[Ptr[gint8]] = value
    def maximum: gint8 = !struct.at(73).asInstanceOf[Ptr[gint8]]
    def maximum_=(value: gint8): Unit = !struct.at(73).asInstanceOf[Ptr[gint8]] = value
    def default_value: gint8 = !struct.at(74).asInstanceOf[Ptr[gint8]]
    def default_value_=(value: gint8): Unit = !struct.at(74).asInstanceOf[Ptr[gint8]] = value

/**
 * GParamSpecClass: _type_class: the parent class _type: the #GValue type for this parameter : The instance finalization function (optional), should chain up to the finalize method of the parent class. _set_default: Resets a to the default value for this type (recommended, the default is g_value_reset()), see g_param_value_set_default(). _validate: Ensures that the contents of comply with the specifications set out by this type (optional), see g_param_value_validate(). _cmp: Compares with according to this type (recommended, the default is memcmp()), see g_param_values_cmp().

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
*/
opaque type GParamSpecClass = CArray[CChar, Nat.Digit2[Nat._8, Nat._0]]
object GParamSpecClass:
  given _tag: Tag[GParamSpecClass] = Tag.CArray[CChar, Nat.Digit2[Nat._8, Nat._0]](Tag.Byte, Tag.Digit2[Nat._8, Nat._0](Tag.Nat8, Tag.Nat0))
  def apply()(using Zone): Ptr[GParamSpecClass] = scala.scalanative.unsafe.alloc[GParamSpecClass](1)
  def apply(g_type_class : GTypeClass, value_type : GType, finalize : CFuncPtr1[Ptr[GParamSpec], Unit], value_set_default : CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], Unit], value_validate : CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], gboolean], values_cmp : CFuncPtr3[Ptr[GParamSpec], Ptr[GValue], Ptr[GValue], gint], dummy : CArray[gpointer, Nat._4])(using Zone): Ptr[GParamSpecClass] = 
    val ____ptr = apply()
    (!____ptr).g_type_class = g_type_class
    (!____ptr).value_type = value_type
    (!____ptr).finalize = finalize
    (!____ptr).value_set_default = value_set_default
    (!____ptr).value_validate = value_validate
    (!____ptr).values_cmp = values_cmp
    (!____ptr).dummy = dummy
    ____ptr
  extension (struct: GParamSpecClass)
    def g_type_class: GTypeClass = !struct.at(0).asInstanceOf[Ptr[GTypeClass]]
    def g_type_class_=(value: GTypeClass): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeClass]] = value
    def value_type: GType = !struct.at(8).asInstanceOf[Ptr[GType]]
    def value_type_=(value: GType): Unit = !struct.at(8).asInstanceOf[Ptr[GType]] = value
    def finalize: CFuncPtr1[Ptr[GParamSpec], Unit] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GParamSpec], Unit]]]
    def finalize_=(value: CFuncPtr1[Ptr[GParamSpec], Unit]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GParamSpec], Unit]]] = value
    def value_set_default: CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], Unit] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], Unit]]]
    def value_set_default_=(value: CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], Unit]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], Unit]]] = value
    def value_validate: CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], gboolean] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], gboolean]]]
    def value_validate_=(value: CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], gboolean]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], gboolean]]] = value
    def values_cmp: CFuncPtr3[Ptr[GParamSpec], Ptr[GValue], Ptr[GValue], gint] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr3[Ptr[GParamSpec], Ptr[GValue], Ptr[GValue], gint]]]
    def values_cmp_=(value: CFuncPtr3[Ptr[GParamSpec], Ptr[GValue], Ptr[GValue], gint]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr3[Ptr[GParamSpec], Ptr[GValue], Ptr[GValue], gint]]] = value
    def dummy: CArray[gpointer, Nat._4] = !struct.at(48).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]]
    def dummy_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at(48).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]] = value

/**
 * GParamSpecDouble: _instance: private #GParamSpec portion : minimum value for the property specified : maximum value for the property specified _value: default value for the property specified : values closer than will be considered identical by g_param_values_cmp(); the default value is 1e-90.

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecDouble = CArray[CChar, Nat.Digit3[Nat._1, Nat._0, Nat._4]]
object GParamSpecDouble:
  given _tag: Tag[GParamSpecDouble] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._0, Nat._4]](Tag.Byte, Tag.Digit3[Nat._1, Nat._0, Nat._4](Tag.Nat1, Tag.Nat0, Tag.Nat4))
  def apply()(using Zone): Ptr[GParamSpecDouble] = scala.scalanative.unsafe.alloc[GParamSpecDouble](1)
  def apply(parent_instance : GParamSpec, minimum : gdouble, maximum : gdouble, default_value : gdouble, epsilon : gdouble)(using Zone): Ptr[GParamSpecDouble] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).default_value = default_value
    (!____ptr).epsilon = epsilon
    ____ptr
  extension (struct: GParamSpecDouble)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value
    def minimum: gdouble = !struct.at(72).asInstanceOf[Ptr[gdouble]]
    def minimum_=(value: gdouble): Unit = !struct.at(72).asInstanceOf[Ptr[gdouble]] = value
    def maximum: gdouble = !struct.at(80).asInstanceOf[Ptr[gdouble]]
    def maximum_=(value: gdouble): Unit = !struct.at(80).asInstanceOf[Ptr[gdouble]] = value
    def default_value: gdouble = !struct.at(88).asInstanceOf[Ptr[gdouble]]
    def default_value_=(value: gdouble): Unit = !struct.at(88).asInstanceOf[Ptr[gdouble]] = value
    def epsilon: gdouble = !struct.at(96).asInstanceOf[Ptr[gdouble]]
    def epsilon_=(value: gdouble): Unit = !struct.at(96).asInstanceOf[Ptr[gdouble]] = value

/**
 * GParamSpecEnum: _instance: private #GParamSpec portion _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecEnum = CArray[CChar, Nat.Digit2[Nat._8, Nat._8]]
object GParamSpecEnum:
  given _tag: Tag[GParamSpecEnum] = Tag.CArray[CChar, Nat.Digit2[Nat._8, Nat._8]](Tag.Byte, Tag.Digit2[Nat._8, Nat._8](Tag.Nat8, Tag.Nat8))
  def apply()(using Zone): Ptr[GParamSpecEnum] = scala.scalanative.unsafe.alloc[GParamSpecEnum](1)
  def apply(parent_instance : GParamSpec, enum_class : Ptr[GEnumClass], default_value : gint)(using Zone): Ptr[GParamSpecEnum] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).enum_class = enum_class
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: GParamSpecEnum)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value
    def enum_class: Ptr[GEnumClass] = !struct.at(72).asInstanceOf[Ptr[Ptr[GEnumClass]]]
    def enum_class_=(value: Ptr[GEnumClass]): Unit = !struct.at(72).asInstanceOf[Ptr[Ptr[GEnumClass]]] = value
    def default_value: gint = !struct.at(80).asInstanceOf[Ptr[gint]]
    def default_value_=(value: gint): Unit = !struct.at(80).asInstanceOf[Ptr[gint]] = value

/**
 * GParamSpecFlags: _instance: private #GParamSpec portion _class: the #GFlagsClass for the flags _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecFlags = CArray[CChar, Nat.Digit2[Nat._8, Nat._8]]
object GParamSpecFlags:
  given _tag: Tag[GParamSpecFlags] = Tag.CArray[CChar, Nat.Digit2[Nat._8, Nat._8]](Tag.Byte, Tag.Digit2[Nat._8, Nat._8](Tag.Nat8, Tag.Nat8))
  def apply()(using Zone): Ptr[GParamSpecFlags] = scala.scalanative.unsafe.alloc[GParamSpecFlags](1)
  def apply(parent_instance : GParamSpec, flags_class : Ptr[GFlagsClass], default_value : guint)(using Zone): Ptr[GParamSpecFlags] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).flags_class = flags_class
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: GParamSpecFlags)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value
    def flags_class: Ptr[GFlagsClass] = !struct.at(72).asInstanceOf[Ptr[Ptr[GFlagsClass]]]
    def flags_class_=(value: Ptr[GFlagsClass]): Unit = !struct.at(72).asInstanceOf[Ptr[Ptr[GFlagsClass]]] = value
    def default_value: guint = !struct.at(80).asInstanceOf[Ptr[guint]]
    def default_value_=(value: guint): Unit = !struct.at(80).asInstanceOf[Ptr[guint]] = value

/**
 * GParamSpecFloat: _instance: private #GParamSpec portion : minimum value for the property specified : maximum value for the property specified _value: default value for the property specified : values closer than will be considered identical by g_param_values_cmp(); the default value is 1e-30.

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecFloat = CArray[CChar, Nat.Digit2[Nat._8, Nat._8]]
object GParamSpecFloat:
  given _tag: Tag[GParamSpecFloat] = Tag.CArray[CChar, Nat.Digit2[Nat._8, Nat._8]](Tag.Byte, Tag.Digit2[Nat._8, Nat._8](Tag.Nat8, Tag.Nat8))
  def apply()(using Zone): Ptr[GParamSpecFloat] = scala.scalanative.unsafe.alloc[GParamSpecFloat](1)
  def apply(parent_instance : GParamSpec, minimum : gfloat, maximum : gfloat, default_value : gfloat, epsilon : gfloat)(using Zone): Ptr[GParamSpecFloat] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).default_value = default_value
    (!____ptr).epsilon = epsilon
    ____ptr
  extension (struct: GParamSpecFloat)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value
    def minimum: gfloat = !struct.at(72).asInstanceOf[Ptr[gfloat]]
    def minimum_=(value: gfloat): Unit = !struct.at(72).asInstanceOf[Ptr[gfloat]] = value
    def maximum: gfloat = !struct.at(76).asInstanceOf[Ptr[gfloat]]
    def maximum_=(value: gfloat): Unit = !struct.at(76).asInstanceOf[Ptr[gfloat]] = value
    def default_value: gfloat = !struct.at(80).asInstanceOf[Ptr[gfloat]]
    def default_value_=(value: gfloat): Unit = !struct.at(80).asInstanceOf[Ptr[gfloat]] = value
    def epsilon: gfloat = !struct.at(84).asInstanceOf[Ptr[gfloat]]
    def epsilon_=(value: gfloat): Unit = !struct.at(84).asInstanceOf[Ptr[gfloat]] = value

/**
 * GParamSpecGType: _instance: private #GParamSpec portion

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecGType = CArray[CChar, Nat.Digit2[Nat._8, Nat._0]]
object GParamSpecGType:
  given _tag: Tag[GParamSpecGType] = Tag.CArray[CChar, Nat.Digit2[Nat._8, Nat._0]](Tag.Byte, Tag.Digit2[Nat._8, Nat._0](Tag.Nat8, Tag.Nat0))
  def apply()(using Zone): Ptr[GParamSpecGType] = scala.scalanative.unsafe.alloc[GParamSpecGType](1)
  def apply(parent_instance : GParamSpec, is_a_type : GType)(using Zone): Ptr[GParamSpecGType] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).is_a_type = is_a_type
    ____ptr
  extension (struct: GParamSpecGType)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value
    def is_a_type: GType = !struct.at(72).asInstanceOf[Ptr[GType]]
    def is_a_type_=(value: GType): Unit = !struct.at(72).asInstanceOf[Ptr[GType]] = value

/**
 * GParamSpecInt: _instance: private #GParamSpec portion : minimum value for the property specified : maximum value for the property specified _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecInt = CArray[CChar, Nat.Digit2[Nat._8, Nat._8]]
object GParamSpecInt:
  given _tag: Tag[GParamSpecInt] = Tag.CArray[CChar, Nat.Digit2[Nat._8, Nat._8]](Tag.Byte, Tag.Digit2[Nat._8, Nat._8](Tag.Nat8, Tag.Nat8))
  def apply()(using Zone): Ptr[GParamSpecInt] = scala.scalanative.unsafe.alloc[GParamSpecInt](1)
  def apply(parent_instance : GParamSpec, minimum : gint, maximum : gint, default_value : gint)(using Zone): Ptr[GParamSpecInt] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: GParamSpecInt)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value
    def minimum: gint = !struct.at(72).asInstanceOf[Ptr[gint]]
    def minimum_=(value: gint): Unit = !struct.at(72).asInstanceOf[Ptr[gint]] = value
    def maximum: gint = !struct.at(76).asInstanceOf[Ptr[gint]]
    def maximum_=(value: gint): Unit = !struct.at(76).asInstanceOf[Ptr[gint]] = value
    def default_value: gint = !struct.at(80).asInstanceOf[Ptr[gint]]
    def default_value_=(value: gint): Unit = !struct.at(80).asInstanceOf[Ptr[gint]] = value

/**
 * GParamSpecInt64: _instance: private #GParamSpec portion : minimum value for the property specified : maximum value for the property specified _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecInt64 = CArray[CChar, Nat.Digit2[Nat._9, Nat._6]]
object GParamSpecInt64:
  given _tag: Tag[GParamSpecInt64] = Tag.CArray[CChar, Nat.Digit2[Nat._9, Nat._6]](Tag.Byte, Tag.Digit2[Nat._9, Nat._6](Tag.Nat9, Tag.Nat6))
  def apply()(using Zone): Ptr[GParamSpecInt64] = scala.scalanative.unsafe.alloc[GParamSpecInt64](1)
  def apply(parent_instance : GParamSpec, minimum : gint64, maximum : gint64, default_value : gint64)(using Zone): Ptr[GParamSpecInt64] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: GParamSpecInt64)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value
    def minimum: gint64 = !struct.at(72).asInstanceOf[Ptr[gint64]]
    def minimum_=(value: gint64): Unit = !struct.at(72).asInstanceOf[Ptr[gint64]] = value
    def maximum: gint64 = !struct.at(80).asInstanceOf[Ptr[gint64]]
    def maximum_=(value: gint64): Unit = !struct.at(80).asInstanceOf[Ptr[gint64]] = value
    def default_value: gint64 = !struct.at(88).asInstanceOf[Ptr[gint64]]
    def default_value_=(value: gint64): Unit = !struct.at(88).asInstanceOf[Ptr[gint64]] = value

/**
 * GParamSpecLong: _instance: private #GParamSpec portion : minimum value for the property specified : maximum value for the property specified _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecLong = CArray[CChar, Nat.Digit2[Nat._9, Nat._6]]
object GParamSpecLong:
  given _tag: Tag[GParamSpecLong] = Tag.CArray[CChar, Nat.Digit2[Nat._9, Nat._6]](Tag.Byte, Tag.Digit2[Nat._9, Nat._6](Tag.Nat9, Tag.Nat6))
  def apply()(using Zone): Ptr[GParamSpecLong] = scala.scalanative.unsafe.alloc[GParamSpecLong](1)
  def apply(parent_instance : GParamSpec, minimum : glong, maximum : glong, default_value : glong)(using Zone): Ptr[GParamSpecLong] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: GParamSpecLong)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value
    def minimum: glong = !struct.at(72).asInstanceOf[Ptr[glong]]
    def minimum_=(value: glong): Unit = !struct.at(72).asInstanceOf[Ptr[glong]] = value
    def maximum: glong = !struct.at(80).asInstanceOf[Ptr[glong]]
    def maximum_=(value: glong): Unit = !struct.at(80).asInstanceOf[Ptr[glong]] = value
    def default_value: glong = !struct.at(88).asInstanceOf[Ptr[glong]]
    def default_value_=(value: glong): Unit = !struct.at(88).asInstanceOf[Ptr[glong]] = value

/**
 * GParamSpecObject: _instance: private #GParamSpec portion

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecObject = CArray[CChar, Nat.Digit2[Nat._7, Nat._2]]
object GParamSpecObject:
  given _tag: Tag[GParamSpecObject] = Tag.CArray[CChar, Nat.Digit2[Nat._7, Nat._2]](Tag.Byte, Tag.Digit2[Nat._7, Nat._2](Tag.Nat7, Tag.Nat2))
  def apply()(using Zone): Ptr[GParamSpecObject] = scala.scalanative.unsafe.alloc[GParamSpecObject](1)
  def apply(parent_instance : GParamSpec)(using Zone): Ptr[GParamSpecObject] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: GParamSpecObject)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value

/**
 * GParamSpecOverride:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecOverride = CArray[CChar, Nat.Digit2[Nat._8, Nat._0]]
object GParamSpecOverride:
  given _tag: Tag[GParamSpecOverride] = Tag.CArray[CChar, Nat.Digit2[Nat._8, Nat._0]](Tag.Byte, Tag.Digit2[Nat._8, Nat._0](Tag.Nat8, Tag.Nat0))
  def apply()(using Zone): Ptr[GParamSpecOverride] = scala.scalanative.unsafe.alloc[GParamSpecOverride](1)
  def apply(parent_instance : GParamSpec, overridden : Ptr[GParamSpec])(using Zone): Ptr[GParamSpecOverride] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).overridden = overridden
    ____ptr
  extension (struct: GParamSpecOverride)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value
    def overridden: Ptr[GParamSpec] = !struct.at(72).asInstanceOf[Ptr[Ptr[GParamSpec]]]
    def overridden_=(value: Ptr[GParamSpec]): Unit = !struct.at(72).asInstanceOf[Ptr[Ptr[GParamSpec]]] = value

/**
 * GParamSpecParam: _instance: private #GParamSpec portion

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecParam = CArray[CChar, Nat.Digit2[Nat._7, Nat._2]]
object GParamSpecParam:
  given _tag: Tag[GParamSpecParam] = Tag.CArray[CChar, Nat.Digit2[Nat._7, Nat._2]](Tag.Byte, Tag.Digit2[Nat._7, Nat._2](Tag.Nat7, Tag.Nat2))
  def apply()(using Zone): Ptr[GParamSpecParam] = scala.scalanative.unsafe.alloc[GParamSpecParam](1)
  def apply(parent_instance : GParamSpec)(using Zone): Ptr[GParamSpecParam] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: GParamSpecParam)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value

/**
 * GParamSpecPointer: _instance: private #GParamSpec portion

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecPointer = CArray[CChar, Nat.Digit2[Nat._7, Nat._2]]
object GParamSpecPointer:
  given _tag: Tag[GParamSpecPointer] = Tag.CArray[CChar, Nat.Digit2[Nat._7, Nat._2]](Tag.Byte, Tag.Digit2[Nat._7, Nat._2](Tag.Nat7, Tag.Nat2))
  def apply()(using Zone): Ptr[GParamSpecPointer] = scala.scalanative.unsafe.alloc[GParamSpecPointer](1)
  def apply(parent_instance : GParamSpec)(using Zone): Ptr[GParamSpecPointer] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: GParamSpecPointer)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
*/
opaque type GParamSpecPool = CStruct0
object GParamSpecPool:
  given _tag: Tag[GParamSpecPool] = Tag.materializeCStruct0Tag

/**
 * GParamSpecString: _instance: private #GParamSpec portion _value: default value for the property specified _first: a string containing the allowed values for the first byte _nth: a string containing the allowed values for the subsequent bytes : the replacement byte for bytes which don't match _first or _nth. _fold_if_empty: replace empty string by %NULL _non_null: replace %NULL strings by an empty string

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecString = CArray[CChar, Nat.Digit3[Nat._1, Nat._1, Nat._2]]
object GParamSpecString:
  given _tag: Tag[GParamSpecString] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._1, Nat._2]](Tag.Byte, Tag.Digit3[Nat._1, Nat._1, Nat._2](Tag.Nat1, Tag.Nat1, Tag.Nat2))
  def apply()(using Zone): Ptr[GParamSpecString] = scala.scalanative.unsafe.alloc[GParamSpecString](1)
  def apply(parent_instance : GParamSpec, default_value : Ptr[gchar], cset_first : Ptr[gchar], cset_nth : Ptr[gchar], substitutor : gchar, null_fold_if_empty : guint, ensure_non_null : guint)(using Zone): Ptr[GParamSpecString] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).default_value = default_value
    (!____ptr).cset_first = cset_first
    (!____ptr).cset_nth = cset_nth
    (!____ptr).substitutor = substitutor
    (!____ptr).null_fold_if_empty = null_fold_if_empty
    (!____ptr).ensure_non_null = ensure_non_null
    ____ptr
  extension (struct: GParamSpecString)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value
    def default_value: Ptr[gchar] = !struct.at(72).asInstanceOf[Ptr[Ptr[gchar]]]
    def default_value_=(value: Ptr[gchar]): Unit = !struct.at(72).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def cset_first: Ptr[gchar] = !struct.at(80).asInstanceOf[Ptr[Ptr[gchar]]]
    def cset_first_=(value: Ptr[gchar]): Unit = !struct.at(80).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def cset_nth: Ptr[gchar] = !struct.at(88).asInstanceOf[Ptr[Ptr[gchar]]]
    def cset_nth_=(value: Ptr[gchar]): Unit = !struct.at(88).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def substitutor: gchar = !struct.at(96).asInstanceOf[Ptr[gchar]]
    def substitutor_=(value: gchar): Unit = !struct.at(96).asInstanceOf[Ptr[gchar]] = value
    def null_fold_if_empty: guint = !struct.at(100).asInstanceOf[Ptr[guint]]
    def null_fold_if_empty_=(value: guint): Unit = !struct.at(100).asInstanceOf[Ptr[guint]] = value
    def ensure_non_null: guint = !struct.at(104).asInstanceOf[Ptr[guint]]
    def ensure_non_null_=(value: guint): Unit = !struct.at(104).asInstanceOf[Ptr[guint]] = value

/**
 * GParamSpecTypeInfo: _size: Size of the instance (object) structure. _preallocs: Prior to GLib 2.10, it specified the number of pre-allocated (cached) instances to reserve memory for (0 indicates no caching). Since GLib 2.10, it is ignored, since instances are allocated with the [slice allocator][glib-Memory-Slices] now. _init: Location of the instance initialization function (optional). _type: The #GType of values conforming to this #GParamSpec : The instance finalization function (optional). _set_default: Resets a to the default value for (recommended, the default is g_value_reset()), see g_param_value_set_default(). _validate: Ensures that the contents of comply with the specifications set out by (optional), see g_param_value_validate(). _cmp: Compares with according to (recommended, the default is memcmp()), see g_param_values_cmp().

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
*/
opaque type GParamSpecTypeInfo = CArray[CChar, Nat.Digit2[Nat._5, Nat._6]]
object GParamSpecTypeInfo:
  given _tag: Tag[GParamSpecTypeInfo] = Tag.CArray[CChar, Nat.Digit2[Nat._5, Nat._6]](Tag.Byte, Tag.Digit2[Nat._5, Nat._6](Tag.Nat5, Tag.Nat6))
  def apply()(using Zone): Ptr[GParamSpecTypeInfo] = scala.scalanative.unsafe.alloc[GParamSpecTypeInfo](1)
  def apply(instance_size : guint16, n_preallocs : guint16, instance_init : CFuncPtr1[Ptr[GParamSpec], Unit], value_type : GType, finalize : CFuncPtr1[Ptr[GParamSpec], Unit], value_set_default : CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], Unit], value_validate : CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], gboolean], values_cmp : CFuncPtr3[Ptr[GParamSpec], Ptr[GValue], Ptr[GValue], gint])(using Zone): Ptr[GParamSpecTypeInfo] = 
    val ____ptr = apply()
    (!____ptr).instance_size = instance_size
    (!____ptr).n_preallocs = n_preallocs
    (!____ptr).instance_init = instance_init
    (!____ptr).value_type = value_type
    (!____ptr).finalize = finalize
    (!____ptr).value_set_default = value_set_default
    (!____ptr).value_validate = value_validate
    (!____ptr).values_cmp = values_cmp
    ____ptr
  extension (struct: GParamSpecTypeInfo)
    def instance_size: guint16 = !struct.at(0).asInstanceOf[Ptr[guint16]]
    def instance_size_=(value: guint16): Unit = !struct.at(0).asInstanceOf[Ptr[guint16]] = value
    def n_preallocs: guint16 = !struct.at(2).asInstanceOf[Ptr[guint16]]
    def n_preallocs_=(value: guint16): Unit = !struct.at(2).asInstanceOf[Ptr[guint16]] = value
    def instance_init: CFuncPtr1[Ptr[GParamSpec], Unit] = !struct.at(8).asInstanceOf[Ptr[CFuncPtr1[Ptr[GParamSpec], Unit]]]
    def instance_init_=(value: CFuncPtr1[Ptr[GParamSpec], Unit]): Unit = !struct.at(8).asInstanceOf[Ptr[CFuncPtr1[Ptr[GParamSpec], Unit]]] = value
    def value_type: GType = !struct.at(16).asInstanceOf[Ptr[GType]]
    def value_type_=(value: GType): Unit = !struct.at(16).asInstanceOf[Ptr[GType]] = value
    def finalize: CFuncPtr1[Ptr[GParamSpec], Unit] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GParamSpec], Unit]]]
    def finalize_=(value: CFuncPtr1[Ptr[GParamSpec], Unit]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GParamSpec], Unit]]] = value
    def value_set_default: CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], Unit] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], Unit]]]
    def value_set_default_=(value: CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], Unit]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], Unit]]] = value
    def value_validate: CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], gboolean] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], gboolean]]]
    def value_validate_=(value: CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], gboolean]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], gboolean]]] = value
    def values_cmp: CFuncPtr3[Ptr[GParamSpec], Ptr[GValue], Ptr[GValue], gint] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr3[Ptr[GParamSpec], Ptr[GValue], Ptr[GValue], gint]]]
    def values_cmp_=(value: CFuncPtr3[Ptr[GParamSpec], Ptr[GValue], Ptr[GValue], gint]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr3[Ptr[GParamSpec], Ptr[GValue], Ptr[GValue], gint]]] = value

/**
 * GParamSpecUChar: _instance: private #GParamSpec portion : minimum value for the property specified : maximum value for the property specified _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecUChar = CArray[CChar, Nat.Digit2[Nat._8, Nat._0]]
object GParamSpecUChar:
  given _tag: Tag[GParamSpecUChar] = Tag.CArray[CChar, Nat.Digit2[Nat._8, Nat._0]](Tag.Byte, Tag.Digit2[Nat._8, Nat._0](Tag.Nat8, Tag.Nat0))
  def apply()(using Zone): Ptr[GParamSpecUChar] = scala.scalanative.unsafe.alloc[GParamSpecUChar](1)
  def apply(parent_instance : GParamSpec, minimum : guint8, maximum : guint8, default_value : guint8)(using Zone): Ptr[GParamSpecUChar] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: GParamSpecUChar)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value
    def minimum: guint8 = !struct.at(72).asInstanceOf[Ptr[guint8]]
    def minimum_=(value: guint8): Unit = !struct.at(72).asInstanceOf[Ptr[guint8]] = value
    def maximum: guint8 = !struct.at(73).asInstanceOf[Ptr[guint8]]
    def maximum_=(value: guint8): Unit = !struct.at(73).asInstanceOf[Ptr[guint8]] = value
    def default_value: guint8 = !struct.at(74).asInstanceOf[Ptr[guint8]]
    def default_value_=(value: guint8): Unit = !struct.at(74).asInstanceOf[Ptr[guint8]] = value

/**
 * GParamSpecUInt: _instance: private #GParamSpec portion : minimum value for the property specified : maximum value for the property specified _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecUInt = CArray[CChar, Nat.Digit2[Nat._8, Nat._8]]
object GParamSpecUInt:
  given _tag: Tag[GParamSpecUInt] = Tag.CArray[CChar, Nat.Digit2[Nat._8, Nat._8]](Tag.Byte, Tag.Digit2[Nat._8, Nat._8](Tag.Nat8, Tag.Nat8))
  def apply()(using Zone): Ptr[GParamSpecUInt] = scala.scalanative.unsafe.alloc[GParamSpecUInt](1)
  def apply(parent_instance : GParamSpec, minimum : guint, maximum : guint, default_value : guint)(using Zone): Ptr[GParamSpecUInt] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: GParamSpecUInt)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value
    def minimum: guint = !struct.at(72).asInstanceOf[Ptr[guint]]
    def minimum_=(value: guint): Unit = !struct.at(72).asInstanceOf[Ptr[guint]] = value
    def maximum: guint = !struct.at(76).asInstanceOf[Ptr[guint]]
    def maximum_=(value: guint): Unit = !struct.at(76).asInstanceOf[Ptr[guint]] = value
    def default_value: guint = !struct.at(80).asInstanceOf[Ptr[guint]]
    def default_value_=(value: guint): Unit = !struct.at(80).asInstanceOf[Ptr[guint]] = value

/**
 * GParamSpecUInt64: _instance: private #GParamSpec portion : minimum value for the property specified : maximum value for the property specified _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecUInt64 = CArray[CChar, Nat.Digit2[Nat._9, Nat._6]]
object GParamSpecUInt64:
  given _tag: Tag[GParamSpecUInt64] = Tag.CArray[CChar, Nat.Digit2[Nat._9, Nat._6]](Tag.Byte, Tag.Digit2[Nat._9, Nat._6](Tag.Nat9, Tag.Nat6))
  def apply()(using Zone): Ptr[GParamSpecUInt64] = scala.scalanative.unsafe.alloc[GParamSpecUInt64](1)
  def apply(parent_instance : GParamSpec, minimum : guint64, maximum : guint64, default_value : guint64)(using Zone): Ptr[GParamSpecUInt64] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: GParamSpecUInt64)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value
    def minimum: guint64 = !struct.at(72).asInstanceOf[Ptr[guint64]]
    def minimum_=(value: guint64): Unit = !struct.at(72).asInstanceOf[Ptr[guint64]] = value
    def maximum: guint64 = !struct.at(80).asInstanceOf[Ptr[guint64]]
    def maximum_=(value: guint64): Unit = !struct.at(80).asInstanceOf[Ptr[guint64]] = value
    def default_value: guint64 = !struct.at(88).asInstanceOf[Ptr[guint64]]
    def default_value_=(value: guint64): Unit = !struct.at(88).asInstanceOf[Ptr[guint64]] = value

/**
 * GParamSpecULong: _instance: private #GParamSpec portion : minimum value for the property specified : maximum value for the property specified _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecULong = CArray[CChar, Nat.Digit2[Nat._9, Nat._6]]
object GParamSpecULong:
  given _tag: Tag[GParamSpecULong] = Tag.CArray[CChar, Nat.Digit2[Nat._9, Nat._6]](Tag.Byte, Tag.Digit2[Nat._9, Nat._6](Tag.Nat9, Tag.Nat6))
  def apply()(using Zone): Ptr[GParamSpecULong] = scala.scalanative.unsafe.alloc[GParamSpecULong](1)
  def apply(parent_instance : GParamSpec, minimum : gulong, maximum : gulong, default_value : gulong)(using Zone): Ptr[GParamSpecULong] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: GParamSpecULong)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value
    def minimum: gulong = !struct.at(72).asInstanceOf[Ptr[gulong]]
    def minimum_=(value: gulong): Unit = !struct.at(72).asInstanceOf[Ptr[gulong]] = value
    def maximum: gulong = !struct.at(80).asInstanceOf[Ptr[gulong]]
    def maximum_=(value: gulong): Unit = !struct.at(80).asInstanceOf[Ptr[gulong]] = value
    def default_value: gulong = !struct.at(88).asInstanceOf[Ptr[gulong]]
    def default_value_=(value: gulong): Unit = !struct.at(88).asInstanceOf[Ptr[gulong]] = value

/**
 * GParamSpecUnichar: _instance: private #GParamSpec portion _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecUnichar = CArray[CChar, Nat.Digit2[Nat._8, Nat._0]]
object GParamSpecUnichar:
  given _tag: Tag[GParamSpecUnichar] = Tag.CArray[CChar, Nat.Digit2[Nat._8, Nat._0]](Tag.Byte, Tag.Digit2[Nat._8, Nat._0](Tag.Nat8, Tag.Nat0))
  def apply()(using Zone): Ptr[GParamSpecUnichar] = scala.scalanative.unsafe.alloc[GParamSpecUnichar](1)
  def apply(parent_instance : GParamSpec, default_value : gunichar)(using Zone): Ptr[GParamSpecUnichar] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: GParamSpecUnichar)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value
    def default_value: gunichar = !struct.at(72).asInstanceOf[Ptr[gunichar]]
    def default_value_=(value: gunichar): Unit = !struct.at(72).asInstanceOf[Ptr[gunichar]] = value

/**
 * GParamSpecValueArray: _instance: private #GParamSpec portion _spec: a #GParamSpec describing the elements contained in arrays of this property, may be %NULL _n_elements: if greater than 0, arrays of this property will always have this many elements

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecValueArray = CArray[CChar, Nat.Digit2[Nat._8, Nat._8]]
object GParamSpecValueArray:
  given _tag: Tag[GParamSpecValueArray] = Tag.CArray[CChar, Nat.Digit2[Nat._8, Nat._8]](Tag.Byte, Tag.Digit2[Nat._8, Nat._8](Tag.Nat8, Tag.Nat8))
  def apply()(using Zone): Ptr[GParamSpecValueArray] = scala.scalanative.unsafe.alloc[GParamSpecValueArray](1)
  def apply(parent_instance : GParamSpec, element_spec : Ptr[GParamSpec], fixed_n_elements : guint)(using Zone): Ptr[GParamSpecValueArray] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).element_spec = element_spec
    (!____ptr).fixed_n_elements = fixed_n_elements
    ____ptr
  extension (struct: GParamSpecValueArray)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value
    def element_spec: Ptr[GParamSpec] = !struct.at(72).asInstanceOf[Ptr[Ptr[GParamSpec]]]
    def element_spec_=(value: Ptr[GParamSpec]): Unit = !struct.at(72).asInstanceOf[Ptr[Ptr[GParamSpec]]] = value
    def fixed_n_elements: guint = !struct.at(80).asInstanceOf[Ptr[guint]]
    def fixed_n_elements_=(value: guint): Unit = !struct.at(80).asInstanceOf[Ptr[guint]] = value

/**
 * GParamSpecVariant: _instance: private #GParamSpec portion : a #GVariantType, or %NULL _value: a #GVariant, or %NULL

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type GParamSpecVariant = CArray[CChar, Nat.Digit3[Nat._1, Nat._2, Nat._0]]
object GParamSpecVariant:
  given _tag: Tag[GParamSpecVariant] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._2, Nat._0]](Tag.Byte, Tag.Digit3[Nat._1, Nat._2, Nat._0](Tag.Nat1, Tag.Nat2, Tag.Nat0))
  def apply()(using Zone): Ptr[GParamSpecVariant] = scala.scalanative.unsafe.alloc[GParamSpecVariant](1)
  def apply(parent_instance : GParamSpec, `type` : Ptr[GVariantType], default_value : Ptr[GVariant], padding : CArray[gpointer, Nat._4])(using Zone): Ptr[GParamSpecVariant] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).`type` = `type`
    (!____ptr).default_value = default_value
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GParamSpecVariant)
    def parent_instance: GParamSpec = !struct.at(0).asInstanceOf[Ptr[GParamSpec]]
    def parent_instance_=(value: GParamSpec): Unit = !struct.at(0).asInstanceOf[Ptr[GParamSpec]] = value
    def `type`: Ptr[GVariantType] = !struct.at(72).asInstanceOf[Ptr[Ptr[GVariantType]]]
    def type_=(value: Ptr[GVariantType]): Unit = !struct.at(72).asInstanceOf[Ptr[Ptr[GVariantType]]] = value
    def default_value: Ptr[GVariant] = !struct.at(80).asInstanceOf[Ptr[Ptr[GVariant]]]
    def default_value_=(value: Ptr[GVariant]): Unit = !struct.at(80).asInstanceOf[Ptr[Ptr[GVariant]]] = value
    def padding: CArray[gpointer, Nat._4] = !struct.at(88).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]]
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at(88).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]] = value

/**
 * GParameter: : the parameter value

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
*/
opaque type GParameter = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GParameter:
  given _tag: Tag[GParameter] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GParameter] = scala.scalanative.unsafe.alloc[GParameter](1)
  def apply(name : Ptr[gchar], value : GValue)(using Zone): Ptr[GParameter] = 
    val ____ptr = apply()
    (!____ptr).name = name
    (!____ptr).value = value
    ____ptr
  extension (struct: GParameter)
    def name: Ptr[gchar] = !struct.at(0).asInstanceOf[Ptr[Ptr[gchar]]]
    def name_=(value: Ptr[gchar]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def value: GValue = !struct.at(8).asInstanceOf[Ptr[GValue]]
    def value_=(value: GValue): Unit = !struct.at(8).asInstanceOf[Ptr[GValue]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gpattern.h
*/
opaque type GPatternSpec = CStruct0
object GPatternSpec:
  given _tag: Tag[GPatternSpec] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gpermission.h
*/
opaque type GPermission = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GPermission:
  given _tag: Tag[GPermission] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GPermission] = scala.scalanative.unsafe.alloc[GPermission](1)
  def apply(parent_instance : GObject, priv : Ptr[GPermissionPrivate])(using Zone): Ptr[GPermission] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GPermission)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GPermissionPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GPermissionPrivate]]]
    def priv_=(value: Ptr[GPermissionPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GPermissionPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gpermission.h
*/
opaque type GPermissionClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._1, Nat._2]]
object GPermissionClass:
  given _tag: Tag[GPermissionClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._1, Nat._2]](Tag.Byte, Tag.Digit3[Nat._3, Nat._1, Nat._2](Tag.Nat3, Tag.Nat1, Tag.Nat2))
  def apply()(using Zone): Ptr[GPermissionClass] = scala.scalanative.unsafe.alloc[GPermissionClass](1)
  def apply(parent_class : GObjectClass, acquire : CFuncPtr3[Ptr[GPermission], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], acquire_async : CFuncPtr4[Ptr[GPermission], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], acquire_finish : CFuncPtr3[Ptr[GPermission], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], release : CFuncPtr3[Ptr[GPermission], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], release_async : CFuncPtr4[Ptr[GPermission], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], release_finish : CFuncPtr3[Ptr[GPermission], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], reserved : CArray[gpointer, Nat.Digit2[Nat._1, Nat._6]])(using Zone): Ptr[GPermissionClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).acquire = acquire
    (!____ptr).acquire_async = acquire_async
    (!____ptr).acquire_finish = acquire_finish
    (!____ptr).release = release
    (!____ptr).release_async = release_async
    (!____ptr).release_finish = release_finish
    (!____ptr).reserved = reserved
    ____ptr
  extension (struct: GPermissionClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def acquire: CFuncPtr3[Ptr[GPermission], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GPermission], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def acquire_=(value: CFuncPtr3[Ptr[GPermission], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GPermission], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def acquire_async: CFuncPtr4[Ptr[GPermission], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr4[Ptr[GPermission], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def acquire_async_=(value: CFuncPtr4[Ptr[GPermission], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr4[Ptr[GPermission], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def acquire_finish: CFuncPtr3[Ptr[GPermission], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GPermission], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def acquire_finish_=(value: CFuncPtr3[Ptr[GPermission], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GPermission], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def release: CFuncPtr3[Ptr[GPermission], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr3[Ptr[GPermission], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def release_=(value: CFuncPtr3[Ptr[GPermission], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr3[Ptr[GPermission], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def release_async: CFuncPtr4[Ptr[GPermission], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr4[Ptr[GPermission], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def release_async_=(value: CFuncPtr4[Ptr[GPermission], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr4[Ptr[GPermission], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def release_finish: CFuncPtr3[Ptr[GPermission], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr3[Ptr[GPermission], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def release_finish_=(value: CFuncPtr3[Ptr[GPermission], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr3[Ptr[GPermission], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def reserved: CArray[gpointer, Nat.Digit2[Nat._1, Nat._6]] = !struct.at(184).asInstanceOf[Ptr[CArray[gpointer, Nat.Digit2[Nat._1, Nat._6]]]]
    def reserved_=(value: CArray[gpointer, Nat.Digit2[Nat._1, Nat._6]]): Unit = !struct.at(184).asInstanceOf[Ptr[CArray[gpointer, Nat.Digit2[Nat._1, Nat._6]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gpermission.h
*/
opaque type GPermissionPrivate = CStruct0
object GPermissionPrivate:
  given _tag: Tag[GPermissionPrivate] = Tag.materializeCStruct0Tag

/**
 * GPollFD: : the file descriptor to poll (or a HANDLE on Win32) : a bitwise combination from #GIOCondition, specifying which events should be polled for. Typically for reading from a file descriptor you would use %G_IO_IN | %G_IO_HUP | %G_IO_ERR, and for writing you would use %G_IO_OUT | %G_IO_ERR. : a bitwise combination of flags from #GIOCondition, returned from the poll() function to indicate which events occurred.

 * [bindgen] header: /usr/include/glib-2.0/glib/gpoll.h
*/
opaque type GPollFD = CArray[CChar, Nat._8]
object GPollFD:
  given _tag: Tag[GPollFD] = Tag.CArray[CChar, Nat._8](Tag.Byte, Tag.Nat8)
  def apply()(using Zone): Ptr[GPollFD] = scala.scalanative.unsafe.alloc[GPollFD](1)
  def apply(fd : gint, events : gushort, revents : gushort)(using Zone): Ptr[GPollFD] = 
    val ____ptr = apply()
    (!____ptr).fd = fd
    (!____ptr).events = events
    (!____ptr).revents = revents
    ____ptr
  extension (struct: GPollFD)
    def fd: gint = !struct.at(0).asInstanceOf[Ptr[gint]]
    def fd_=(value: gint): Unit = !struct.at(0).asInstanceOf[Ptr[gint]] = value
    def events: gushort = !struct.at(4).asInstanceOf[Ptr[gushort]]
    def events_=(value: gushort): Unit = !struct.at(4).asInstanceOf[Ptr[gushort]] = value
    def revents: gushort = !struct.at(6).asInstanceOf[Ptr[gushort]]
    def revents_=(value: gushort): Unit = !struct.at(6).asInstanceOf[Ptr[gushort]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GPollableInputStream = CStruct0
object GPollableInputStream:
  given _tag: Tag[GPollableInputStream] = Tag.materializeCStruct0Tag

/**
 * GPollableInputStreamInterface: _iface: The parent interface. _poll: Checks if the #GPollableInputStream instance is actually pollable _source: Creates a #GSource to poll the stream _nonblocking: Does a non-blocking read or returns %G_IO_ERROR_WOULD_BLOCK

 * [bindgen] header: /usr/include/glib-2.0/gio/gpollableinputstream.h
*/
opaque type GPollableInputStreamInterface = CArray[CChar, Nat.Digit2[Nat._4, Nat._8]]
object GPollableInputStreamInterface:
  given _tag: Tag[GPollableInputStreamInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._8]](Tag.Byte, Tag.Digit2[Nat._4, Nat._8](Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GPollableInputStreamInterface] = scala.scalanative.unsafe.alloc[GPollableInputStreamInterface](1)
  def apply(g_iface : GTypeInterface, can_poll : CFuncPtr1[Ptr[GPollableInputStream], gboolean], is_readable : CFuncPtr1[Ptr[GPollableInputStream], gboolean], create_source : CFuncPtr2[Ptr[GPollableInputStream], Ptr[GCancellable], Ptr[GSource]], read_nonblocking : CFuncPtr4[Ptr[GPollableInputStream], Ptr[Byte], gsize, Ptr[Ptr[GError]], gssize])(using Zone): Ptr[GPollableInputStreamInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).can_poll = can_poll
    (!____ptr).is_readable = is_readable
    (!____ptr).create_source = create_source
    (!____ptr).read_nonblocking = read_nonblocking
    ____ptr
  extension (struct: GPollableInputStreamInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def can_poll: CFuncPtr1[Ptr[GPollableInputStream], gboolean] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GPollableInputStream], gboolean]]]
    def can_poll_=(value: CFuncPtr1[Ptr[GPollableInputStream], gboolean]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GPollableInputStream], gboolean]]] = value
    def is_readable: CFuncPtr1[Ptr[GPollableInputStream], gboolean] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GPollableInputStream], gboolean]]]
    def is_readable_=(value: CFuncPtr1[Ptr[GPollableInputStream], gboolean]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GPollableInputStream], gboolean]]] = value
    def create_source: CFuncPtr2[Ptr[GPollableInputStream], Ptr[GCancellable], Ptr[GSource]] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GPollableInputStream], Ptr[GCancellable], Ptr[GSource]]]]
    def create_source_=(value: CFuncPtr2[Ptr[GPollableInputStream], Ptr[GCancellable], Ptr[GSource]]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GPollableInputStream], Ptr[GCancellable], Ptr[GSource]]]] = value
    def read_nonblocking: CFuncPtr4[Ptr[GPollableInputStream], Ptr[Byte], gsize, Ptr[Ptr[GError]], gssize] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr4[Ptr[GPollableInputStream], Ptr[Byte], gsize, Ptr[Ptr[GError]], gssize]]]
    def read_nonblocking_=(value: CFuncPtr4[Ptr[GPollableInputStream], Ptr[Byte], gsize, Ptr[Ptr[GError]], gssize]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr4[Ptr[GPollableInputStream], Ptr[Byte], gsize, Ptr[Ptr[GError]], gssize]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GPollableOutputStream = CStruct0
object GPollableOutputStream:
  given _tag: Tag[GPollableOutputStream] = Tag.materializeCStruct0Tag

/**
 * GPollableOutputStreamInterface: _iface: The parent interface. _poll: Checks if the #GPollableOutputStream instance is actually pollable _source: Creates a #GSource to poll the stream _nonblocking: Does a non-blocking write or returns %G_IO_ERROR_WOULD_BLOCK _nonblocking: Does a vectored non-blocking write, or returns %G_POLLABLE_RETURN_WOULD_BLOCK

 * [bindgen] header: /usr/include/glib-2.0/gio/gpollableoutputstream.h
*/
opaque type GPollableOutputStreamInterface = CArray[CChar, Nat.Digit2[Nat._5, Nat._6]]
object GPollableOutputStreamInterface:
  given _tag: Tag[GPollableOutputStreamInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._5, Nat._6]](Tag.Byte, Tag.Digit2[Nat._5, Nat._6](Tag.Nat5, Tag.Nat6))
  def apply()(using Zone): Ptr[GPollableOutputStreamInterface] = scala.scalanative.unsafe.alloc[GPollableOutputStreamInterface](1)
  def apply(g_iface : GTypeInterface, can_poll : CFuncPtr1[Ptr[GPollableOutputStream], gboolean], is_writable : CFuncPtr1[Ptr[GPollableOutputStream], gboolean], create_source : CFuncPtr2[Ptr[GPollableOutputStream], Ptr[GCancellable], Ptr[GSource]], write_nonblocking : CFuncPtr4[Ptr[GPollableOutputStream], Ptr[Byte], gsize, Ptr[Ptr[GError]], gssize], writev_nonblocking : CFuncPtr5[Ptr[GPollableOutputStream], Ptr[GOutputVector], gsize, Ptr[gsize], Ptr[Ptr[GError]], GPollableReturn])(using Zone): Ptr[GPollableOutputStreamInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).can_poll = can_poll
    (!____ptr).is_writable = is_writable
    (!____ptr).create_source = create_source
    (!____ptr).write_nonblocking = write_nonblocking
    (!____ptr).writev_nonblocking = writev_nonblocking
    ____ptr
  extension (struct: GPollableOutputStreamInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def can_poll: CFuncPtr1[Ptr[GPollableOutputStream], gboolean] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GPollableOutputStream], gboolean]]]
    def can_poll_=(value: CFuncPtr1[Ptr[GPollableOutputStream], gboolean]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GPollableOutputStream], gboolean]]] = value
    def is_writable: CFuncPtr1[Ptr[GPollableOutputStream], gboolean] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GPollableOutputStream], gboolean]]]
    def is_writable_=(value: CFuncPtr1[Ptr[GPollableOutputStream], gboolean]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GPollableOutputStream], gboolean]]] = value
    def create_source: CFuncPtr2[Ptr[GPollableOutputStream], Ptr[GCancellable], Ptr[GSource]] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GPollableOutputStream], Ptr[GCancellable], Ptr[GSource]]]]
    def create_source_=(value: CFuncPtr2[Ptr[GPollableOutputStream], Ptr[GCancellable], Ptr[GSource]]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GPollableOutputStream], Ptr[GCancellable], Ptr[GSource]]]] = value
    def write_nonblocking: CFuncPtr4[Ptr[GPollableOutputStream], Ptr[Byte], gsize, Ptr[Ptr[GError]], gssize] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr4[Ptr[GPollableOutputStream], Ptr[Byte], gsize, Ptr[Ptr[GError]], gssize]]]
    def write_nonblocking_=(value: CFuncPtr4[Ptr[GPollableOutputStream], Ptr[Byte], gsize, Ptr[Ptr[GError]], gssize]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr4[Ptr[GPollableOutputStream], Ptr[Byte], gsize, Ptr[Ptr[GError]], gssize]]] = value
    def writev_nonblocking: CFuncPtr5[Ptr[GPollableOutputStream], Ptr[GOutputVector], gsize, Ptr[gsize], Ptr[Ptr[GError]], GPollableReturn] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr5[Ptr[GPollableOutputStream], Ptr[GOutputVector], gsize, Ptr[gsize], Ptr[Ptr[GError]], GPollableReturn]]]
    def writev_nonblocking_=(value: CFuncPtr5[Ptr[GPollableOutputStream], Ptr[GOutputVector], gsize, Ptr[gsize], Ptr[Ptr[GError]], GPollableReturn]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr5[Ptr[GPollableOutputStream], Ptr[GOutputVector], gsize, Ptr[gsize], Ptr[Ptr[GError]], GPollableReturn]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gpowerprofilemonitor.h
*/
opaque type GPowerProfileMonitor = CStruct0
object GPowerProfileMonitor:
  given _tag: Tag[GPowerProfileMonitor] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gpowerprofilemonitor.h
*/
opaque type GPowerProfileMonitorInterface = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GPowerProfileMonitorInterface:
  given _tag: Tag[GPowerProfileMonitorInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GPowerProfileMonitorInterface] = scala.scalanative.unsafe.alloc[GPowerProfileMonitorInterface](1)
  def apply(g_iface : GTypeInterface)(using Zone): Ptr[GPowerProfileMonitorInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    ____ptr
  extension (struct: GPowerProfileMonitorInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
*/
opaque type GPrivate = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GPrivate:
  given _tag: Tag[GPrivate] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GPrivate] = scala.scalanative.unsafe.alloc[GPrivate](1)
  def apply(p : gpointer, _notify : GDestroyNotify, future : CArray[gpointer, Nat._2])(using Zone): Ptr[GPrivate] = 
    val ____ptr = apply()
    (!____ptr).p = p
    (!____ptr)._notify = _notify
    (!____ptr).future = future
    ____ptr
  extension (struct: GPrivate)
    def p: gpointer = !struct.at(0).asInstanceOf[Ptr[gpointer]]
    def p_=(value: gpointer): Unit = !struct.at(0).asInstanceOf[Ptr[gpointer]] = value
    def _notify: GDestroyNotify = !struct.at(8).asInstanceOf[Ptr[GDestroyNotify]]
    def _notify_=(value: GDestroyNotify): Unit = !struct.at(8).asInstanceOf[Ptr[GDestroyNotify]] = value
    def future: CArray[gpointer, Nat._2] = !struct.at(16).asInstanceOf[Ptr[CArray[gpointer, Nat._2]]]
    def future_=(value: CArray[gpointer, Nat._2]): Unit = !struct.at(16).asInstanceOf[Ptr[CArray[gpointer, Nat._2]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GPropertyAction = CStruct0
object GPropertyAction:
  given _tag: Tag[GPropertyAction] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GProxy = CStruct0
object GProxy:
  given _tag: Tag[GProxy] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddress.h
*/
opaque type GProxyAddress = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GProxyAddress:
  given _tag: Tag[GProxyAddress] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GProxyAddress] = scala.scalanative.unsafe.alloc[GProxyAddress](1)
  def apply(parent_instance : GInetSocketAddress, priv : Ptr[GProxyAddressPrivate])(using Zone): Ptr[GProxyAddress] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GProxyAddress)
    def parent_instance: GInetSocketAddress = !struct.at(0).asInstanceOf[Ptr[GInetSocketAddress]]
    def parent_instance_=(value: GInetSocketAddress): Unit = !struct.at(0).asInstanceOf[Ptr[GInetSocketAddress]] = value
    def priv: Ptr[GProxyAddressPrivate] = !struct.at(32).asInstanceOf[Ptr[Ptr[GProxyAddressPrivate]]]
    def priv_=(value: Ptr[GProxyAddressPrivate]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[GProxyAddressPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddress.h
*/
opaque type GProxyAddressClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._6, Nat._0]]
object GProxyAddressClass:
  given _tag: Tag[GProxyAddressClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._6, Nat._0]](Tag.Byte, Tag.Digit3[Nat._1, Nat._6, Nat._0](Tag.Nat1, Tag.Nat6, Tag.Nat0))
  def apply()(using Zone): Ptr[GProxyAddressClass] = scala.scalanative.unsafe.alloc[GProxyAddressClass](1)
  def apply(parent_class : GInetSocketAddressClass)(using Zone): Ptr[GProxyAddressClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: GProxyAddressClass)
    def parent_class: GInetSocketAddressClass = !struct.at(0).asInstanceOf[Ptr[GInetSocketAddressClass]]
    def parent_class_=(value: GInetSocketAddressClass): Unit = !struct.at(0).asInstanceOf[Ptr[GInetSocketAddressClass]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddressenumerator.h
*/
opaque type GProxyAddressEnumerator = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GProxyAddressEnumerator:
  given _tag: Tag[GProxyAddressEnumerator] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GProxyAddressEnumerator] = scala.scalanative.unsafe.alloc[GProxyAddressEnumerator](1)
  def apply(parent_instance : GSocketAddressEnumerator, priv : Ptr[GProxyAddressEnumeratorPrivate])(using Zone): Ptr[GProxyAddressEnumerator] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GProxyAddressEnumerator)
    def parent_instance: GSocketAddressEnumerator = !struct.at(0).asInstanceOf[Ptr[GSocketAddressEnumerator]]
    def parent_instance_=(value: GSocketAddressEnumerator): Unit = !struct.at(0).asInstanceOf[Ptr[GSocketAddressEnumerator]] = value
    def priv: Ptr[GProxyAddressEnumeratorPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GProxyAddressEnumeratorPrivate]]]
    def priv_=(value: Ptr[GProxyAddressEnumeratorPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GProxyAddressEnumeratorPrivate]]] = value

/**
 * GProxyAddressEnumeratorClass:

 * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddressenumerator.h
*/
opaque type GProxyAddressEnumeratorClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._1, Nat._6]]
object GProxyAddressEnumeratorClass:
  given _tag: Tag[GProxyAddressEnumeratorClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._1, Nat._6]](Tag.Byte, Tag.Digit3[Nat._2, Nat._1, Nat._6](Tag.Nat2, Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GProxyAddressEnumeratorClass] = scala.scalanative.unsafe.alloc[GProxyAddressEnumeratorClass](1)
  def apply(parent_class : GSocketAddressEnumeratorClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit], _g_reserved7 : CFuncPtr0[Unit])(using Zone): Ptr[GProxyAddressEnumeratorClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    (!____ptr)._g_reserved7 = _g_reserved7
    ____ptr
  extension (struct: GProxyAddressEnumeratorClass)
    def parent_class: GSocketAddressEnumeratorClass = !struct.at(0).asInstanceOf[Ptr[GSocketAddressEnumeratorClass]]
    def parent_class_=(value: GSocketAddressEnumeratorClass): Unit = !struct.at(0).asInstanceOf[Ptr[GSocketAddressEnumeratorClass]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved6: CFuncPtr0[Unit] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved7: CFuncPtr0[Unit] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved7_=(value: CFuncPtr0[Unit]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddressenumerator.h
*/
opaque type GProxyAddressEnumeratorPrivate = CStruct0
object GProxyAddressEnumeratorPrivate:
  given _tag: Tag[GProxyAddressEnumeratorPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddress.h
*/
opaque type GProxyAddressPrivate = CStruct0
object GProxyAddressPrivate:
  given _tag: Tag[GProxyAddressPrivate] = Tag.materializeCStruct0Tag

/**
 * GProxyInterface: _iface: The parent interface. : Connect to proxy server and wrap (if required) the #connection to handle payload. _async: Same as connect() but asynchronous. _finish: Returns the result of connect_async() _hostname: Returns whether the proxy supports hostname lookups.

 * [bindgen] header: /usr/include/glib-2.0/gio/gproxy.h
*/
opaque type GProxyInterface = CArray[CChar, Nat.Digit2[Nat._4, Nat._8]]
object GProxyInterface:
  given _tag: Tag[GProxyInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._8]](Tag.Byte, Tag.Digit2[Nat._4, Nat._8](Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GProxyInterface] = scala.scalanative.unsafe.alloc[GProxyInterface](1)
  def apply(g_iface : GTypeInterface, connect : CFuncPtr5[Ptr[GProxy], Ptr[GIOStream], Ptr[GProxyAddress], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GIOStream]], connect_async : CFuncPtr6[Ptr[GProxy], Ptr[GIOStream], Ptr[GProxyAddress], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], connect_finish : CFuncPtr3[Ptr[GProxy], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GIOStream]], supports_hostname : CFuncPtr1[Ptr[GProxy], gboolean])(using Zone): Ptr[GProxyInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).connect = connect
    (!____ptr).connect_async = connect_async
    (!____ptr).connect_finish = connect_finish
    (!____ptr).supports_hostname = supports_hostname
    ____ptr
  extension (struct: GProxyInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def connect: CFuncPtr5[Ptr[GProxy], Ptr[GIOStream], Ptr[GProxyAddress], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GIOStream]] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr5[Ptr[GProxy], Ptr[GIOStream], Ptr[GProxyAddress], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GIOStream]]]]
    def connect_=(value: CFuncPtr5[Ptr[GProxy], Ptr[GIOStream], Ptr[GProxyAddress], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GIOStream]]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr5[Ptr[GProxy], Ptr[GIOStream], Ptr[GProxyAddress], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GIOStream]]]] = value
    def connect_async: CFuncPtr6[Ptr[GProxy], Ptr[GIOStream], Ptr[GProxyAddress], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr6[Ptr[GProxy], Ptr[GIOStream], Ptr[GProxyAddress], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def connect_async_=(value: CFuncPtr6[Ptr[GProxy], Ptr[GIOStream], Ptr[GProxyAddress], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr6[Ptr[GProxy], Ptr[GIOStream], Ptr[GProxyAddress], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def connect_finish: CFuncPtr3[Ptr[GProxy], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GIOStream]] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr3[Ptr[GProxy], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GIOStream]]]]
    def connect_finish_=(value: CFuncPtr3[Ptr[GProxy], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GIOStream]]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr3[Ptr[GProxy], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GIOStream]]]] = value
    def supports_hostname: CFuncPtr1[Ptr[GProxy], gboolean] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GProxy], gboolean]]]
    def supports_hostname_=(value: CFuncPtr1[Ptr[GProxy], gboolean]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GProxy], gboolean]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GProxyResolver = CStruct0
object GProxyResolver:
  given _tag: Tag[GProxyResolver] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gproxyresolver.h
*/
opaque type GProxyResolverInterface = CArray[CChar, Nat.Digit2[Nat._4, Nat._8]]
object GProxyResolverInterface:
  given _tag: Tag[GProxyResolverInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._8]](Tag.Byte, Tag.Digit2[Nat._4, Nat._8](Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GProxyResolverInterface] = scala.scalanative.unsafe.alloc[GProxyResolverInterface](1)
  def apply(g_iface : GTypeInterface, is_supported : CFuncPtr1[Ptr[GProxyResolver], gboolean], lookup : CFuncPtr4[Ptr[GProxyResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]], lookup_async : CFuncPtr5[Ptr[GProxyResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], lookup_finish : CFuncPtr3[Ptr[GProxyResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]])(using Zone): Ptr[GProxyResolverInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).is_supported = is_supported
    (!____ptr).lookup = lookup
    (!____ptr).lookup_async = lookup_async
    (!____ptr).lookup_finish = lookup_finish
    ____ptr
  extension (struct: GProxyResolverInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def is_supported: CFuncPtr1[Ptr[GProxyResolver], gboolean] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GProxyResolver], gboolean]]]
    def is_supported_=(value: CFuncPtr1[Ptr[GProxyResolver], gboolean]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GProxyResolver], gboolean]]] = value
    def lookup: CFuncPtr4[Ptr[GProxyResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr4[Ptr[GProxyResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]]]
    def lookup_=(value: CFuncPtr4[Ptr[GProxyResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr4[Ptr[GProxyResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]]] = value
    def lookup_async: CFuncPtr5[Ptr[GProxyResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr5[Ptr[GProxyResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def lookup_async_=(value: CFuncPtr5[Ptr[GProxyResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr5[Ptr[GProxyResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def lookup_finish: CFuncPtr3[Ptr[GProxyResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr3[Ptr[GProxyResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]]]
    def lookup_finish_=(value: CFuncPtr3[Ptr[GProxyResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr3[Ptr[GProxyResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
*/
opaque type GPtrArray = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GPtrArray:
  given _tag: Tag[GPtrArray] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GPtrArray] = scala.scalanative.unsafe.alloc[GPtrArray](1)
  def apply(pdata : Ptr[gpointer], len : guint)(using Zone): Ptr[GPtrArray] = 
    val ____ptr = apply()
    (!____ptr).pdata = pdata
    (!____ptr).len = len
    ____ptr
  extension (struct: GPtrArray)
    def pdata: Ptr[gpointer] = !struct.at(0).asInstanceOf[Ptr[Ptr[gpointer]]]
    def pdata_=(value: Ptr[gpointer]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[gpointer]]] = value
    def len: guint = !struct.at(8).asInstanceOf[Ptr[guint]]
    def len_=(value: guint): Unit = !struct.at(8).asInstanceOf[Ptr[guint]] = value

/**
 * GQueue: : a pointer to the first element of the queue : a pointer to the last element of the queue : the number of elements in the queue

 * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
*/
opaque type GQueue = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GQueue:
  given _tag: Tag[GQueue] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GQueue] = scala.scalanative.unsafe.alloc[GQueue](1)
  def apply(head : Ptr[GList], tail : Ptr[GList], _length : guint)(using Zone): Ptr[GQueue] = 
    val ____ptr = apply()
    (!____ptr).head = head
    (!____ptr).tail = tail
    (!____ptr)._length = _length
    ____ptr
  extension (struct: GQueue)
    def head: Ptr[GList] = !struct.at(0).asInstanceOf[Ptr[Ptr[GList]]]
    def head_=(value: Ptr[GList]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[GList]]] = value
    def tail: Ptr[GList] = !struct.at(8).asInstanceOf[Ptr[Ptr[GList]]]
    def tail_=(value: Ptr[GList]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[GList]]] = value
    def _length: guint = !struct.at(16).asInstanceOf[Ptr[guint]]
    def _length_=(value: guint): Unit = !struct.at(16).asInstanceOf[Ptr[guint]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
*/
opaque type GRWLock = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GRWLock:
  given _tag: Tag[GRWLock] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GRWLock] = scala.scalanative.unsafe.alloc[GRWLock](1)
  def apply(p : gpointer, i : CArray[guint, Nat._2])(using Zone): Ptr[GRWLock] = 
    val ____ptr = apply()
    (!____ptr).p = p
    (!____ptr).i = i
    ____ptr
  extension (struct: GRWLock)
    def p: gpointer = !struct.at(0).asInstanceOf[Ptr[gpointer]]
    def p_=(value: gpointer): Unit = !struct.at(0).asInstanceOf[Ptr[gpointer]] = value
    def i: CArray[guint, Nat._2] = !struct.at(8).asInstanceOf[Ptr[CArray[guint, Nat._2]]]
    def i_=(value: CArray[guint, Nat._2]): Unit = !struct.at(8).asInstanceOf[Ptr[CArray[guint, Nat._2]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/grand.h
*/
opaque type GRand = CStruct0
object GRand:
  given _tag: Tag[GRand] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
*/
opaque type GRecMutex = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GRecMutex:
  given _tag: Tag[GRecMutex] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GRecMutex] = scala.scalanative.unsafe.alloc[GRecMutex](1)
  def apply(p : gpointer, i : CArray[guint, Nat._2])(using Zone): Ptr[GRecMutex] = 
    val ____ptr = apply()
    (!____ptr).p = p
    (!____ptr).i = i
    ____ptr
  extension (struct: GRecMutex)
    def p: gpointer = !struct.at(0).asInstanceOf[Ptr[gpointer]]
    def p_=(value: gpointer): Unit = !struct.at(0).asInstanceOf[Ptr[gpointer]] = value
    def i: CArray[guint, Nat._2] = !struct.at(8).asInstanceOf[Ptr[CArray[guint, Nat._2]]]
    def i_=(value: CArray[guint, Nat._2]): Unit = !struct.at(8).asInstanceOf[Ptr[CArray[guint, Nat._2]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
*/
opaque type GRegex = CStruct0
object GRegex:
  given _tag: Tag[GRegex] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/grel.h
*/
opaque type GRelation = CStruct0
object GRelation:
  given _tag: Tag[GRelation] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GRemoteActionGroup = CStruct0
object GRemoteActionGroup:
  given _tag: Tag[GRemoteActionGroup] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gremoteactiongroup.h
*/
opaque type GRemoteActionGroupInterface = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GRemoteActionGroupInterface:
  given _tag: Tag[GRemoteActionGroupInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GRemoteActionGroupInterface] = scala.scalanative.unsafe.alloc[GRemoteActionGroupInterface](1)
  def apply(g_iface : GTypeInterface, activate_action_full : CFuncPtr4[Ptr[GRemoteActionGroup], Ptr[gchar], Ptr[GVariant], Ptr[GVariant], Unit], change_action_state_full : CFuncPtr4[Ptr[GRemoteActionGroup], Ptr[gchar], Ptr[GVariant], Ptr[GVariant], Unit])(using Zone): Ptr[GRemoteActionGroupInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).activate_action_full = activate_action_full
    (!____ptr).change_action_state_full = change_action_state_full
    ____ptr
  extension (struct: GRemoteActionGroupInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def activate_action_full: CFuncPtr4[Ptr[GRemoteActionGroup], Ptr[gchar], Ptr[GVariant], Ptr[GVariant], Unit] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr4[Ptr[GRemoteActionGroup], Ptr[gchar], Ptr[GVariant], Ptr[GVariant], Unit]]]
    def activate_action_full_=(value: CFuncPtr4[Ptr[GRemoteActionGroup], Ptr[gchar], Ptr[GVariant], Ptr[GVariant], Unit]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr4[Ptr[GRemoteActionGroup], Ptr[gchar], Ptr[GVariant], Ptr[GVariant], Unit]]] = value
    def change_action_state_full: CFuncPtr4[Ptr[GRemoteActionGroup], Ptr[gchar], Ptr[GVariant], Ptr[GVariant], Unit] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr4[Ptr[GRemoteActionGroup], Ptr[gchar], Ptr[GVariant], Ptr[GVariant], Unit]]]
    def change_action_state_full_=(value: CFuncPtr4[Ptr[GRemoteActionGroup], Ptr[gchar], Ptr[GVariant], Ptr[GVariant], Unit]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr4[Ptr[GRemoteActionGroup], Ptr[gchar], Ptr[GVariant], Ptr[GVariant], Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
*/
opaque type GResolver = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GResolver:
  given _tag: Tag[GResolver] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GResolver] = scala.scalanative.unsafe.alloc[GResolver](1)
  def apply(parent_instance : GObject, priv : Ptr[GResolverPrivate])(using Zone): Ptr[GResolver] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GResolver)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GResolverPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GResolverPrivate]]]
    def priv_=(value: Ptr[GResolverPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GResolverPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
*/
opaque type GResolverClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._6, Nat._4]]
object GResolverClass:
  given _tag: Tag[GResolverClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._6, Nat._4]](Tag.Byte, Tag.Digit3[Nat._2, Nat._6, Nat._4](Tag.Nat2, Tag.Nat6, Tag.Nat4))
  def apply()(using Zone): Ptr[GResolverClass] = scala.scalanative.unsafe.alloc[GResolverClass](1)
  def apply(parent_class : GObjectClass, reload : CFuncPtr1[Ptr[GResolver], Unit], lookup_by_name : CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]], lookup_by_name_async : CFuncPtr5[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], lookup_by_name_finish : CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]], lookup_by_address : CFuncPtr4[Ptr[GResolver], Ptr[GInetAddress], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[gchar]], lookup_by_address_async : CFuncPtr5[Ptr[GResolver], Ptr[GInetAddress], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], lookup_by_address_finish : CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[gchar]], lookup_service : CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]], lookup_service_async : CFuncPtr5[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], lookup_service_finish : CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]], lookup_records : CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]], lookup_records_async : CFuncPtr6[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], lookup_records_finish : CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]], lookup_by_name_with_flags_async : CFuncPtr6[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], lookup_by_name_with_flags_finish : CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]], lookup_by_name_with_flags : CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]])(using Zone): Ptr[GResolverClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).reload = reload
    (!____ptr).lookup_by_name = lookup_by_name
    (!____ptr).lookup_by_name_async = lookup_by_name_async
    (!____ptr).lookup_by_name_finish = lookup_by_name_finish
    (!____ptr).lookup_by_address = lookup_by_address
    (!____ptr).lookup_by_address_async = lookup_by_address_async
    (!____ptr).lookup_by_address_finish = lookup_by_address_finish
    (!____ptr).lookup_service = lookup_service
    (!____ptr).lookup_service_async = lookup_service_async
    (!____ptr).lookup_service_finish = lookup_service_finish
    (!____ptr).lookup_records = lookup_records
    (!____ptr).lookup_records_async = lookup_records_async
    (!____ptr).lookup_records_finish = lookup_records_finish
    (!____ptr).lookup_by_name_with_flags_async = lookup_by_name_with_flags_async
    (!____ptr).lookup_by_name_with_flags_finish = lookup_by_name_with_flags_finish
    (!____ptr).lookup_by_name_with_flags = lookup_by_name_with_flags
    ____ptr
  extension (struct: GResolverClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def reload: CFuncPtr1[Ptr[GResolver], Unit] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GResolver], Unit]]]
    def reload_=(value: CFuncPtr1[Ptr[GResolver], Unit]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GResolver], Unit]]] = value
    def lookup_by_name: CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]]]
    def lookup_by_name_=(value: CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]]] = value
    def lookup_by_name_async: CFuncPtr5[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr5[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def lookup_by_name_async_=(value: CFuncPtr5[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr5[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def lookup_by_name_finish: CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]]]
    def lookup_by_name_finish_=(value: CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]]] = value
    def lookup_by_address: CFuncPtr4[Ptr[GResolver], Ptr[GInetAddress], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[gchar]] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr4[Ptr[GResolver], Ptr[GInetAddress], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[gchar]]]]
    def lookup_by_address_=(value: CFuncPtr4[Ptr[GResolver], Ptr[GInetAddress], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[gchar]]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr4[Ptr[GResolver], Ptr[GInetAddress], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[gchar]]]] = value
    def lookup_by_address_async: CFuncPtr5[Ptr[GResolver], Ptr[GInetAddress], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr5[Ptr[GResolver], Ptr[GInetAddress], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def lookup_by_address_async_=(value: CFuncPtr5[Ptr[GResolver], Ptr[GInetAddress], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr5[Ptr[GResolver], Ptr[GInetAddress], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def lookup_by_address_finish: CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[gchar]] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[gchar]]]]
    def lookup_by_address_finish_=(value: CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[gchar]]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[gchar]]]] = value
    def lookup_service: CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]]]
    def lookup_service_=(value: CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]]] = value
    def lookup_service_async: CFuncPtr5[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr5[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def lookup_service_async_=(value: CFuncPtr5[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr5[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def lookup_service_finish: CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]]]
    def lookup_service_finish_=(value: CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]]] = value
    def lookup_records: CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]] = !struct.at(216).asInstanceOf[Ptr[CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]]]
    def lookup_records_=(value: CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at(216).asInstanceOf[Ptr[CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]]] = value
    def lookup_records_async: CFuncPtr6[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(224).asInstanceOf[Ptr[CFuncPtr6[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def lookup_records_async_=(value: CFuncPtr6[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(224).asInstanceOf[Ptr[CFuncPtr6[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def lookup_records_finish: CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]] = !struct.at(232).asInstanceOf[Ptr[CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]]]
    def lookup_records_finish_=(value: CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at(232).asInstanceOf[Ptr[CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]]] = value
    def lookup_by_name_with_flags_async: CFuncPtr6[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(240).asInstanceOf[Ptr[CFuncPtr6[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def lookup_by_name_with_flags_async_=(value: CFuncPtr6[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(240).asInstanceOf[Ptr[CFuncPtr6[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def lookup_by_name_with_flags_finish: CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]] = !struct.at(248).asInstanceOf[Ptr[CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]]]
    def lookup_by_name_with_flags_finish_=(value: CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at(248).asInstanceOf[Ptr[CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]]] = value
    def lookup_by_name_with_flags: CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]] = !struct.at(256).asInstanceOf[Ptr[CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]]]
    def lookup_by_name_with_flags_=(value: CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at(256).asInstanceOf[Ptr[CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
*/
opaque type GResolverPrivate = CStruct0
object GResolverPrivate:
  given _tag: Tag[GResolverPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GResource = CStruct0
object GResource:
  given _tag: Tag[GResource] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
*/
opaque type GSList = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GSList:
  given _tag: Tag[GSList] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GSList] = scala.scalanative.unsafe.alloc[GSList](1)
  def apply(data : gpointer, next : Ptr[GSList])(using Zone): Ptr[GSList] = 
    val ____ptr = apply()
    (!____ptr).data = data
    (!____ptr).next = next
    ____ptr
  extension (struct: GSList)
    def data: gpointer = !struct.at(0).asInstanceOf[Ptr[gpointer]]
    def data_=(value: gpointer): Unit = !struct.at(0).asInstanceOf[Ptr[gpointer]] = value
    def next: Ptr[GSList] = !struct.at(8).asInstanceOf[Ptr[Ptr[GSList]]]
    def next_=(value: Ptr[GSList]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[GSList]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
*/
opaque type GScanner = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object GScanner:
  given _tag: Tag[GScanner] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[GScanner] = scala.scalanative.unsafe.alloc[GScanner](1)
  def apply(user_data : gpointer, max_parse_errors : guint, parse_errors : guint, input_name : Ptr[gchar], qdata : Ptr[GData], config : Ptr[GScannerConfig], token : GTokenType, value : GTokenValue, line : guint, position : guint, next_token : GTokenType, next_value : GTokenValue, next_line : guint, next_position : guint, symbol_table : Ptr[GHashTable], input_fd : gint, text : Ptr[gchar], text_end : Ptr[gchar], buffer : Ptr[gchar], scope_id : guint, msg_handler : GScannerMsgFunc)(using Zone): Ptr[GScanner] = 
    val ____ptr = apply()
    (!____ptr).user_data = user_data
    (!____ptr).max_parse_errors = max_parse_errors
    (!____ptr).parse_errors = parse_errors
    (!____ptr).input_name = input_name
    (!____ptr).qdata = qdata
    (!____ptr).config = config
    (!____ptr).token = token
    (!____ptr).value = value
    (!____ptr).line = line
    (!____ptr).position = position
    (!____ptr).next_token = next_token
    (!____ptr).next_value = next_value
    (!____ptr).next_line = next_line
    (!____ptr).next_position = next_position
    (!____ptr).symbol_table = symbol_table
    (!____ptr).input_fd = input_fd
    (!____ptr).text = text
    (!____ptr).text_end = text_end
    (!____ptr).buffer = buffer
    (!____ptr).scope_id = scope_id
    (!____ptr).msg_handler = msg_handler
    ____ptr
  extension (struct: GScanner)
    def user_data: gpointer = !struct.at(0).asInstanceOf[Ptr[gpointer]]
    def user_data_=(value: gpointer): Unit = !struct.at(0).asInstanceOf[Ptr[gpointer]] = value
    def max_parse_errors: guint = !struct.at(8).asInstanceOf[Ptr[guint]]
    def max_parse_errors_=(value: guint): Unit = !struct.at(8).asInstanceOf[Ptr[guint]] = value
    def parse_errors: guint = !struct.at(12).asInstanceOf[Ptr[guint]]
    def parse_errors_=(value: guint): Unit = !struct.at(12).asInstanceOf[Ptr[guint]] = value
    def input_name: Ptr[gchar] = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]]
    def input_name_=(value: Ptr[gchar]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def qdata: Ptr[GData] = !struct.at(24).asInstanceOf[Ptr[Ptr[GData]]]
    def qdata_=(value: Ptr[GData]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GData]]] = value
    def config: Ptr[GScannerConfig] = !struct.at(32).asInstanceOf[Ptr[Ptr[GScannerConfig]]]
    def config_=(value: Ptr[GScannerConfig]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[GScannerConfig]]] = value
    def token: GTokenType = !struct.at(40).asInstanceOf[Ptr[GTokenType]]
    def token_=(value: GTokenType): Unit = !struct.at(40).asInstanceOf[Ptr[GTokenType]] = value
    def value: GTokenValue = !struct.at(44).asInstanceOf[Ptr[GTokenValue]]
    def value_=(value: GTokenValue): Unit = !struct.at(44).asInstanceOf[Ptr[GTokenValue]] = value
    def line: guint = !struct.at(52).asInstanceOf[Ptr[guint]]
    def line_=(value: guint): Unit = !struct.at(52).asInstanceOf[Ptr[guint]] = value
    def position: guint = !struct.at(56).asInstanceOf[Ptr[guint]]
    def position_=(value: guint): Unit = !struct.at(56).asInstanceOf[Ptr[guint]] = value
    def next_token: GTokenType = !struct.at(60).asInstanceOf[Ptr[GTokenType]]
    def next_token_=(value: GTokenType): Unit = !struct.at(60).asInstanceOf[Ptr[GTokenType]] = value
    def next_value: GTokenValue = !struct.at(64).asInstanceOf[Ptr[GTokenValue]]
    def next_value_=(value: GTokenValue): Unit = !struct.at(64).asInstanceOf[Ptr[GTokenValue]] = value
    def next_line: guint = !struct.at(72).asInstanceOf[Ptr[guint]]
    def next_line_=(value: guint): Unit = !struct.at(72).asInstanceOf[Ptr[guint]] = value
    def next_position: guint = !struct.at(76).asInstanceOf[Ptr[guint]]
    def next_position_=(value: guint): Unit = !struct.at(76).asInstanceOf[Ptr[guint]] = value
    def symbol_table: Ptr[GHashTable] = !struct.at(80).asInstanceOf[Ptr[Ptr[GHashTable]]]
    def symbol_table_=(value: Ptr[GHashTable]): Unit = !struct.at(80).asInstanceOf[Ptr[Ptr[GHashTable]]] = value
    def input_fd: gint = !struct.at(88).asInstanceOf[Ptr[gint]]
    def input_fd_=(value: gint): Unit = !struct.at(88).asInstanceOf[Ptr[gint]] = value
    def text: Ptr[gchar] = !struct.at(96).asInstanceOf[Ptr[Ptr[gchar]]]
    def text_=(value: Ptr[gchar]): Unit = !struct.at(96).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def text_end: Ptr[gchar] = !struct.at(104).asInstanceOf[Ptr[Ptr[gchar]]]
    def text_end_=(value: Ptr[gchar]): Unit = !struct.at(104).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def buffer: Ptr[gchar] = !struct.at(112).asInstanceOf[Ptr[Ptr[gchar]]]
    def buffer_=(value: Ptr[gchar]): Unit = !struct.at(112).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def scope_id: guint = !struct.at(120).asInstanceOf[Ptr[guint]]
    def scope_id_=(value: guint): Unit = !struct.at(120).asInstanceOf[Ptr[guint]] = value
    def msg_handler: GScannerMsgFunc = !struct.at(128).asInstanceOf[Ptr[GScannerMsgFunc]]
    def msg_handler_=(value: GScannerMsgFunc): Unit = !struct.at(128).asInstanceOf[Ptr[GScannerMsgFunc]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
*/
opaque type GScannerConfig = CArray[CChar, Nat.Digit3[Nat._1, Nat._2, Nat._8]]
object GScannerConfig:
  given _tag: Tag[GScannerConfig] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._2, Nat._8]](Tag.Byte, Tag.Digit3[Nat._1, Nat._2, Nat._8](Tag.Nat1, Tag.Nat2, Tag.Nat8))
  def apply()(using Zone): Ptr[GScannerConfig] = scala.scalanative.unsafe.alloc[GScannerConfig](1)
  def apply(cset_skip_characters : Ptr[gchar], cset_identifier_first : Ptr[gchar], cset_identifier_nth : Ptr[gchar], cpair_comment_single : Ptr[gchar], case_sensitive : guint, skip_comment_multi : guint, skip_comment_single : guint, scan_comment_multi : guint, scan_identifier : guint, scan_identifier_1char : guint, scan_identifier_NULL : guint, scan_symbols : guint, scan_binary : guint, scan_octal : guint, scan_float : guint, scan_hex : guint, scan_hex_dollar : guint, scan_string_sq : guint, scan_string_dq : guint, numbers_2_int : guint, int_2_float : guint, identifier_2_string : guint, char_2_token : guint, symbol_2_token : guint, scope_0_fallback : guint, store_int64 : guint, padding_dummy : guint)(using Zone): Ptr[GScannerConfig] = 
    val ____ptr = apply()
    (!____ptr).cset_skip_characters = cset_skip_characters
    (!____ptr).cset_identifier_first = cset_identifier_first
    (!____ptr).cset_identifier_nth = cset_identifier_nth
    (!____ptr).cpair_comment_single = cpair_comment_single
    (!____ptr).case_sensitive = case_sensitive
    (!____ptr).skip_comment_multi = skip_comment_multi
    (!____ptr).skip_comment_single = skip_comment_single
    (!____ptr).scan_comment_multi = scan_comment_multi
    (!____ptr).scan_identifier = scan_identifier
    (!____ptr).scan_identifier_1char = scan_identifier_1char
    (!____ptr).scan_identifier_NULL = scan_identifier_NULL
    (!____ptr).scan_symbols = scan_symbols
    (!____ptr).scan_binary = scan_binary
    (!____ptr).scan_octal = scan_octal
    (!____ptr).scan_float = scan_float
    (!____ptr).scan_hex = scan_hex
    (!____ptr).scan_hex_dollar = scan_hex_dollar
    (!____ptr).scan_string_sq = scan_string_sq
    (!____ptr).scan_string_dq = scan_string_dq
    (!____ptr).numbers_2_int = numbers_2_int
    (!____ptr).int_2_float = int_2_float
    (!____ptr).identifier_2_string = identifier_2_string
    (!____ptr).char_2_token = char_2_token
    (!____ptr).symbol_2_token = symbol_2_token
    (!____ptr).scope_0_fallback = scope_0_fallback
    (!____ptr).store_int64 = store_int64
    (!____ptr).padding_dummy = padding_dummy
    ____ptr
  extension (struct: GScannerConfig)
    def cset_skip_characters: Ptr[gchar] = !struct.at(0).asInstanceOf[Ptr[Ptr[gchar]]]
    def cset_skip_characters_=(value: Ptr[gchar]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def cset_identifier_first: Ptr[gchar] = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]]
    def cset_identifier_first_=(value: Ptr[gchar]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def cset_identifier_nth: Ptr[gchar] = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]]
    def cset_identifier_nth_=(value: Ptr[gchar]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def cpair_comment_single: Ptr[gchar] = !struct.at(24).asInstanceOf[Ptr[Ptr[gchar]]]
    def cpair_comment_single_=(value: Ptr[gchar]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def case_sensitive: guint = !struct.at(32).asInstanceOf[Ptr[guint]]
    def case_sensitive_=(value: guint): Unit = !struct.at(32).asInstanceOf[Ptr[guint]] = value
    def skip_comment_multi: guint = !struct.at(36).asInstanceOf[Ptr[guint]]
    def skip_comment_multi_=(value: guint): Unit = !struct.at(36).asInstanceOf[Ptr[guint]] = value
    def skip_comment_single: guint = !struct.at(40).asInstanceOf[Ptr[guint]]
    def skip_comment_single_=(value: guint): Unit = !struct.at(40).asInstanceOf[Ptr[guint]] = value
    def scan_comment_multi: guint = !struct.at(44).asInstanceOf[Ptr[guint]]
    def scan_comment_multi_=(value: guint): Unit = !struct.at(44).asInstanceOf[Ptr[guint]] = value
    def scan_identifier: guint = !struct.at(48).asInstanceOf[Ptr[guint]]
    def scan_identifier_=(value: guint): Unit = !struct.at(48).asInstanceOf[Ptr[guint]] = value
    def scan_identifier_1char: guint = !struct.at(52).asInstanceOf[Ptr[guint]]
    def scan_identifier_1char_=(value: guint): Unit = !struct.at(52).asInstanceOf[Ptr[guint]] = value
    def scan_identifier_NULL: guint = !struct.at(56).asInstanceOf[Ptr[guint]]
    def scan_identifier_NULL_=(value: guint): Unit = !struct.at(56).asInstanceOf[Ptr[guint]] = value
    def scan_symbols: guint = !struct.at(60).asInstanceOf[Ptr[guint]]
    def scan_symbols_=(value: guint): Unit = !struct.at(60).asInstanceOf[Ptr[guint]] = value
    def scan_binary: guint = !struct.at(64).asInstanceOf[Ptr[guint]]
    def scan_binary_=(value: guint): Unit = !struct.at(64).asInstanceOf[Ptr[guint]] = value
    def scan_octal: guint = !struct.at(68).asInstanceOf[Ptr[guint]]
    def scan_octal_=(value: guint): Unit = !struct.at(68).asInstanceOf[Ptr[guint]] = value
    def scan_float: guint = !struct.at(72).asInstanceOf[Ptr[guint]]
    def scan_float_=(value: guint): Unit = !struct.at(72).asInstanceOf[Ptr[guint]] = value
    def scan_hex: guint = !struct.at(76).asInstanceOf[Ptr[guint]]
    def scan_hex_=(value: guint): Unit = !struct.at(76).asInstanceOf[Ptr[guint]] = value
    def scan_hex_dollar: guint = !struct.at(80).asInstanceOf[Ptr[guint]]
    def scan_hex_dollar_=(value: guint): Unit = !struct.at(80).asInstanceOf[Ptr[guint]] = value
    def scan_string_sq: guint = !struct.at(84).asInstanceOf[Ptr[guint]]
    def scan_string_sq_=(value: guint): Unit = !struct.at(84).asInstanceOf[Ptr[guint]] = value
    def scan_string_dq: guint = !struct.at(88).asInstanceOf[Ptr[guint]]
    def scan_string_dq_=(value: guint): Unit = !struct.at(88).asInstanceOf[Ptr[guint]] = value
    def numbers_2_int: guint = !struct.at(92).asInstanceOf[Ptr[guint]]
    def numbers_2_int_=(value: guint): Unit = !struct.at(92).asInstanceOf[Ptr[guint]] = value
    def int_2_float: guint = !struct.at(96).asInstanceOf[Ptr[guint]]
    def int_2_float_=(value: guint): Unit = !struct.at(96).asInstanceOf[Ptr[guint]] = value
    def identifier_2_string: guint = !struct.at(100).asInstanceOf[Ptr[guint]]
    def identifier_2_string_=(value: guint): Unit = !struct.at(100).asInstanceOf[Ptr[guint]] = value
    def char_2_token: guint = !struct.at(104).asInstanceOf[Ptr[guint]]
    def char_2_token_=(value: guint): Unit = !struct.at(104).asInstanceOf[Ptr[guint]] = value
    def symbol_2_token: guint = !struct.at(108).asInstanceOf[Ptr[guint]]
    def symbol_2_token_=(value: guint): Unit = !struct.at(108).asInstanceOf[Ptr[guint]] = value
    def scope_0_fallback: guint = !struct.at(112).asInstanceOf[Ptr[guint]]
    def scope_0_fallback_=(value: guint): Unit = !struct.at(112).asInstanceOf[Ptr[guint]] = value
    def store_int64: guint = !struct.at(116).asInstanceOf[Ptr[guint]]
    def store_int64_=(value: guint): Unit = !struct.at(116).asInstanceOf[Ptr[guint]] = value
    def padding_dummy: guint = !struct.at(120).asInstanceOf[Ptr[guint]]
    def padding_dummy_=(value: guint): Unit = !struct.at(120).asInstanceOf[Ptr[guint]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GSeekable = CStruct0
object GSeekable:
  given _tag: Tag[GSeekable] = Tag.materializeCStruct0Tag

/**
 * GSeekableIface: _iface: The parent interface. : Tells the current location within a stream. _seek: Checks if seeking is supported by the stream.

 * [bindgen] header: /usr/include/glib-2.0/gio/gseekable.h
*/
opaque type GSeekableIface = CArray[CChar, Nat.Digit2[Nat._5, Nat._6]]
object GSeekableIface:
  given _tag: Tag[GSeekableIface] = Tag.CArray[CChar, Nat.Digit2[Nat._5, Nat._6]](Tag.Byte, Tag.Digit2[Nat._5, Nat._6](Tag.Nat5, Tag.Nat6))
  def apply()(using Zone): Ptr[GSeekableIface] = scala.scalanative.unsafe.alloc[GSeekableIface](1)
  def apply(g_iface : GTypeInterface, tell : CFuncPtr1[Ptr[GSeekable], goffset], can_seek : CFuncPtr1[Ptr[GSeekable], gboolean], seek : CFuncPtr5[Ptr[GSeekable], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], can_truncate : CFuncPtr1[Ptr[GSeekable], gboolean], truncate_fn : CFuncPtr4[Ptr[GSeekable], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean])(using Zone): Ptr[GSeekableIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).tell = tell
    (!____ptr).can_seek = can_seek
    (!____ptr).seek = seek
    (!____ptr).can_truncate = can_truncate
    (!____ptr).truncate_fn = truncate_fn
    ____ptr
  extension (struct: GSeekableIface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def tell: CFuncPtr1[Ptr[GSeekable], goffset] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSeekable], goffset]]]
    def tell_=(value: CFuncPtr1[Ptr[GSeekable], goffset]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSeekable], goffset]]] = value
    def can_seek: CFuncPtr1[Ptr[GSeekable], gboolean] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSeekable], gboolean]]]
    def can_seek_=(value: CFuncPtr1[Ptr[GSeekable], gboolean]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSeekable], gboolean]]] = value
    def seek: CFuncPtr5[Ptr[GSeekable], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr5[Ptr[GSeekable], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def seek_=(value: CFuncPtr5[Ptr[GSeekable], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr5[Ptr[GSeekable], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def can_truncate: CFuncPtr1[Ptr[GSeekable], gboolean] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSeekable], gboolean]]]
    def can_truncate_=(value: CFuncPtr1[Ptr[GSeekable], gboolean]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSeekable], gboolean]]] = value
    def truncate_fn: CFuncPtr4[Ptr[GSeekable], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr4[Ptr[GSeekable], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def truncate_fn_=(value: CFuncPtr4[Ptr[GSeekable], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr4[Ptr[GSeekable], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
*/
opaque type GSequence = CStruct0
object GSequence:
  given _tag: Tag[GSequence] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
*/
opaque type GSequenceIter = CStruct0
object GSequenceIter:
  given _tag: Tag[GSequenceIter] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
*/
opaque type GSettings = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GSettings:
  given _tag: Tag[GSettings] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GSettings] = scala.scalanative.unsafe.alloc[GSettings](1)
  def apply(parent_instance : GObject, priv : Ptr[GSettingsPrivate])(using Zone): Ptr[GSettings] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GSettings)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GSettingsPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GSettingsPrivate]]]
    def priv_=(value: Ptr[GSettingsPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GSettingsPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GSettingsBackend = CStruct0
object GSettingsBackend:
  given _tag: Tag[GSettingsBackend] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
*/
opaque type GSettingsClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._2, Nat._8]]
object GSettingsClass:
  given _tag: Tag[GSettingsClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._2, Nat._8]](Tag.Byte, Tag.Digit3[Nat._3, Nat._2, Nat._8](Tag.Nat3, Tag.Nat2, Tag.Nat8))
  def apply()(using Zone): Ptr[GSettingsClass] = scala.scalanative.unsafe.alloc[GSettingsClass](1)
  def apply(parent_class : GObjectClass, writable_changed : CFuncPtr2[Ptr[GSettings], Ptr[gchar], Unit], changed : CFuncPtr2[Ptr[GSettings], Ptr[gchar], Unit], writable_change_event : CFuncPtr2[Ptr[GSettings], GQuark, gboolean], change_event : CFuncPtr3[Ptr[GSettings], Ptr[GQuark], gint, gboolean], padding : CArray[gpointer, Nat.Digit2[Nat._2, Nat._0]])(using Zone): Ptr[GSettingsClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).writable_changed = writable_changed
    (!____ptr).changed = changed
    (!____ptr).writable_change_event = writable_change_event
    (!____ptr).change_event = change_event
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GSettingsClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def writable_changed: CFuncPtr2[Ptr[GSettings], Ptr[gchar], Unit] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr2[Ptr[GSettings], Ptr[gchar], Unit]]]
    def writable_changed_=(value: CFuncPtr2[Ptr[GSettings], Ptr[gchar], Unit]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr2[Ptr[GSettings], Ptr[gchar], Unit]]] = value
    def changed: CFuncPtr2[Ptr[GSettings], Ptr[gchar], Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr2[Ptr[GSettings], Ptr[gchar], Unit]]]
    def changed_=(value: CFuncPtr2[Ptr[GSettings], Ptr[gchar], Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr2[Ptr[GSettings], Ptr[gchar], Unit]]] = value
    def writable_change_event: CFuncPtr2[Ptr[GSettings], GQuark, gboolean] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr2[Ptr[GSettings], GQuark, gboolean]]]
    def writable_change_event_=(value: CFuncPtr2[Ptr[GSettings], GQuark, gboolean]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr2[Ptr[GSettings], GQuark, gboolean]]] = value
    def change_event: CFuncPtr3[Ptr[GSettings], Ptr[GQuark], gint, gboolean] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr3[Ptr[GSettings], Ptr[GQuark], gint, gboolean]]]
    def change_event_=(value: CFuncPtr3[Ptr[GSettings], Ptr[GQuark], gint, gboolean]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr3[Ptr[GSettings], Ptr[GQuark], gint, gboolean]]] = value
    def padding: CArray[gpointer, Nat.Digit2[Nat._2, Nat._0]] = !struct.at(168).asInstanceOf[Ptr[CArray[gpointer, Nat.Digit2[Nat._2, Nat._0]]]]
    def padding_=(value: CArray[gpointer, Nat.Digit2[Nat._2, Nat._0]]): Unit = !struct.at(168).asInstanceOf[Ptr[CArray[gpointer, Nat.Digit2[Nat._2, Nat._0]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
*/
opaque type GSettingsPrivate = CStruct0
object GSettingsPrivate:
  given _tag: Tag[GSettingsPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
*/
opaque type GSettingsSchema = CStruct0
object GSettingsSchema:
  given _tag: Tag[GSettingsSchema] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
*/
opaque type GSettingsSchemaKey = CStruct0
object GSettingsSchemaKey:
  given _tag: Tag[GSettingsSchemaKey] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
*/
opaque type GSettingsSchemaSource = CStruct0
object GSettingsSchemaSource:
  given _tag: Tag[GSettingsSchemaSource] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gobject/gsignalgroup.h
*/
opaque type GSignalGroup = CStruct0
object GSignalGroup:
  given _tag: Tag[GSignalGroup] = Tag.materializeCStruct0Tag

/**
 * GSignalInvocationHint: _id: The signal id of the signal invoking the callback

 * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
*/
opaque type GSignalInvocationHint = CArray[CChar, Nat.Digit2[Nat._1, Nat._2]]
object GSignalInvocationHint:
  given _tag: Tag[GSignalInvocationHint] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._2]](Tag.Byte, Tag.Digit2[Nat._1, Nat._2](Tag.Nat1, Tag.Nat2))
  def apply()(using Zone): Ptr[GSignalInvocationHint] = scala.scalanative.unsafe.alloc[GSignalInvocationHint](1)
  def apply(signal_id : guint, detail : GQuark, run_type : GSignalFlags)(using Zone): Ptr[GSignalInvocationHint] = 
    val ____ptr = apply()
    (!____ptr).signal_id = signal_id
    (!____ptr).detail = detail
    (!____ptr).run_type = run_type
    ____ptr
  extension (struct: GSignalInvocationHint)
    def signal_id: guint = !struct.at(0).asInstanceOf[Ptr[guint]]
    def signal_id_=(value: guint): Unit = !struct.at(0).asInstanceOf[Ptr[guint]] = value
    def detail: GQuark = !struct.at(4).asInstanceOf[Ptr[GQuark]]
    def detail_=(value: GQuark): Unit = !struct.at(4).asInstanceOf[Ptr[GQuark]] = value
    def run_type: GSignalFlags = !struct.at(8).asInstanceOf[Ptr[GSignalFlags]]
    def run_type_=(value: GSignalFlags): Unit = !struct.at(8).asInstanceOf[Ptr[GSignalFlags]] = value

/**
 * GSignalQuery: _id: The signal id of the signal being queried, or 0 if the signal to be queried was unknown. _name: The signal name. : The interface/instance type that this signal can be emitted for. _flags: The signal flags as passed in to g_signal_new().

 * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
*/
opaque type GSignalQuery = CArray[CChar, Nat.Digit2[Nat._5, Nat._6]]
object GSignalQuery:
  given _tag: Tag[GSignalQuery] = Tag.CArray[CChar, Nat.Digit2[Nat._5, Nat._6]](Tag.Byte, Tag.Digit2[Nat._5, Nat._6](Tag.Nat5, Tag.Nat6))
  def apply()(using Zone): Ptr[GSignalQuery] = scala.scalanative.unsafe.alloc[GSignalQuery](1)
  def apply(signal_id : guint, signal_name : Ptr[gchar], itype : GType, signal_flags : GSignalFlags, return_type : GType, n_params : guint, param_types : Ptr[GType])(using Zone): Ptr[GSignalQuery] = 
    val ____ptr = apply()
    (!____ptr).signal_id = signal_id
    (!____ptr).signal_name = signal_name
    (!____ptr).itype = itype
    (!____ptr).signal_flags = signal_flags
    (!____ptr).return_type = return_type
    (!____ptr).n_params = n_params
    (!____ptr).param_types = param_types
    ____ptr
  extension (struct: GSignalQuery)
    def signal_id: guint = !struct.at(0).asInstanceOf[Ptr[guint]]
    def signal_id_=(value: guint): Unit = !struct.at(0).asInstanceOf[Ptr[guint]] = value
    def signal_name: Ptr[gchar] = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]]
    def signal_name_=(value: Ptr[gchar]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def itype: GType = !struct.at(16).asInstanceOf[Ptr[GType]]
    def itype_=(value: GType): Unit = !struct.at(16).asInstanceOf[Ptr[GType]] = value
    def signal_flags: GSignalFlags = !struct.at(24).asInstanceOf[Ptr[GSignalFlags]]
    def signal_flags_=(value: GSignalFlags): Unit = !struct.at(24).asInstanceOf[Ptr[GSignalFlags]] = value
    def return_type: GType = !struct.at(32).asInstanceOf[Ptr[GType]]
    def return_type_=(value: GType): Unit = !struct.at(32).asInstanceOf[Ptr[GType]] = value
    def n_params: guint = !struct.at(40).asInstanceOf[Ptr[guint]]
    def n_params_=(value: guint): Unit = !struct.at(40).asInstanceOf[Ptr[guint]] = value
    def param_types: Ptr[GType] = !struct.at(48).asInstanceOf[Ptr[Ptr[GType]]]
    def param_types_=(value: Ptr[GType]): Unit = !struct.at(48).asInstanceOf[Ptr[Ptr[GType]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GSimpleAction = CStruct0
object GSimpleAction:
  given _tag: Tag[GSimpleAction] = Tag.materializeCStruct0Tag

/**
 * GSimpleActionGroup:

 * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleactiongroup.h
*/
opaque type GSimpleActionGroup = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GSimpleActionGroup:
  given _tag: Tag[GSimpleActionGroup] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GSimpleActionGroup] = scala.scalanative.unsafe.alloc[GSimpleActionGroup](1)
  def apply(parent_instance : GObject, priv : Ptr[GSimpleActionGroupPrivate])(using Zone): Ptr[GSimpleActionGroup] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GSimpleActionGroup)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GSimpleActionGroupPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GSimpleActionGroupPrivate]]]
    def priv_=(value: Ptr[GSimpleActionGroupPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GSimpleActionGroupPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleactiongroup.h
*/
opaque type GSimpleActionGroupClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._3, Nat._2]]
object GSimpleActionGroupClass:
  given _tag: Tag[GSimpleActionGroupClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._3, Nat._2]](Tag.Byte, Tag.Digit3[Nat._2, Nat._3, Nat._2](Tag.Nat2, Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GSimpleActionGroupClass] = scala.scalanative.unsafe.alloc[GSimpleActionGroupClass](1)
  def apply(parent_class : GObjectClass, padding : CArray[gpointer, Nat.Digit2[Nat._1, Nat._2]])(using Zone): Ptr[GSimpleActionGroupClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GSimpleActionGroupClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def padding: CArray[gpointer, Nat.Digit2[Nat._1, Nat._2]] = !struct.at(136).asInstanceOf[Ptr[CArray[gpointer, Nat.Digit2[Nat._1, Nat._2]]]]
    def padding_=(value: CArray[gpointer, Nat.Digit2[Nat._1, Nat._2]]): Unit = !struct.at(136).asInstanceOf[Ptr[CArray[gpointer, Nat.Digit2[Nat._1, Nat._2]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleactiongroup.h
*/
opaque type GSimpleActionGroupPrivate = CStruct0
object GSimpleActionGroupPrivate:
  given _tag: Tag[GSimpleActionGroupPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GSimpleAsyncResult = CStruct0
object GSimpleAsyncResult:
  given _tag: Tag[GSimpleAsyncResult] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
*/
opaque type GSimpleAsyncResultClass = CStruct0
object GSimpleAsyncResultClass:
  given _tag: Tag[GSimpleAsyncResultClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GSimpleIOStream = CStruct0
object GSimpleIOStream:
  given _tag: Tag[GSimpleIOStream] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GSimplePermission = CStruct0
object GSimplePermission:
  given _tag: Tag[GSimplePermission] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleproxyresolver.h
*/
opaque type GSimpleProxyResolver = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GSimpleProxyResolver:
  given _tag: Tag[GSimpleProxyResolver] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GSimpleProxyResolver] = scala.scalanative.unsafe.alloc[GSimpleProxyResolver](1)
  def apply(parent_instance : GObject, priv : Ptr[GSimpleProxyResolverPrivate])(using Zone): Ptr[GSimpleProxyResolver] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GSimpleProxyResolver)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GSimpleProxyResolverPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GSimpleProxyResolverPrivate]]]
    def priv_=(value: Ptr[GSimpleProxyResolverPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GSimpleProxyResolverPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleproxyresolver.h
*/
opaque type GSimpleProxyResolverClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._7, Nat._6]]
object GSimpleProxyResolverClass:
  given _tag: Tag[GSimpleProxyResolverClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._7, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._7, Nat._6](Tag.Nat1, Tag.Nat7, Tag.Nat6))
  def apply()(using Zone): Ptr[GSimpleProxyResolverClass] = scala.scalanative.unsafe.alloc[GSimpleProxyResolverClass](1)
  def apply(parent_class : GObjectClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[GSimpleProxyResolverClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: GSimpleProxyResolverClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleproxyresolver.h
*/
opaque type GSimpleProxyResolverPrivate = CStruct0
object GSimpleProxyResolverPrivate:
  given _tag: Tag[GSimpleProxyResolverPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
*/
opaque type GSocket = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GSocket:
  given _tag: Tag[GSocket] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GSocket] = scala.scalanative.unsafe.alloc[GSocket](1)
  def apply(parent_instance : GObject, priv : Ptr[GSocketPrivate])(using Zone): Ptr[GSocket] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GSocket)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GSocketPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GSocketPrivate]]]
    def priv_=(value: Ptr[GSocketPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GSocketPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketaddress.h
*/
opaque type GSocketAddress = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GSocketAddress:
  given _tag: Tag[GSocketAddress] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GSocketAddress] = scala.scalanative.unsafe.alloc[GSocketAddress](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[GSocketAddress] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: GSocketAddress)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketaddress.h
*/
opaque type GSocketAddressClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._6, Nat._0]]
object GSocketAddressClass:
  given _tag: Tag[GSocketAddressClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._6, Nat._0]](Tag.Byte, Tag.Digit3[Nat._1, Nat._6, Nat._0](Tag.Nat1, Tag.Nat6, Tag.Nat0))
  def apply()(using Zone): Ptr[GSocketAddressClass] = scala.scalanative.unsafe.alloc[GSocketAddressClass](1)
  def apply(parent_class : GObjectClass, get_family : CFuncPtr1[Ptr[GSocketAddress], GSocketFamily], get_native_size : CFuncPtr1[Ptr[GSocketAddress], gssize], to_native : CFuncPtr4[Ptr[GSocketAddress], gpointer, gsize, Ptr[Ptr[GError]], gboolean])(using Zone): Ptr[GSocketAddressClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_family = get_family
    (!____ptr).get_native_size = get_native_size
    (!____ptr).to_native = to_native
    ____ptr
  extension (struct: GSocketAddressClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def get_family: CFuncPtr1[Ptr[GSocketAddress], GSocketFamily] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSocketAddress], GSocketFamily]]]
    def get_family_=(value: CFuncPtr1[Ptr[GSocketAddress], GSocketFamily]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSocketAddress], GSocketFamily]]] = value
    def get_native_size: CFuncPtr1[Ptr[GSocketAddress], gssize] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSocketAddress], gssize]]]
    def get_native_size_=(value: CFuncPtr1[Ptr[GSocketAddress], gssize]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSocketAddress], gssize]]] = value
    def to_native: CFuncPtr4[Ptr[GSocketAddress], gpointer, gsize, Ptr[Ptr[GError]], gboolean] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr4[Ptr[GSocketAddress], gpointer, gsize, Ptr[Ptr[GError]], gboolean]]]
    def to_native_=(value: CFuncPtr4[Ptr[GSocketAddress], gpointer, gsize, Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr4[Ptr[GSocketAddress], gpointer, gsize, Ptr[Ptr[GError]], gboolean]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketaddressenumerator.h
*/
opaque type GSocketAddressEnumerator = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GSocketAddressEnumerator:
  given _tag: Tag[GSocketAddressEnumerator] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GSocketAddressEnumerator] = scala.scalanative.unsafe.alloc[GSocketAddressEnumerator](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[GSocketAddressEnumerator] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: GSocketAddressEnumerator)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value

/**
 * GSocketAddressEnumeratorClass: : Virtual method for g_socket_address_enumerator_next(). _async: Virtual method for g_socket_address_enumerator_next_async(). _finish: Virtual method for g_socket_address_enumerator_next_finish().

 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketaddressenumerator.h
*/
opaque type GSocketAddressEnumeratorClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._6, Nat._0]]
object GSocketAddressEnumeratorClass:
  given _tag: Tag[GSocketAddressEnumeratorClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._6, Nat._0]](Tag.Byte, Tag.Digit3[Nat._1, Nat._6, Nat._0](Tag.Nat1, Tag.Nat6, Tag.Nat0))
  def apply()(using Zone): Ptr[GSocketAddressEnumeratorClass] = scala.scalanative.unsafe.alloc[GSocketAddressEnumeratorClass](1)
  def apply(parent_class : GObjectClass, next : CFuncPtr3[Ptr[GSocketAddressEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GSocketAddress]], next_async : CFuncPtr4[Ptr[GSocketAddressEnumerator], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], next_finish : CFuncPtr3[Ptr[GSocketAddressEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GSocketAddress]])(using Zone): Ptr[GSocketAddressEnumeratorClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).next = next
    (!____ptr).next_async = next_async
    (!____ptr).next_finish = next_finish
    ____ptr
  extension (struct: GSocketAddressEnumeratorClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def next: CFuncPtr3[Ptr[GSocketAddressEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GSocketAddress]] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GSocketAddressEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GSocketAddress]]]]
    def next_=(value: CFuncPtr3[Ptr[GSocketAddressEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GSocketAddress]]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GSocketAddressEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GSocketAddress]]]] = value
    def next_async: CFuncPtr4[Ptr[GSocketAddressEnumerator], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr4[Ptr[GSocketAddressEnumerator], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def next_async_=(value: CFuncPtr4[Ptr[GSocketAddressEnumerator], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr4[Ptr[GSocketAddressEnumerator], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def next_finish: CFuncPtr3[Ptr[GSocketAddressEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GSocketAddress]] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GSocketAddressEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GSocketAddress]]]]
    def next_finish_=(value: CFuncPtr3[Ptr[GSocketAddressEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GSocketAddress]]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GSocketAddressEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GSocketAddress]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
*/
opaque type GSocketClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._1, Nat._6]]
object GSocketClass:
  given _tag: Tag[GSocketClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._1, Nat._6]](Tag.Byte, Tag.Digit3[Nat._2, Nat._1, Nat._6](Tag.Nat2, Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GSocketClass] = scala.scalanative.unsafe.alloc[GSocketClass](1)
  def apply(parent_class : GObjectClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit], _g_reserved7 : CFuncPtr0[Unit], _g_reserved8 : CFuncPtr0[Unit], _g_reserved9 : CFuncPtr0[Unit], _g_reserved10 : CFuncPtr0[Unit])(using Zone): Ptr[GSocketClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    (!____ptr)._g_reserved7 = _g_reserved7
    (!____ptr)._g_reserved8 = _g_reserved8
    (!____ptr)._g_reserved9 = _g_reserved9
    (!____ptr)._g_reserved10 = _g_reserved10
    ____ptr
  extension (struct: GSocketClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved6: CFuncPtr0[Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved7: CFuncPtr0[Unit] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved7_=(value: CFuncPtr0[Unit]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved8: CFuncPtr0[Unit] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved8_=(value: CFuncPtr0[Unit]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved9: CFuncPtr0[Unit] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved9_=(value: CFuncPtr0[Unit]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved10: CFuncPtr0[Unit] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved10_=(value: CFuncPtr0[Unit]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
*/
opaque type GSocketClient = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GSocketClient:
  given _tag: Tag[GSocketClient] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GSocketClient] = scala.scalanative.unsafe.alloc[GSocketClient](1)
  def apply(parent_instance : GObject, priv : Ptr[GSocketClientPrivate])(using Zone): Ptr[GSocketClient] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GSocketClient)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GSocketClientPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GSocketClientPrivate]]]
    def priv_=(value: Ptr[GSocketClientPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GSocketClientPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
*/
opaque type GSocketClientClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._7, Nat._6]]
object GSocketClientClass:
  given _tag: Tag[GSocketClientClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._7, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._7, Nat._6](Tag.Nat1, Tag.Nat7, Tag.Nat6))
  def apply()(using Zone): Ptr[GSocketClientClass] = scala.scalanative.unsafe.alloc[GSocketClientClass](1)
  def apply(parent_class : GObjectClass, event : CFuncPtr4[Ptr[GSocketClient], GSocketClientEvent, Ptr[GSocketConnectable], Ptr[GIOStream], Unit], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit])(using Zone): Ptr[GSocketClientClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).event = event
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    ____ptr
  extension (struct: GSocketClientClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def event: CFuncPtr4[Ptr[GSocketClient], GSocketClientEvent, Ptr[GSocketConnectable], Ptr[GIOStream], Unit] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr4[Ptr[GSocketClient], GSocketClientEvent, Ptr[GSocketConnectable], Ptr[GIOStream], Unit]]]
    def event_=(value: CFuncPtr4[Ptr[GSocketClient], GSocketClientEvent, Ptr[GSocketConnectable], Ptr[GIOStream], Unit]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr4[Ptr[GSocketClient], GSocketClientEvent, Ptr[GSocketConnectable], Ptr[GIOStream], Unit]]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
*/
opaque type GSocketClientPrivate = CStruct0
object GSocketClientPrivate:
  given _tag: Tag[GSocketClientPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GSocketConnectable = CStruct0
object GSocketConnectable:
  given _tag: Tag[GSocketConnectable] = Tag.materializeCStruct0Tag

/**
 * GSocketConnectableIface: _iface: The parent interface. : Creates a #GSocketAddressEnumerator _enumerate: Creates a #GProxyAddressEnumerator _string: Format the connectable’s address as a string for debugging. Implementing this is optional. (Since: 2.48)

 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnectable.h
*/
opaque type GSocketConnectableIface = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GSocketConnectableIface:
  given _tag: Tag[GSocketConnectableIface] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GSocketConnectableIface] = scala.scalanative.unsafe.alloc[GSocketConnectableIface](1)
  def apply(g_iface : GTypeInterface, enumerate : CFuncPtr1[Ptr[GSocketConnectable], Ptr[GSocketAddressEnumerator]], proxy_enumerate : CFuncPtr1[Ptr[GSocketConnectable], Ptr[GSocketAddressEnumerator]], to_string : CFuncPtr1[Ptr[GSocketConnectable], Ptr[gchar]])(using Zone): Ptr[GSocketConnectableIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).enumerate = enumerate
    (!____ptr).proxy_enumerate = proxy_enumerate
    (!____ptr).to_string = to_string
    ____ptr
  extension (struct: GSocketConnectableIface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def enumerate: CFuncPtr1[Ptr[GSocketConnectable], Ptr[GSocketAddressEnumerator]] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSocketConnectable], Ptr[GSocketAddressEnumerator]]]]
    def enumerate_=(value: CFuncPtr1[Ptr[GSocketConnectable], Ptr[GSocketAddressEnumerator]]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSocketConnectable], Ptr[GSocketAddressEnumerator]]]] = value
    def proxy_enumerate: CFuncPtr1[Ptr[GSocketConnectable], Ptr[GSocketAddressEnumerator]] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSocketConnectable], Ptr[GSocketAddressEnumerator]]]]
    def proxy_enumerate_=(value: CFuncPtr1[Ptr[GSocketConnectable], Ptr[GSocketAddressEnumerator]]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSocketConnectable], Ptr[GSocketAddressEnumerator]]]] = value
    def to_string: CFuncPtr1[Ptr[GSocketConnectable], Ptr[gchar]] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSocketConnectable], Ptr[gchar]]]]
    def to_string_=(value: CFuncPtr1[Ptr[GSocketConnectable], Ptr[gchar]]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSocketConnectable], Ptr[gchar]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnection.h
*/
opaque type GSocketConnection = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GSocketConnection:
  given _tag: Tag[GSocketConnection] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GSocketConnection] = scala.scalanative.unsafe.alloc[GSocketConnection](1)
  def apply(parent_instance : GIOStream, priv : Ptr[GSocketConnectionPrivate])(using Zone): Ptr[GSocketConnection] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GSocketConnection)
    def parent_instance: GIOStream = !struct.at(0).asInstanceOf[Ptr[GIOStream]]
    def parent_instance_=(value: GIOStream): Unit = !struct.at(0).asInstanceOf[Ptr[GIOStream]] = value
    def priv: Ptr[GSocketConnectionPrivate] = !struct.at(32).asInstanceOf[Ptr[Ptr[GSocketConnectionPrivate]]]
    def priv_=(value: Ptr[GSocketConnectionPrivate]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[GSocketConnectionPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnection.h
*/
opaque type GSocketConnectionClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._0, Nat._4]]
object GSocketConnectionClass:
  given _tag: Tag[GSocketConnectionClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._0, Nat._4]](Tag.Byte, Tag.Digit3[Nat._3, Nat._0, Nat._4](Tag.Nat3, Tag.Nat0, Tag.Nat4))
  def apply()(using Zone): Ptr[GSocketConnectionClass] = scala.scalanative.unsafe.alloc[GSocketConnectionClass](1)
  def apply(parent_class : GIOStreamClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit])(using Zone): Ptr[GSocketConnectionClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    ____ptr
  extension (struct: GSocketConnectionClass)
    def parent_class: GIOStreamClass = !struct.at(0).asInstanceOf[Ptr[GIOStreamClass]]
    def parent_class_=(value: GIOStreamClass): Unit = !struct.at(0).asInstanceOf[Ptr[GIOStreamClass]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(256).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(256).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(264).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(264).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(272).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(272).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(280).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(280).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(288).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(288).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved6: CFuncPtr0[Unit] = !struct.at(296).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at(296).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnection.h
*/
opaque type GSocketConnectionPrivate = CStruct0
object GSocketConnectionPrivate:
  given _tag: Tag[GSocketConnectionPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketcontrolmessage.h
*/
opaque type GSocketControlMessage = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GSocketControlMessage:
  given _tag: Tag[GSocketControlMessage] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GSocketControlMessage] = scala.scalanative.unsafe.alloc[GSocketControlMessage](1)
  def apply(parent_instance : GObject, priv : Ptr[GSocketControlMessagePrivate])(using Zone): Ptr[GSocketControlMessage] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GSocketControlMessage)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GSocketControlMessagePrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GSocketControlMessagePrivate]]]
    def priv_=(value: Ptr[GSocketControlMessagePrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GSocketControlMessagePrivate]]] = value

/**
 * GSocketControlMessageClass: _size: gets the size of the message. _level: gets the protocol of the message. _type: gets the protocol specific type of the message. : Writes out the message data. : Tries to deserialize a message.

 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketcontrolmessage.h
*/
opaque type GSocketControlMessageClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._1, Nat._6]]
object GSocketControlMessageClass:
  given _tag: Tag[GSocketControlMessageClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._1, Nat._6]](Tag.Byte, Tag.Digit3[Nat._2, Nat._1, Nat._6](Tag.Nat2, Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GSocketControlMessageClass] = scala.scalanative.unsafe.alloc[GSocketControlMessageClass](1)
  def apply(parent_class : GObjectClass, get_size : CFuncPtr1[Ptr[GSocketControlMessage], gsize], get_level : CFuncPtr1[Ptr[GSocketControlMessage], CInt], get_type : CFuncPtr1[Ptr[GSocketControlMessage], CInt], serialize : CFuncPtr2[Ptr[GSocketControlMessage], gpointer, Unit], deserialize : CFuncPtr4[CInt, CInt, gsize, gpointer, Ptr[GSocketControlMessage]], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[GSocketControlMessageClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_size = get_size
    (!____ptr).get_level = get_level
    (!____ptr).get_type = get_type
    (!____ptr).serialize = serialize
    (!____ptr).deserialize = deserialize
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: GSocketControlMessageClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def get_size: CFuncPtr1[Ptr[GSocketControlMessage], gsize] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSocketControlMessage], gsize]]]
    def get_size_=(value: CFuncPtr1[Ptr[GSocketControlMessage], gsize]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSocketControlMessage], gsize]]] = value
    def get_level: CFuncPtr1[Ptr[GSocketControlMessage], CInt] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSocketControlMessage], CInt]]]
    def get_level_=(value: CFuncPtr1[Ptr[GSocketControlMessage], CInt]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSocketControlMessage], CInt]]] = value
    def get_type: CFuncPtr1[Ptr[GSocketControlMessage], CInt] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSocketControlMessage], CInt]]]
    def get_type_=(value: CFuncPtr1[Ptr[GSocketControlMessage], CInt]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSocketControlMessage], CInt]]] = value
    def serialize: CFuncPtr2[Ptr[GSocketControlMessage], gpointer, Unit] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr2[Ptr[GSocketControlMessage], gpointer, Unit]]]
    def serialize_=(value: CFuncPtr2[Ptr[GSocketControlMessage], gpointer, Unit]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr2[Ptr[GSocketControlMessage], gpointer, Unit]]] = value
    def deserialize: CFuncPtr4[CInt, CInt, gsize, gpointer, Ptr[GSocketControlMessage]] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr4[CInt, CInt, gsize, gpointer, Ptr[GSocketControlMessage]]]]
    def deserialize_=(value: CFuncPtr4[CInt, CInt, gsize, gpointer, Ptr[GSocketControlMessage]]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr4[CInt, CInt, gsize, gpointer, Ptr[GSocketControlMessage]]]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketcontrolmessage.h
*/
opaque type GSocketControlMessagePrivate = CStruct0
object GSocketControlMessagePrivate:
  given _tag: Tag[GSocketControlMessagePrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketlistener.h
*/
opaque type GSocketListener = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GSocketListener:
  given _tag: Tag[GSocketListener] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GSocketListener] = scala.scalanative.unsafe.alloc[GSocketListener](1)
  def apply(parent_instance : GObject, priv : Ptr[GSocketListenerPrivate])(using Zone): Ptr[GSocketListener] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GSocketListener)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GSocketListenerPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GSocketListenerPrivate]]]
    def priv_=(value: Ptr[GSocketListenerPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GSocketListenerPrivate]]] = value

/**
 * GSocketListenerClass: : virtual method called when the set of socket listened to changes

 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketlistener.h
*/
opaque type GSocketListenerClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._9, Nat._2]]
object GSocketListenerClass:
  given _tag: Tag[GSocketListenerClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._9, Nat._2]](Tag.Byte, Tag.Digit3[Nat._1, Nat._9, Nat._2](Tag.Nat1, Tag.Nat9, Tag.Nat2))
  def apply()(using Zone): Ptr[GSocketListenerClass] = scala.scalanative.unsafe.alloc[GSocketListenerClass](1)
  def apply(parent_class : GObjectClass, changed : CFuncPtr1[Ptr[GSocketListener], Unit], event : CFuncPtr3[Ptr[GSocketListener], GSocketListenerEvent, Ptr[GSocket], Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit])(using Zone): Ptr[GSocketListenerClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).changed = changed
    (!____ptr).event = event
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    ____ptr
  extension (struct: GSocketListenerClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def changed: CFuncPtr1[Ptr[GSocketListener], Unit] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSocketListener], Unit]]]
    def changed_=(value: CFuncPtr1[Ptr[GSocketListener], Unit]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSocketListener], Unit]]] = value
    def event: CFuncPtr3[Ptr[GSocketListener], GSocketListenerEvent, Ptr[GSocket], Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr3[Ptr[GSocketListener], GSocketListenerEvent, Ptr[GSocket], Unit]]]
    def event_=(value: CFuncPtr3[Ptr[GSocketListener], GSocketListenerEvent, Ptr[GSocket], Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr3[Ptr[GSocketListener], GSocketListenerEvent, Ptr[GSocket], Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved6: CFuncPtr0[Unit] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketlistener.h
*/
opaque type GSocketListenerPrivate = CStruct0
object GSocketListenerPrivate:
  given _tag: Tag[GSocketListenerPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
*/
opaque type GSocketPrivate = CStruct0
object GSocketPrivate:
  given _tag: Tag[GSocketPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketservice.h
*/
opaque type GSocketService = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GSocketService:
  given _tag: Tag[GSocketService] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GSocketService] = scala.scalanative.unsafe.alloc[GSocketService](1)
  def apply(parent_instance : GSocketListener, priv : Ptr[GSocketServicePrivate])(using Zone): Ptr[GSocketService] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GSocketService)
    def parent_instance: GSocketListener = !struct.at(0).asInstanceOf[Ptr[GSocketListener]]
    def parent_instance_=(value: GSocketListener): Unit = !struct.at(0).asInstanceOf[Ptr[GSocketListener]] = value
    def priv: Ptr[GSocketServicePrivate] = !struct.at(32).asInstanceOf[Ptr[Ptr[GSocketServicePrivate]]]
    def priv_=(value: Ptr[GSocketServicePrivate]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[GSocketServicePrivate]]] = value

/**
 * GSocketServiceClass: : signal emitted when new connections are accepted

 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketservice.h
*/
opaque type GSocketServiceClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._4, Nat._8]]
object GSocketServiceClass:
  given _tag: Tag[GSocketServiceClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._4, Nat._8]](Tag.Byte, Tag.Digit3[Nat._2, Nat._4, Nat._8](Tag.Nat2, Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GSocketServiceClass] = scala.scalanative.unsafe.alloc[GSocketServiceClass](1)
  def apply(parent_class : GSocketListenerClass, incoming : CFuncPtr3[Ptr[GSocketService], Ptr[GSocketConnection], Ptr[GObject], gboolean], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit])(using Zone): Ptr[GSocketServiceClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).incoming = incoming
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    ____ptr
  extension (struct: GSocketServiceClass)
    def parent_class: GSocketListenerClass = !struct.at(0).asInstanceOf[Ptr[GSocketListenerClass]]
    def parent_class_=(value: GSocketListenerClass): Unit = !struct.at(0).asInstanceOf[Ptr[GSocketListenerClass]] = value
    def incoming: CFuncPtr3[Ptr[GSocketService], Ptr[GSocketConnection], Ptr[GObject], gboolean] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr3[Ptr[GSocketService], Ptr[GSocketConnection], Ptr[GObject], gboolean]]]
    def incoming_=(value: CFuncPtr3[Ptr[GSocketService], Ptr[GSocketConnection], Ptr[GObject], gboolean]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr3[Ptr[GSocketService], Ptr[GSocketConnection], Ptr[GObject], gboolean]]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(216).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(216).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(224).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(224).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(232).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(232).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved6: CFuncPtr0[Unit] = !struct.at(240).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at(240).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketservice.h
*/
opaque type GSocketServicePrivate = CStruct0
object GSocketServicePrivate:
  given _tag: Tag[GSocketServicePrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
*/
opaque type GSource = CArray[CChar, Nat.Digit2[Nat._9, Nat._6]]
object GSource:
  given _tag: Tag[GSource] = Tag.CArray[CChar, Nat.Digit2[Nat._9, Nat._6]](Tag.Byte, Tag.Digit2[Nat._9, Nat._6](Tag.Nat9, Tag.Nat6))
  def apply()(using Zone): Ptr[GSource] = scala.scalanative.unsafe.alloc[GSource](1)
  def apply(callback_data : gpointer, callback_funcs : Ptr[GSourceCallbackFuncs], source_funcs : Ptr[GSourceFuncs], ref_count : guint, context : Ptr[GMainContext], priority : gint, flags : guint, source_id : guint, poll_fds : Ptr[GSList], prev : Ptr[GSource], next : Ptr[GSource], name : CString, priv : Ptr[GSourcePrivate])(using Zone): Ptr[GSource] = 
    val ____ptr = apply()
    (!____ptr).callback_data = callback_data
    (!____ptr).callback_funcs = callback_funcs
    (!____ptr).source_funcs = source_funcs
    (!____ptr).ref_count = ref_count
    (!____ptr).context = context
    (!____ptr).priority = priority
    (!____ptr).flags = flags
    (!____ptr).source_id = source_id
    (!____ptr).poll_fds = poll_fds
    (!____ptr).prev = prev
    (!____ptr).next = next
    (!____ptr).name = name
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GSource)
    def callback_data: gpointer = !struct.at(0).asInstanceOf[Ptr[gpointer]]
    def callback_data_=(value: gpointer): Unit = !struct.at(0).asInstanceOf[Ptr[gpointer]] = value
    def callback_funcs: Ptr[GSourceCallbackFuncs] = !struct.at(8).asInstanceOf[Ptr[Ptr[GSourceCallbackFuncs]]]
    def callback_funcs_=(value: Ptr[GSourceCallbackFuncs]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[GSourceCallbackFuncs]]] = value
    def source_funcs: Ptr[GSourceFuncs] = !struct.at(16).asInstanceOf[Ptr[Ptr[GSourceFuncs]]]
    def source_funcs_=(value: Ptr[GSourceFuncs]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[GSourceFuncs]]] = value
    def ref_count: guint = !struct.at(24).asInstanceOf[Ptr[guint]]
    def ref_count_=(value: guint): Unit = !struct.at(24).asInstanceOf[Ptr[guint]] = value
    def context: Ptr[GMainContext] = !struct.at(32).asInstanceOf[Ptr[Ptr[GMainContext]]]
    def context_=(value: Ptr[GMainContext]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[GMainContext]]] = value
    def priority: gint = !struct.at(40).asInstanceOf[Ptr[gint]]
    def priority_=(value: gint): Unit = !struct.at(40).asInstanceOf[Ptr[gint]] = value
    def flags: guint = !struct.at(44).asInstanceOf[Ptr[guint]]
    def flags_=(value: guint): Unit = !struct.at(44).asInstanceOf[Ptr[guint]] = value
    def source_id: guint = !struct.at(48).asInstanceOf[Ptr[guint]]
    def source_id_=(value: guint): Unit = !struct.at(48).asInstanceOf[Ptr[guint]] = value
    def poll_fds: Ptr[GSList] = !struct.at(56).asInstanceOf[Ptr[Ptr[GSList]]]
    def poll_fds_=(value: Ptr[GSList]): Unit = !struct.at(56).asInstanceOf[Ptr[Ptr[GSList]]] = value
    def prev: Ptr[GSource] = !struct.at(64).asInstanceOf[Ptr[Ptr[GSource]]]
    def prev_=(value: Ptr[GSource]): Unit = !struct.at(64).asInstanceOf[Ptr[Ptr[GSource]]] = value
    def next: Ptr[GSource] = !struct.at(72).asInstanceOf[Ptr[Ptr[GSource]]]
    def next_=(value: Ptr[GSource]): Unit = !struct.at(72).asInstanceOf[Ptr[Ptr[GSource]]] = value
    def name: CString = !struct.at(80).asInstanceOf[Ptr[CString]]
    def name_=(value: CString): Unit = !struct.at(80).asInstanceOf[Ptr[CString]] = value
    def priv: Ptr[GSourcePrivate] = !struct.at(88).asInstanceOf[Ptr[Ptr[GSourcePrivate]]]
    def priv_=(value: Ptr[GSourcePrivate]): Unit = !struct.at(88).asInstanceOf[Ptr[Ptr[GSourcePrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
*/
opaque type GSourceCallbackFuncs = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GSourceCallbackFuncs:
  given _tag: Tag[GSourceCallbackFuncs] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GSourceCallbackFuncs] = scala.scalanative.unsafe.alloc[GSourceCallbackFuncs](1)
  def apply(ref : CFuncPtr1[gpointer, Unit], unref : CFuncPtr1[gpointer, Unit], get : CFuncPtr4[gpointer, Ptr[GSource], Ptr[GSourceFunc], Ptr[gpointer], Unit])(using Zone): Ptr[GSourceCallbackFuncs] = 
    val ____ptr = apply()
    (!____ptr).ref = ref
    (!____ptr).unref = unref
    (!____ptr).get = get
    ____ptr
  extension (struct: GSourceCallbackFuncs)
    def ref: CFuncPtr1[gpointer, Unit] = !struct.at(0).asInstanceOf[Ptr[CFuncPtr1[gpointer, Unit]]]
    def ref_=(value: CFuncPtr1[gpointer, Unit]): Unit = !struct.at(0).asInstanceOf[Ptr[CFuncPtr1[gpointer, Unit]]] = value
    def unref: CFuncPtr1[gpointer, Unit] = !struct.at(8).asInstanceOf[Ptr[CFuncPtr1[gpointer, Unit]]]
    def unref_=(value: CFuncPtr1[gpointer, Unit]): Unit = !struct.at(8).asInstanceOf[Ptr[CFuncPtr1[gpointer, Unit]]] = value
    def get: CFuncPtr4[gpointer, Ptr[GSource], Ptr[GSourceFunc], Ptr[gpointer], Unit] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr4[gpointer, Ptr[GSource], Ptr[GSourceFunc], Ptr[gpointer], Unit]]]
    def get_=(value: CFuncPtr4[gpointer, Ptr[GSource], Ptr[GSourceFunc], Ptr[gpointer], Unit]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr4[gpointer, Ptr[GSource], Ptr[GSourceFunc], Ptr[gpointer], Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
*/
opaque type GSourceFuncs = CArray[CChar, Nat.Digit2[Nat._4, Nat._8]]
object GSourceFuncs:
  given _tag: Tag[GSourceFuncs] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._8]](Tag.Byte, Tag.Digit2[Nat._4, Nat._8](Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GSourceFuncs] = scala.scalanative.unsafe.alloc[GSourceFuncs](1)
  def apply(prepare : CFuncPtr2[Ptr[GSource], Ptr[gint], gboolean], check : CFuncPtr1[Ptr[GSource], gboolean], dispatch : CFuncPtr3[Ptr[GSource], GSourceFunc, gpointer, gboolean], finalize : CFuncPtr1[Ptr[GSource], Unit], closure_callback : GSourceFunc, closure_marshal : GSourceDummyMarshal)(using Zone): Ptr[GSourceFuncs] = 
    val ____ptr = apply()
    (!____ptr).prepare = prepare
    (!____ptr).check = check
    (!____ptr).dispatch = dispatch
    (!____ptr).finalize = finalize
    (!____ptr).closure_callback = closure_callback
    (!____ptr).closure_marshal = closure_marshal
    ____ptr
  extension (struct: GSourceFuncs)
    def prepare: CFuncPtr2[Ptr[GSource], Ptr[gint], gboolean] = !struct.at(0).asInstanceOf[Ptr[CFuncPtr2[Ptr[GSource], Ptr[gint], gboolean]]]
    def prepare_=(value: CFuncPtr2[Ptr[GSource], Ptr[gint], gboolean]): Unit = !struct.at(0).asInstanceOf[Ptr[CFuncPtr2[Ptr[GSource], Ptr[gint], gboolean]]] = value
    def check: CFuncPtr1[Ptr[GSource], gboolean] = !struct.at(8).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSource], gboolean]]]
    def check_=(value: CFuncPtr1[Ptr[GSource], gboolean]): Unit = !struct.at(8).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSource], gboolean]]] = value
    def dispatch: CFuncPtr3[Ptr[GSource], GSourceFunc, gpointer, gboolean] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr3[Ptr[GSource], GSourceFunc, gpointer, gboolean]]]
    def dispatch_=(value: CFuncPtr3[Ptr[GSource], GSourceFunc, gpointer, gboolean]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr3[Ptr[GSource], GSourceFunc, gpointer, gboolean]]] = value
    def finalize: CFuncPtr1[Ptr[GSource], Unit] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSource], Unit]]]
    def finalize_=(value: CFuncPtr1[Ptr[GSource], Unit]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GSource], Unit]]] = value
    def closure_callback: GSourceFunc = !struct.at(32).asInstanceOf[Ptr[GSourceFunc]]
    def closure_callback_=(value: GSourceFunc): Unit = !struct.at(32).asInstanceOf[Ptr[GSourceFunc]] = value
    def closure_marshal: GSourceDummyMarshal = !struct.at(40).asInstanceOf[Ptr[GSourceDummyMarshal]]
    def closure_marshal_=(value: GSourceDummyMarshal): Unit = !struct.at(40).asInstanceOf[Ptr[GSourceDummyMarshal]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
*/
opaque type GSourcePrivate = CStruct0
object GSourcePrivate:
  given _tag: Tag[GSourcePrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GSrvTarget = CStruct0
object GSrvTarget:
  given _tag: Tag[GSrvTarget] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
*/
opaque type GStaticMutex = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GStaticMutex:
  given _tag: Tag[GStaticMutex] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GStaticMutex] = scala.scalanative.unsafe.alloc[GStaticMutex](1)
  def apply(mutex : Ptr[GMutex], unused : pthread_mutex_t)(using Zone): Ptr[GStaticMutex] = 
    val ____ptr = apply()
    (!____ptr).mutex = mutex
    (!____ptr).unused = unused
    ____ptr
  extension (struct: GStaticMutex)
    def mutex: Ptr[GMutex] = !struct.at(0).asInstanceOf[Ptr[Ptr[GMutex]]]
    def mutex_=(value: Ptr[GMutex]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[GMutex]]] = value
    def unused: pthread_mutex_t = !struct.at(8).asInstanceOf[Ptr[pthread_mutex_t]]
    def unused_=(value: pthread_mutex_t): Unit = !struct.at(8).asInstanceOf[Ptr[pthread_mutex_t]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
*/
opaque type GStaticPrivate = CArray[CChar, Nat._4]
object GStaticPrivate:
  given _tag: Tag[GStaticPrivate] = Tag.CArray[CChar, Nat._4](Tag.Byte, Tag.Nat4)
  def apply()(using Zone): Ptr[GStaticPrivate] = scala.scalanative.unsafe.alloc[GStaticPrivate](1)
  def apply(index : guint)(using Zone): Ptr[GStaticPrivate] = 
    val ____ptr = apply()
    (!____ptr).index = index
    ____ptr
  extension (struct: GStaticPrivate)
    def index: guint = !struct.at(0).asInstanceOf[Ptr[guint]]
    def index_=(value: guint): Unit = !struct.at(0).asInstanceOf[Ptr[guint]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
*/
opaque type GStaticRWLock = CArray[CChar, Nat.Digit2[Nat._4, Nat._8]]
object GStaticRWLock:
  given _tag: Tag[GStaticRWLock] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._8]](Tag.Byte, Tag.Digit2[Nat._4, Nat._8](Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GStaticRWLock] = scala.scalanative.unsafe.alloc[GStaticRWLock](1)
  def apply(mutex : GStaticMutex, read_cond : Ptr[GCond], write_cond : Ptr[GCond], read_counter : guint, have_writer : gboolean, want_to_read : guint, want_to_write : guint)(using Zone): Ptr[GStaticRWLock] = 
    val ____ptr = apply()
    (!____ptr).mutex = mutex
    (!____ptr).read_cond = read_cond
    (!____ptr).write_cond = write_cond
    (!____ptr).read_counter = read_counter
    (!____ptr).have_writer = have_writer
    (!____ptr).want_to_read = want_to_read
    (!____ptr).want_to_write = want_to_write
    ____ptr
  extension (struct: GStaticRWLock)
    def mutex: GStaticMutex = !struct.at(0).asInstanceOf[Ptr[GStaticMutex]]
    def mutex_=(value: GStaticMutex): Unit = !struct.at(0).asInstanceOf[Ptr[GStaticMutex]] = value
    def read_cond: Ptr[GCond] = !struct.at(16).asInstanceOf[Ptr[Ptr[GCond]]]
    def read_cond_=(value: Ptr[GCond]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[GCond]]] = value
    def write_cond: Ptr[GCond] = !struct.at(24).asInstanceOf[Ptr[Ptr[GCond]]]
    def write_cond_=(value: Ptr[GCond]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GCond]]] = value
    def read_counter: guint = !struct.at(32).asInstanceOf[Ptr[guint]]
    def read_counter_=(value: guint): Unit = !struct.at(32).asInstanceOf[Ptr[guint]] = value
    def have_writer: gboolean = !struct.at(36).asInstanceOf[Ptr[gboolean]]
    def have_writer_=(value: gboolean): Unit = !struct.at(36).asInstanceOf[Ptr[gboolean]] = value
    def want_to_read: guint = !struct.at(40).asInstanceOf[Ptr[guint]]
    def want_to_read_=(value: guint): Unit = !struct.at(40).asInstanceOf[Ptr[guint]] = value
    def want_to_write: guint = !struct.at(44).asInstanceOf[Ptr[guint]]
    def want_to_write_=(value: guint): Unit = !struct.at(44).asInstanceOf[Ptr[guint]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
*/
opaque type GStaticRecMutex = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GStaticRecMutex:
  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  opaque type Union0 = CArray[Byte, Nat._8]
  object Union0:
    given _tag: Tag[Union0] = Tag.CArray[CChar, Nat._8](Tag.Byte, Tag.Nat8)
    def apply()(using Zone): Ptr[Union0] = 
      val ___ptr = alloc[Union0](1)
      ___ptr
    @scala.annotation.targetName("apply_owner")
    def apply(owner: pthread_t)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[pthread_t]].update(0, owner)
      ___ptr
    @scala.annotation.targetName("apply_dummy")
    def apply(dummy: gdouble)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[gdouble]].update(0, dummy)
      ___ptr
    extension (struct: Union0)
      def owner : pthread_t = !struct.at(0).asInstanceOf[Ptr[pthread_t]]
      def owner_=(value: pthread_t): Unit = !struct.at(0).asInstanceOf[Ptr[pthread_t]] = value
      def dummy : gdouble = !struct.at(0).asInstanceOf[Ptr[gdouble]]
      def dummy_=(value: gdouble): Unit = !struct.at(0).asInstanceOf[Ptr[gdouble]] = value
  given _tag: Tag[GStaticRecMutex] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GStaticRecMutex] = scala.scalanative.unsafe.alloc[GStaticRecMutex](1)
  def apply(mutex : GStaticMutex, depth : guint, unused : GStaticRecMutex.Union0)(using Zone): Ptr[GStaticRecMutex] = 
    val ____ptr = apply()
    (!____ptr).mutex = mutex
    (!____ptr).depth = depth
    (!____ptr).unused = unused
    ____ptr
  extension (struct: GStaticRecMutex)
    def mutex: GStaticMutex = !struct.at(0).asInstanceOf[Ptr[GStaticMutex]]
    def mutex_=(value: GStaticMutex): Unit = !struct.at(0).asInstanceOf[Ptr[GStaticMutex]] = value
    def depth: guint = !struct.at(16).asInstanceOf[Ptr[guint]]
    def depth_=(value: guint): Unit = !struct.at(16).asInstanceOf[Ptr[guint]] = value
    def unused: GStaticRecMutex.Union0 = !struct.at(20).asInstanceOf[Ptr[GStaticRecMutex.Union0]]
    def unused_=(value: GStaticRecMutex.Union0): Unit = !struct.at(20).asInstanceOf[Ptr[GStaticRecMutex.Union0]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
*/
opaque type GStaticResource = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GStaticResource:
  given _tag: Tag[GStaticResource] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GStaticResource] = scala.scalanative.unsafe.alloc[GStaticResource](1)
  def apply(data : Ptr[guint8], data_len : gsize, resource : Ptr[GResource], next : Ptr[GStaticResource], padding : gpointer)(using Zone): Ptr[GStaticResource] = 
    val ____ptr = apply()
    (!____ptr).data = data
    (!____ptr).data_len = data_len
    (!____ptr).resource = resource
    (!____ptr).next = next
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GStaticResource)
    def data: Ptr[guint8] = !struct.at(0).asInstanceOf[Ptr[Ptr[guint8]]]
    def data_=(value: Ptr[guint8]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[guint8]]] = value
    def data_len: gsize = !struct.at(8).asInstanceOf[Ptr[gsize]]
    def data_len_=(value: gsize): Unit = !struct.at(8).asInstanceOf[Ptr[gsize]] = value
    def resource: Ptr[GResource] = !struct.at(16).asInstanceOf[Ptr[Ptr[GResource]]]
    def resource_=(value: Ptr[GResource]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[GResource]]] = value
    def next: Ptr[GStaticResource] = !struct.at(24).asInstanceOf[Ptr[Ptr[GStaticResource]]]
    def next_=(value: Ptr[GStaticResource]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GStaticResource]]] = value
    def padding: gpointer = !struct.at(32).asInstanceOf[Ptr[gpointer]]
    def padding_=(value: gpointer): Unit = !struct.at(32).asInstanceOf[Ptr[gpointer]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
*/
opaque type GString = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GString:
  given _tag: Tag[GString] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GString] = scala.scalanative.unsafe.alloc[GString](1)
  def apply(str : Ptr[gchar], len : gsize, allocated_len : gsize)(using Zone): Ptr[GString] = 
    val ____ptr = apply()
    (!____ptr).str = str
    (!____ptr).len = len
    (!____ptr).allocated_len = allocated_len
    ____ptr
  extension (struct: GString)
    def str: Ptr[gchar] = !struct.at(0).asInstanceOf[Ptr[Ptr[gchar]]]
    def str_=(value: Ptr[gchar]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def len: gsize = !struct.at(8).asInstanceOf[Ptr[gsize]]
    def len_=(value: gsize): Unit = !struct.at(8).asInstanceOf[Ptr[gsize]] = value
    def allocated_len: gsize = !struct.at(16).asInstanceOf[Ptr[gsize]]
    def allocated_len_=(value: gsize): Unit = !struct.at(16).asInstanceOf[Ptr[gsize]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gstringchunk.h
*/
opaque type GStringChunk = CStruct0
object GStringChunk:
  given _tag: Tag[GStringChunk] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gstrvbuilder.h
*/
opaque type GStrvBuilder = CStruct0
object GStrvBuilder:
  given _tag: Tag[GStrvBuilder] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GSubprocess = CStruct0
object GSubprocess:
  given _tag: Tag[GSubprocess] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GSubprocessLauncher = CStruct0
object GSubprocessLauncher:
  given _tag: Tag[GSubprocessLauncher] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GTask = CStruct0
object GTask:
  given _tag: Tag[GTask] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
*/
opaque type GTaskClass = CStruct0
object GTaskClass:
  given _tag: Tag[GTaskClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtcpconnection.h
*/
opaque type GTcpConnection = CArray[CChar, Nat.Digit2[Nat._4, Nat._8]]
object GTcpConnection:
  given _tag: Tag[GTcpConnection] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._8]](Tag.Byte, Tag.Digit2[Nat._4, Nat._8](Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GTcpConnection] = scala.scalanative.unsafe.alloc[GTcpConnection](1)
  def apply(parent_instance : GSocketConnection, priv : Ptr[GTcpConnectionPrivate])(using Zone): Ptr[GTcpConnection] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GTcpConnection)
    def parent_instance: GSocketConnection = !struct.at(0).asInstanceOf[Ptr[GSocketConnection]]
    def parent_instance_=(value: GSocketConnection): Unit = !struct.at(0).asInstanceOf[Ptr[GSocketConnection]] = value
    def priv: Ptr[GTcpConnectionPrivate] = !struct.at(40).asInstanceOf[Ptr[Ptr[GTcpConnectionPrivate]]]
    def priv_=(value: Ptr[GTcpConnectionPrivate]): Unit = !struct.at(40).asInstanceOf[Ptr[Ptr[GTcpConnectionPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtcpconnection.h
*/
opaque type GTcpConnectionClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._0, Nat._4]]
object GTcpConnectionClass:
  given _tag: Tag[GTcpConnectionClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._0, Nat._4]](Tag.Byte, Tag.Digit3[Nat._3, Nat._0, Nat._4](Tag.Nat3, Tag.Nat0, Tag.Nat4))
  def apply()(using Zone): Ptr[GTcpConnectionClass] = scala.scalanative.unsafe.alloc[GTcpConnectionClass](1)
  def apply(parent_class : GSocketConnectionClass)(using Zone): Ptr[GTcpConnectionClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: GTcpConnectionClass)
    def parent_class: GSocketConnectionClass = !struct.at(0).asInstanceOf[Ptr[GSocketConnectionClass]]
    def parent_class_=(value: GSocketConnectionClass): Unit = !struct.at(0).asInstanceOf[Ptr[GSocketConnectionClass]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtcpconnection.h
*/
opaque type GTcpConnectionPrivate = CStruct0
object GTcpConnectionPrivate:
  given _tag: Tag[GTcpConnectionPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtcpwrapperconnection.h
*/
opaque type GTcpWrapperConnection = CArray[CChar, Nat.Digit2[Nat._5, Nat._6]]
object GTcpWrapperConnection:
  given _tag: Tag[GTcpWrapperConnection] = Tag.CArray[CChar, Nat.Digit2[Nat._5, Nat._6]](Tag.Byte, Tag.Digit2[Nat._5, Nat._6](Tag.Nat5, Tag.Nat6))
  def apply()(using Zone): Ptr[GTcpWrapperConnection] = scala.scalanative.unsafe.alloc[GTcpWrapperConnection](1)
  def apply(parent_instance : GTcpConnection, priv : Ptr[GTcpWrapperConnectionPrivate])(using Zone): Ptr[GTcpWrapperConnection] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GTcpWrapperConnection)
    def parent_instance: GTcpConnection = !struct.at(0).asInstanceOf[Ptr[GTcpConnection]]
    def parent_instance_=(value: GTcpConnection): Unit = !struct.at(0).asInstanceOf[Ptr[GTcpConnection]] = value
    def priv: Ptr[GTcpWrapperConnectionPrivate] = !struct.at(48).asInstanceOf[Ptr[Ptr[GTcpWrapperConnectionPrivate]]]
    def priv_=(value: Ptr[GTcpWrapperConnectionPrivate]): Unit = !struct.at(48).asInstanceOf[Ptr[Ptr[GTcpWrapperConnectionPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtcpwrapperconnection.h
*/
opaque type GTcpWrapperConnectionClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._0, Nat._4]]
object GTcpWrapperConnectionClass:
  given _tag: Tag[GTcpWrapperConnectionClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._0, Nat._4]](Tag.Byte, Tag.Digit3[Nat._3, Nat._0, Nat._4](Tag.Nat3, Tag.Nat0, Tag.Nat4))
  def apply()(using Zone): Ptr[GTcpWrapperConnectionClass] = scala.scalanative.unsafe.alloc[GTcpWrapperConnectionClass](1)
  def apply(parent_class : GTcpConnectionClass)(using Zone): Ptr[GTcpWrapperConnectionClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: GTcpWrapperConnectionClass)
    def parent_class: GTcpConnectionClass = !struct.at(0).asInstanceOf[Ptr[GTcpConnectionClass]]
    def parent_class_=(value: GTcpConnectionClass): Unit = !struct.at(0).asInstanceOf[Ptr[GTcpConnectionClass]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtcpwrapperconnection.h
*/
opaque type GTcpWrapperConnectionPrivate = CStruct0
object GTcpWrapperConnectionPrivate:
  given _tag: Tag[GTcpWrapperConnectionPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
*/
opaque type GTestCase = CStruct0
object GTestCase:
  given _tag: Tag[GTestCase] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
*/
opaque type GTestConfig = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GTestConfig:
  given _tag: Tag[GTestConfig] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GTestConfig] = scala.scalanative.unsafe.alloc[GTestConfig](1)
  def apply(test_initialized : gboolean, test_quick : gboolean, test_perf : gboolean, test_verbose : gboolean, test_quiet : gboolean, test_undefined : gboolean)(using Zone): Ptr[GTestConfig] = 
    val ____ptr = apply()
    (!____ptr).test_initialized = test_initialized
    (!____ptr).test_quick = test_quick
    (!____ptr).test_perf = test_perf
    (!____ptr).test_verbose = test_verbose
    (!____ptr).test_quiet = test_quiet
    (!____ptr).test_undefined = test_undefined
    ____ptr
  extension (struct: GTestConfig)
    def test_initialized: gboolean = !struct.at(0).asInstanceOf[Ptr[gboolean]]
    def test_initialized_=(value: gboolean): Unit = !struct.at(0).asInstanceOf[Ptr[gboolean]] = value
    def test_quick: gboolean = !struct.at(4).asInstanceOf[Ptr[gboolean]]
    def test_quick_=(value: gboolean): Unit = !struct.at(4).asInstanceOf[Ptr[gboolean]] = value
    def test_perf: gboolean = !struct.at(8).asInstanceOf[Ptr[gboolean]]
    def test_perf_=(value: gboolean): Unit = !struct.at(8).asInstanceOf[Ptr[gboolean]] = value
    def test_verbose: gboolean = !struct.at(12).asInstanceOf[Ptr[gboolean]]
    def test_verbose_=(value: gboolean): Unit = !struct.at(12).asInstanceOf[Ptr[gboolean]] = value
    def test_quiet: gboolean = !struct.at(16).asInstanceOf[Ptr[gboolean]]
    def test_quiet_=(value: gboolean): Unit = !struct.at(16).asInstanceOf[Ptr[gboolean]] = value
    def test_undefined: gboolean = !struct.at(20).asInstanceOf[Ptr[gboolean]]
    def test_undefined_=(value: gboolean): Unit = !struct.at(20).asInstanceOf[Ptr[gboolean]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GTestDBus = CStruct0
object GTestDBus:
  given _tag: Tag[GTestDBus] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
*/
opaque type GTestLogBuffer = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GTestLogBuffer:
  given _tag: Tag[GTestLogBuffer] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GTestLogBuffer] = scala.scalanative.unsafe.alloc[GTestLogBuffer](1)
  def apply(data : Ptr[GString], msgs : Ptr[GSList])(using Zone): Ptr[GTestLogBuffer] = 
    val ____ptr = apply()
    (!____ptr).data = data
    (!____ptr).msgs = msgs
    ____ptr
  extension (struct: GTestLogBuffer)
    def data: Ptr[GString] = !struct.at(0).asInstanceOf[Ptr[Ptr[GString]]]
    def data_=(value: Ptr[GString]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[GString]]] = value
    def msgs: Ptr[GSList] = !struct.at(8).asInstanceOf[Ptr[Ptr[GSList]]]
    def msgs_=(value: Ptr[GSList]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[GSList]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
*/
opaque type GTestLogMsg = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GTestLogMsg:
  given _tag: Tag[GTestLogMsg] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GTestLogMsg] = scala.scalanative.unsafe.alloc[GTestLogMsg](1)
  def apply(log_type : GTestLogType, n_strings : guint, strings : Ptr[Ptr[gchar]], n_nums : guint, nums : Ptr[Double])(using Zone): Ptr[GTestLogMsg] = 
    val ____ptr = apply()
    (!____ptr).log_type = log_type
    (!____ptr).n_strings = n_strings
    (!____ptr).strings = strings
    (!____ptr).n_nums = n_nums
    (!____ptr).nums = nums
    ____ptr
  extension (struct: GTestLogMsg)
    def log_type: GTestLogType = !struct.at(0).asInstanceOf[Ptr[GTestLogType]]
    def log_type_=(value: GTestLogType): Unit = !struct.at(0).asInstanceOf[Ptr[GTestLogType]] = value
    def n_strings: guint = !struct.at(4).asInstanceOf[Ptr[guint]]
    def n_strings_=(value: guint): Unit = !struct.at(4).asInstanceOf[Ptr[guint]] = value
    def strings: Ptr[Ptr[gchar]] = !struct.at(8).asInstanceOf[Ptr[Ptr[Ptr[gchar]]]]
    def strings_=(value: Ptr[Ptr[gchar]]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[Ptr[gchar]]]] = value
    def n_nums: guint = !struct.at(16).asInstanceOf[Ptr[guint]]
    def n_nums_=(value: guint): Unit = !struct.at(16).asInstanceOf[Ptr[guint]] = value
    def nums: Ptr[Double] = !struct.at(24).asInstanceOf[Ptr[Ptr[Double]]]
    def nums_=(value: Ptr[Double]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[Double]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
*/
opaque type GTestSuite = CStruct0
object GTestSuite:
  given _tag: Tag[GTestSuite] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GThemedIcon = CStruct0
object GThemedIcon:
  given _tag: Tag[GThemedIcon] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gthemedicon.h
*/
opaque type GThemedIconClass = CStruct0
object GThemedIconClass:
  given _tag: Tag[GThemedIconClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
*/
opaque type GThread = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GThread:
  given _tag: Tag[GThread] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GThread] = scala.scalanative.unsafe.alloc[GThread](1)
  def apply(func : GThreadFunc, data : gpointer, joinable : gboolean, priority : GThreadPriority)(using Zone): Ptr[GThread] = 
    val ____ptr = apply()
    (!____ptr).func = func
    (!____ptr).data = data
    (!____ptr).joinable = joinable
    (!____ptr).priority = priority
    ____ptr
  extension (struct: GThread)
    def func: GThreadFunc = !struct.at(0).asInstanceOf[Ptr[GThreadFunc]]
    def func_=(value: GThreadFunc): Unit = !struct.at(0).asInstanceOf[Ptr[GThreadFunc]] = value
    def data: gpointer = !struct.at(8).asInstanceOf[Ptr[gpointer]]
    def data_=(value: gpointer): Unit = !struct.at(8).asInstanceOf[Ptr[gpointer]] = value
    def joinable: gboolean = !struct.at(16).asInstanceOf[Ptr[gboolean]]
    def joinable_=(value: gboolean): Unit = !struct.at(16).asInstanceOf[Ptr[gboolean]] = value
    def priority: GThreadPriority = !struct.at(20).asInstanceOf[Ptr[GThreadPriority]]
    def priority_=(value: GThreadPriority): Unit = !struct.at(20).asInstanceOf[Ptr[GThreadPriority]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
*/
opaque type GThreadFunctions = CArray[CChar, Nat.Digit3[Nat._1, Nat._6, Nat._8]]
object GThreadFunctions:
  given _tag: Tag[GThreadFunctions] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._6, Nat._8]](Tag.Byte, Tag.Digit3[Nat._1, Nat._6, Nat._8](Tag.Nat1, Tag.Nat6, Tag.Nat8))
  def apply()(using Zone): Ptr[GThreadFunctions] = scala.scalanative.unsafe.alloc[GThreadFunctions](1)
  def apply(mutex_new : CFuncPtr0[Ptr[GMutex]], mutex_lock : CFuncPtr1[Ptr[GMutex], Unit], mutex_trylock : CFuncPtr1[Ptr[GMutex], gboolean], mutex_unlock : CFuncPtr1[Ptr[GMutex], Unit], mutex_free : CFuncPtr1[Ptr[GMutex], Unit], cond_new : CFuncPtr0[Ptr[GCond]], cond_signal : CFuncPtr1[Ptr[GCond], Unit], cond_broadcast : CFuncPtr1[Ptr[GCond], Unit], cond_wait : CFuncPtr2[Ptr[GCond], Ptr[GMutex], Unit], cond_timed_wait : CFuncPtr3[Ptr[GCond], Ptr[GMutex], Ptr[GTimeVal], gboolean], cond_free : CFuncPtr1[Ptr[GCond], Unit], private_new : CFuncPtr1[GDestroyNotify, Ptr[GPrivate]], private_get : CFuncPtr1[Ptr[GPrivate], gpointer], private_set : CFuncPtr2[Ptr[GPrivate], gpointer, Unit], thread_create : CFuncPtr8[GThreadFunc, gpointer, gulong, gboolean, gboolean, GThreadPriority, gpointer, Ptr[Ptr[GError]], Unit], thread_yield : CFuncPtr0[Unit], thread_join : CFuncPtr1[gpointer, Unit], thread_exit : CFuncPtr0[Unit], thread_set_priority : CFuncPtr2[gpointer, GThreadPriority, Unit], thread_self : CFuncPtr1[gpointer, Unit], thread_equal : CFuncPtr2[gpointer, gpointer, gboolean])(using Zone): Ptr[GThreadFunctions] = 
    val ____ptr = apply()
    (!____ptr).mutex_new = mutex_new
    (!____ptr).mutex_lock = mutex_lock
    (!____ptr).mutex_trylock = mutex_trylock
    (!____ptr).mutex_unlock = mutex_unlock
    (!____ptr).mutex_free = mutex_free
    (!____ptr).cond_new = cond_new
    (!____ptr).cond_signal = cond_signal
    (!____ptr).cond_broadcast = cond_broadcast
    (!____ptr).cond_wait = cond_wait
    (!____ptr).cond_timed_wait = cond_timed_wait
    (!____ptr).cond_free = cond_free
    (!____ptr).private_new = private_new
    (!____ptr).private_get = private_get
    (!____ptr).private_set = private_set
    (!____ptr).thread_create = thread_create
    (!____ptr).thread_yield = thread_yield
    (!____ptr).thread_join = thread_join
    (!____ptr).thread_exit = thread_exit
    (!____ptr).thread_set_priority = thread_set_priority
    (!____ptr).thread_self = thread_self
    (!____ptr).thread_equal = thread_equal
    ____ptr
  extension (struct: GThreadFunctions)
    def mutex_new: CFuncPtr0[Ptr[GMutex]] = !struct.at(0).asInstanceOf[Ptr[CFuncPtr0[Ptr[GMutex]]]]
    def mutex_new_=(value: CFuncPtr0[Ptr[GMutex]]): Unit = !struct.at(0).asInstanceOf[Ptr[CFuncPtr0[Ptr[GMutex]]]] = value
    def mutex_lock: CFuncPtr1[Ptr[GMutex], Unit] = !struct.at(8).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMutex], Unit]]]
    def mutex_lock_=(value: CFuncPtr1[Ptr[GMutex], Unit]): Unit = !struct.at(8).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMutex], Unit]]] = value
    def mutex_trylock: CFuncPtr1[Ptr[GMutex], gboolean] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMutex], gboolean]]]
    def mutex_trylock_=(value: CFuncPtr1[Ptr[GMutex], gboolean]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMutex], gboolean]]] = value
    def mutex_unlock: CFuncPtr1[Ptr[GMutex], Unit] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMutex], Unit]]]
    def mutex_unlock_=(value: CFuncPtr1[Ptr[GMutex], Unit]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMutex], Unit]]] = value
    def mutex_free: CFuncPtr1[Ptr[GMutex], Unit] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMutex], Unit]]]
    def mutex_free_=(value: CFuncPtr1[Ptr[GMutex], Unit]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMutex], Unit]]] = value
    def cond_new: CFuncPtr0[Ptr[GCond]] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr0[Ptr[GCond]]]]
    def cond_new_=(value: CFuncPtr0[Ptr[GCond]]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr0[Ptr[GCond]]]] = value
    def cond_signal: CFuncPtr1[Ptr[GCond], Unit] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GCond], Unit]]]
    def cond_signal_=(value: CFuncPtr1[Ptr[GCond], Unit]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GCond], Unit]]] = value
    def cond_broadcast: CFuncPtr1[Ptr[GCond], Unit] = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GCond], Unit]]]
    def cond_broadcast_=(value: CFuncPtr1[Ptr[GCond], Unit]): Unit = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GCond], Unit]]] = value
    def cond_wait: CFuncPtr2[Ptr[GCond], Ptr[GMutex], Unit] = !struct.at(64).asInstanceOf[Ptr[CFuncPtr2[Ptr[GCond], Ptr[GMutex], Unit]]]
    def cond_wait_=(value: CFuncPtr2[Ptr[GCond], Ptr[GMutex], Unit]): Unit = !struct.at(64).asInstanceOf[Ptr[CFuncPtr2[Ptr[GCond], Ptr[GMutex], Unit]]] = value
    def cond_timed_wait: CFuncPtr3[Ptr[GCond], Ptr[GMutex], Ptr[GTimeVal], gboolean] = !struct.at(72).asInstanceOf[Ptr[CFuncPtr3[Ptr[GCond], Ptr[GMutex], Ptr[GTimeVal], gboolean]]]
    def cond_timed_wait_=(value: CFuncPtr3[Ptr[GCond], Ptr[GMutex], Ptr[GTimeVal], gboolean]): Unit = !struct.at(72).asInstanceOf[Ptr[CFuncPtr3[Ptr[GCond], Ptr[GMutex], Ptr[GTimeVal], gboolean]]] = value
    def cond_free: CFuncPtr1[Ptr[GCond], Unit] = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GCond], Unit]]]
    def cond_free_=(value: CFuncPtr1[Ptr[GCond], Unit]): Unit = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GCond], Unit]]] = value
    def private_new: CFuncPtr1[GDestroyNotify, Ptr[GPrivate]] = !struct.at(88).asInstanceOf[Ptr[CFuncPtr1[GDestroyNotify, Ptr[GPrivate]]]]
    def private_new_=(value: CFuncPtr1[GDestroyNotify, Ptr[GPrivate]]): Unit = !struct.at(88).asInstanceOf[Ptr[CFuncPtr1[GDestroyNotify, Ptr[GPrivate]]]] = value
    def private_get: CFuncPtr1[Ptr[GPrivate], gpointer] = !struct.at(96).asInstanceOf[Ptr[CFuncPtr1[Ptr[GPrivate], gpointer]]]
    def private_get_=(value: CFuncPtr1[Ptr[GPrivate], gpointer]): Unit = !struct.at(96).asInstanceOf[Ptr[CFuncPtr1[Ptr[GPrivate], gpointer]]] = value
    def private_set: CFuncPtr2[Ptr[GPrivate], gpointer, Unit] = !struct.at(104).asInstanceOf[Ptr[CFuncPtr2[Ptr[GPrivate], gpointer, Unit]]]
    def private_set_=(value: CFuncPtr2[Ptr[GPrivate], gpointer, Unit]): Unit = !struct.at(104).asInstanceOf[Ptr[CFuncPtr2[Ptr[GPrivate], gpointer, Unit]]] = value
    def thread_create: CFuncPtr8[GThreadFunc, gpointer, gulong, gboolean, gboolean, GThreadPriority, gpointer, Ptr[Ptr[GError]], Unit] = !struct.at(112).asInstanceOf[Ptr[CFuncPtr8[GThreadFunc, gpointer, gulong, gboolean, gboolean, GThreadPriority, gpointer, Ptr[Ptr[GError]], Unit]]]
    def thread_create_=(value: CFuncPtr8[GThreadFunc, gpointer, gulong, gboolean, gboolean, GThreadPriority, gpointer, Ptr[Ptr[GError]], Unit]): Unit = !struct.at(112).asInstanceOf[Ptr[CFuncPtr8[GThreadFunc, gpointer, gulong, gboolean, gboolean, GThreadPriority, gpointer, Ptr[Ptr[GError]], Unit]]] = value
    def thread_yield: CFuncPtr0[Unit] = !struct.at(120).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def thread_yield_=(value: CFuncPtr0[Unit]): Unit = !struct.at(120).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def thread_join: CFuncPtr1[gpointer, Unit] = !struct.at(128).asInstanceOf[Ptr[CFuncPtr1[gpointer, Unit]]]
    def thread_join_=(value: CFuncPtr1[gpointer, Unit]): Unit = !struct.at(128).asInstanceOf[Ptr[CFuncPtr1[gpointer, Unit]]] = value
    def thread_exit: CFuncPtr0[Unit] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def thread_exit_=(value: CFuncPtr0[Unit]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def thread_set_priority: CFuncPtr2[gpointer, GThreadPriority, Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr2[gpointer, GThreadPriority, Unit]]]
    def thread_set_priority_=(value: CFuncPtr2[gpointer, GThreadPriority, Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr2[gpointer, GThreadPriority, Unit]]] = value
    def thread_self: CFuncPtr1[gpointer, Unit] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr1[gpointer, Unit]]]
    def thread_self_=(value: CFuncPtr1[gpointer, Unit]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr1[gpointer, Unit]]] = value
    def thread_equal: CFuncPtr2[gpointer, gpointer, gboolean] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr2[gpointer, gpointer, gboolean]]]
    def thread_equal_=(value: CFuncPtr2[gpointer, gpointer, gboolean]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr2[gpointer, gpointer, gboolean]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gthreadpool.h
*/
opaque type GThreadPool = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GThreadPool:
  given _tag: Tag[GThreadPool] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GThreadPool] = scala.scalanative.unsafe.alloc[GThreadPool](1)
  def apply(func : GFunc, user_data : gpointer, exclusive : gboolean)(using Zone): Ptr[GThreadPool] = 
    val ____ptr = apply()
    (!____ptr).func = func
    (!____ptr).user_data = user_data
    (!____ptr).exclusive = exclusive
    ____ptr
  extension (struct: GThreadPool)
    def func: GFunc = !struct.at(0).asInstanceOf[Ptr[GFunc]]
    def func_=(value: GFunc): Unit = !struct.at(0).asInstanceOf[Ptr[GFunc]] = value
    def user_data: gpointer = !struct.at(8).asInstanceOf[Ptr[gpointer]]
    def user_data_=(value: gpointer): Unit = !struct.at(8).asInstanceOf[Ptr[gpointer]] = value
    def exclusive: gboolean = !struct.at(16).asInstanceOf[Ptr[gboolean]]
    def exclusive_=(value: gboolean): Unit = !struct.at(16).asInstanceOf[Ptr[gboolean]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gthreadedsocketservice.h
*/
opaque type GThreadedSocketService = CArray[CChar, Nat.Digit2[Nat._4, Nat._8]]
object GThreadedSocketService:
  given _tag: Tag[GThreadedSocketService] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._8]](Tag.Byte, Tag.Digit2[Nat._4, Nat._8](Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GThreadedSocketService] = scala.scalanative.unsafe.alloc[GThreadedSocketService](1)
  def apply(parent_instance : GSocketService, priv : Ptr[GThreadedSocketServicePrivate])(using Zone): Ptr[GThreadedSocketService] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GThreadedSocketService)
    def parent_instance: GSocketService = !struct.at(0).asInstanceOf[Ptr[GSocketService]]
    def parent_instance_=(value: GSocketService): Unit = !struct.at(0).asInstanceOf[Ptr[GSocketService]] = value
    def priv: Ptr[GThreadedSocketServicePrivate] = !struct.at(40).asInstanceOf[Ptr[Ptr[GThreadedSocketServicePrivate]]]
    def priv_=(value: Ptr[GThreadedSocketServicePrivate]): Unit = !struct.at(40).asInstanceOf[Ptr[Ptr[GThreadedSocketServicePrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gthreadedsocketservice.h
*/
opaque type GThreadedSocketServiceClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._9, Nat._6]]
object GThreadedSocketServiceClass:
  given _tag: Tag[GThreadedSocketServiceClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._9, Nat._6]](Tag.Byte, Tag.Digit3[Nat._2, Nat._9, Nat._6](Tag.Nat2, Tag.Nat9, Tag.Nat6))
  def apply()(using Zone): Ptr[GThreadedSocketServiceClass] = scala.scalanative.unsafe.alloc[GThreadedSocketServiceClass](1)
  def apply(parent_class : GSocketServiceClass, run : CFuncPtr3[Ptr[GThreadedSocketService], Ptr[GSocketConnection], Ptr[GObject], gboolean], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[GThreadedSocketServiceClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).run = run
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: GThreadedSocketServiceClass)
    def parent_class: GSocketServiceClass = !struct.at(0).asInstanceOf[Ptr[GSocketServiceClass]]
    def parent_class_=(value: GSocketServiceClass): Unit = !struct.at(0).asInstanceOf[Ptr[GSocketServiceClass]] = value
    def run: CFuncPtr3[Ptr[GThreadedSocketService], Ptr[GSocketConnection], Ptr[GObject], gboolean] = !struct.at(248).asInstanceOf[Ptr[CFuncPtr3[Ptr[GThreadedSocketService], Ptr[GSocketConnection], Ptr[GObject], gboolean]]]
    def run_=(value: CFuncPtr3[Ptr[GThreadedSocketService], Ptr[GSocketConnection], Ptr[GObject], gboolean]): Unit = !struct.at(248).asInstanceOf[Ptr[CFuncPtr3[Ptr[GThreadedSocketService], Ptr[GSocketConnection], Ptr[GObject], gboolean]]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(256).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(256).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(264).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(264).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(272).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(272).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(280).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(280).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(288).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(288).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gthreadedsocketservice.h
*/
opaque type GThreadedSocketServicePrivate = CStruct0
object GThreadedSocketServicePrivate:
  given _tag: Tag[GThreadedSocketServicePrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gtypes.h
*/
opaque type GTimeVal = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GTimeVal:
  given _tag: Tag[GTimeVal] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GTimeVal] = scala.scalanative.unsafe.alloc[GTimeVal](1)
  def apply(tv_sec : glong, tv_usec : glong)(using Zone): Ptr[GTimeVal] = 
    val ____ptr = apply()
    (!____ptr).tv_sec = tv_sec
    (!____ptr).tv_usec = tv_usec
    ____ptr
  extension (struct: GTimeVal)
    def tv_sec: glong = !struct.at(0).asInstanceOf[Ptr[glong]]
    def tv_sec_=(value: glong): Unit = !struct.at(0).asInstanceOf[Ptr[glong]] = value
    def tv_usec: glong = !struct.at(8).asInstanceOf[Ptr[glong]]
    def tv_usec_=(value: glong): Unit = !struct.at(8).asInstanceOf[Ptr[glong]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gtimezone.h
*/
opaque type GTimeZone = CStruct0
object GTimeZone:
  given _tag: Tag[GTimeZone] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gtimer.h
*/
opaque type GTimer = CStruct0
object GTimer:
  given _tag: Tag[GTimer] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsbackend.h
*/
opaque type GTlsBackend = CStruct0
object GTlsBackend:
  given _tag: Tag[GTlsBackend] = Tag.materializeCStruct0Tag

/**
 * GTlsBackendInterface: _iface: The parent interface. _tls: returns whether the backend supports TLS. _dtls: returns whether the backend supports DTLS _default_database: returns a default #GTlsDatabase instance. _certificate_type: returns the #GTlsCertificate implementation type _client_connection_type: returns the #GTlsClientConnection implementation type _server_connection_type: returns the #GTlsServerConnection implementation type _file_database_type: returns the #GTlsFileDatabase implementation type. _dtls_client_connection_type: returns the #GDtlsClientConnection implementation type _dtls_server_connection_type: returns the #GDtlsServerConnection implementation type

 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsbackend.h
*/
opaque type GTlsBackendInterface = CArray[CChar, Nat.Digit2[Nat._8, Nat._8]]
object GTlsBackendInterface:
  given _tag: Tag[GTlsBackendInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._8, Nat._8]](Tag.Byte, Tag.Digit2[Nat._8, Nat._8](Tag.Nat8, Tag.Nat8))
  def apply()(using Zone): Ptr[GTlsBackendInterface] = scala.scalanative.unsafe.alloc[GTlsBackendInterface](1)
  def apply(g_iface : GTypeInterface, supports_tls : CFuncPtr1[Ptr[GTlsBackend], gboolean], get_certificate_type : CFuncPtr0[GType], get_client_connection_type : CFuncPtr0[GType], get_server_connection_type : CFuncPtr0[GType], get_file_database_type : CFuncPtr0[GType], get_default_database : CFuncPtr1[Ptr[GTlsBackend], Ptr[GTlsDatabase]], supports_dtls : CFuncPtr1[Ptr[GTlsBackend], gboolean], get_dtls_client_connection_type : CFuncPtr0[GType], get_dtls_server_connection_type : CFuncPtr0[GType])(using Zone): Ptr[GTlsBackendInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).supports_tls = supports_tls
    (!____ptr).get_certificate_type = get_certificate_type
    (!____ptr).get_client_connection_type = get_client_connection_type
    (!____ptr).get_server_connection_type = get_server_connection_type
    (!____ptr).get_file_database_type = get_file_database_type
    (!____ptr).get_default_database = get_default_database
    (!____ptr).supports_dtls = supports_dtls
    (!____ptr).get_dtls_client_connection_type = get_dtls_client_connection_type
    (!____ptr).get_dtls_server_connection_type = get_dtls_server_connection_type
    ____ptr
  extension (struct: GTlsBackendInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def supports_tls: CFuncPtr1[Ptr[GTlsBackend], gboolean] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GTlsBackend], gboolean]]]
    def supports_tls_=(value: CFuncPtr1[Ptr[GTlsBackend], gboolean]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GTlsBackend], gboolean]]] = value
    def get_certificate_type: CFuncPtr0[GType] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr0[GType]]]
    def get_certificate_type_=(value: CFuncPtr0[GType]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr0[GType]]] = value
    def get_client_connection_type: CFuncPtr0[GType] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr0[GType]]]
    def get_client_connection_type_=(value: CFuncPtr0[GType]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr0[GType]]] = value
    def get_server_connection_type: CFuncPtr0[GType] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr0[GType]]]
    def get_server_connection_type_=(value: CFuncPtr0[GType]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr0[GType]]] = value
    def get_file_database_type: CFuncPtr0[GType] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr0[GType]]]
    def get_file_database_type_=(value: CFuncPtr0[GType]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr0[GType]]] = value
    def get_default_database: CFuncPtr1[Ptr[GTlsBackend], Ptr[GTlsDatabase]] = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GTlsBackend], Ptr[GTlsDatabase]]]]
    def get_default_database_=(value: CFuncPtr1[Ptr[GTlsBackend], Ptr[GTlsDatabase]]): Unit = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GTlsBackend], Ptr[GTlsDatabase]]]] = value
    def supports_dtls: CFuncPtr1[Ptr[GTlsBackend], gboolean] = !struct.at(64).asInstanceOf[Ptr[CFuncPtr1[Ptr[GTlsBackend], gboolean]]]
    def supports_dtls_=(value: CFuncPtr1[Ptr[GTlsBackend], gboolean]): Unit = !struct.at(64).asInstanceOf[Ptr[CFuncPtr1[Ptr[GTlsBackend], gboolean]]] = value
    def get_dtls_client_connection_type: CFuncPtr0[GType] = !struct.at(72).asInstanceOf[Ptr[CFuncPtr0[GType]]]
    def get_dtls_client_connection_type_=(value: CFuncPtr0[GType]): Unit = !struct.at(72).asInstanceOf[Ptr[CFuncPtr0[GType]]] = value
    def get_dtls_server_connection_type: CFuncPtr0[GType] = !struct.at(80).asInstanceOf[Ptr[CFuncPtr0[GType]]]
    def get_dtls_server_connection_type_=(value: CFuncPtr0[GType]): Unit = !struct.at(80).asInstanceOf[Ptr[CFuncPtr0[GType]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
*/
opaque type GTlsCertificate = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GTlsCertificate:
  given _tag: Tag[GTlsCertificate] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GTlsCertificate] = scala.scalanative.unsafe.alloc[GTlsCertificate](1)
  def apply(parent_instance : GObject, priv : Ptr[GTlsCertificatePrivate])(using Zone): Ptr[GTlsCertificate] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GTlsCertificate)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GTlsCertificatePrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GTlsCertificatePrivate]]]
    def priv_=(value: Ptr[GTlsCertificatePrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GTlsCertificatePrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
*/
opaque type GTlsCertificateClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._0, Nat._8]]
object GTlsCertificateClass:
  given _tag: Tag[GTlsCertificateClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._0, Nat._8]](Tag.Byte, Tag.Digit3[Nat._2, Nat._0, Nat._8](Tag.Nat2, Tag.Nat0, Tag.Nat8))
  def apply()(using Zone): Ptr[GTlsCertificateClass] = scala.scalanative.unsafe.alloc[GTlsCertificateClass](1)
  def apply(parent_class : GObjectClass, verify : CFuncPtr3[Ptr[GTlsCertificate], Ptr[GSocketConnectable], Ptr[GTlsCertificate], GTlsCertificateFlags], padding : CArray[gpointer, Nat._8])(using Zone): Ptr[GTlsCertificateClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).verify = verify
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GTlsCertificateClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def verify: CFuncPtr3[Ptr[GTlsCertificate], Ptr[GSocketConnectable], Ptr[GTlsCertificate], GTlsCertificateFlags] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GTlsCertificate], Ptr[GSocketConnectable], Ptr[GTlsCertificate], GTlsCertificateFlags]]]
    def verify_=(value: CFuncPtr3[Ptr[GTlsCertificate], Ptr[GSocketConnectable], Ptr[GTlsCertificate], GTlsCertificateFlags]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GTlsCertificate], Ptr[GSocketConnectable], Ptr[GTlsCertificate], GTlsCertificateFlags]]] = value
    def padding: CArray[gpointer, Nat._8] = !struct.at(144).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]]
    def padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at(144).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
*/
opaque type GTlsCertificatePrivate = CStruct0
object GTlsCertificatePrivate:
  given _tag: Tag[GTlsCertificatePrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GTlsClientConnection = CStruct0
object GTlsClientConnection:
  given _tag: Tag[GTlsClientConnection] = Tag.materializeCStruct0Tag

/**
 * GTlsClientConnectionInterface: _iface: The parent interface. _session_state: Copies session state from one #GTlsClientConnection to another.

 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsclientconnection.h
*/
opaque type GTlsClientConnectionInterface = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GTlsClientConnectionInterface:
  given _tag: Tag[GTlsClientConnectionInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GTlsClientConnectionInterface] = scala.scalanative.unsafe.alloc[GTlsClientConnectionInterface](1)
  def apply(g_iface : GTypeInterface, copy_session_state : CFuncPtr2[Ptr[GTlsClientConnection], Ptr[GTlsClientConnection], Unit])(using Zone): Ptr[GTlsClientConnectionInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).copy_session_state = copy_session_state
    ____ptr
  extension (struct: GTlsClientConnectionInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def copy_session_state: CFuncPtr2[Ptr[GTlsClientConnection], Ptr[GTlsClientConnection], Unit] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr2[Ptr[GTlsClientConnection], Ptr[GTlsClientConnection], Unit]]]
    def copy_session_state_=(value: CFuncPtr2[Ptr[GTlsClientConnection], Ptr[GTlsClientConnection], Unit]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr2[Ptr[GTlsClientConnection], Ptr[GTlsClientConnection], Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
*/
opaque type GTlsConnection = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GTlsConnection:
  given _tag: Tag[GTlsConnection] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GTlsConnection] = scala.scalanative.unsafe.alloc[GTlsConnection](1)
  def apply(parent_instance : GIOStream, priv : Ptr[GTlsConnectionPrivate])(using Zone): Ptr[GTlsConnection] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GTlsConnection)
    def parent_instance: GIOStream = !struct.at(0).asInstanceOf[Ptr[GIOStream]]
    def parent_instance_=(value: GIOStream): Unit = !struct.at(0).asInstanceOf[Ptr[GIOStream]] = value
    def priv: Ptr[GTlsConnectionPrivate] = !struct.at(32).asInstanceOf[Ptr[Ptr[GTlsConnectionPrivate]]]
    def priv_=(value: Ptr[GTlsConnectionPrivate]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[GTlsConnectionPrivate]]] = value

/**
 * GTlsConnectionClass: _class: The parent class. _certificate: Check whether to accept a certificate. : Perform a handshake operation. _async: Start an asynchronous handshake operation. _finish: Finish an asynchronous handshake operation. _binding_data: Retrieve TLS channel binding data (Since: 2.66) _negotiated_protocol: Get ALPN-negotiated protocol (Since: 2.70)

 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
*/
opaque type GTlsConnectionClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._5, Nat._2]]
object GTlsConnectionClass:
  given _tag: Tag[GTlsConnectionClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._5, Nat._2]](Tag.Byte, Tag.Digit3[Nat._3, Nat._5, Nat._2](Tag.Nat3, Tag.Nat5, Tag.Nat2))
  def apply()(using Zone): Ptr[GTlsConnectionClass] = scala.scalanative.unsafe.alloc[GTlsConnectionClass](1)
  def apply(parent_class : GIOStreamClass, accept_certificate : CFuncPtr3[Ptr[GTlsConnection], Ptr[GTlsCertificate], GTlsCertificateFlags, gboolean], handshake : CFuncPtr3[Ptr[GTlsConnection], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], handshake_async : CFuncPtr5[Ptr[GTlsConnection], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], handshake_finish : CFuncPtr3[Ptr[GTlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], get_binding_data : CFuncPtr4[Ptr[GTlsConnection], GTlsChannelBindingType, Ptr[GByteArray], Ptr[Ptr[GError]], gboolean], get_negotiated_protocol : CFuncPtr1[Ptr[GTlsConnection], Ptr[gchar]], padding : CArray[gpointer, Nat._6])(using Zone): Ptr[GTlsConnectionClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).accept_certificate = accept_certificate
    (!____ptr).handshake = handshake
    (!____ptr).handshake_async = handshake_async
    (!____ptr).handshake_finish = handshake_finish
    (!____ptr).get_binding_data = get_binding_data
    (!____ptr).get_negotiated_protocol = get_negotiated_protocol
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GTlsConnectionClass)
    def parent_class: GIOStreamClass = !struct.at(0).asInstanceOf[Ptr[GIOStreamClass]]
    def parent_class_=(value: GIOStreamClass): Unit = !struct.at(0).asInstanceOf[Ptr[GIOStreamClass]] = value
    def accept_certificate: CFuncPtr3[Ptr[GTlsConnection], Ptr[GTlsCertificate], GTlsCertificateFlags, gboolean] = !struct.at(256).asInstanceOf[Ptr[CFuncPtr3[Ptr[GTlsConnection], Ptr[GTlsCertificate], GTlsCertificateFlags, gboolean]]]
    def accept_certificate_=(value: CFuncPtr3[Ptr[GTlsConnection], Ptr[GTlsCertificate], GTlsCertificateFlags, gboolean]): Unit = !struct.at(256).asInstanceOf[Ptr[CFuncPtr3[Ptr[GTlsConnection], Ptr[GTlsCertificate], GTlsCertificateFlags, gboolean]]] = value
    def handshake: CFuncPtr3[Ptr[GTlsConnection], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(264).asInstanceOf[Ptr[CFuncPtr3[Ptr[GTlsConnection], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def handshake_=(value: CFuncPtr3[Ptr[GTlsConnection], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(264).asInstanceOf[Ptr[CFuncPtr3[Ptr[GTlsConnection], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def handshake_async: CFuncPtr5[Ptr[GTlsConnection], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(272).asInstanceOf[Ptr[CFuncPtr5[Ptr[GTlsConnection], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def handshake_async_=(value: CFuncPtr5[Ptr[GTlsConnection], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(272).asInstanceOf[Ptr[CFuncPtr5[Ptr[GTlsConnection], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def handshake_finish: CFuncPtr3[Ptr[GTlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(280).asInstanceOf[Ptr[CFuncPtr3[Ptr[GTlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def handshake_finish_=(value: CFuncPtr3[Ptr[GTlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(280).asInstanceOf[Ptr[CFuncPtr3[Ptr[GTlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def get_binding_data: CFuncPtr4[Ptr[GTlsConnection], GTlsChannelBindingType, Ptr[GByteArray], Ptr[Ptr[GError]], gboolean] = !struct.at(288).asInstanceOf[Ptr[CFuncPtr4[Ptr[GTlsConnection], GTlsChannelBindingType, Ptr[GByteArray], Ptr[Ptr[GError]], gboolean]]]
    def get_binding_data_=(value: CFuncPtr4[Ptr[GTlsConnection], GTlsChannelBindingType, Ptr[GByteArray], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(288).asInstanceOf[Ptr[CFuncPtr4[Ptr[GTlsConnection], GTlsChannelBindingType, Ptr[GByteArray], Ptr[Ptr[GError]], gboolean]]] = value
    def get_negotiated_protocol: CFuncPtr1[Ptr[GTlsConnection], Ptr[gchar]] = !struct.at(296).asInstanceOf[Ptr[CFuncPtr1[Ptr[GTlsConnection], Ptr[gchar]]]]
    def get_negotiated_protocol_=(value: CFuncPtr1[Ptr[GTlsConnection], Ptr[gchar]]): Unit = !struct.at(296).asInstanceOf[Ptr[CFuncPtr1[Ptr[GTlsConnection], Ptr[gchar]]]] = value
    def padding: CArray[gpointer, Nat._6] = !struct.at(304).asInstanceOf[Ptr[CArray[gpointer, Nat._6]]]
    def padding_=(value: CArray[gpointer, Nat._6]): Unit = !struct.at(304).asInstanceOf[Ptr[CArray[gpointer, Nat._6]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
*/
opaque type GTlsConnectionPrivate = CStruct0
object GTlsConnectionPrivate:
  given _tag: Tag[GTlsConnectionPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsdatabase.h
*/
opaque type GTlsDatabase = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GTlsDatabase:
  given _tag: Tag[GTlsDatabase] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GTlsDatabase] = scala.scalanative.unsafe.alloc[GTlsDatabase](1)
  def apply(parent_instance : GObject, priv : Ptr[GTlsDatabasePrivate])(using Zone): Ptr[GTlsDatabase] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GTlsDatabase)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GTlsDatabasePrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GTlsDatabasePrivate]]]
    def priv_=(value: Ptr[GTlsDatabasePrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GTlsDatabasePrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsdatabase.h
*/
opaque type GTlsDatabaseClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._6, Nat._8]]
object GTlsDatabaseClass:
  given _tag: Tag[GTlsDatabaseClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._6, Nat._8]](Tag.Byte, Tag.Digit3[Nat._3, Nat._6, Nat._8](Tag.Nat3, Tag.Nat6, Tag.Nat8))
  def apply()(using Zone): Ptr[GTlsDatabaseClass] = scala.scalanative.unsafe.alloc[GTlsDatabaseClass](1)
  def apply(parent_class : GObjectClass, verify_chain : CFuncPtr8[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar], Ptr[GSocketConnectable], Ptr[GTlsInteraction], GTlsDatabaseVerifyFlags, Ptr[GCancellable], Ptr[Ptr[GError]], GTlsCertificateFlags], verify_chain_async : CFuncPtr9[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar], Ptr[GSocketConnectable], Ptr[GTlsInteraction], GTlsDatabaseVerifyFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], verify_chain_finish : CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsCertificateFlags], create_certificate_handle : CFuncPtr2[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar]], lookup_certificate_for_handle : CFuncPtr6[Ptr[GTlsDatabase], Ptr[gchar], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GTlsCertificate]], lookup_certificate_for_handle_async : CFuncPtr7[Ptr[GTlsDatabase], Ptr[gchar], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], lookup_certificate_for_handle_finish : CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GTlsCertificate]], lookup_certificate_issuer : CFuncPtr6[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GTlsCertificate]], lookup_certificate_issuer_async : CFuncPtr7[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], lookup_certificate_issuer_finish : CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GTlsCertificate]], lookup_certificates_issued_by : CFuncPtr6[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]], lookup_certificates_issued_by_async : CFuncPtr7[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], lookup_certificates_issued_by_finish : CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]], padding : CArray[gpointer, Nat.Digit2[Nat._1, Nat._6]])(using Zone): Ptr[GTlsDatabaseClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).verify_chain = verify_chain
    (!____ptr).verify_chain_async = verify_chain_async
    (!____ptr).verify_chain_finish = verify_chain_finish
    (!____ptr).create_certificate_handle = create_certificate_handle
    (!____ptr).lookup_certificate_for_handle = lookup_certificate_for_handle
    (!____ptr).lookup_certificate_for_handle_async = lookup_certificate_for_handle_async
    (!____ptr).lookup_certificate_for_handle_finish = lookup_certificate_for_handle_finish
    (!____ptr).lookup_certificate_issuer = lookup_certificate_issuer
    (!____ptr).lookup_certificate_issuer_async = lookup_certificate_issuer_async
    (!____ptr).lookup_certificate_issuer_finish = lookup_certificate_issuer_finish
    (!____ptr).lookup_certificates_issued_by = lookup_certificates_issued_by
    (!____ptr).lookup_certificates_issued_by_async = lookup_certificates_issued_by_async
    (!____ptr).lookup_certificates_issued_by_finish = lookup_certificates_issued_by_finish
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GTlsDatabaseClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def verify_chain: CFuncPtr8[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar], Ptr[GSocketConnectable], Ptr[GTlsInteraction], GTlsDatabaseVerifyFlags, Ptr[GCancellable], Ptr[Ptr[GError]], GTlsCertificateFlags] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr8[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar], Ptr[GSocketConnectable], Ptr[GTlsInteraction], GTlsDatabaseVerifyFlags, Ptr[GCancellable], Ptr[Ptr[GError]], GTlsCertificateFlags]]]
    def verify_chain_=(value: CFuncPtr8[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar], Ptr[GSocketConnectable], Ptr[GTlsInteraction], GTlsDatabaseVerifyFlags, Ptr[GCancellable], Ptr[Ptr[GError]], GTlsCertificateFlags]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr8[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar], Ptr[GSocketConnectable], Ptr[GTlsInteraction], GTlsDatabaseVerifyFlags, Ptr[GCancellable], Ptr[Ptr[GError]], GTlsCertificateFlags]]] = value
    def verify_chain_async: CFuncPtr9[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar], Ptr[GSocketConnectable], Ptr[GTlsInteraction], GTlsDatabaseVerifyFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr9[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar], Ptr[GSocketConnectable], Ptr[GTlsInteraction], GTlsDatabaseVerifyFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def verify_chain_async_=(value: CFuncPtr9[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar], Ptr[GSocketConnectable], Ptr[GTlsInteraction], GTlsDatabaseVerifyFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr9[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar], Ptr[GSocketConnectable], Ptr[GTlsInteraction], GTlsDatabaseVerifyFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def verify_chain_finish: CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsCertificateFlags] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsCertificateFlags]]]
    def verify_chain_finish_=(value: CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsCertificateFlags]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsCertificateFlags]]] = value
    def create_certificate_handle: CFuncPtr2[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar]] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr2[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar]]]]
    def create_certificate_handle_=(value: CFuncPtr2[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar]]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr2[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar]]]] = value
    def lookup_certificate_for_handle: CFuncPtr6[Ptr[GTlsDatabase], Ptr[gchar], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GTlsCertificate]] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr6[Ptr[GTlsDatabase], Ptr[gchar], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GTlsCertificate]]]]
    def lookup_certificate_for_handle_=(value: CFuncPtr6[Ptr[GTlsDatabase], Ptr[gchar], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GTlsCertificate]]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr6[Ptr[GTlsDatabase], Ptr[gchar], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GTlsCertificate]]]] = value
    def lookup_certificate_for_handle_async: CFuncPtr7[Ptr[GTlsDatabase], Ptr[gchar], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr7[Ptr[GTlsDatabase], Ptr[gchar], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def lookup_certificate_for_handle_async_=(value: CFuncPtr7[Ptr[GTlsDatabase], Ptr[gchar], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr7[Ptr[GTlsDatabase], Ptr[gchar], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def lookup_certificate_for_handle_finish: CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GTlsCertificate]] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GTlsCertificate]]]]
    def lookup_certificate_for_handle_finish_=(value: CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GTlsCertificate]]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GTlsCertificate]]]] = value
    def lookup_certificate_issuer: CFuncPtr6[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GTlsCertificate]] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr6[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GTlsCertificate]]]]
    def lookup_certificate_issuer_=(value: CFuncPtr6[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GTlsCertificate]]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr6[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GTlsCertificate]]]] = value
    def lookup_certificate_issuer_async: CFuncPtr7[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr7[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def lookup_certificate_issuer_async_=(value: CFuncPtr7[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr7[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def lookup_certificate_issuer_finish: CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GTlsCertificate]] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GTlsCertificate]]]]
    def lookup_certificate_issuer_finish_=(value: CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GTlsCertificate]]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GTlsCertificate]]]] = value
    def lookup_certificates_issued_by: CFuncPtr6[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]] = !struct.at(216).asInstanceOf[Ptr[CFuncPtr6[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]]]
    def lookup_certificates_issued_by_=(value: CFuncPtr6[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at(216).asInstanceOf[Ptr[CFuncPtr6[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]]] = value
    def lookup_certificates_issued_by_async: CFuncPtr7[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(224).asInstanceOf[Ptr[CFuncPtr7[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def lookup_certificates_issued_by_async_=(value: CFuncPtr7[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(224).asInstanceOf[Ptr[CFuncPtr7[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def lookup_certificates_issued_by_finish: CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]] = !struct.at(232).asInstanceOf[Ptr[CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]]]
    def lookup_certificates_issued_by_finish_=(value: CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at(232).asInstanceOf[Ptr[CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]]] = value
    def padding: CArray[gpointer, Nat.Digit2[Nat._1, Nat._6]] = !struct.at(240).asInstanceOf[Ptr[CArray[gpointer, Nat.Digit2[Nat._1, Nat._6]]]]
    def padding_=(value: CArray[gpointer, Nat.Digit2[Nat._1, Nat._6]]): Unit = !struct.at(240).asInstanceOf[Ptr[CArray[gpointer, Nat.Digit2[Nat._1, Nat._6]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsdatabase.h
*/
opaque type GTlsDatabasePrivate = CStruct0
object GTlsDatabasePrivate:
  given _tag: Tag[GTlsDatabasePrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GTlsFileDatabase = CStruct0
object GTlsFileDatabase:
  given _tag: Tag[GTlsFileDatabase] = Tag.materializeCStruct0Tag

/**
 * GTlsFileDatabaseInterface: _iface: The parent interface.

 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsfiledatabase.h
*/
opaque type GTlsFileDatabaseInterface = CArray[CChar, Nat.Digit2[Nat._8, Nat._0]]
object GTlsFileDatabaseInterface:
  given _tag: Tag[GTlsFileDatabaseInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._8, Nat._0]](Tag.Byte, Tag.Digit2[Nat._8, Nat._0](Tag.Nat8, Tag.Nat0))
  def apply()(using Zone): Ptr[GTlsFileDatabaseInterface] = scala.scalanative.unsafe.alloc[GTlsFileDatabaseInterface](1)
  def apply(g_iface : GTypeInterface, padding : CArray[gpointer, Nat._8])(using Zone): Ptr[GTlsFileDatabaseInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GTlsFileDatabaseInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def padding: CArray[gpointer, Nat._8] = !struct.at(16).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]]
    def padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at(16).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsinteraction.h
*/
opaque type GTlsInteraction = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GTlsInteraction:
  given _tag: Tag[GTlsInteraction] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GTlsInteraction] = scala.scalanative.unsafe.alloc[GTlsInteraction](1)
  def apply(parent_instance : GObject, priv : Ptr[GTlsInteractionPrivate])(using Zone): Ptr[GTlsInteraction] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GTlsInteraction)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GTlsInteractionPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GTlsInteractionPrivate]]]
    def priv_=(value: Ptr[GTlsInteractionPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GTlsInteractionPrivate]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsinteraction.h
*/
opaque type GTlsInteractionClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._5, Nat._2]]
object GTlsInteractionClass:
  given _tag: Tag[GTlsInteractionClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._5, Nat._2]](Tag.Byte, Tag.Digit3[Nat._3, Nat._5, Nat._2](Tag.Nat3, Tag.Nat5, Tag.Nat2))
  def apply()(using Zone): Ptr[GTlsInteractionClass] = scala.scalanative.unsafe.alloc[GTlsInteractionClass](1)
  def apply(parent_class : GObjectClass, ask_password : CFuncPtr4[Ptr[GTlsInteraction], Ptr[GTlsPassword], Ptr[GCancellable], Ptr[Ptr[GError]], GTlsInteractionResult], ask_password_async : CFuncPtr5[Ptr[GTlsInteraction], Ptr[GTlsPassword], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], ask_password_finish : CFuncPtr3[Ptr[GTlsInteraction], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsInteractionResult], request_certificate : CFuncPtr5[Ptr[GTlsInteraction], Ptr[GTlsConnection], GTlsCertificateRequestFlags, Ptr[GCancellable], Ptr[Ptr[GError]], GTlsInteractionResult], request_certificate_async : CFuncPtr6[Ptr[GTlsInteraction], Ptr[GTlsConnection], GTlsCertificateRequestFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], request_certificate_finish : CFuncPtr3[Ptr[GTlsInteraction], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsInteractionResult], padding : CArray[gpointer, Nat.Digit2[Nat._2, Nat._1]])(using Zone): Ptr[GTlsInteractionClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).ask_password = ask_password
    (!____ptr).ask_password_async = ask_password_async
    (!____ptr).ask_password_finish = ask_password_finish
    (!____ptr).request_certificate = request_certificate
    (!____ptr).request_certificate_async = request_certificate_async
    (!____ptr).request_certificate_finish = request_certificate_finish
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GTlsInteractionClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def ask_password: CFuncPtr4[Ptr[GTlsInteraction], Ptr[GTlsPassword], Ptr[GCancellable], Ptr[Ptr[GError]], GTlsInteractionResult] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr4[Ptr[GTlsInteraction], Ptr[GTlsPassword], Ptr[GCancellable], Ptr[Ptr[GError]], GTlsInteractionResult]]]
    def ask_password_=(value: CFuncPtr4[Ptr[GTlsInteraction], Ptr[GTlsPassword], Ptr[GCancellable], Ptr[Ptr[GError]], GTlsInteractionResult]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr4[Ptr[GTlsInteraction], Ptr[GTlsPassword], Ptr[GCancellable], Ptr[Ptr[GError]], GTlsInteractionResult]]] = value
    def ask_password_async: CFuncPtr5[Ptr[GTlsInteraction], Ptr[GTlsPassword], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr5[Ptr[GTlsInteraction], Ptr[GTlsPassword], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def ask_password_async_=(value: CFuncPtr5[Ptr[GTlsInteraction], Ptr[GTlsPassword], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr5[Ptr[GTlsInteraction], Ptr[GTlsPassword], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def ask_password_finish: CFuncPtr3[Ptr[GTlsInteraction], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsInteractionResult] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GTlsInteraction], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsInteractionResult]]]
    def ask_password_finish_=(value: CFuncPtr3[Ptr[GTlsInteraction], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsInteractionResult]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GTlsInteraction], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsInteractionResult]]] = value
    def request_certificate: CFuncPtr5[Ptr[GTlsInteraction], Ptr[GTlsConnection], GTlsCertificateRequestFlags, Ptr[GCancellable], Ptr[Ptr[GError]], GTlsInteractionResult] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr5[Ptr[GTlsInteraction], Ptr[GTlsConnection], GTlsCertificateRequestFlags, Ptr[GCancellable], Ptr[Ptr[GError]], GTlsInteractionResult]]]
    def request_certificate_=(value: CFuncPtr5[Ptr[GTlsInteraction], Ptr[GTlsConnection], GTlsCertificateRequestFlags, Ptr[GCancellable], Ptr[Ptr[GError]], GTlsInteractionResult]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr5[Ptr[GTlsInteraction], Ptr[GTlsConnection], GTlsCertificateRequestFlags, Ptr[GCancellable], Ptr[Ptr[GError]], GTlsInteractionResult]]] = value
    def request_certificate_async: CFuncPtr6[Ptr[GTlsInteraction], Ptr[GTlsConnection], GTlsCertificateRequestFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr6[Ptr[GTlsInteraction], Ptr[GTlsConnection], GTlsCertificateRequestFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def request_certificate_async_=(value: CFuncPtr6[Ptr[GTlsInteraction], Ptr[GTlsConnection], GTlsCertificateRequestFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr6[Ptr[GTlsInteraction], Ptr[GTlsConnection], GTlsCertificateRequestFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def request_certificate_finish: CFuncPtr3[Ptr[GTlsInteraction], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsInteractionResult] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr3[Ptr[GTlsInteraction], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsInteractionResult]]]
    def request_certificate_finish_=(value: CFuncPtr3[Ptr[GTlsInteraction], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsInteractionResult]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr3[Ptr[GTlsInteraction], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsInteractionResult]]] = value
    def padding: CArray[gpointer, Nat.Digit2[Nat._2, Nat._1]] = !struct.at(184).asInstanceOf[Ptr[CArray[gpointer, Nat.Digit2[Nat._2, Nat._1]]]]
    def padding_=(value: CArray[gpointer, Nat.Digit2[Nat._2, Nat._1]]): Unit = !struct.at(184).asInstanceOf[Ptr[CArray[gpointer, Nat.Digit2[Nat._2, Nat._1]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsinteraction.h
*/
opaque type GTlsInteractionPrivate = CStruct0
object GTlsInteractionPrivate:
  given _tag: Tag[GTlsInteractionPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlspassword.h
*/
opaque type GTlsPassword = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GTlsPassword:
  given _tag: Tag[GTlsPassword] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GTlsPassword] = scala.scalanative.unsafe.alloc[GTlsPassword](1)
  def apply(parent_instance : GObject, priv : Ptr[GTlsPasswordPrivate])(using Zone): Ptr[GTlsPassword] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GTlsPassword)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: Ptr[GTlsPasswordPrivate] = !struct.at(24).asInstanceOf[Ptr[Ptr[GTlsPasswordPrivate]]]
    def priv_=(value: Ptr[GTlsPasswordPrivate]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[GTlsPasswordPrivate]]] = value

/**
 * GTlsPasswordClass: _value: virtual method for g_tls_password_get_value()

 * [bindgen] header: /usr/include/glib-2.0/gio/gtlspassword.h
*/
opaque type GTlsPasswordClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._9, Nat._2]]
object GTlsPasswordClass:
  given _tag: Tag[GTlsPasswordClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._9, Nat._2]](Tag.Byte, Tag.Digit3[Nat._1, Nat._9, Nat._2](Tag.Nat1, Tag.Nat9, Tag.Nat2))
  def apply()(using Zone): Ptr[GTlsPasswordClass] = scala.scalanative.unsafe.alloc[GTlsPasswordClass](1)
  def apply(parent_class : GObjectClass, get_value : CFuncPtr2[Ptr[GTlsPassword], Ptr[gsize], Ptr[guchar]], set_value : CFuncPtr4[Ptr[GTlsPassword], Ptr[guchar], gssize, GDestroyNotify, Unit], get_default_warning : CFuncPtr1[Ptr[GTlsPassword], Ptr[gchar]], padding : CArray[gpointer, Nat._4])(using Zone): Ptr[GTlsPasswordClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_value = get_value
    (!____ptr).set_value = set_value
    (!____ptr).get_default_warning = get_default_warning
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GTlsPasswordClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def get_value: CFuncPtr2[Ptr[GTlsPassword], Ptr[gsize], Ptr[guchar]] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr2[Ptr[GTlsPassword], Ptr[gsize], Ptr[guchar]]]]
    def get_value_=(value: CFuncPtr2[Ptr[GTlsPassword], Ptr[gsize], Ptr[guchar]]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr2[Ptr[GTlsPassword], Ptr[gsize], Ptr[guchar]]]] = value
    def set_value: CFuncPtr4[Ptr[GTlsPassword], Ptr[guchar], gssize, GDestroyNotify, Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr4[Ptr[GTlsPassword], Ptr[guchar], gssize, GDestroyNotify, Unit]]]
    def set_value_=(value: CFuncPtr4[Ptr[GTlsPassword], Ptr[guchar], gssize, GDestroyNotify, Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr4[Ptr[GTlsPassword], Ptr[guchar], gssize, GDestroyNotify, Unit]]] = value
    def get_default_warning: CFuncPtr1[Ptr[GTlsPassword], Ptr[gchar]] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr1[Ptr[GTlsPassword], Ptr[gchar]]]]
    def get_default_warning_=(value: CFuncPtr1[Ptr[GTlsPassword], Ptr[gchar]]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr1[Ptr[GTlsPassword], Ptr[gchar]]]] = value
    def padding: CArray[gpointer, Nat._4] = !struct.at(160).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]]
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at(160).asInstanceOf[Ptr[CArray[gpointer, Nat._4]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlspassword.h
*/
opaque type GTlsPasswordPrivate = CStruct0
object GTlsPasswordPrivate:
  given _tag: Tag[GTlsPasswordPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GTlsServerConnection = CStruct0
object GTlsServerConnection:
  given _tag: Tag[GTlsServerConnection] = Tag.materializeCStruct0Tag

/**
 * GTlsServerConnectionInterface: _iface: The parent interface.

 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsserverconnection.h
*/
opaque type GTlsServerConnectionInterface = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GTlsServerConnectionInterface:
  given _tag: Tag[GTlsServerConnectionInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GTlsServerConnectionInterface] = scala.scalanative.unsafe.alloc[GTlsServerConnectionInterface](1)
  def apply(g_iface : GTypeInterface)(using Zone): Ptr[GTlsServerConnectionInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    ____ptr
  extension (struct: GTlsServerConnectionInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gtrashstack.h
*/
opaque type GTrashStack = CArray[CChar, Nat._8]
object GTrashStack:
  given _tag: Tag[GTrashStack] = Tag.CArray[CChar, Nat._8](Tag.Byte, Tag.Nat8)
  def apply()(using Zone): Ptr[GTrashStack] = scala.scalanative.unsafe.alloc[GTrashStack](1)
  def apply(next : Ptr[GTrashStack])(using Zone): Ptr[GTrashStack] = 
    val ____ptr = apply()
    (!____ptr).next = next
    ____ptr
  extension (struct: GTrashStack)
    def next: Ptr[GTrashStack] = !struct.at(0).asInstanceOf[Ptr[Ptr[GTrashStack]]]
    def next_=(value: Ptr[GTrashStack]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[GTrashStack]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
*/
opaque type GTree = CStruct0
object GTree:
  given _tag: Tag[GTree] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
*/
opaque type GTreeNode = CStruct0
object GTreeNode:
  given _tag: Tag[GTreeNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/grel.h
*/
opaque type GTuples = CArray[CChar, Nat._4]
object GTuples:
  given _tag: Tag[GTuples] = Tag.CArray[CChar, Nat._4](Tag.Byte, Tag.Nat4)
  def apply()(using Zone): Ptr[GTuples] = scala.scalanative.unsafe.alloc[GTuples](1)
  def apply(len : guint)(using Zone): Ptr[GTuples] = 
    val ____ptr = apply()
    (!____ptr).len = len
    ____ptr
  extension (struct: GTuples)
    def len: guint = !struct.at(0).asInstanceOf[Ptr[guint]]
    def len_=(value: guint): Unit = !struct.at(0).asInstanceOf[Ptr[guint]] = value

/**
 * GTypeClass:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
*/
opaque type GTypeClass = CArray[CChar, Nat._8]
object GTypeClass:
  given _tag: Tag[GTypeClass] = Tag.CArray[CChar, Nat._8](Tag.Byte, Tag.Nat8)
  def apply()(using Zone): Ptr[GTypeClass] = scala.scalanative.unsafe.alloc[GTypeClass](1)
  def apply(g_type : GType)(using Zone): Ptr[GTypeClass] = 
    val ____ptr = apply()
    (!____ptr).g_type = g_type
    ____ptr
  extension (struct: GTypeClass)
    def g_type: GType = !struct.at(0).asInstanceOf[Ptr[GType]]
    def g_type_=(value: GType): Unit = !struct.at(0).asInstanceOf[Ptr[GType]] = value

/**
 * GTypeFundamentalInfo: _flags: #GTypeFundamentalFlags describing the characteristics of the fundamental type

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
*/
opaque type GTypeFundamentalInfo = CArray[CChar, Nat._4]
object GTypeFundamentalInfo:
  given _tag: Tag[GTypeFundamentalInfo] = Tag.CArray[CChar, Nat._4](Tag.Byte, Tag.Nat4)
  def apply()(using Zone): Ptr[GTypeFundamentalInfo] = scala.scalanative.unsafe.alloc[GTypeFundamentalInfo](1)
  def apply(type_flags : GTypeFundamentalFlags)(using Zone): Ptr[GTypeFundamentalInfo] = 
    val ____ptr = apply()
    (!____ptr).type_flags = type_flags
    ____ptr
  extension (struct: GTypeFundamentalInfo)
    def type_flags: GTypeFundamentalFlags = !struct.at(0).asInstanceOf[Ptr[GTypeFundamentalFlags]]
    def type_flags_=(value: GTypeFundamentalFlags): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeFundamentalFlags]] = value

/**
 * GTypeInfo: _init: Location of the base initialization function (optional) _finalize: Location of the base finalization function (optional) classed and instantiatable types. Location of the default vtable inititalization function for interface types. (optional) This function is used both to fill in virtual functions in the class or default vtable, and to do type-specific setup such as registering signals and object properties. classed and instantiatable types. Location of the default vtable finalization function for interface types. (optional) _size: Size of the instance (object) structure (required for instantiatable types only) _preallocs: Prior to GLib 2.10, it specified the number of pre-allocated (cached) instances to reserve memory for (0 indicates no caching). Since GLib 2.10, it is ignored, since instances are allocated with the [slice allocator][glib-Memory-Slices] now. _init: Location of the instance initialization function (optional, for instantiatable types only) _table: A #GTypeValueTable function table for generic handling of GValues of this type (usually only useful for fundamental types)

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
*/
opaque type GTypeInfo = CArray[CChar, Nat.Digit2[Nat._7, Nat._2]]
object GTypeInfo:
  given _tag: Tag[GTypeInfo] = Tag.CArray[CChar, Nat.Digit2[Nat._7, Nat._2]](Tag.Byte, Tag.Digit2[Nat._7, Nat._2](Tag.Nat7, Tag.Nat2))
  def apply()(using Zone): Ptr[GTypeInfo] = scala.scalanative.unsafe.alloc[GTypeInfo](1)
  def apply(class_size : guint16, base_init : GBaseInitFunc, base_finalize : GBaseFinalizeFunc, class_init : GClassInitFunc, class_finalize : GClassFinalizeFunc, class_data : gconstpointer, instance_size : guint16, n_preallocs : guint16, instance_init : GInstanceInitFunc, value_table : Ptr[GTypeValueTable])(using Zone): Ptr[GTypeInfo] = 
    val ____ptr = apply()
    (!____ptr).class_size = class_size
    (!____ptr).base_init = base_init
    (!____ptr).base_finalize = base_finalize
    (!____ptr).class_init = class_init
    (!____ptr).class_finalize = class_finalize
    (!____ptr).class_data = class_data
    (!____ptr).instance_size = instance_size
    (!____ptr).n_preallocs = n_preallocs
    (!____ptr).instance_init = instance_init
    (!____ptr).value_table = value_table
    ____ptr
  extension (struct: GTypeInfo)
    def class_size: guint16 = !struct.at(0).asInstanceOf[Ptr[guint16]]
    def class_size_=(value: guint16): Unit = !struct.at(0).asInstanceOf[Ptr[guint16]] = value
    def base_init: GBaseInitFunc = !struct.at(8).asInstanceOf[Ptr[GBaseInitFunc]]
    def base_init_=(value: GBaseInitFunc): Unit = !struct.at(8).asInstanceOf[Ptr[GBaseInitFunc]] = value
    def base_finalize: GBaseFinalizeFunc = !struct.at(16).asInstanceOf[Ptr[GBaseFinalizeFunc]]
    def base_finalize_=(value: GBaseFinalizeFunc): Unit = !struct.at(16).asInstanceOf[Ptr[GBaseFinalizeFunc]] = value
    def class_init: GClassInitFunc = !struct.at(24).asInstanceOf[Ptr[GClassInitFunc]]
    def class_init_=(value: GClassInitFunc): Unit = !struct.at(24).asInstanceOf[Ptr[GClassInitFunc]] = value
    def class_finalize: GClassFinalizeFunc = !struct.at(32).asInstanceOf[Ptr[GClassFinalizeFunc]]
    def class_finalize_=(value: GClassFinalizeFunc): Unit = !struct.at(32).asInstanceOf[Ptr[GClassFinalizeFunc]] = value
    def class_data: gconstpointer = !struct.at(40).asInstanceOf[Ptr[gconstpointer]]
    def class_data_=(value: gconstpointer): Unit = !struct.at(40).asInstanceOf[Ptr[gconstpointer]] = value
    def instance_size: guint16 = !struct.at(48).asInstanceOf[Ptr[guint16]]
    def instance_size_=(value: guint16): Unit = !struct.at(48).asInstanceOf[Ptr[guint16]] = value
    def n_preallocs: guint16 = !struct.at(50).asInstanceOf[Ptr[guint16]]
    def n_preallocs_=(value: guint16): Unit = !struct.at(50).asInstanceOf[Ptr[guint16]] = value
    def instance_init: GInstanceInitFunc = !struct.at(56).asInstanceOf[Ptr[GInstanceInitFunc]]
    def instance_init_=(value: GInstanceInitFunc): Unit = !struct.at(56).asInstanceOf[Ptr[GInstanceInitFunc]] = value
    def value_table: Ptr[GTypeValueTable] = !struct.at(64).asInstanceOf[Ptr[Ptr[GTypeValueTable]]]
    def value_table_=(value: Ptr[GTypeValueTable]): Unit = !struct.at(64).asInstanceOf[Ptr[Ptr[GTypeValueTable]]] = value

/**
 * GTypeInstance:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
*/
opaque type GTypeInstance = CArray[CChar, Nat._8]
object GTypeInstance:
  given _tag: Tag[GTypeInstance] = Tag.CArray[CChar, Nat._8](Tag.Byte, Tag.Nat8)
  def apply()(using Zone): Ptr[GTypeInstance] = scala.scalanative.unsafe.alloc[GTypeInstance](1)
  def apply(g_class : Ptr[GTypeClass])(using Zone): Ptr[GTypeInstance] = 
    val ____ptr = apply()
    (!____ptr).g_class = g_class
    ____ptr
  extension (struct: GTypeInstance)
    def g_class: Ptr[GTypeClass] = !struct.at(0).asInstanceOf[Ptr[Ptr[GTypeClass]]]
    def g_class_=(value: Ptr[GTypeClass]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[GTypeClass]]] = value

/**
 * GTypeInterface:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
*/
opaque type GTypeInterface = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GTypeInterface:
  given _tag: Tag[GTypeInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GTypeInterface] = scala.scalanative.unsafe.alloc[GTypeInterface](1)
  def apply(g_type : GType, g_instance_type : GType)(using Zone): Ptr[GTypeInterface] = 
    val ____ptr = apply()
    (!____ptr).g_type = g_type
    (!____ptr).g_instance_type = g_instance_type
    ____ptr
  extension (struct: GTypeInterface)
    def g_type: GType = !struct.at(0).asInstanceOf[Ptr[GType]]
    def g_type_=(value: GType): Unit = !struct.at(0).asInstanceOf[Ptr[GType]] = value
    def g_instance_type: GType = !struct.at(8).asInstanceOf[Ptr[GType]]
    def g_instance_type_=(value: GType): Unit = !struct.at(8).asInstanceOf[Ptr[GType]] = value

/**
 * GTypeModule:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtypemodule.h
*/
opaque type GTypeModule = CArray[CChar, Nat.Digit2[Nat._5, Nat._6]]
object GTypeModule:
  given _tag: Tag[GTypeModule] = Tag.CArray[CChar, Nat.Digit2[Nat._5, Nat._6]](Tag.Byte, Tag.Digit2[Nat._5, Nat._6](Tag.Nat5, Tag.Nat6))
  def apply()(using Zone): Ptr[GTypeModule] = scala.scalanative.unsafe.alloc[GTypeModule](1)
  def apply(parent_instance : GObject, use_count : guint, type_infos : Ptr[GSList], interface_infos : Ptr[GSList], name : Ptr[gchar])(using Zone): Ptr[GTypeModule] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).use_count = use_count
    (!____ptr).type_infos = type_infos
    (!____ptr).interface_infos = interface_infos
    (!____ptr).name = name
    ____ptr
  extension (struct: GTypeModule)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def use_count: guint = !struct.at(24).asInstanceOf[Ptr[guint]]
    def use_count_=(value: guint): Unit = !struct.at(24).asInstanceOf[Ptr[guint]] = value
    def type_infos: Ptr[GSList] = !struct.at(32).asInstanceOf[Ptr[Ptr[GSList]]]
    def type_infos_=(value: Ptr[GSList]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[GSList]]] = value
    def interface_infos: Ptr[GSList] = !struct.at(40).asInstanceOf[Ptr[Ptr[GSList]]]
    def interface_infos_=(value: Ptr[GSList]): Unit = !struct.at(40).asInstanceOf[Ptr[Ptr[GSList]]] = value
    def name: Ptr[gchar] = !struct.at(48).asInstanceOf[Ptr[Ptr[gchar]]]
    def name_=(value: Ptr[gchar]): Unit = !struct.at(48).asInstanceOf[Ptr[Ptr[gchar]]] = value

/**
 * GTypeModuleClass: _class: the parent class : loads the module and registers one or more types using g_type_module_register_type(). : unloads the module

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtypemodule.h
*/
opaque type GTypeModuleClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._8, Nat._4]]
object GTypeModuleClass:
  given _tag: Tag[GTypeModuleClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._8, Nat._4]](Tag.Byte, Tag.Digit3[Nat._1, Nat._8, Nat._4](Tag.Nat1, Tag.Nat8, Tag.Nat4))
  def apply()(using Zone): Ptr[GTypeModuleClass] = scala.scalanative.unsafe.alloc[GTypeModuleClass](1)
  def apply(parent_class : GObjectClass, load : CFuncPtr1[Ptr[GTypeModule], gboolean], unload : CFuncPtr1[Ptr[GTypeModule], Unit], reserved1 : CFuncPtr0[Unit], reserved2 : CFuncPtr0[Unit], reserved3 : CFuncPtr0[Unit], reserved4 : CFuncPtr0[Unit])(using Zone): Ptr[GTypeModuleClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).load = load
    (!____ptr).unload = unload
    (!____ptr).reserved1 = reserved1
    (!____ptr).reserved2 = reserved2
    (!____ptr).reserved3 = reserved3
    (!____ptr).reserved4 = reserved4
    ____ptr
  extension (struct: GTypeModuleClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def load: CFuncPtr1[Ptr[GTypeModule], gboolean] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GTypeModule], gboolean]]]
    def load_=(value: CFuncPtr1[Ptr[GTypeModule], gboolean]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GTypeModule], gboolean]]] = value
    def unload: CFuncPtr1[Ptr[GTypeModule], Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GTypeModule], Unit]]]
    def unload_=(value: CFuncPtr1[Ptr[GTypeModule], Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GTypeModule], Unit]]] = value
    def reserved1: CFuncPtr0[Unit] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def reserved2: CFuncPtr0[Unit] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def reserved3: CFuncPtr0[Unit] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def reserved4: CFuncPtr0[Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
*/
opaque type GTypePlugin = CStruct0
object GTypePlugin:
  given _tag: Tag[GTypePlugin] = Tag.materializeCStruct0Tag

/**
 * GTypePlugin:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtypeplugin.h
*/
opaque type GTypePluginClass = CArray[CChar, Nat.Digit2[Nat._4, Nat._8]]
object GTypePluginClass:
  given _tag: Tag[GTypePluginClass] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._8]](Tag.Byte, Tag.Digit2[Nat._4, Nat._8](Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GTypePluginClass] = scala.scalanative.unsafe.alloc[GTypePluginClass](1)
  def apply(base_iface : GTypeInterface, use_plugin : GTypePluginUse, unuse_plugin : GTypePluginUnuse, complete_type_info : GTypePluginCompleteTypeInfo, complete_interface_info : GTypePluginCompleteInterfaceInfo)(using Zone): Ptr[GTypePluginClass] = 
    val ____ptr = apply()
    (!____ptr).base_iface = base_iface
    (!____ptr).use_plugin = use_plugin
    (!____ptr).unuse_plugin = unuse_plugin
    (!____ptr).complete_type_info = complete_type_info
    (!____ptr).complete_interface_info = complete_interface_info
    ____ptr
  extension (struct: GTypePluginClass)
    def base_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def base_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def use_plugin: GTypePluginUse = !struct.at(16).asInstanceOf[Ptr[GTypePluginUse]]
    def use_plugin_=(value: GTypePluginUse): Unit = !struct.at(16).asInstanceOf[Ptr[GTypePluginUse]] = value
    def unuse_plugin: GTypePluginUnuse = !struct.at(24).asInstanceOf[Ptr[GTypePluginUnuse]]
    def unuse_plugin_=(value: GTypePluginUnuse): Unit = !struct.at(24).asInstanceOf[Ptr[GTypePluginUnuse]] = value
    def complete_type_info: GTypePluginCompleteTypeInfo = !struct.at(32).asInstanceOf[Ptr[GTypePluginCompleteTypeInfo]]
    def complete_type_info_=(value: GTypePluginCompleteTypeInfo): Unit = !struct.at(32).asInstanceOf[Ptr[GTypePluginCompleteTypeInfo]] = value
    def complete_interface_info: GTypePluginCompleteInterfaceInfo = !struct.at(40).asInstanceOf[Ptr[GTypePluginCompleteInterfaceInfo]]
    def complete_interface_info_=(value: GTypePluginCompleteInterfaceInfo): Unit = !struct.at(40).asInstanceOf[Ptr[GTypePluginCompleteInterfaceInfo]] = value

/**
 * GTypeQuery: : the #GType value of the type _name: the name of the type _size: the size of the instance structure

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
*/
opaque type GTypeQuery = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GTypeQuery:
  given _tag: Tag[GTypeQuery] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GTypeQuery] = scala.scalanative.unsafe.alloc[GTypeQuery](1)
  def apply(`type` : GType, type_name : Ptr[gchar], class_size : guint, instance_size : guint)(using Zone): Ptr[GTypeQuery] = 
    val ____ptr = apply()
    (!____ptr).`type` = `type`
    (!____ptr).type_name = type_name
    (!____ptr).class_size = class_size
    (!____ptr).instance_size = instance_size
    ____ptr
  extension (struct: GTypeQuery)
    def `type`: GType = !struct.at(0).asInstanceOf[Ptr[GType]]
    def type_=(value: GType): Unit = !struct.at(0).asInstanceOf[Ptr[GType]] = value
    def type_name: Ptr[gchar] = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]]
    def type_name_=(value: Ptr[gchar]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def class_size: guint = !struct.at(16).asInstanceOf[Ptr[guint]]
    def class_size_=(value: guint): Unit = !struct.at(16).asInstanceOf[Ptr[guint]] = value
    def instance_size: guint = !struct.at(20).asInstanceOf[Ptr[guint]]
    def instance_size_=(value: guint): Unit = !struct.at(20).asInstanceOf[Ptr[guint]] = value

/**
 * GTypeValueTable: _init: Default initialize contents by poking values directly into the value->data array. The data array of the #GValue passed into this function was zero-filled with `memset()`, so no care has to be taken to free any old contents. E.g. for the implementation of a string value that may never be %NULL, the implementation might look like: |[<!-- language="C" --> value->data[0].v_pointer = g_strdup (""); ]| _free: Free any old contents that might be left in the data array of the passed in . No resources may remain allocated through the #GValue contents after this function returns. E.g. for our above string type: |[<!-- language="C" --> // only free strings without a specific flag for static storage if (!(value->data[1].v_uint & G_VALUE_NOCOPY_CONTENTS)) g_free (value->data[0].v_pointer); ]| _copy:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
*/
opaque type GTypeValueTable = CArray[CChar, Nat.Digit2[Nat._6, Nat._4]]
object GTypeValueTable:
  given _tag: Tag[GTypeValueTable] = Tag.CArray[CChar, Nat.Digit2[Nat._6, Nat._4]](Tag.Byte, Tag.Digit2[Nat._6, Nat._4](Tag.Nat6, Tag.Nat4))
  def apply()(using Zone): Ptr[GTypeValueTable] = scala.scalanative.unsafe.alloc[GTypeValueTable](1)
  def apply(value_init : CFuncPtr1[Ptr[GValue], Unit], value_free : CFuncPtr1[Ptr[GValue], Unit], value_copy : CFuncPtr2[Ptr[GValue], Ptr[GValue], Unit], value_peek_pointer : CFuncPtr1[Ptr[GValue], gpointer], collect_format : Ptr[gchar], collect_value : CFuncPtr4[Ptr[GValue], guint, Ptr[GTypeCValue], guint, Ptr[gchar]], lcopy_format : Ptr[gchar], lcopy_value : CFuncPtr4[Ptr[GValue], guint, Ptr[GTypeCValue], guint, Ptr[gchar]])(using Zone): Ptr[GTypeValueTable] = 
    val ____ptr = apply()
    (!____ptr).value_init = value_init
    (!____ptr).value_free = value_free
    (!____ptr).value_copy = value_copy
    (!____ptr).value_peek_pointer = value_peek_pointer
    (!____ptr).collect_format = collect_format
    (!____ptr).collect_value = collect_value
    (!____ptr).lcopy_format = lcopy_format
    (!____ptr).lcopy_value = lcopy_value
    ____ptr
  extension (struct: GTypeValueTable)
    def value_init: CFuncPtr1[Ptr[GValue], Unit] = !struct.at(0).asInstanceOf[Ptr[CFuncPtr1[Ptr[GValue], Unit]]]
    def value_init_=(value: CFuncPtr1[Ptr[GValue], Unit]): Unit = !struct.at(0).asInstanceOf[Ptr[CFuncPtr1[Ptr[GValue], Unit]]] = value
    def value_free: CFuncPtr1[Ptr[GValue], Unit] = !struct.at(8).asInstanceOf[Ptr[CFuncPtr1[Ptr[GValue], Unit]]]
    def value_free_=(value: CFuncPtr1[Ptr[GValue], Unit]): Unit = !struct.at(8).asInstanceOf[Ptr[CFuncPtr1[Ptr[GValue], Unit]]] = value
    def value_copy: CFuncPtr2[Ptr[GValue], Ptr[GValue], Unit] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr2[Ptr[GValue], Ptr[GValue], Unit]]]
    def value_copy_=(value: CFuncPtr2[Ptr[GValue], Ptr[GValue], Unit]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr2[Ptr[GValue], Ptr[GValue], Unit]]] = value
    def value_peek_pointer: CFuncPtr1[Ptr[GValue], gpointer] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GValue], gpointer]]]
    def value_peek_pointer_=(value: CFuncPtr1[Ptr[GValue], gpointer]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GValue], gpointer]]] = value
    def collect_format: Ptr[gchar] = !struct.at(32).asInstanceOf[Ptr[Ptr[gchar]]]
    def collect_format_=(value: Ptr[gchar]): Unit = !struct.at(32).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def collect_value: CFuncPtr4[Ptr[GValue], guint, Ptr[GTypeCValue], guint, Ptr[gchar]] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr4[Ptr[GValue], guint, Ptr[GTypeCValue], guint, Ptr[gchar]]]]
    def collect_value_=(value: CFuncPtr4[Ptr[GValue], guint, Ptr[GTypeCValue], guint, Ptr[gchar]]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr4[Ptr[GValue], guint, Ptr[GTypeCValue], guint, Ptr[gchar]]]] = value
    def lcopy_format: Ptr[gchar] = !struct.at(48).asInstanceOf[Ptr[Ptr[gchar]]]
    def lcopy_format_=(value: Ptr[gchar]): Unit = !struct.at(48).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def lcopy_value: CFuncPtr4[Ptr[GValue], guint, Ptr[GTypeCValue], guint, Ptr[gchar]] = !struct.at(56).asInstanceOf[Ptr[CFuncPtr4[Ptr[GValue], guint, Ptr[GTypeCValue], guint, Ptr[gchar]]]]
    def lcopy_value_=(value: CFuncPtr4[Ptr[GValue], guint, Ptr[GTypeCValue], guint, Ptr[gchar]]): Unit = !struct.at(56).asInstanceOf[Ptr[CFuncPtr4[Ptr[GValue], guint, Ptr[GTypeCValue], guint, Ptr[gchar]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GUnixCredentialsMessage = CStruct0
object GUnixCredentialsMessage:
  given _tag: Tag[GUnixCredentialsMessage] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GUnixFDList = CStruct0
object GUnixFDList:
  given _tag: Tag[GUnixFDList] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
*/
opaque type GUri = CStruct0
object GUri:
  given _tag: Tag[GUri] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
*/
opaque type GUriParamsIter = CArray[CChar, Nat.Digit3[Nat._2, Nat._8, Nat._0]]
object GUriParamsIter:
  given _tag: Tag[GUriParamsIter] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._8, Nat._0]](Tag.Byte, Tag.Digit3[Nat._2, Nat._8, Nat._0](Tag.Nat2, Tag.Nat8, Tag.Nat0))
  def apply()(using Zone): Ptr[GUriParamsIter] = scala.scalanative.unsafe.alloc[GUriParamsIter](1)
  def apply(dummy0 : gint, dummy1 : gpointer, dummy2 : gpointer, dummy3 : CArray[guint8, Nat.Digit3[Nat._2, Nat._5, Nat._6]])(using Zone): Ptr[GUriParamsIter] = 
    val ____ptr = apply()
    (!____ptr).dummy0 = dummy0
    (!____ptr).dummy1 = dummy1
    (!____ptr).dummy2 = dummy2
    (!____ptr).dummy3 = dummy3
    ____ptr
  extension (struct: GUriParamsIter)
    def dummy0: gint = !struct.at(0).asInstanceOf[Ptr[gint]]
    def dummy0_=(value: gint): Unit = !struct.at(0).asInstanceOf[Ptr[gint]] = value
    def dummy1: gpointer = !struct.at(8).asInstanceOf[Ptr[gpointer]]
    def dummy1_=(value: gpointer): Unit = !struct.at(8).asInstanceOf[Ptr[gpointer]] = value
    def dummy2: gpointer = !struct.at(16).asInstanceOf[Ptr[gpointer]]
    def dummy2_=(value: gpointer): Unit = !struct.at(16).asInstanceOf[Ptr[gpointer]] = value
    def dummy3: CArray[guint8, Nat.Digit3[Nat._2, Nat._5, Nat._6]] = !struct.at(24).asInstanceOf[Ptr[CArray[guint8, Nat.Digit3[Nat._2, Nat._5, Nat._6]]]]
    def dummy3_=(value: CArray[guint8, Nat.Digit3[Nat._2, Nat._5, Nat._6]]): Unit = !struct.at(24).asInstanceOf[Ptr[CArray[guint8, Nat.Digit3[Nat._2, Nat._5, Nat._6]]]] = value

/**
 * GValue:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gvalue.h
*/
opaque type GValue = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GValue:
  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvalue.h
  */
  opaque type Union0 = CArray[Byte, Nat._8]
  object Union0:
    given _tag: Tag[Union0] = Tag.CArray[CChar, Nat._8](Tag.Byte, Tag.Nat8)
    def apply()(using Zone): Ptr[Union0] = 
      val ___ptr = alloc[Union0](1)
      ___ptr
    @scala.annotation.targetName("apply_v_int")
    def apply(v_int: gint)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[gint]].update(0, v_int)
      ___ptr
    @scala.annotation.targetName("apply_v_uint")
    def apply(v_uint: guint)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[guint]].update(0, v_uint)
      ___ptr
    @scala.annotation.targetName("apply_v_long")
    def apply(v_long: glong)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[glong]].update(0, v_long)
      ___ptr
    @scala.annotation.targetName("apply_v_ulong")
    def apply(v_ulong: gulong)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[gulong]].update(0, v_ulong)
      ___ptr
    @scala.annotation.targetName("apply_v_int64")
    def apply(v_int64: gint64)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[gint64]].update(0, v_int64)
      ___ptr
    @scala.annotation.targetName("apply_v_uint64")
    def apply(v_uint64: guint64)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[guint64]].update(0, v_uint64)
      ___ptr
    @scala.annotation.targetName("apply_v_float")
    def apply(v_float: gfloat)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[gfloat]].update(0, v_float)
      ___ptr
    @scala.annotation.targetName("apply_v_double")
    def apply(v_double: gdouble)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[gdouble]].update(0, v_double)
      ___ptr
    @scala.annotation.targetName("apply_v_pointer")
    def apply(v_pointer: gpointer)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[gpointer]].update(0, v_pointer)
      ___ptr
    extension (struct: Union0)
      def v_int : gint = !struct.at(0).asInstanceOf[Ptr[gint]]
      def v_int_=(value: gint): Unit = !struct.at(0).asInstanceOf[Ptr[gint]] = value
      def v_uint : guint = !struct.at(0).asInstanceOf[Ptr[guint]]
      def v_uint_=(value: guint): Unit = !struct.at(0).asInstanceOf[Ptr[guint]] = value
      def v_long : glong = !struct.at(0).asInstanceOf[Ptr[glong]]
      def v_long_=(value: glong): Unit = !struct.at(0).asInstanceOf[Ptr[glong]] = value
      def v_ulong : gulong = !struct.at(0).asInstanceOf[Ptr[gulong]]
      def v_ulong_=(value: gulong): Unit = !struct.at(0).asInstanceOf[Ptr[gulong]] = value
      def v_int64 : gint64 = !struct.at(0).asInstanceOf[Ptr[gint64]]
      def v_int64_=(value: gint64): Unit = !struct.at(0).asInstanceOf[Ptr[gint64]] = value
      def v_uint64 : guint64 = !struct.at(0).asInstanceOf[Ptr[guint64]]
      def v_uint64_=(value: guint64): Unit = !struct.at(0).asInstanceOf[Ptr[guint64]] = value
      def v_float : gfloat = !struct.at(0).asInstanceOf[Ptr[gfloat]]
      def v_float_=(value: gfloat): Unit = !struct.at(0).asInstanceOf[Ptr[gfloat]] = value
      def v_double : gdouble = !struct.at(0).asInstanceOf[Ptr[gdouble]]
      def v_double_=(value: gdouble): Unit = !struct.at(0).asInstanceOf[Ptr[gdouble]] = value
      def v_pointer : gpointer = !struct.at(0).asInstanceOf[Ptr[gpointer]]
      def v_pointer_=(value: gpointer): Unit = !struct.at(0).asInstanceOf[Ptr[gpointer]] = value
  given _tag: Tag[GValue] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GValue] = scala.scalanative.unsafe.alloc[GValue](1)
  def apply(g_type : GType, data : CArray[GValue.Union0, Nat._2])(using Zone): Ptr[GValue] = 
    val ____ptr = apply()
    (!____ptr).g_type = g_type
    (!____ptr).data = data
    ____ptr
  extension (struct: GValue)
    def g_type: GType = !struct.at(0).asInstanceOf[Ptr[GType]]
    def g_type_=(value: GType): Unit = !struct.at(0).asInstanceOf[Ptr[GType]] = value
    def data: CArray[GValue.Union0, Nat._2] = !struct.at(8).asInstanceOf[Ptr[CArray[GValue.Union0, Nat._2]]]
    def data_=(value: CArray[GValue.Union0, Nat._2]): Unit = !struct.at(8).asInstanceOf[Ptr[CArray[GValue.Union0, Nat._2]]] = value

/**
 * GValueArray: _values: number of values contained in the array : array of values

 * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluearray.h
*/
opaque type GValueArray = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GValueArray:
  given _tag: Tag[GValueArray] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GValueArray] = scala.scalanative.unsafe.alloc[GValueArray](1)
  def apply(n_values : guint, values : Ptr[GValue], n_prealloced : guint)(using Zone): Ptr[GValueArray] = 
    val ____ptr = apply()
    (!____ptr).n_values = n_values
    (!____ptr).values = values
    (!____ptr).n_prealloced = n_prealloced
    ____ptr
  extension (struct: GValueArray)
    def n_values: guint = !struct.at(0).asInstanceOf[Ptr[guint]]
    def n_values_=(value: guint): Unit = !struct.at(0).asInstanceOf[Ptr[guint]] = value
    def values: Ptr[GValue] = !struct.at(8).asInstanceOf[Ptr[Ptr[GValue]]]
    def values_=(value: Ptr[GValue]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[GValue]]] = value
    def n_prealloced: guint = !struct.at(16).asInstanceOf[Ptr[guint]]
    def n_prealloced_=(value: guint): Unit = !struct.at(16).asInstanceOf[Ptr[guint]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
*/
opaque type GVariant = CStruct0
object GVariant:
  given _tag: Tag[GVariant] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
*/
opaque type GVariantBuilder = CArray[CChar, Nat.Digit3[Nat._1, Nat._2, Nat._8]]
object GVariantBuilder:
  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  opaque type Union0 = CArray[Byte, Nat.Digit3[Nat._1, Nat._2, Nat._8]]
  object Union0:
    /**
     * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
    */
    opaque type Struct0 = CStruct3[gsize, Ptr[GVariantType], CArray[gsize, Nat.Digit2[Nat._1, Nat._4]]]
    object Struct0:
      given _tag: Tag[Struct0] = Tag.materializeCStruct3Tag[gsize, Ptr[GVariantType], CArray[gsize, Nat.Digit2[Nat._1, Nat._4]]]
      def apply()(using Zone): Ptr[Struct0] = scala.scalanative.unsafe.alloc[Struct0](1)
      def apply(partial_magic : gsize, `type` : Ptr[GVariantType], y : CArray[gsize, Nat.Digit2[Nat._1, Nat._4]])(using Zone): Ptr[Struct0] = 
        val ____ptr = apply()
        (!____ptr).partial_magic = partial_magic
        (!____ptr).`type` = `type`
        (!____ptr).y = y
        ____ptr
      extension (struct: Struct0)
        def partial_magic : gsize = struct._1
        def partial_magic_=(value: gsize): Unit = !struct.at1 = value
        def `type` : Ptr[GVariantType] = struct._2
        def type_=(value: Ptr[GVariantType]): Unit = !struct.at2 = value
        def y : CArray[gsize, Nat.Digit2[Nat._1, Nat._4]] = struct._3
        def y_=(value: CArray[gsize, Nat.Digit2[Nat._1, Nat._4]]): Unit = !struct.at3 = value
    given _tag: Tag[Union0] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._2, Nat._8]](Tag.Byte, Tag.Digit3[Nat._1, Nat._2, Nat._8](Tag.Nat1, Tag.Nat2, Tag.Nat8))
    def apply()(using Zone): Ptr[Union0] = 
      val ___ptr = alloc[Union0](1)
      ___ptr
    @scala.annotation.targetName("apply_s")
    def apply(s: GVariantBuilder.Union0.Struct0)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[GVariantBuilder.Union0.Struct0]].update(0, s)
      ___ptr
    @scala.annotation.targetName("apply_x")
    def apply(x: CArray[gsize, Nat.Digit2[Nat._1, Nat._6]])(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]]].update(0, x)
      ___ptr
    extension (struct: Union0)
      def s : GVariantBuilder.Union0.Struct0 = !struct.at(0).asInstanceOf[Ptr[GVariantBuilder.Union0.Struct0]]
      def s_=(value: GVariantBuilder.Union0.Struct0): Unit = !struct.at(0).asInstanceOf[Ptr[GVariantBuilder.Union0.Struct0]] = value
      def x : CArray[gsize, Nat.Digit2[Nat._1, Nat._6]] = !struct.at(0).asInstanceOf[Ptr[CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]]]
      def x_=(value: CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]): Unit = !struct.at(0).asInstanceOf[Ptr[CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]]] = value
  given _tag: Tag[GVariantBuilder] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._2, Nat._8]](Tag.Byte, Tag.Digit3[Nat._1, Nat._2, Nat._8](Tag.Nat1, Tag.Nat2, Tag.Nat8))
  def apply()(using Zone): Ptr[GVariantBuilder] = scala.scalanative.unsafe.alloc[GVariantBuilder](1)
  def apply(u : GVariantBuilder.Union0)(using Zone): Ptr[GVariantBuilder] = 
    val ____ptr = apply()
    (!____ptr).u = u
    ____ptr
  extension (struct: GVariantBuilder)
    def u: GVariantBuilder.Union0 = !struct.at(0).asInstanceOf[Ptr[GVariantBuilder.Union0]]
    def u_=(value: GVariantBuilder.Union0): Unit = !struct.at(0).asInstanceOf[Ptr[GVariantBuilder.Union0]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
*/
opaque type GVariantDict = CArray[CChar, Nat.Digit3[Nat._1, Nat._2, Nat._8]]
object GVariantDict:
  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  opaque type Union0 = CArray[Byte, Nat.Digit3[Nat._1, Nat._2, Nat._8]]
  object Union0:
    /**
     * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
    */
    opaque type Struct0 = CStruct3[Ptr[GVariant], gsize, CArray[gsize, Nat.Digit2[Nat._1, Nat._4]]]
    object Struct0:
      given _tag: Tag[Struct0] = Tag.materializeCStruct3Tag[Ptr[GVariant], gsize, CArray[gsize, Nat.Digit2[Nat._1, Nat._4]]]
      def apply()(using Zone): Ptr[Struct0] = scala.scalanative.unsafe.alloc[Struct0](1)
      def apply(asv : Ptr[GVariant], partial_magic : gsize, y : CArray[gsize, Nat.Digit2[Nat._1, Nat._4]])(using Zone): Ptr[Struct0] = 
        val ____ptr = apply()
        (!____ptr).asv = asv
        (!____ptr).partial_magic = partial_magic
        (!____ptr).y = y
        ____ptr
      extension (struct: Struct0)
        def asv : Ptr[GVariant] = struct._1
        def asv_=(value: Ptr[GVariant]): Unit = !struct.at1 = value
        def partial_magic : gsize = struct._2
        def partial_magic_=(value: gsize): Unit = !struct.at2 = value
        def y : CArray[gsize, Nat.Digit2[Nat._1, Nat._4]] = struct._3
        def y_=(value: CArray[gsize, Nat.Digit2[Nat._1, Nat._4]]): Unit = !struct.at3 = value
    given _tag: Tag[Union0] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._2, Nat._8]](Tag.Byte, Tag.Digit3[Nat._1, Nat._2, Nat._8](Tag.Nat1, Tag.Nat2, Tag.Nat8))
    def apply()(using Zone): Ptr[Union0] = 
      val ___ptr = alloc[Union0](1)
      ___ptr
    @scala.annotation.targetName("apply_s")
    def apply(s: GVariantDict.Union0.Struct0)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[GVariantDict.Union0.Struct0]].update(0, s)
      ___ptr
    @scala.annotation.targetName("apply_x")
    def apply(x: CArray[gsize, Nat.Digit2[Nat._1, Nat._6]])(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]]].update(0, x)
      ___ptr
    extension (struct: Union0)
      def s : GVariantDict.Union0.Struct0 = !struct.at(0).asInstanceOf[Ptr[GVariantDict.Union0.Struct0]]
      def s_=(value: GVariantDict.Union0.Struct0): Unit = !struct.at(0).asInstanceOf[Ptr[GVariantDict.Union0.Struct0]] = value
      def x : CArray[gsize, Nat.Digit2[Nat._1, Nat._6]] = !struct.at(0).asInstanceOf[Ptr[CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]]]
      def x_=(value: CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]): Unit = !struct.at(0).asInstanceOf[Ptr[CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]]] = value
  given _tag: Tag[GVariantDict] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._2, Nat._8]](Tag.Byte, Tag.Digit3[Nat._1, Nat._2, Nat._8](Tag.Nat1, Tag.Nat2, Tag.Nat8))
  def apply()(using Zone): Ptr[GVariantDict] = scala.scalanative.unsafe.alloc[GVariantDict](1)
  def apply(u : GVariantDict.Union0)(using Zone): Ptr[GVariantDict] = 
    val ____ptr = apply()
    (!____ptr).u = u
    ____ptr
  extension (struct: GVariantDict)
    def u: GVariantDict.Union0 = !struct.at(0).asInstanceOf[Ptr[GVariantDict.Union0]]
    def u_=(value: GVariantDict.Union0): Unit = !struct.at(0).asInstanceOf[Ptr[GVariantDict.Union0]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
*/
opaque type GVariantIter = CArray[CChar, Nat.Digit3[Nat._1, Nat._2, Nat._8]]
object GVariantIter:
  given _tag: Tag[GVariantIter] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._2, Nat._8]](Tag.Byte, Tag.Digit3[Nat._1, Nat._2, Nat._8](Tag.Nat1, Tag.Nat2, Tag.Nat8))
  def apply()(using Zone): Ptr[GVariantIter] = scala.scalanative.unsafe.alloc[GVariantIter](1)
  def apply(x : CArray[gsize, Nat.Digit2[Nat._1, Nat._6]])(using Zone): Ptr[GVariantIter] = 
    val ____ptr = apply()
    (!____ptr).x = x
    ____ptr
  extension (struct: GVariantIter)
    def x: CArray[gsize, Nat.Digit2[Nat._1, Nat._6]] = !struct.at(0).asInstanceOf[Ptr[CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]]]
    def x_=(value: CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]): Unit = !struct.at(0).asInstanceOf[Ptr[CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
*/
opaque type GVariantType = CStruct0
object GVariantType:
  given _tag: Tag[GVariantType] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gvfs.h
*/
opaque type GVfs = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GVfs:
  given _tag: Tag[GVfs] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GVfs] = scala.scalanative.unsafe.alloc[GVfs](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[GVfs] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: GVfs)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gvfs.h
*/
opaque type GVfsClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._7, Nat._2]]
object GVfsClass:
  given _tag: Tag[GVfsClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._7, Nat._2]](Tag.Byte, Tag.Digit3[Nat._2, Nat._7, Nat._2](Tag.Nat2, Tag.Nat7, Tag.Nat2))
  def apply()(using Zone): Ptr[GVfsClass] = scala.scalanative.unsafe.alloc[GVfsClass](1)
  def apply(parent_class : GObjectClass, is_active : CFuncPtr1[Ptr[GVfs], gboolean], get_file_for_path : CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]], get_file_for_uri : CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]], get_supported_uri_schemes : CFuncPtr1[Ptr[GVfs], Ptr[Ptr[gchar]]], parse_name : CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]], local_file_add_info : CFuncPtr8[Ptr[GVfs], CString, guint64, Ptr[GFileAttributeMatcher], Ptr[GFileInfo], Ptr[GCancellable], Ptr[gpointer], Ptr[GDestroyNotify], Unit], add_writable_namespaces : CFuncPtr2[Ptr[GVfs], Ptr[GFileAttributeInfoList], Unit], local_file_set_attributes : CFuncPtr6[Ptr[GVfs], CString, Ptr[GFileInfo], GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], local_file_removed : CFuncPtr2[Ptr[GVfs], CString, Unit], local_file_moved : CFuncPtr3[Ptr[GVfs], CString, CString, Unit], deserialize_icon : CFuncPtr2[Ptr[GVfs], Ptr[GVariant], Ptr[GIcon]], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit])(using Zone): Ptr[GVfsClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).is_active = is_active
    (!____ptr).get_file_for_path = get_file_for_path
    (!____ptr).get_file_for_uri = get_file_for_uri
    (!____ptr).get_supported_uri_schemes = get_supported_uri_schemes
    (!____ptr).parse_name = parse_name
    (!____ptr).local_file_add_info = local_file_add_info
    (!____ptr).add_writable_namespaces = add_writable_namespaces
    (!____ptr).local_file_set_attributes = local_file_set_attributes
    (!____ptr).local_file_removed = local_file_removed
    (!____ptr).local_file_moved = local_file_moved
    (!____ptr).deserialize_icon = deserialize_icon
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    ____ptr
  extension (struct: GVfsClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def is_active: CFuncPtr1[Ptr[GVfs], gboolean] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVfs], gboolean]]]
    def is_active_=(value: CFuncPtr1[Ptr[GVfs], gboolean]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVfs], gboolean]]] = value
    def get_file_for_path: CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]]]]
    def get_file_for_path_=(value: CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]]]] = value
    def get_file_for_uri: CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]]]]
    def get_file_for_uri_=(value: CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]]]] = value
    def get_supported_uri_schemes: CFuncPtr1[Ptr[GVfs], Ptr[Ptr[gchar]]] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVfs], Ptr[Ptr[gchar]]]]]
    def get_supported_uri_schemes_=(value: CFuncPtr1[Ptr[GVfs], Ptr[Ptr[gchar]]]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVfs], Ptr[Ptr[gchar]]]]] = value
    def parse_name: CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]]]]
    def parse_name_=(value: CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]]]] = value
    def local_file_add_info: CFuncPtr8[Ptr[GVfs], CString, guint64, Ptr[GFileAttributeMatcher], Ptr[GFileInfo], Ptr[GCancellable], Ptr[gpointer], Ptr[GDestroyNotify], Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr8[Ptr[GVfs], CString, guint64, Ptr[GFileAttributeMatcher], Ptr[GFileInfo], Ptr[GCancellable], Ptr[gpointer], Ptr[GDestroyNotify], Unit]]]
    def local_file_add_info_=(value: CFuncPtr8[Ptr[GVfs], CString, guint64, Ptr[GFileAttributeMatcher], Ptr[GFileInfo], Ptr[GCancellable], Ptr[gpointer], Ptr[GDestroyNotify], Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr8[Ptr[GVfs], CString, guint64, Ptr[GFileAttributeMatcher], Ptr[GFileInfo], Ptr[GCancellable], Ptr[gpointer], Ptr[GDestroyNotify], Unit]]] = value
    def add_writable_namespaces: CFuncPtr2[Ptr[GVfs], Ptr[GFileAttributeInfoList], Unit] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVfs], Ptr[GFileAttributeInfoList], Unit]]]
    def add_writable_namespaces_=(value: CFuncPtr2[Ptr[GVfs], Ptr[GFileAttributeInfoList], Unit]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVfs], Ptr[GFileAttributeInfoList], Unit]]] = value
    def local_file_set_attributes: CFuncPtr6[Ptr[GVfs], CString, Ptr[GFileInfo], GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr6[Ptr[GVfs], CString, Ptr[GFileInfo], GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def local_file_set_attributes_=(value: CFuncPtr6[Ptr[GVfs], CString, Ptr[GFileInfo], GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr6[Ptr[GVfs], CString, Ptr[GFileInfo], GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def local_file_removed: CFuncPtr2[Ptr[GVfs], CString, Unit] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVfs], CString, Unit]]]
    def local_file_removed_=(value: CFuncPtr2[Ptr[GVfs], CString, Unit]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVfs], CString, Unit]]] = value
    def local_file_moved: CFuncPtr3[Ptr[GVfs], CString, CString, Unit] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr3[Ptr[GVfs], CString, CString, Unit]]]
    def local_file_moved_=(value: CFuncPtr3[Ptr[GVfs], CString, CString, Unit]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr3[Ptr[GVfs], CString, CString, Unit]]] = value
    def deserialize_icon: CFuncPtr2[Ptr[GVfs], Ptr[GVariant], Ptr[GIcon]] = !struct.at(216).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVfs], Ptr[GVariant], Ptr[GIcon]]]]
    def deserialize_icon_=(value: CFuncPtr2[Ptr[GVfs], Ptr[GVariant], Ptr[GIcon]]): Unit = !struct.at(216).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVfs], Ptr[GVariant], Ptr[GIcon]]]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(224).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(224).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(232).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(232).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(240).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(240).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(248).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(248).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(256).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(256).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved6: CFuncPtr0[Unit] = !struct.at(264).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at(264).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GVolume = CStruct0
object GVolume:
  given _tag: Tag[GVolume] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
*/
opaque type GVolumeIface = CArray[CChar, Nat.Digit3[Nat._1, Nat._8, Nat._4]]
object GVolumeIface:
  given _tag: Tag[GVolumeIface] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._8, Nat._4]](Tag.Byte, Tag.Digit3[Nat._1, Nat._8, Nat._4](Tag.Nat1, Tag.Nat8, Tag.Nat4))
  def apply()(using Zone): Ptr[GVolumeIface] = scala.scalanative.unsafe.alloc[GVolumeIface](1)
  def apply(g_iface : GTypeInterface, changed : CFuncPtr1[Ptr[GVolume], Unit], removed : CFuncPtr1[Ptr[GVolume], Unit], get_name : CFuncPtr1[Ptr[GVolume], CString], get_icon : CFuncPtr1[Ptr[GVolume], Ptr[GIcon]], get_uuid : CFuncPtr1[Ptr[GVolume], CString], get_drive : CFuncPtr1[Ptr[GVolume], Ptr[GDrive]], get_mount : CFuncPtr1[Ptr[GVolume], Ptr[GMount]], can_mount : CFuncPtr1[Ptr[GVolume], gboolean], can_eject : CFuncPtr1[Ptr[GVolume], gboolean], mount_fn : CFuncPtr6[Ptr[GVolume], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], mount_finish : CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], eject : CFuncPtr5[Ptr[GVolume], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], eject_finish : CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], get_identifier : CFuncPtr2[Ptr[GVolume], CString, CString], enumerate_identifiers : CFuncPtr1[Ptr[GVolume], Ptr[CString]], should_automount : CFuncPtr1[Ptr[GVolume], gboolean], get_activation_root : CFuncPtr1[Ptr[GVolume], Ptr[GFile]], eject_with_operation : CFuncPtr6[Ptr[GVolume], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], eject_with_operation_finish : CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], get_sort_key : CFuncPtr1[Ptr[GVolume], Ptr[gchar]], get_symbolic_icon : CFuncPtr1[Ptr[GVolume], Ptr[GIcon]])(using Zone): Ptr[GVolumeIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).changed = changed
    (!____ptr).removed = removed
    (!____ptr).get_name = get_name
    (!____ptr).get_icon = get_icon
    (!____ptr).get_uuid = get_uuid
    (!____ptr).get_drive = get_drive
    (!____ptr).get_mount = get_mount
    (!____ptr).can_mount = can_mount
    (!____ptr).can_eject = can_eject
    (!____ptr).mount_fn = mount_fn
    (!____ptr).mount_finish = mount_finish
    (!____ptr).eject = eject
    (!____ptr).eject_finish = eject_finish
    (!____ptr).get_identifier = get_identifier
    (!____ptr).enumerate_identifiers = enumerate_identifiers
    (!____ptr).should_automount = should_automount
    (!____ptr).get_activation_root = get_activation_root
    (!____ptr).eject_with_operation = eject_with_operation
    (!____ptr).eject_with_operation_finish = eject_with_operation_finish
    (!____ptr).get_sort_key = get_sort_key
    (!____ptr).get_symbolic_icon = get_symbolic_icon
    ____ptr
  extension (struct: GVolumeIface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def changed: CFuncPtr1[Ptr[GVolume], Unit] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], Unit]]]
    def changed_=(value: CFuncPtr1[Ptr[GVolume], Unit]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], Unit]]] = value
    def removed: CFuncPtr1[Ptr[GVolume], Unit] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], Unit]]]
    def removed_=(value: CFuncPtr1[Ptr[GVolume], Unit]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], Unit]]] = value
    def get_name: CFuncPtr1[Ptr[GVolume], CString] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], CString]]]
    def get_name_=(value: CFuncPtr1[Ptr[GVolume], CString]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], CString]]] = value
    def get_icon: CFuncPtr1[Ptr[GVolume], Ptr[GIcon]] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], Ptr[GIcon]]]]
    def get_icon_=(value: CFuncPtr1[Ptr[GVolume], Ptr[GIcon]]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], Ptr[GIcon]]]] = value
    def get_uuid: CFuncPtr1[Ptr[GVolume], CString] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], CString]]]
    def get_uuid_=(value: CFuncPtr1[Ptr[GVolume], CString]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], CString]]] = value
    def get_drive: CFuncPtr1[Ptr[GVolume], Ptr[GDrive]] = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], Ptr[GDrive]]]]
    def get_drive_=(value: CFuncPtr1[Ptr[GVolume], Ptr[GDrive]]): Unit = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], Ptr[GDrive]]]] = value
    def get_mount: CFuncPtr1[Ptr[GVolume], Ptr[GMount]] = !struct.at(64).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], Ptr[GMount]]]]
    def get_mount_=(value: CFuncPtr1[Ptr[GVolume], Ptr[GMount]]): Unit = !struct.at(64).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], Ptr[GMount]]]] = value
    def can_mount: CFuncPtr1[Ptr[GVolume], gboolean] = !struct.at(72).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], gboolean]]]
    def can_mount_=(value: CFuncPtr1[Ptr[GVolume], gboolean]): Unit = !struct.at(72).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], gboolean]]] = value
    def can_eject: CFuncPtr1[Ptr[GVolume], gboolean] = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], gboolean]]]
    def can_eject_=(value: CFuncPtr1[Ptr[GVolume], gboolean]): Unit = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], gboolean]]] = value
    def mount_fn: CFuncPtr6[Ptr[GVolume], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(88).asInstanceOf[Ptr[CFuncPtr6[Ptr[GVolume], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def mount_fn_=(value: CFuncPtr6[Ptr[GVolume], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(88).asInstanceOf[Ptr[CFuncPtr6[Ptr[GVolume], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def mount_finish: CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(96).asInstanceOf[Ptr[CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def mount_finish_=(value: CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(96).asInstanceOf[Ptr[CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def eject: CFuncPtr5[Ptr[GVolume], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(104).asInstanceOf[Ptr[CFuncPtr5[Ptr[GVolume], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def eject_=(value: CFuncPtr5[Ptr[GVolume], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(104).asInstanceOf[Ptr[CFuncPtr5[Ptr[GVolume], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def eject_finish: CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(112).asInstanceOf[Ptr[CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def eject_finish_=(value: CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(112).asInstanceOf[Ptr[CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def get_identifier: CFuncPtr2[Ptr[GVolume], CString, CString] = !struct.at(120).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolume], CString, CString]]]
    def get_identifier_=(value: CFuncPtr2[Ptr[GVolume], CString, CString]): Unit = !struct.at(120).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolume], CString, CString]]] = value
    def enumerate_identifiers: CFuncPtr1[Ptr[GVolume], Ptr[CString]] = !struct.at(128).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], Ptr[CString]]]]
    def enumerate_identifiers_=(value: CFuncPtr1[Ptr[GVolume], Ptr[CString]]): Unit = !struct.at(128).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], Ptr[CString]]]] = value
    def should_automount: CFuncPtr1[Ptr[GVolume], gboolean] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], gboolean]]]
    def should_automount_=(value: CFuncPtr1[Ptr[GVolume], gboolean]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], gboolean]]] = value
    def get_activation_root: CFuncPtr1[Ptr[GVolume], Ptr[GFile]] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], Ptr[GFile]]]]
    def get_activation_root_=(value: CFuncPtr1[Ptr[GVolume], Ptr[GFile]]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], Ptr[GFile]]]] = value
    def eject_with_operation: CFuncPtr6[Ptr[GVolume], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr6[Ptr[GVolume], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def eject_with_operation_=(value: CFuncPtr6[Ptr[GVolume], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr6[Ptr[GVolume], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def eject_with_operation_finish: CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def eject_with_operation_finish_=(value: CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def get_sort_key: CFuncPtr1[Ptr[GVolume], Ptr[gchar]] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], Ptr[gchar]]]]
    def get_sort_key_=(value: CFuncPtr1[Ptr[GVolume], Ptr[gchar]]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], Ptr[gchar]]]] = value
    def get_symbolic_icon: CFuncPtr1[Ptr[GVolume], Ptr[GIcon]] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], Ptr[GIcon]]]]
    def get_symbolic_icon_=(value: CFuncPtr1[Ptr[GVolume], Ptr[GIcon]]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolume], Ptr[GIcon]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gvolumemonitor.h
*/
opaque type GVolumeMonitor = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GVolumeMonitor:
  given _tag: Tag[GVolumeMonitor] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GVolumeMonitor] = scala.scalanative.unsafe.alloc[GVolumeMonitor](1)
  def apply(parent_instance : GObject, priv : gpointer)(using Zone): Ptr[GVolumeMonitor] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GVolumeMonitor)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: gpointer = !struct.at(24).asInstanceOf[Ptr[gpointer]]
    def priv_=(value: gpointer): Unit = !struct.at(24).asInstanceOf[Ptr[gpointer]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gvolumemonitor.h
*/
opaque type GVolumeMonitorClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._3, Nat._6]]
object GVolumeMonitorClass:
  given _tag: Tag[GVolumeMonitorClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._3, Nat._3, Nat._6](Tag.Nat3, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[GVolumeMonitorClass] = scala.scalanative.unsafe.alloc[GVolumeMonitorClass](1)
  def apply(parent_class : GObjectClass, volume_added : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit], volume_removed : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit], volume_changed : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit], mount_added : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit], mount_removed : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit], mount_pre_unmount : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit], mount_changed : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit], drive_connected : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit], drive_disconnected : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit], drive_changed : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit], is_supported : CFuncPtr0[gboolean], get_connected_drives : CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]], get_volumes : CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]], get_mounts : CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]], get_volume_for_uuid : CFuncPtr2[Ptr[GVolumeMonitor], CString, Ptr[GVolume]], get_mount_for_uuid : CFuncPtr2[Ptr[GVolumeMonitor], CString, Ptr[GMount]], adopt_orphan_mount : CFuncPtr2[Ptr[GMount], Ptr[GVolumeMonitor], Ptr[GVolume]], drive_eject_button : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit], drive_stop_button : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit])(using Zone): Ptr[GVolumeMonitorClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).volume_added = volume_added
    (!____ptr).volume_removed = volume_removed
    (!____ptr).volume_changed = volume_changed
    (!____ptr).mount_added = mount_added
    (!____ptr).mount_removed = mount_removed
    (!____ptr).mount_pre_unmount = mount_pre_unmount
    (!____ptr).mount_changed = mount_changed
    (!____ptr).drive_connected = drive_connected
    (!____ptr).drive_disconnected = drive_disconnected
    (!____ptr).drive_changed = drive_changed
    (!____ptr).is_supported = is_supported
    (!____ptr).get_connected_drives = get_connected_drives
    (!____ptr).get_volumes = get_volumes
    (!____ptr).get_mounts = get_mounts
    (!____ptr).get_volume_for_uuid = get_volume_for_uuid
    (!____ptr).get_mount_for_uuid = get_mount_for_uuid
    (!____ptr).adopt_orphan_mount = adopt_orphan_mount
    (!____ptr).drive_eject_button = drive_eject_button
    (!____ptr).drive_stop_button = drive_stop_button
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    ____ptr
  extension (struct: GVolumeMonitorClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def volume_added: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit]]]
    def volume_added_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit]]] = value
    def volume_removed: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit]]]
    def volume_removed_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit]]] = value
    def volume_changed: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit]]]
    def volume_changed_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit]]] = value
    def mount_added: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]]]
    def mount_added_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]]] = value
    def mount_removed: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]]]
    def mount_removed_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]]] = value
    def mount_pre_unmount: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]]]
    def mount_pre_unmount_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]]] = value
    def mount_changed: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]]]
    def mount_changed_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]]] = value
    def drive_connected: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]]]
    def drive_connected_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]]] = value
    def drive_disconnected: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]]]
    def drive_disconnected_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]]] = value
    def drive_changed: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]]]
    def drive_changed_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]]] = value
    def is_supported: CFuncPtr0[gboolean] = !struct.at(216).asInstanceOf[Ptr[CFuncPtr0[gboolean]]]
    def is_supported_=(value: CFuncPtr0[gboolean]): Unit = !struct.at(216).asInstanceOf[Ptr[CFuncPtr0[gboolean]]] = value
    def get_connected_drives: CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]] = !struct.at(224).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]]]]
    def get_connected_drives_=(value: CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]]): Unit = !struct.at(224).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]]]] = value
    def get_volumes: CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]] = !struct.at(232).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]]]]
    def get_volumes_=(value: CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]]): Unit = !struct.at(232).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]]]] = value
    def get_mounts: CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]] = !struct.at(240).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]]]]
    def get_mounts_=(value: CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]]): Unit = !struct.at(240).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]]]] = value
    def get_volume_for_uuid: CFuncPtr2[Ptr[GVolumeMonitor], CString, Ptr[GVolume]] = !struct.at(248).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], CString, Ptr[GVolume]]]]
    def get_volume_for_uuid_=(value: CFuncPtr2[Ptr[GVolumeMonitor], CString, Ptr[GVolume]]): Unit = !struct.at(248).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], CString, Ptr[GVolume]]]] = value
    def get_mount_for_uuid: CFuncPtr2[Ptr[GVolumeMonitor], CString, Ptr[GMount]] = !struct.at(256).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], CString, Ptr[GMount]]]]
    def get_mount_for_uuid_=(value: CFuncPtr2[Ptr[GVolumeMonitor], CString, Ptr[GMount]]): Unit = !struct.at(256).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], CString, Ptr[GMount]]]] = value
    def adopt_orphan_mount: CFuncPtr2[Ptr[GMount], Ptr[GVolumeMonitor], Ptr[GVolume]] = !struct.at(264).asInstanceOf[Ptr[CFuncPtr2[Ptr[GMount], Ptr[GVolumeMonitor], Ptr[GVolume]]]]
    def adopt_orphan_mount_=(value: CFuncPtr2[Ptr[GMount], Ptr[GVolumeMonitor], Ptr[GVolume]]): Unit = !struct.at(264).asInstanceOf[Ptr[CFuncPtr2[Ptr[GMount], Ptr[GVolumeMonitor], Ptr[GVolume]]]] = value
    def drive_eject_button: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit] = !struct.at(272).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]]]
    def drive_eject_button_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]): Unit = !struct.at(272).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]]] = value
    def drive_stop_button: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit] = !struct.at(280).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]]]
    def drive_stop_button_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]): Unit = !struct.at(280).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(288).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(288).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(296).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(296).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(304).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(304).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(312).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(312).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(320).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(320).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved6: CFuncPtr0[Unit] = !struct.at(328).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at(328).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
*/
opaque type GWeakRef = CArray[CChar, Nat._8]
object GWeakRef:
  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  opaque type Union0 = CArray[Byte, Nat._8]
  object Union0:
    given _tag: Tag[Union0] = Tag.CArray[CChar, Nat._8](Tag.Byte, Tag.Nat8)
    def apply()(using Zone): Ptr[Union0] = 
      val ___ptr = alloc[Union0](1)
      ___ptr
    @scala.annotation.targetName("apply_p")
    def apply(p: gpointer)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[gpointer]].update(0, p)
      ___ptr
    extension (struct: Union0)
      def p : gpointer = !struct.at(0).asInstanceOf[Ptr[gpointer]]
      def p_=(value: gpointer): Unit = !struct.at(0).asInstanceOf[Ptr[gpointer]] = value
  given _tag: Tag[GWeakRef] = Tag.CArray[CChar, Nat._8](Tag.Byte, Tag.Nat8)
  def apply()(using Zone): Ptr[GWeakRef] = scala.scalanative.unsafe.alloc[GWeakRef](1)
  def apply(priv : GWeakRef.Union0)(using Zone): Ptr[GWeakRef] = 
    val ____ptr = apply()
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GWeakRef)
    def priv: GWeakRef.Union0 = !struct.at(0).asInstanceOf[Ptr[GWeakRef.Union0]]
    def priv_=(value: GWeakRef.Union0): Unit = !struct.at(0).asInstanceOf[Ptr[GWeakRef.Union0]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GZlibCompressor = CStruct0
object GZlibCompressor:
  given _tag: Tag[GZlibCompressor] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gzlibcompressor.h
*/
opaque type GZlibCompressorClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object GZlibCompressorClass:
  given _tag: Tag[GZlibCompressorClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[GZlibCompressorClass] = scala.scalanative.unsafe.alloc[GZlibCompressorClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[GZlibCompressorClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: GZlibCompressorClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type GZlibDecompressor = CStruct0
object GZlibDecompressor:
  given _tag: Tag[GZlibDecompressor] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gzlibdecompressor.h
*/
opaque type GZlibDecompressorClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object GZlibDecompressorClass:
  given _tag: Tag[GZlibDecompressorClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[GZlibDecompressorClass] = scala.scalanative.unsafe.alloc[GZlibDecompressorClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[GZlibDecompressorClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: GZlibDecompressorClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type GdkAppLaunchContext = CStruct0
object GdkAppLaunchContext:
  given _tag: Tag[GdkAppLaunchContext] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type GdkButtonEvent = CStruct0
object GdkButtonEvent:
  given _tag: Tag[GdkButtonEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type GdkCairoContext = CStruct0
object GdkCairoContext:
  given _tag: Tag[GdkCairoContext] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type GdkClipboard = CStruct0
object GdkClipboard:
  given _tag: Tag[GdkClipboard] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentdeserializer.h
*/
opaque type GdkContentDeserializer = CStruct0
object GdkContentDeserializer:
  given _tag: Tag[GdkContentDeserializer] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type GdkContentFormats = CStruct0
object GdkContentFormats:
  given _tag: Tag[GdkContentFormats] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
*/
opaque type GdkContentFormatsBuilder = CStruct0
object GdkContentFormatsBuilder:
  given _tag: Tag[GdkContentFormatsBuilder] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentprovider.h
*/
opaque type GdkContentProvider = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GdkContentProvider:
  given _tag: Tag[GdkContentProvider] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GdkContentProvider] = scala.scalanative.unsafe.alloc[GdkContentProvider](1)
  def apply(parent : GObject)(using Zone): Ptr[GdkContentProvider] = 
    val ____ptr = apply()
    (!____ptr).parent = parent
    ____ptr
  extension (struct: GdkContentProvider)
    def parent: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value

/**
 * GdkContentProviderClass: _changed: Signal class closure for `GdkContentProvider::content-changed`

 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentprovider.h
*/
opaque type GdkContentProviderClass = CArray[CChar, Nat.Digit3[Nat._2, Nat._6, Nat._4]]
object GdkContentProviderClass:
  given _tag: Tag[GdkContentProviderClass] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._6, Nat._4]](Tag.Byte, Tag.Digit3[Nat._2, Nat._6, Nat._4](Tag.Nat2, Tag.Nat6, Tag.Nat4))
  def apply()(using Zone): Ptr[GdkContentProviderClass] = scala.scalanative.unsafe.alloc[GdkContentProviderClass](1)
  def apply(parent_class : GObjectClass, content_changed : CFuncPtr1[Ptr[GdkContentProvider], Unit], attach_clipboard : CFuncPtr2[Ptr[GdkContentProvider], Ptr[GdkClipboard], Unit], detach_clipboard : CFuncPtr2[Ptr[GdkContentProvider], Ptr[GdkClipboard], Unit], ref_formats : CFuncPtr1[Ptr[GdkContentProvider], Ptr[GdkContentFormats]], ref_storable_formats : CFuncPtr1[Ptr[GdkContentProvider], Ptr[GdkContentFormats]], write_mime_type_async : CFuncPtr7[Ptr[GdkContentProvider], CString, Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], write_mime_type_finish : CFuncPtr3[Ptr[GdkContentProvider], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], get_value : CFuncPtr3[Ptr[GdkContentProvider], Ptr[GValue], Ptr[Ptr[GError]], gboolean], padding : CArray[gpointer, Nat._8])(using Zone): Ptr[GdkContentProviderClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).content_changed = content_changed
    (!____ptr).attach_clipboard = attach_clipboard
    (!____ptr).detach_clipboard = detach_clipboard
    (!____ptr).ref_formats = ref_formats
    (!____ptr).ref_storable_formats = ref_storable_formats
    (!____ptr).write_mime_type_async = write_mime_type_async
    (!____ptr).write_mime_type_finish = write_mime_type_finish
    (!____ptr).get_value = get_value
    (!____ptr).padding = padding
    ____ptr
  extension (struct: GdkContentProviderClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def content_changed: CFuncPtr1[Ptr[GdkContentProvider], Unit] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GdkContentProvider], Unit]]]
    def content_changed_=(value: CFuncPtr1[Ptr[GdkContentProvider], Unit]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GdkContentProvider], Unit]]] = value
    def attach_clipboard: CFuncPtr2[Ptr[GdkContentProvider], Ptr[GdkClipboard], Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr2[Ptr[GdkContentProvider], Ptr[GdkClipboard], Unit]]]
    def attach_clipboard_=(value: CFuncPtr2[Ptr[GdkContentProvider], Ptr[GdkClipboard], Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr2[Ptr[GdkContentProvider], Ptr[GdkClipboard], Unit]]] = value
    def detach_clipboard: CFuncPtr2[Ptr[GdkContentProvider], Ptr[GdkClipboard], Unit] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr2[Ptr[GdkContentProvider], Ptr[GdkClipboard], Unit]]]
    def detach_clipboard_=(value: CFuncPtr2[Ptr[GdkContentProvider], Ptr[GdkClipboard], Unit]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr2[Ptr[GdkContentProvider], Ptr[GdkClipboard], Unit]]] = value
    def ref_formats: CFuncPtr1[Ptr[GdkContentProvider], Ptr[GdkContentFormats]] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr1[Ptr[GdkContentProvider], Ptr[GdkContentFormats]]]]
    def ref_formats_=(value: CFuncPtr1[Ptr[GdkContentProvider], Ptr[GdkContentFormats]]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr1[Ptr[GdkContentProvider], Ptr[GdkContentFormats]]]] = value
    def ref_storable_formats: CFuncPtr1[Ptr[GdkContentProvider], Ptr[GdkContentFormats]] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr1[Ptr[GdkContentProvider], Ptr[GdkContentFormats]]]]
    def ref_storable_formats_=(value: CFuncPtr1[Ptr[GdkContentProvider], Ptr[GdkContentFormats]]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr1[Ptr[GdkContentProvider], Ptr[GdkContentFormats]]]] = value
    def write_mime_type_async: CFuncPtr7[Ptr[GdkContentProvider], CString, Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr7[Ptr[GdkContentProvider], CString, Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def write_mime_type_async_=(value: CFuncPtr7[Ptr[GdkContentProvider], CString, Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr7[Ptr[GdkContentProvider], CString, Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def write_mime_type_finish: CFuncPtr3[Ptr[GdkContentProvider], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr3[Ptr[GdkContentProvider], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def write_mime_type_finish_=(value: CFuncPtr3[Ptr[GdkContentProvider], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr3[Ptr[GdkContentProvider], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def get_value: CFuncPtr3[Ptr[GdkContentProvider], Ptr[GValue], Ptr[Ptr[GError]], gboolean] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr3[Ptr[GdkContentProvider], Ptr[GValue], Ptr[Ptr[GError]], gboolean]]]
    def get_value_=(value: CFuncPtr3[Ptr[GdkContentProvider], Ptr[GValue], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr3[Ptr[GdkContentProvider], Ptr[GValue], Ptr[Ptr[GError]], gboolean]]] = value
    def padding: CArray[gpointer, Nat._8] = !struct.at(200).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]]
    def padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at(200).asInstanceOf[Ptr[CArray[gpointer, Nat._8]]] = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentserializer.h
*/
opaque type GdkContentSerializer = CStruct0
object GdkContentSerializer:
  given _tag: Tag[GdkContentSerializer] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type GdkCrossingEvent = CStruct0
object GdkCrossingEvent:
  given _tag: Tag[GdkCrossingEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type GdkCursor = CStruct0
object GdkCursor:
  given _tag: Tag[GdkCursor] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type GdkDNDEvent = CStruct0
object GdkDNDEvent:
  given _tag: Tag[GdkDNDEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type GdkDeleteEvent = CStruct0
object GdkDeleteEvent:
  given _tag: Tag[GdkDeleteEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type GdkDevice = CStruct0
object GdkDevice:
  given _tag: Tag[GdkDevice] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevicepad.h
*/
opaque type GdkDevicePad = CStruct0
object GdkDevicePad:
  given _tag: Tag[GdkDevicePad] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevicepad.h
*/
opaque type GdkDevicePadInterface = CStruct0
object GdkDevicePadInterface:
  given _tag: Tag[GdkDevicePadInterface] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevicetool.h
*/
opaque type GdkDeviceTool = CStruct0
object GdkDeviceTool:
  given _tag: Tag[GdkDeviceTool] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type GdkDisplay = CStruct0
object GdkDisplay:
  given _tag: Tag[GdkDisplay] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type GdkDisplayManager = CStruct0
object GdkDisplayManager:
  given _tag: Tag[GdkDisplayManager] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type GdkDrag = CStruct0
object GdkDrag:
  given _tag: Tag[GdkDrag] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdragsurface.h
*/
opaque type GdkDragSurface = CStruct0
object GdkDragSurface:
  given _tag: Tag[GdkDragSurface] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdragsurface.h
*/
opaque type GdkDragSurfaceInterface = CStruct0
object GdkDragSurfaceInterface:
  given _tag: Tag[GdkDragSurfaceInterface] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type GdkDrawContext = CStruct0
object GdkDrawContext:
  given _tag: Tag[GdkDrawContext] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type GdkDrop = CStruct0
object GdkDrop:
  given _tag: Tag[GdkDrop] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type GdkEvent = CStruct0
object GdkEvent:
  given _tag: Tag[GdkEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type GdkEventSequence = CStruct0
object GdkEventSequence:
  given _tag: Tag[GdkEventSequence] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
*/
opaque type GdkFileList = CStruct0
object GdkFileList:
  given _tag: Tag[GdkFileList] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type GdkFocusEvent = CStruct0
object GdkFocusEvent:
  given _tag: Tag[GdkFocusEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframeclock.h
*/
opaque type GdkFrameClock = CStruct0
object GdkFrameClock:
  given _tag: Tag[GdkFrameClock] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframeclock.h
*/
opaque type GdkFrameClockClass = CStruct0
object GdkFrameClockClass:
  given _tag: Tag[GdkFrameClockClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframeclock.h
*/
opaque type GdkFrameClockPrivate = CStruct0
object GdkFrameClockPrivate:
  given _tag: Tag[GdkFrameClockPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframetimings.h
*/
opaque type GdkFrameTimings = CStruct0
object GdkFrameTimings:
  given _tag: Tag[GdkFrameTimings] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type GdkGLContext = CStruct0
object GdkGLContext:
  given _tag: Tag[GdkGLContext] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkgltexture.h
*/
opaque type GdkGLTexture = CStruct0
object GdkGLTexture:
  given _tag: Tag[GdkGLTexture] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkgltexture.h
*/
opaque type GdkGLTextureClass = CStruct0
object GdkGLTextureClass:
  given _tag: Tag[GdkGLTextureClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type GdkGrabBrokenEvent = CStruct0
object GdkGrabBrokenEvent:
  given _tag: Tag[GdkGrabBrokenEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type GdkKeyEvent = CStruct0
object GdkKeyEvent:
  given _tag: Tag[GdkKeyEvent] = Tag.materializeCStruct0Tag

/**
 * GdkKeymapKey: : the hardware keycode. This is an identifying number for a physical key. : indicates movement in a horizontal direction. Usually groups are used for two different languages. In group 0, a key might have two English characters, and in group 1 it might have two Hebrew characters. The Hebrew characters will be printed on the key next to the English characters. : indicates which symbol on the key will be used, in a vertical direction. So on a standard US keyboard, the key with the number “1” on it also has the exclamation point ("!") character on it. The level indicates whether to use the “1” or the “!” symbol. The letter keys are considered to have a lowercase letter at level 0, and an uppercase letter at level 1, though only the uppercase letter is printed.

 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type GdkKeymapKey = CArray[CChar, Nat.Digit2[Nat._1, Nat._2]]
object GdkKeymapKey:
  given _tag: Tag[GdkKeymapKey] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._2]](Tag.Byte, Tag.Digit2[Nat._1, Nat._2](Tag.Nat1, Tag.Nat2))
  def apply()(using Zone): Ptr[GdkKeymapKey] = scala.scalanative.unsafe.alloc[GdkKeymapKey](1)
  def apply(keycode : guint, group : CInt, level : CInt)(using Zone): Ptr[GdkKeymapKey] = 
    val ____ptr = apply()
    (!____ptr).keycode = keycode
    (!____ptr).group = group
    (!____ptr).level = level
    ____ptr
  extension (struct: GdkKeymapKey)
    def keycode: guint = !struct.at(0).asInstanceOf[Ptr[guint]]
    def keycode_=(value: guint): Unit = !struct.at(0).asInstanceOf[Ptr[guint]] = value
    def group: CInt = !struct.at(4).asInstanceOf[Ptr[CInt]]
    def group_=(value: CInt): Unit = !struct.at(4).asInstanceOf[Ptr[CInt]] = value
    def level: CInt = !struct.at(8).asInstanceOf[Ptr[CInt]]
    def level_=(value: CInt): Unit = !struct.at(8).asInstanceOf[Ptr[CInt]] = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmemorytexture.h
*/
opaque type GdkMemoryTexture = CStruct0
object GdkMemoryTexture:
  given _tag: Tag[GdkMemoryTexture] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmemorytexture.h
*/
opaque type GdkMemoryTextureClass = CStruct0
object GdkMemoryTextureClass:
  given _tag: Tag[GdkMemoryTextureClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmonitor.h
*/
opaque type GdkMonitor = CStruct0
object GdkMonitor:
  given _tag: Tag[GdkMonitor] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmonitor.h
*/
opaque type GdkMonitorClass = CStruct0
object GdkMonitorClass:
  given _tag: Tag[GdkMonitorClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type GdkMotionEvent = CStruct0
object GdkMotionEvent:
  given _tag: Tag[GdkMotionEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type GdkPadEvent = CStruct0
object GdkPadEvent:
  given _tag: Tag[GdkPadEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
*/
opaque type GdkPaintable = CStruct0
object GdkPaintable:
  given _tag: Tag[GdkPaintable] = Tag.materializeCStruct0Tag

/**
 * GdkPaintableInterface: : Snapshot the paintable. The given and are guaranteed to be larger than 0.0. The resulting snapshot must modify only the area in the rectangle from (0,0) to (width, height). This is the only function that must be implemented for this interface. _current_image: return a `GdkPaintable` that does not change over time. This means the `GDK_PAINTABLE_STATIC_SIZE` and `GDK_PAINTABLE_STATIC_CONTENTS` flag are set. _flags: Get the flags for this instance. See [enum.PaintableFlags] for details. _intrinsic_width: The preferred width for this object to be snapshot at or 0 if none. This is purely a hint. The object must still be able to render at any size. _intrinsic_height: The preferred height for this object to be snapshot at or 0 if none. This is purely a hint. The object must still be able to render at any size. _intrinsic_aspect_ratio: The preferred aspect ratio for this object or 0 if none. If both [vfunc.Paintable.get_intrinsic_width] and [vfunc.Paintable.get_intrinsic_height] return non-zero values, this function should return the aspect ratio computed from those.

 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
*/
opaque type GdkPaintableInterface = CArray[CChar, Nat.Digit2[Nat._6, Nat._4]]
object GdkPaintableInterface:
  given _tag: Tag[GdkPaintableInterface] = Tag.CArray[CChar, Nat.Digit2[Nat._6, Nat._4]](Tag.Byte, Tag.Digit2[Nat._6, Nat._4](Tag.Nat6, Tag.Nat4))
  def apply()(using Zone): Ptr[GdkPaintableInterface] = scala.scalanative.unsafe.alloc[GdkPaintableInterface](1)
  def apply(g_iface : GTypeInterface, snapshot : CFuncPtr4[Ptr[GdkPaintable], Ptr[GdkSnapshot], Double, Double, Unit], get_current_image : CFuncPtr1[Ptr[GdkPaintable], Ptr[GdkPaintable]], get_flags : CFuncPtr1[Ptr[GdkPaintable], GdkPaintableFlags], get_intrinsic_width : CFuncPtr1[Ptr[GdkPaintable], CInt], get_intrinsic_height : CFuncPtr1[Ptr[GdkPaintable], CInt], get_intrinsic_aspect_ratio : CFuncPtr1[Ptr[GdkPaintable], Double])(using Zone): Ptr[GdkPaintableInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).snapshot = snapshot
    (!____ptr).get_current_image = get_current_image
    (!____ptr).get_flags = get_flags
    (!____ptr).get_intrinsic_width = get_intrinsic_width
    (!____ptr).get_intrinsic_height = get_intrinsic_height
    (!____ptr).get_intrinsic_aspect_ratio = get_intrinsic_aspect_ratio
    ____ptr
  extension (struct: GdkPaintableInterface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def snapshot: CFuncPtr4[Ptr[GdkPaintable], Ptr[GdkSnapshot], Double, Double, Unit] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr4[Ptr[GdkPaintable], Ptr[GdkSnapshot], Double, Double, Unit]]]
    def snapshot_=(value: CFuncPtr4[Ptr[GdkPaintable], Ptr[GdkSnapshot], Double, Double, Unit]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr4[Ptr[GdkPaintable], Ptr[GdkSnapshot], Double, Double, Unit]]] = value
    def get_current_image: CFuncPtr1[Ptr[GdkPaintable], Ptr[GdkPaintable]] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GdkPaintable], Ptr[GdkPaintable]]]]
    def get_current_image_=(value: CFuncPtr1[Ptr[GdkPaintable], Ptr[GdkPaintable]]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GdkPaintable], Ptr[GdkPaintable]]]] = value
    def get_flags: CFuncPtr1[Ptr[GdkPaintable], GdkPaintableFlags] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GdkPaintable], GdkPaintableFlags]]]
    def get_flags_=(value: CFuncPtr1[Ptr[GdkPaintable], GdkPaintableFlags]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GdkPaintable], GdkPaintableFlags]]] = value
    def get_intrinsic_width: CFuncPtr1[Ptr[GdkPaintable], CInt] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GdkPaintable], CInt]]]
    def get_intrinsic_width_=(value: CFuncPtr1[Ptr[GdkPaintable], CInt]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GdkPaintable], CInt]]] = value
    def get_intrinsic_height: CFuncPtr1[Ptr[GdkPaintable], CInt] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GdkPaintable], CInt]]]
    def get_intrinsic_height_=(value: CFuncPtr1[Ptr[GdkPaintable], CInt]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GdkPaintable], CInt]]] = value
    def get_intrinsic_aspect_ratio: CFuncPtr1[Ptr[GdkPaintable], Double] = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GdkPaintable], Double]]]
    def get_intrinsic_aspect_ratio_=(value: CFuncPtr1[Ptr[GdkPaintable], Double]): Unit = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GdkPaintable], Double]]] = value

/**
 * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
*/
opaque type GdkPixbuf = CStruct0
object GdkPixbuf:
  given _tag: Tag[GdkPixbuf] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
*/
opaque type GdkPixbufAnimation = CStruct0
object GdkPixbufAnimation:
  given _tag: Tag[GdkPixbufAnimation] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
*/
opaque type GdkPixbufAnimationIter = CStruct0
object GdkPixbufAnimationIter:
  given _tag: Tag[GdkPixbufAnimationIter] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h
*/
opaque type GdkPixbufFormat = CStruct0
object GdkPixbufFormat:
  given _tag: Tag[GdkPixbufFormat] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h
*/
opaque type GdkPixbufLoader = CArray[CChar, Nat.Digit2[Nat._3, Nat._2]]
object GdkPixbufLoader:
  given _tag: Tag[GdkPixbufLoader] = Tag.CArray[CChar, Nat.Digit2[Nat._3, Nat._2]](Tag.Byte, Tag.Digit2[Nat._3, Nat._2](Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[GdkPixbufLoader] = scala.scalanative.unsafe.alloc[GdkPixbufLoader](1)
  def apply(parent_instance : GObject, priv : gpointer)(using Zone): Ptr[GdkPixbufLoader] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: GdkPixbufLoader)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value
    def priv: gpointer = !struct.at(24).asInstanceOf[Ptr[gpointer]]
    def priv_=(value: gpointer): Unit = !struct.at(24).asInstanceOf[Ptr[gpointer]] = value

/**
 * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h
*/
opaque type GdkPixbufLoaderClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._6, Nat._8]]
object GdkPixbufLoaderClass:
  given _tag: Tag[GdkPixbufLoaderClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._6, Nat._8]](Tag.Byte, Tag.Digit3[Nat._1, Nat._6, Nat._8](Tag.Nat1, Tag.Nat6, Tag.Nat8))
  def apply()(using Zone): Ptr[GdkPixbufLoaderClass] = scala.scalanative.unsafe.alloc[GdkPixbufLoaderClass](1)
  def apply(parent_class : GObjectClass, size_prepared : CFuncPtr3[Ptr[GdkPixbufLoader], CInt, CInt, Unit], area_prepared : CFuncPtr1[Ptr[GdkPixbufLoader], Unit], area_updated : CFuncPtr5[Ptr[GdkPixbufLoader], CInt, CInt, CInt, CInt, Unit], closed : CFuncPtr1[Ptr[GdkPixbufLoader], Unit])(using Zone): Ptr[GdkPixbufLoaderClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).size_prepared = size_prepared
    (!____ptr).area_prepared = area_prepared
    (!____ptr).area_updated = area_updated
    (!____ptr).closed = closed
    ____ptr
  extension (struct: GdkPixbufLoaderClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def size_prepared: CFuncPtr3[Ptr[GdkPixbufLoader], CInt, CInt, Unit] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GdkPixbufLoader], CInt, CInt, Unit]]]
    def size_prepared_=(value: CFuncPtr3[Ptr[GdkPixbufLoader], CInt, CInt, Unit]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GdkPixbufLoader], CInt, CInt, Unit]]] = value
    def area_prepared: CFuncPtr1[Ptr[GdkPixbufLoader], Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GdkPixbufLoader], Unit]]]
    def area_prepared_=(value: CFuncPtr1[Ptr[GdkPixbufLoader], Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr1[Ptr[GdkPixbufLoader], Unit]]] = value
    def area_updated: CFuncPtr5[Ptr[GdkPixbufLoader], CInt, CInt, CInt, CInt, Unit] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr5[Ptr[GdkPixbufLoader], CInt, CInt, CInt, CInt, Unit]]]
    def area_updated_=(value: CFuncPtr5[Ptr[GdkPixbufLoader], CInt, CInt, CInt, CInt, Unit]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr5[Ptr[GdkPixbufLoader], CInt, CInt, CInt, CInt, Unit]]] = value
    def closed: CFuncPtr1[Ptr[GdkPixbufLoader], Unit] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr1[Ptr[GdkPixbufLoader], Unit]]]
    def closed_=(value: CFuncPtr1[Ptr[GdkPixbufLoader], Unit]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr1[Ptr[GdkPixbufLoader], Unit]]] = value

/**
 * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h
*/
opaque type GdkPixbufSimpleAnim = CStruct0
object GdkPixbufSimpleAnim:
  given _tag: Tag[GdkPixbufSimpleAnim] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h
*/
opaque type GdkPixbufSimpleAnimClass = CStruct0
object GdkPixbufSimpleAnimClass:
  given _tag: Tag[GdkPixbufSimpleAnimClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopup.h
*/
opaque type GdkPopup = CStruct0
object GdkPopup:
  given _tag: Tag[GdkPopup] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopup.h
*/
opaque type GdkPopupInterface = CStruct0
object GdkPopupInterface:
  given _tag: Tag[GdkPopupInterface] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopuplayout.h
*/
opaque type GdkPopupLayout = CStruct0
object GdkPopupLayout:
  given _tag: Tag[GdkPopupLayout] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type GdkProximityEvent = CStruct0
object GdkProximityEvent:
  given _tag: Tag[GdkProximityEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkrgba.h
*/
opaque type GdkRGBA = CArray[CChar, Nat.Digit2[Nat._1, Nat._6]]
object GdkRGBA:
  given _tag: Tag[GdkRGBA] = Tag.CArray[CChar, Nat.Digit2[Nat._1, Nat._6]](Tag.Byte, Tag.Digit2[Nat._1, Nat._6](Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[GdkRGBA] = scala.scalanative.unsafe.alloc[GdkRGBA](1)
  def apply(red : Float, green : Float, blue : Float, alpha : Float)(using Zone): Ptr[GdkRGBA] = 
    val ____ptr = apply()
    (!____ptr).red = red
    (!____ptr).green = green
    (!____ptr).blue = blue
    (!____ptr).alpha = alpha
    ____ptr
  extension (struct: GdkRGBA)
    def red: Float = !struct.at(0).asInstanceOf[Ptr[Float]]
    def red_=(value: Float): Unit = !struct.at(0).asInstanceOf[Ptr[Float]] = value
    def green: Float = !struct.at(4).asInstanceOf[Ptr[Float]]
    def green_=(value: Float): Unit = !struct.at(4).asInstanceOf[Ptr[Float]] = value
    def blue: Float = !struct.at(8).asInstanceOf[Ptr[Float]]
    def blue_=(value: Float): Unit = !struct.at(8).asInstanceOf[Ptr[Float]] = value
    def alpha: Float = !struct.at(12).asInstanceOf[Ptr[Float]]
    def alpha_=(value: Float): Unit = !struct.at(12).asInstanceOf[Ptr[Float]] = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type GdkScrollEvent = CStruct0
object GdkScrollEvent:
  given _tag: Tag[GdkScrollEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkseat.h
*/
opaque type GdkSeat = CArray[CChar, Nat.Digit2[Nat._2, Nat._4]]
object GdkSeat:
  given _tag: Tag[GdkSeat] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._4]](Tag.Byte, Tag.Digit2[Nat._2, Nat._4](Tag.Nat2, Tag.Nat4))
  def apply()(using Zone): Ptr[GdkSeat] = scala.scalanative.unsafe.alloc[GdkSeat](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[GdkSeat] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: GdkSeat)
    def parent_instance: GObject = !struct.at(0).asInstanceOf[Ptr[GObject]]
    def parent_instance_=(value: GObject): Unit = !struct.at(0).asInstanceOf[Ptr[GObject]] = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type GdkSnapshot = CStruct0
object GdkSnapshot:
  given _tag: Tag[GdkSnapshot] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksnapshot.h
*/
opaque type GdkSnapshotClass = CStruct0
object GdkSnapshotClass:
  given _tag: Tag[GdkSnapshotClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type GdkSurface = CStruct0
object GdkSurface:
  given _tag: Tag[GdkSurface] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
*/
opaque type GdkSurfaceClass = CStruct0
object GdkSurfaceClass:
  given _tag: Tag[GdkSurfaceClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type GdkTexture = CStruct0
object GdkTexture:
  given _tag: Tag[GdkTexture] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
*/
opaque type GdkTextureClass = CStruct0
object GdkTextureClass:
  given _tag: Tag[GdkTextureClass] = Tag.materializeCStruct0Tag

/**
 * GdkTimeCoord: : The timestamp for this event : Flags indicating what axes are present : (array fixed-size=12): axis values

 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevice.h
*/
opaque type GdkTimeCoord = CArray[CChar, Nat.Digit3[Nat._1, Nat._0, Nat._4]]
object GdkTimeCoord:
  given _tag: Tag[GdkTimeCoord] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._0, Nat._4]](Tag.Byte, Tag.Digit3[Nat._1, Nat._0, Nat._4](Tag.Nat1, Tag.Nat0, Tag.Nat4))
  def apply()(using Zone): Ptr[GdkTimeCoord] = scala.scalanative.unsafe.alloc[GdkTimeCoord](1)
  def apply(time : guint32, flags : GdkAxisFlags, axes : CArray[Double, Nat.Digit2[Nat._1, Nat._2]])(using Zone): Ptr[GdkTimeCoord] = 
    val ____ptr = apply()
    (!____ptr).time = time
    (!____ptr).flags = flags
    (!____ptr).axes = axes
    ____ptr
  extension (struct: GdkTimeCoord)
    def time: guint32 = !struct.at(0).asInstanceOf[Ptr[guint32]]
    def time_=(value: guint32): Unit = !struct.at(0).asInstanceOf[Ptr[guint32]] = value
    def flags: GdkAxisFlags = !struct.at(4).asInstanceOf[Ptr[GdkAxisFlags]]
    def flags_=(value: GdkAxisFlags): Unit = !struct.at(4).asInstanceOf[Ptr[GdkAxisFlags]] = value
    def axes: CArray[Double, Nat.Digit2[Nat._1, Nat._2]] = !struct.at(8).asInstanceOf[Ptr[CArray[Double, Nat.Digit2[Nat._1, Nat._2]]]]
    def axes_=(value: CArray[Double, Nat.Digit2[Nat._1, Nat._2]]): Unit = !struct.at(8).asInstanceOf[Ptr[CArray[Double, Nat.Digit2[Nat._1, Nat._2]]]] = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
*/
opaque type GdkToplevel = CStruct0
object GdkToplevel:
  given _tag: Tag[GdkToplevel] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
*/
opaque type GdkToplevelInterface = CStruct0
object GdkToplevelInterface:
  given _tag: Tag[GdkToplevelInterface] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevellayout.h
*/
opaque type GdkToplevelLayout = CStruct0
object GdkToplevelLayout:
  given _tag: Tag[GdkToplevelLayout] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevelsize.h
*/
opaque type GdkToplevelSize = CStruct0
object GdkToplevelSize:
  given _tag: Tag[GdkToplevelSize] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type GdkTouchEvent = CStruct0
object GdkTouchEvent:
  given _tag: Tag[GdkTouchEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type GdkTouchpadEvent = CStruct0
object GdkTouchpadEvent:
  given _tag: Tag[GdkTouchpadEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type GdkVulkanContext = CStruct0
object GdkVulkanContext:
  given _tag: Tag[GdkVulkanContext] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskBlendNode = CStruct0
object GskBlendNode:
  given _tag: Tag[GskBlendNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskBlurNode = CStruct0
object GskBlurNode:
  given _tag: Tag[GskBlurNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskBorderNode = CStruct0
object GskBorderNode:
  given _tag: Tag[GskBorderNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskCairoNode = CStruct0
object GskCairoNode:
  given _tag: Tag[GskCairoNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskcairorenderer.h
*/
opaque type GskCairoRenderer = CStruct0
object GskCairoRenderer:
  given _tag: Tag[GskCairoRenderer] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskcairorenderer.h
*/
opaque type GskCairoRendererClass = CStruct0
object GskCairoRendererClass:
  given _tag: Tag[GskCairoRendererClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskClipNode = CStruct0
object GskClipNode:
  given _tag: Tag[GskClipNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskColorMatrixNode = CStruct0
object GskColorMatrixNode:
  given _tag: Tag[GskColorMatrixNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskColorNode = CStruct0
object GskColorNode:
  given _tag: Tag[GskColorNode] = Tag.materializeCStruct0Tag

/**
 * GskColorStop: : the offset of the color stop : the color at the given offset

 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskColorStop = CArray[CChar, Nat.Digit2[Nat._2, Nat._0]]
object GskColorStop:
  given _tag: Tag[GskColorStop] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._0]](Tag.Byte, Tag.Digit2[Nat._2, Nat._0](Tag.Nat2, Tag.Nat0))
  def apply()(using Zone): Ptr[GskColorStop] = scala.scalanative.unsafe.alloc[GskColorStop](1)
  def apply(offset : Float, color : GdkRGBA)(using Zone): Ptr[GskColorStop] = 
    val ____ptr = apply()
    (!____ptr).offset = offset
    (!____ptr).color = color
    ____ptr
  extension (struct: GskColorStop)
    def offset: Float = !struct.at(0).asInstanceOf[Ptr[Float]]
    def offset_=(value: Float): Unit = !struct.at(0).asInstanceOf[Ptr[Float]] = value
    def color: GdkRGBA = !struct.at(4).asInstanceOf[Ptr[GdkRGBA]]
    def color_=(value: GdkRGBA): Unit = !struct.at(4).asInstanceOf[Ptr[GdkRGBA]] = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskConicGradientNode = CStruct0
object GskConicGradientNode:
  given _tag: Tag[GskConicGradientNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskContainerNode = CStruct0
object GskContainerNode:
  given _tag: Tag[GskContainerNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskCrossFadeNode = CStruct0
object GskCrossFadeNode:
  given _tag: Tag[GskCrossFadeNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskDebugNode = CStruct0
object GskDebugNode:
  given _tag: Tag[GskDebugNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
*/
opaque type GskGLShader = CStruct0
object GskGLShader:
  given _tag: Tag[GskGLShader] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
*/
opaque type GskGLShaderClass = CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]]
object GskGLShaderClass:
  given _tag: Tag[GskGLShaderClass] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._1, Nat._3, Nat._6](Tag.Nat1, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[GskGLShaderClass] = scala.scalanative.unsafe.alloc[GskGLShaderClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[GskGLShaderClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: GskGLShaderClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskGLShaderNode = CStruct0
object GskGLShaderNode:
  given _tag: Tag[GskGLShaderNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskInsetShadowNode = CStruct0
object GskInsetShadowNode:
  given _tag: Tag[GskInsetShadowNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskLinearGradientNode = CStruct0
object GskLinearGradientNode:
  given _tag: Tag[GskLinearGradientNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskOpacityNode = CStruct0
object GskOpacityNode:
  given _tag: Tag[GskOpacityNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskOutsetShadowNode = CStruct0
object GskOutsetShadowNode:
  given _tag: Tag[GskOutsetShadowNode] = Tag.materializeCStruct0Tag

/**
 * GskParseLocation: : the offset of the location in the parse buffer, as bytes : the offset of the location in the parse buffer, as characters

 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskParseLocation = CArray[CChar, Nat.Digit2[Nat._4, Nat._0]]
object GskParseLocation:
  given _tag: Tag[GskParseLocation] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._0]](Tag.Byte, Tag.Digit2[Nat._4, Nat._0](Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[GskParseLocation] = scala.scalanative.unsafe.alloc[GskParseLocation](1)
  def apply(bytes : gsize, chars : gsize, lines : gsize, line_bytes : gsize, line_chars : gsize)(using Zone): Ptr[GskParseLocation] = 
    val ____ptr = apply()
    (!____ptr).bytes = bytes
    (!____ptr).chars = chars
    (!____ptr).lines = lines
    (!____ptr).line_bytes = line_bytes
    (!____ptr).line_chars = line_chars
    ____ptr
  extension (struct: GskParseLocation)
    def bytes: gsize = !struct.at(0).asInstanceOf[Ptr[gsize]]
    def bytes_=(value: gsize): Unit = !struct.at(0).asInstanceOf[Ptr[gsize]] = value
    def chars: gsize = !struct.at(8).asInstanceOf[Ptr[gsize]]
    def chars_=(value: gsize): Unit = !struct.at(8).asInstanceOf[Ptr[gsize]] = value
    def lines: gsize = !struct.at(16).asInstanceOf[Ptr[gsize]]
    def lines_=(value: gsize): Unit = !struct.at(16).asInstanceOf[Ptr[gsize]] = value
    def line_bytes: gsize = !struct.at(24).asInstanceOf[Ptr[gsize]]
    def line_bytes_=(value: gsize): Unit = !struct.at(24).asInstanceOf[Ptr[gsize]] = value
    def line_chars: gsize = !struct.at(32).asInstanceOf[Ptr[gsize]]
    def line_chars_=(value: gsize): Unit = !struct.at(32).asInstanceOf[Ptr[gsize]] = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskRadialGradientNode = CStruct0
object GskRadialGradientNode:
  given _tag: Tag[GskRadialGradientNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskRenderNode = CStruct0
object GskRenderNode:
  given _tag: Tag[GskRenderNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktypes.h
*/
opaque type GskRenderer = CStruct0
object GskRenderer:
  given _tag: Tag[GskRenderer] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrenderer.h
*/
opaque type GskRendererClass = CStruct0
object GskRendererClass:
  given _tag: Tag[GskRendererClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskRepeatNode = CStruct0
object GskRepeatNode:
  given _tag: Tag[GskRepeatNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskRepeatingLinearGradientNode = CStruct0
object GskRepeatingLinearGradientNode:
  given _tag: Tag[GskRepeatingLinearGradientNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskRepeatingRadialGradientNode = CStruct0
object GskRepeatingRadialGradientNode:
  given _tag: Tag[GskRepeatingRadialGradientNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskRoundedClipNode = CStruct0
object GskRoundedClipNode:
  given _tag: Tag[GskRoundedClipNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskroundedrect.h
*/
opaque type GskRoundedRect = CArray[CChar, Nat.Digit2[Nat._4, Nat._8]]
object GskRoundedRect:
  given _tag: Tag[GskRoundedRect] = Tag.CArray[CChar, Nat.Digit2[Nat._4, Nat._8]](Tag.Byte, Tag.Digit2[Nat._4, Nat._8](Tag.Nat4, Tag.Nat8))
  def apply()(using Zone): Ptr[GskRoundedRect] = scala.scalanative.unsafe.alloc[GskRoundedRect](1)
  def apply(bounds : graphene_rect_t, corner : CArray[graphene_size_t, Nat._4])(using Zone): Ptr[GskRoundedRect] = 
    val ____ptr = apply()
    (!____ptr).bounds = bounds
    (!____ptr).corner = corner
    ____ptr
  extension (struct: GskRoundedRect)
    def bounds: graphene_rect_t = !struct.at(0).asInstanceOf[Ptr[graphene_rect_t]]
    def bounds_=(value: graphene_rect_t): Unit = !struct.at(0).asInstanceOf[Ptr[graphene_rect_t]] = value
    def corner: CArray[graphene_size_t, Nat._4] = !struct.at(16).asInstanceOf[Ptr[CArray[graphene_size_t, Nat._4]]]
    def corner_=(value: CArray[graphene_size_t, Nat._4]): Unit = !struct.at(16).asInstanceOf[Ptr[CArray[graphene_size_t, Nat._4]]] = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
*/
opaque type GskShaderArgsBuilder = CStruct0
object GskShaderArgsBuilder:
  given _tag: Tag[GskShaderArgsBuilder] = Tag.materializeCStruct0Tag

/**
 * GskShadow: : the color of the shadow : the horizontal offset of the shadow : the vertical offset of the shadow : the radius of the shadow

 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskShadow = CArray[CChar, Nat.Digit2[Nat._2, Nat._8]]
object GskShadow:
  given _tag: Tag[GskShadow] = Tag.CArray[CChar, Nat.Digit2[Nat._2, Nat._8]](Tag.Byte, Tag.Digit2[Nat._2, Nat._8](Tag.Nat2, Tag.Nat8))
  def apply()(using Zone): Ptr[GskShadow] = scala.scalanative.unsafe.alloc[GskShadow](1)
  def apply(color : GdkRGBA, dx : Float, dy : Float, radius : Float)(using Zone): Ptr[GskShadow] = 
    val ____ptr = apply()
    (!____ptr).color = color
    (!____ptr).dx = dx
    (!____ptr).dy = dy
    (!____ptr).radius = radius
    ____ptr
  extension (struct: GskShadow)
    def color: GdkRGBA = !struct.at(0).asInstanceOf[Ptr[GdkRGBA]]
    def color_=(value: GdkRGBA): Unit = !struct.at(0).asInstanceOf[Ptr[GdkRGBA]] = value
    def dx: Float = !struct.at(16).asInstanceOf[Ptr[Float]]
    def dx_=(value: Float): Unit = !struct.at(16).asInstanceOf[Ptr[Float]] = value
    def dy: Float = !struct.at(20).asInstanceOf[Ptr[Float]]
    def dy_=(value: Float): Unit = !struct.at(20).asInstanceOf[Ptr[Float]] = value
    def radius: Float = !struct.at(24).asInstanceOf[Ptr[Float]]
    def radius_=(value: Float): Unit = !struct.at(24).asInstanceOf[Ptr[Float]] = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskShadowNode = CStruct0
object GskShadowNode:
  given _tag: Tag[GskShadowNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskTextNode = CStruct0
object GskTextNode:
  given _tag: Tag[GskTextNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskTextureNode = CStruct0
object GskTextureNode:
  given _tag: Tag[GskTextureNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktypes.h
*/
opaque type GskTransform = CStruct0
object GskTransform:
  given _tag: Tag[GskTransform] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type GskTransformNode = CStruct0
object GskTransformNode:
  given _tag: Tag[GskTransformNode] = Tag.materializeCStruct0Tag

/**
 * PangoAnalysis: _engine: unused, reserved _engine: unused, reserved : the font for this segment. : the bidirectional level for this segment. : the glyph orientation for this segment (A `PangoGravity`). : boolean flags for this segment (Since: 1.16). : the detected script for this segment (A `PangoScript`) (Since: 1.18). : the detected language for this segment. _attrs: extra attributes for this segment.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-item.h
*/
opaque type PangoAnalysis = CStruct9[Ptr[PangoEngineShape], Ptr[PangoEngineLang], Ptr[PangoFont], guint8, guint8, guint8, guint8, Ptr[PangoLanguage], Ptr[Byte]]
object PangoAnalysis:
  given _tag: Tag[PangoAnalysis] = Tag.materializeCStruct9Tag[Ptr[PangoEngineShape], Ptr[PangoEngineLang], Ptr[PangoFont], guint8, guint8, guint8, guint8, Ptr[PangoLanguage], Ptr[Byte]]
  def apply()(using Zone): Ptr[PangoAnalysis] = scala.scalanative.unsafe.alloc[PangoAnalysis](1)
  def apply(shape_engine : Ptr[PangoEngineShape], lang_engine : Ptr[PangoEngineLang], font : Ptr[PangoFont], level : guint8, gravity : guint8, flags : guint8, script : guint8, language : Ptr[PangoLanguage], extra_attrs : Ptr[GSList])(using Zone): Ptr[PangoAnalysis] = 
    val ____ptr = apply()
    (!____ptr).shape_engine = shape_engine
    (!____ptr).lang_engine = lang_engine
    (!____ptr).font = font
    (!____ptr).level = level
    (!____ptr).gravity = gravity
    (!____ptr).flags = flags
    (!____ptr).script = script
    (!____ptr).language = language
    (!____ptr).extra_attrs = extra_attrs
    ____ptr
  extension (struct: PangoAnalysis)
    def shape_engine : Ptr[PangoEngineShape] = struct._1
    def shape_engine_=(value: Ptr[PangoEngineShape]): Unit = !struct.at1 = value
    def lang_engine : Ptr[PangoEngineLang] = struct._2
    def lang_engine_=(value: Ptr[PangoEngineLang]): Unit = !struct.at2 = value
    def font : Ptr[PangoFont] = struct._3
    def font_=(value: Ptr[PangoFont]): Unit = !struct.at3 = value
    def level : guint8 = struct._4
    def level_=(value: guint8): Unit = !struct.at4 = value
    def gravity : guint8 = struct._5
    def gravity_=(value: guint8): Unit = !struct.at5 = value
    def flags : guint8 = struct._6
    def flags_=(value: guint8): Unit = !struct.at6 = value
    def script : guint8 = struct._7
    def script_=(value: guint8): Unit = !struct.at7 = value
    def language : Ptr[PangoLanguage] = struct._8
    def language_=(value: Ptr[PangoLanguage]): Unit = !struct.at8 = value
    def extra_attrs : Ptr[GSList] = struct._9.asInstanceOf[Ptr[GSList]]
    def extra_attrs_=(value: Ptr[GSList]): Unit = !struct.at9 = value.asInstanceOf[Ptr[Byte]]

/**
 * PangoAttrClass: : the type ID for this attribute : function to duplicate an attribute of this type (see [method.Attribute.copy]) : function to free an attribute of this type (see [method.Attribute.destroy]) : function to check two attributes of this type for equality (see [method.Attribute.equal])

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type PangoAttrClass = CStruct4[PangoAttrType, CFuncPtr1[Ptr[Byte], Ptr[Byte]], CFuncPtr1[Ptr[Byte], Unit], CFuncPtr2[Ptr[Byte], Ptr[Byte], gboolean]]
object PangoAttrClass:
  given _tag: Tag[PangoAttrClass] = Tag.materializeCStruct4Tag[PangoAttrType, CFuncPtr1[Ptr[Byte], Ptr[Byte]], CFuncPtr1[Ptr[Byte], Unit], CFuncPtr2[Ptr[Byte], Ptr[Byte], gboolean]]
  def apply()(using Zone): Ptr[PangoAttrClass] = scala.scalanative.unsafe.alloc[PangoAttrClass](1)
  def apply(`type` : PangoAttrType, copy : CFuncPtr1[Ptr[PangoAttribute], Ptr[PangoAttribute]], destroy : CFuncPtr1[Ptr[PangoAttribute], Unit], equal : CFuncPtr2[Ptr[PangoAttribute], Ptr[PangoAttribute], gboolean])(using Zone): Ptr[PangoAttrClass] = 
    val ____ptr = apply()
    (!____ptr).`type` = `type`
    (!____ptr).copy = copy
    (!____ptr).destroy = destroy
    (!____ptr).equal = equal
    ____ptr
  extension (struct: PangoAttrClass)
    def `type` : PangoAttrType = struct._1
    def type_=(value: PangoAttrType): Unit = !struct.at1 = value
    def copy : CFuncPtr1[Ptr[PangoAttribute], Ptr[PangoAttribute]] = struct._2.asInstanceOf[CFuncPtr1[Ptr[PangoAttribute], Ptr[PangoAttribute]]]
    def copy_=(value: CFuncPtr1[Ptr[PangoAttribute], Ptr[PangoAttribute]]): Unit = !struct.at2 = value.asInstanceOf[CFuncPtr1[Ptr[Byte], Ptr[Byte]]]
    def destroy : CFuncPtr1[Ptr[PangoAttribute], Unit] = struct._3.asInstanceOf[CFuncPtr1[Ptr[PangoAttribute], Unit]]
    def destroy_=(value: CFuncPtr1[Ptr[PangoAttribute], Unit]): Unit = !struct.at3 = value.asInstanceOf[CFuncPtr1[Ptr[Byte], Unit]]
    def equal : CFuncPtr2[Ptr[PangoAttribute], Ptr[PangoAttribute], gboolean] = struct._4.asInstanceOf[CFuncPtr2[Ptr[PangoAttribute], Ptr[PangoAttribute], gboolean]]
    def equal_=(value: CFuncPtr2[Ptr[PangoAttribute], Ptr[PangoAttribute], gboolean]): Unit = !struct.at4 = value.asInstanceOf[CFuncPtr2[Ptr[Byte], Ptr[Byte], gboolean]]

/**
 * PangoAttrColor: : the common portion of the attribute : the `PangoColor` which is the value of the attribute

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type PangoAttrColor = CStruct2[PangoAttribute, PangoColor]
object PangoAttrColor:
  given _tag: Tag[PangoAttrColor] = Tag.materializeCStruct2Tag[PangoAttribute, PangoColor]
  def apply()(using Zone): Ptr[PangoAttrColor] = scala.scalanative.unsafe.alloc[PangoAttrColor](1)
  def apply(attr : PangoAttribute, color : PangoColor)(using Zone): Ptr[PangoAttrColor] = 
    val ____ptr = apply()
    (!____ptr).attr = attr
    (!____ptr).color = color
    ____ptr
  extension (struct: PangoAttrColor)
    def attr : PangoAttribute = struct._1
    def attr_=(value: PangoAttribute): Unit = !struct.at1 = value
    def color : PangoColor = struct._2
    def color_=(value: PangoColor): Unit = !struct.at2 = value

/**
 * PangoAttrFloat: : the common portion of the attribute : the value of the attribute

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type PangoAttrFloat = CStruct2[PangoAttribute, Double]
object PangoAttrFloat:
  given _tag: Tag[PangoAttrFloat] = Tag.materializeCStruct2Tag[PangoAttribute, Double]
  def apply()(using Zone): Ptr[PangoAttrFloat] = scala.scalanative.unsafe.alloc[PangoAttrFloat](1)
  def apply(attr : PangoAttribute, value : Double)(using Zone): Ptr[PangoAttrFloat] = 
    val ____ptr = apply()
    (!____ptr).attr = attr
    (!____ptr).value = value
    ____ptr
  extension (struct: PangoAttrFloat)
    def attr : PangoAttribute = struct._1
    def attr_=(value: PangoAttribute): Unit = !struct.at1 = value
    def value : Double = struct._2
    def value_=(value: Double): Unit = !struct.at2 = value

/**
 * PangoAttrFontDesc: : the common portion of the attribute : the font description which is the value of this attribute

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type PangoAttrFontDesc = CStruct2[PangoAttribute, Ptr[PangoFontDescription]]
object PangoAttrFontDesc:
  given _tag: Tag[PangoAttrFontDesc] = Tag.materializeCStruct2Tag[PangoAttribute, Ptr[PangoFontDescription]]
  def apply()(using Zone): Ptr[PangoAttrFontDesc] = scala.scalanative.unsafe.alloc[PangoAttrFontDesc](1)
  def apply(attr : PangoAttribute, desc : Ptr[PangoFontDescription])(using Zone): Ptr[PangoAttrFontDesc] = 
    val ____ptr = apply()
    (!____ptr).attr = attr
    (!____ptr).desc = desc
    ____ptr
  extension (struct: PangoAttrFontDesc)
    def attr : PangoAttribute = struct._1
    def attr_=(value: PangoAttribute): Unit = !struct.at1 = value
    def desc : Ptr[PangoFontDescription] = struct._2
    def desc_=(value: Ptr[PangoFontDescription]): Unit = !struct.at2 = value

/**
 * PangoAttrFontFeatures: : the common portion of the attribute : the features, as a string in CSS syntax

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type PangoAttrFontFeatures = CStruct2[PangoAttribute, Ptr[gchar]]
object PangoAttrFontFeatures:
  given _tag: Tag[PangoAttrFontFeatures] = Tag.materializeCStruct2Tag[PangoAttribute, Ptr[gchar]]
  def apply()(using Zone): Ptr[PangoAttrFontFeatures] = scala.scalanative.unsafe.alloc[PangoAttrFontFeatures](1)
  def apply(attr : PangoAttribute, features : Ptr[gchar])(using Zone): Ptr[PangoAttrFontFeatures] = 
    val ____ptr = apply()
    (!____ptr).attr = attr
    (!____ptr).features = features
    ____ptr
  extension (struct: PangoAttrFontFeatures)
    def attr : PangoAttribute = struct._1
    def attr_=(value: PangoAttribute): Unit = !struct.at1 = value
    def features : Ptr[gchar] = struct._2
    def features_=(value: Ptr[gchar]): Unit = !struct.at2 = value

/**
 * PangoAttrInt: : the common portion of the attribute : the value of the attribute

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type PangoAttrInt = CStruct2[PangoAttribute, CInt]
object PangoAttrInt:
  given _tag: Tag[PangoAttrInt] = Tag.materializeCStruct2Tag[PangoAttribute, CInt]
  def apply()(using Zone): Ptr[PangoAttrInt] = scala.scalanative.unsafe.alloc[PangoAttrInt](1)
  def apply(attr : PangoAttribute, value : CInt)(using Zone): Ptr[PangoAttrInt] = 
    val ____ptr = apply()
    (!____ptr).attr = attr
    (!____ptr).value = value
    ____ptr
  extension (struct: PangoAttrInt)
    def attr : PangoAttribute = struct._1
    def attr_=(value: PangoAttribute): Unit = !struct.at1 = value
    def value : CInt = struct._2
    def value_=(value: CInt): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type PangoAttrIterator = CStruct0
object PangoAttrIterator:
  given _tag: Tag[PangoAttrIterator] = Tag.materializeCStruct0Tag

/**
 * PangoAttrLanguage: : the common portion of the attribute : the `PangoLanguage` which is the value of the attribute

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type PangoAttrLanguage = CStruct2[PangoAttribute, Ptr[PangoLanguage]]
object PangoAttrLanguage:
  given _tag: Tag[PangoAttrLanguage] = Tag.materializeCStruct2Tag[PangoAttribute, Ptr[PangoLanguage]]
  def apply()(using Zone): Ptr[PangoAttrLanguage] = scala.scalanative.unsafe.alloc[PangoAttrLanguage](1)
  def apply(attr : PangoAttribute, value : Ptr[PangoLanguage])(using Zone): Ptr[PangoAttrLanguage] = 
    val ____ptr = apply()
    (!____ptr).attr = attr
    (!____ptr).value = value
    ____ptr
  extension (struct: PangoAttrLanguage)
    def attr : PangoAttribute = struct._1
    def attr_=(value: PangoAttribute): Unit = !struct.at1 = value
    def value : Ptr[PangoLanguage] = struct._2
    def value_=(value: Ptr[PangoLanguage]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type PangoAttrList = CStruct0
object PangoAttrList:
  given _tag: Tag[PangoAttrList] = Tag.materializeCStruct0Tag

/**
 * PangoAttrShape: : the common portion of the attribute

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type PangoAttrShape = CStruct6[PangoAttribute, PangoRectangle, PangoRectangle, gpointer, PangoAttrDataCopyFunc, GDestroyNotify]
object PangoAttrShape:
  given _tag: Tag[PangoAttrShape] = Tag.materializeCStruct6Tag[PangoAttribute, PangoRectangle, PangoRectangle, gpointer, PangoAttrDataCopyFunc, GDestroyNotify]
  def apply()(using Zone): Ptr[PangoAttrShape] = scala.scalanative.unsafe.alloc[PangoAttrShape](1)
  def apply(attr : PangoAttribute, ink_rect : PangoRectangle, logical_rect : PangoRectangle, data : gpointer, copy_func : PangoAttrDataCopyFunc, destroy_func : GDestroyNotify)(using Zone): Ptr[PangoAttrShape] = 
    val ____ptr = apply()
    (!____ptr).attr = attr
    (!____ptr).ink_rect = ink_rect
    (!____ptr).logical_rect = logical_rect
    (!____ptr).data = data
    (!____ptr).copy_func = copy_func
    (!____ptr).destroy_func = destroy_func
    ____ptr
  extension (struct: PangoAttrShape)
    def attr : PangoAttribute = struct._1
    def attr_=(value: PangoAttribute): Unit = !struct.at1 = value
    def ink_rect : PangoRectangle = struct._2
    def ink_rect_=(value: PangoRectangle): Unit = !struct.at2 = value
    def logical_rect : PangoRectangle = struct._3
    def logical_rect_=(value: PangoRectangle): Unit = !struct.at3 = value
    def data : gpointer = struct._4
    def data_=(value: gpointer): Unit = !struct.at4 = value
    def copy_func : PangoAttrDataCopyFunc = struct._5
    def copy_func_=(value: PangoAttrDataCopyFunc): Unit = !struct.at5 = value
    def destroy_func : GDestroyNotify = struct._6
    def destroy_func_=(value: GDestroyNotify): Unit = !struct.at6 = value

/**
 * PangoAttrSize: : the common portion of the attribute : size of font, in units of 1/%PANGO_SCALE of a point (for %PANGO_ATTR_SIZE) or of a device unit (for %PANGO_ATTR_ABSOLUTE_SIZE) : whether the font size is in device units or points. This field is only present for compatibility with Pango-1.8.0 (%PANGO_ATTR_ABSOLUTE_SIZE was added in 1.8.1); and always will be %FALSE for %PANGO_ATTR_SIZE and %TRUE for %PANGO_ATTR_ABSOLUTE_SIZE.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type PangoAttrSize = CStruct3[PangoAttribute, CInt, guint]
object PangoAttrSize:
  given _tag: Tag[PangoAttrSize] = Tag.materializeCStruct3Tag[PangoAttribute, CInt, guint]
  def apply()(using Zone): Ptr[PangoAttrSize] = scala.scalanative.unsafe.alloc[PangoAttrSize](1)
  def apply(attr : PangoAttribute, size : CInt, absolute : guint)(using Zone): Ptr[PangoAttrSize] = 
    val ____ptr = apply()
    (!____ptr).attr = attr
    (!____ptr).size = size
    (!____ptr).absolute = absolute
    ____ptr
  extension (struct: PangoAttrSize)
    def attr : PangoAttribute = struct._1
    def attr_=(value: PangoAttribute): Unit = !struct.at1 = value
    def size : CInt = struct._2
    def size_=(value: CInt): Unit = !struct.at2 = value
    def absolute : guint = struct._3
    def absolute_=(value: guint): Unit = !struct.at3 = value

/**
 * PangoAttrString: : the common portion of the attribute : the string which is the value of the attribute

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type PangoAttrString = CStruct2[PangoAttribute, CString]
object PangoAttrString:
  given _tag: Tag[PangoAttrString] = Tag.materializeCStruct2Tag[PangoAttribute, CString]
  def apply()(using Zone): Ptr[PangoAttrString] = scala.scalanative.unsafe.alloc[PangoAttrString](1)
  def apply(attr : PangoAttribute, value : CString)(using Zone): Ptr[PangoAttrString] = 
    val ____ptr = apply()
    (!____ptr).attr = attr
    (!____ptr).value = value
    ____ptr
  extension (struct: PangoAttrString)
    def attr : PangoAttribute = struct._1
    def attr_=(value: PangoAttribute): Unit = !struct.at1 = value
    def value : CString = struct._2
    def value_=(value: CString): Unit = !struct.at2 = value

/**
 * PangoAttribute: _index: the start index of the range (in bytes). _index: end index of the range (in bytes). The character at this index is not included in the range.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type PangoAttribute = CStruct3[Ptr[Byte], guint, guint]
object PangoAttribute:
  given _tag: Tag[PangoAttribute] = Tag.materializeCStruct3Tag[Ptr[Byte], guint, guint]
  def apply()(using Zone): Ptr[PangoAttribute] = scala.scalanative.unsafe.alloc[PangoAttribute](1)
  def apply(klass : Ptr[PangoAttrClass], start_index : guint, end_index : guint)(using Zone): Ptr[PangoAttribute] = 
    val ____ptr = apply()
    (!____ptr).klass = klass
    (!____ptr).start_index = start_index
    (!____ptr).end_index = end_index
    ____ptr
  extension (struct: PangoAttribute)
    def klass : Ptr[PangoAttrClass] = struct._1.asInstanceOf[Ptr[PangoAttrClass]]
    def klass_=(value: Ptr[PangoAttrClass]): Unit = !struct.at1 = value.asInstanceOf[Ptr[Byte]]
    def start_index : guint = struct._2
    def start_index_=(value: guint): Unit = !struct.at2 = value
    def end_index : guint = struct._3
    def end_index_=(value: guint): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
*/
opaque type PangoCairoFont = CStruct0
object PangoCairoFont:
  given _tag: Tag[PangoCairoFont] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
*/
opaque type PangoCairoFontMap = CStruct0
object PangoCairoFontMap:
  given _tag: Tag[PangoCairoFontMap] = Tag.materializeCStruct0Tag

/**
 * PangoColor: : value of red component : value of green component : value of blue component

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-color.h
*/
opaque type PangoColor = CStruct3[guint16, guint16, guint16]
object PangoColor:
  given _tag: Tag[PangoColor] = Tag.materializeCStruct3Tag[guint16, guint16, guint16]
  def apply()(using Zone): Ptr[PangoColor] = scala.scalanative.unsafe.alloc[PangoColor](1)
  def apply(red : guint16, green : guint16, blue : guint16)(using Zone): Ptr[PangoColor] = 
    val ____ptr = apply()
    (!____ptr).red = red
    (!____ptr).green = green
    (!____ptr).blue = blue
    ____ptr
  extension (struct: PangoColor)
    def red : guint16 = struct._1
    def red_=(value: guint16): Unit = !struct.at1 = value
    def green : guint16 = struct._2
    def green_=(value: guint16): Unit = !struct.at2 = value
    def blue : guint16 = struct._3
    def blue_=(value: guint16): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-types.h
*/
opaque type PangoContext = CStruct0
object PangoContext:
  given _tag: Tag[PangoContext] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
*/
opaque type PangoContextClass = CStruct0
object PangoContextClass:
  given _tag: Tag[PangoContextClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-coverage.h
*/
opaque type PangoCoverage = CStruct0
object PangoCoverage:
  given _tag: Tag[PangoCoverage] = Tag.materializeCStruct0Tag

/**
 * PangoEngine:

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
*/
opaque type PangoEngine = CStruct1[GObject]
object PangoEngine:
  given _tag: Tag[PangoEngine] = Tag.materializeCStruct1Tag[GObject]
  def apply()(using Zone): Ptr[PangoEngine] = scala.scalanative.unsafe.alloc[PangoEngine](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[PangoEngine] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: PangoEngine)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value

/**
 * PangoEngineClass:

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
*/
opaque type PangoEngineClass = CStruct1[GObjectClass]
object PangoEngineClass:
  given _tag: Tag[PangoEngineClass] = Tag.materializeCStruct1Tag[GObjectClass]
  def apply()(using Zone): Ptr[PangoEngineClass] = scala.scalanative.unsafe.alloc[PangoEngineClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[PangoEngineClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: PangoEngineClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value

/**
 * PangoEngineInfo: _type: a string identifying the engine type. _type: a string identifying the render type. : array of scripts this engine supports. _scripts: number of items in .

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
*/
opaque type PangoEngineInfo = CStruct5[Ptr[gchar], Ptr[gchar], Ptr[gchar], Ptr[PangoEngineScriptInfo], gint]
object PangoEngineInfo:
  given _tag: Tag[PangoEngineInfo] = Tag.materializeCStruct5Tag[Ptr[gchar], Ptr[gchar], Ptr[gchar], Ptr[PangoEngineScriptInfo], gint]
  def apply()(using Zone): Ptr[PangoEngineInfo] = scala.scalanative.unsafe.alloc[PangoEngineInfo](1)
  def apply(id : Ptr[gchar], engine_type : Ptr[gchar], render_type : Ptr[gchar], scripts : Ptr[PangoEngineScriptInfo], n_scripts : gint)(using Zone): Ptr[PangoEngineInfo] = 
    val ____ptr = apply()
    (!____ptr).id = id
    (!____ptr).engine_type = engine_type
    (!____ptr).render_type = render_type
    (!____ptr).scripts = scripts
    (!____ptr).n_scripts = n_scripts
    ____ptr
  extension (struct: PangoEngineInfo)
    def id : Ptr[gchar] = struct._1
    def id_=(value: Ptr[gchar]): Unit = !struct.at1 = value
    def engine_type : Ptr[gchar] = struct._2
    def engine_type_=(value: Ptr[gchar]): Unit = !struct.at2 = value
    def render_type : Ptr[gchar] = struct._3
    def render_type_=(value: Ptr[gchar]): Unit = !struct.at3 = value
    def scripts : Ptr[PangoEngineScriptInfo] = struct._4
    def scripts_=(value: Ptr[PangoEngineScriptInfo]): Unit = !struct.at4 = value
    def n_scripts : gint = struct._5
    def n_scripts_=(value: gint): Unit = !struct.at5 = value

/**
 * PangoEngineLang:

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
*/
opaque type PangoEngineLang = CStruct1[PangoEngine]
object PangoEngineLang:
  given _tag: Tag[PangoEngineLang] = Tag.materializeCStruct1Tag[PangoEngine]
  def apply()(using Zone): Ptr[PangoEngineLang] = scala.scalanative.unsafe.alloc[PangoEngineLang](1)
  def apply(parent_instance : PangoEngine)(using Zone): Ptr[PangoEngineLang] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: PangoEngineLang)
    def parent_instance : PangoEngine = struct._1
    def parent_instance_=(value: PangoEngine): Unit = !struct.at1 = value

/**
 * PangoEngineLangClass: _break: (nullable): Provides a custom implementation of pango_break(). If %NULL, pango_default_break() is used instead. If not %NULL, for Pango versions before 1.16 (module interface version before 1.6.0), this was called instead of pango_default_break(), but in newer versions, pango_default_break() is always called and this is called after that to allow tailoring the breaking results.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
*/
opaque type PangoEngineLangClass = CStruct2[PangoEngineClass, CFuncPtr6[Ptr[PangoEngineLang], CString, CInt, Ptr[Byte], Ptr[PangoLogAttr], CInt, Unit]]
object PangoEngineLangClass:
  given _tag: Tag[PangoEngineLangClass] = Tag.materializeCStruct2Tag[PangoEngineClass, CFuncPtr6[Ptr[PangoEngineLang], CString, CInt, Ptr[Byte], Ptr[PangoLogAttr], CInt, Unit]]
  def apply()(using Zone): Ptr[PangoEngineLangClass] = scala.scalanative.unsafe.alloc[PangoEngineLangClass](1)
  def apply(parent_class : PangoEngineClass, script_break : CFuncPtr6[Ptr[PangoEngineLang], CString, CInt, Ptr[PangoAnalysis], Ptr[PangoLogAttr], CInt, Unit])(using Zone): Ptr[PangoEngineLangClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).script_break = script_break
    ____ptr
  extension (struct: PangoEngineLangClass)
    def parent_class : PangoEngineClass = struct._1
    def parent_class_=(value: PangoEngineClass): Unit = !struct.at1 = value
    def script_break : CFuncPtr6[Ptr[PangoEngineLang], CString, CInt, Ptr[PangoAnalysis], Ptr[PangoLogAttr], CInt, Unit] = struct._2.asInstanceOf[CFuncPtr6[Ptr[PangoEngineLang], CString, CInt, Ptr[PangoAnalysis], Ptr[PangoLogAttr], CInt, Unit]]
    def script_break_=(value: CFuncPtr6[Ptr[PangoEngineLang], CString, CInt, Ptr[PangoAnalysis], Ptr[PangoLogAttr], CInt, Unit]): Unit = !struct.at2 = value.asInstanceOf[CFuncPtr6[Ptr[PangoEngineLang], CString, CInt, Ptr[Byte], Ptr[PangoLogAttr], CInt, Unit]]

/**
 * PangoEngineScriptInfo: : a `PangoScript`. The value %PANGO_SCRIPT_COMMON has the special meaning here of "all scripts" : a semicolon separated list of languages that this engine handles for this script. This may be empty, in which case the engine is saying that it is a fallback choice for all languages for this range, but should not be used if another engine indicates that it is specific for the language for a given code point. An entry in this list of "*" indicates that this engine is specific to all languages for this range.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
*/
opaque type PangoEngineScriptInfo = CStruct2[PangoScript, Ptr[gchar]]
object PangoEngineScriptInfo:
  given _tag: Tag[PangoEngineScriptInfo] = Tag.materializeCStruct2Tag[PangoScript, Ptr[gchar]]
  def apply()(using Zone): Ptr[PangoEngineScriptInfo] = scala.scalanative.unsafe.alloc[PangoEngineScriptInfo](1)
  def apply(script : PangoScript, langs : Ptr[gchar])(using Zone): Ptr[PangoEngineScriptInfo] = 
    val ____ptr = apply()
    (!____ptr).script = script
    (!____ptr).langs = langs
    ____ptr
  extension (struct: PangoEngineScriptInfo)
    def script : PangoScript = struct._1
    def script_=(value: PangoScript): Unit = !struct.at1 = value
    def langs : Ptr[gchar] = struct._2
    def langs_=(value: Ptr[gchar]): Unit = !struct.at2 = value

/**
 * PangoEngineShape:

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
*/
opaque type PangoEngineShape = CStruct1[PangoEngine]
object PangoEngineShape:
  given _tag: Tag[PangoEngineShape] = Tag.materializeCStruct1Tag[PangoEngine]
  def apply()(using Zone): Ptr[PangoEngineShape] = scala.scalanative.unsafe.alloc[PangoEngineShape](1)
  def apply(parent_instance : PangoEngine)(using Zone): Ptr[PangoEngineShape] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: PangoEngineShape)
    def parent_instance : PangoEngine = struct._1
    def parent_instance_=(value: PangoEngine): Unit = !struct.at1 = value

/**
 * PangoEngineShapeClass: _shape: Given a font, a piece of text, and a `PangoAnalysis` structure, converts characters to glyphs and positions the resulting glyphs. The results are stored in the `PangoGlyphString` that is passed in. (The implementation should resize it appropriately using pango_glyph_string_set_size()). All fields of the _clusters and array must be filled in, with the exception that Pango will automatically generate `glyphs->glyphs[i].attr.is_cluster_start` using the _clusters array. Each input character must occur in one of the output logical clusters; if no rendering is desired for a character, this may involve inserting glyphs with the `PangoGlyph` ID %PANGO_GLYPH_EMPTY, which is guaranteed never to render. If the shaping fails for any reason, the shaper should return with an empty (zero-size) glyph string. If the shaper has not set the size on the glyph string yet, simply returning signals the failure too. : Returns the characters that this engine can cover with a given font for a given language. If not overridden, the default implementation simply returns the coverage information for the font itself unmodified.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
*/
opaque type PangoEngineShapeClass = CStruct3[PangoEngineClass, CFuncPtr8[Ptr[PangoEngineShape], Ptr[PangoFont], CString, CUnsignedInt, Ptr[Byte], Ptr[PangoGlyphString], CString, CUnsignedInt, Unit], CFuncPtr4[Ptr[PangoEngineShape], Ptr[PangoFont], Ptr[PangoLanguage], gunichar, PangoCoverageLevel]]
object PangoEngineShapeClass:
  given _tag: Tag[PangoEngineShapeClass] = Tag.materializeCStruct3Tag[PangoEngineClass, CFuncPtr8[Ptr[PangoEngineShape], Ptr[PangoFont], CString, CUnsignedInt, Ptr[Byte], Ptr[PangoGlyphString], CString, CUnsignedInt, Unit], CFuncPtr4[Ptr[PangoEngineShape], Ptr[PangoFont], Ptr[PangoLanguage], gunichar, PangoCoverageLevel]]
  def apply()(using Zone): Ptr[PangoEngineShapeClass] = scala.scalanative.unsafe.alloc[PangoEngineShapeClass](1)
  def apply(parent_class : PangoEngineClass, script_shape : CFuncPtr8[Ptr[PangoEngineShape], Ptr[PangoFont], CString, CUnsignedInt, Ptr[PangoAnalysis], Ptr[PangoGlyphString], CString, CUnsignedInt, Unit], covers : CFuncPtr4[Ptr[PangoEngineShape], Ptr[PangoFont], Ptr[PangoLanguage], gunichar, PangoCoverageLevel])(using Zone): Ptr[PangoEngineShapeClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).script_shape = script_shape
    (!____ptr).covers = covers
    ____ptr
  extension (struct: PangoEngineShapeClass)
    def parent_class : PangoEngineClass = struct._1
    def parent_class_=(value: PangoEngineClass): Unit = !struct.at1 = value
    def script_shape : CFuncPtr8[Ptr[PangoEngineShape], Ptr[PangoFont], CString, CUnsignedInt, Ptr[PangoAnalysis], Ptr[PangoGlyphString], CString, CUnsignedInt, Unit] = struct._2.asInstanceOf[CFuncPtr8[Ptr[PangoEngineShape], Ptr[PangoFont], CString, CUnsignedInt, Ptr[PangoAnalysis], Ptr[PangoGlyphString], CString, CUnsignedInt, Unit]]
    def script_shape_=(value: CFuncPtr8[Ptr[PangoEngineShape], Ptr[PangoFont], CString, CUnsignedInt, Ptr[PangoAnalysis], Ptr[PangoGlyphString], CString, CUnsignedInt, Unit]): Unit = !struct.at2 = value.asInstanceOf[CFuncPtr8[Ptr[PangoEngineShape], Ptr[PangoFont], CString, CUnsignedInt, Ptr[Byte], Ptr[PangoGlyphString], CString, CUnsignedInt, Unit]]
    def covers : CFuncPtr4[Ptr[PangoEngineShape], Ptr[PangoFont], Ptr[PangoLanguage], gunichar, PangoCoverageLevel] = struct._3
    def covers_=(value: CFuncPtr4[Ptr[PangoEngineShape], Ptr[PangoFont], Ptr[PangoLanguage], gunichar, PangoCoverageLevel]): Unit = !struct.at3 = value

/**
 * PangoFont:

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
*/
opaque type PangoFont = CStruct1[GObject]
object PangoFont:
  given _tag: Tag[PangoFont] = Tag.materializeCStruct1Tag[GObject]
  def apply()(using Zone): Ptr[PangoFont] = scala.scalanative.unsafe.alloc[PangoFont](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[PangoFont] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: PangoFont)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
*/
opaque type PangoFontClass = CStruct9[GObjectClass, CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontDescription]], CFuncPtr2[Ptr[PangoFont], Ptr[PangoLanguage], Ptr[PangoCoverage]], CFuncPtr4[Ptr[PangoFont], PangoGlyph, Ptr[PangoRectangle], Ptr[PangoRectangle], Unit], CFuncPtr2[Ptr[PangoFont], Ptr[PangoLanguage], Ptr[PangoFontMetrics]], CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontMap]], CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontDescription]], CFuncPtr4[Ptr[PangoFont], Ptr[hb_feature_t], guint, Ptr[guint], Unit], CFuncPtr1[Ptr[PangoFont], Ptr[hb_font_t]]]
object PangoFontClass:
  given _tag: Tag[PangoFontClass] = Tag.materializeCStruct9Tag[GObjectClass, CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontDescription]], CFuncPtr2[Ptr[PangoFont], Ptr[PangoLanguage], Ptr[PangoCoverage]], CFuncPtr4[Ptr[PangoFont], PangoGlyph, Ptr[PangoRectangle], Ptr[PangoRectangle], Unit], CFuncPtr2[Ptr[PangoFont], Ptr[PangoLanguage], Ptr[PangoFontMetrics]], CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontMap]], CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontDescription]], CFuncPtr4[Ptr[PangoFont], Ptr[hb_feature_t], guint, Ptr[guint], Unit], CFuncPtr1[Ptr[PangoFont], Ptr[hb_font_t]]]
  def apply()(using Zone): Ptr[PangoFontClass] = scala.scalanative.unsafe.alloc[PangoFontClass](1)
  def apply(parent_class : GObjectClass, describe : CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontDescription]], get_coverage : CFuncPtr2[Ptr[PangoFont], Ptr[PangoLanguage], Ptr[PangoCoverage]], get_glyph_extents : CFuncPtr4[Ptr[PangoFont], PangoGlyph, Ptr[PangoRectangle], Ptr[PangoRectangle], Unit], get_metrics : CFuncPtr2[Ptr[PangoFont], Ptr[PangoLanguage], Ptr[PangoFontMetrics]], get_font_map : CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontMap]], describe_absolute : CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontDescription]], get_features : CFuncPtr4[Ptr[PangoFont], Ptr[hb_feature_t], guint, Ptr[guint], Unit], create_hb_font : CFuncPtr1[Ptr[PangoFont], Ptr[hb_font_t]])(using Zone): Ptr[PangoFontClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).describe = describe
    (!____ptr).get_coverage = get_coverage
    (!____ptr).get_glyph_extents = get_glyph_extents
    (!____ptr).get_metrics = get_metrics
    (!____ptr).get_font_map = get_font_map
    (!____ptr).describe_absolute = describe_absolute
    (!____ptr).get_features = get_features
    (!____ptr).create_hb_font = create_hb_font
    ____ptr
  extension (struct: PangoFontClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def describe : CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontDescription]] = struct._2
    def describe_=(value: CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontDescription]]): Unit = !struct.at2 = value
    def get_coverage : CFuncPtr2[Ptr[PangoFont], Ptr[PangoLanguage], Ptr[PangoCoverage]] = struct._3
    def get_coverage_=(value: CFuncPtr2[Ptr[PangoFont], Ptr[PangoLanguage], Ptr[PangoCoverage]]): Unit = !struct.at3 = value
    def get_glyph_extents : CFuncPtr4[Ptr[PangoFont], PangoGlyph, Ptr[PangoRectangle], Ptr[PangoRectangle], Unit] = struct._4
    def get_glyph_extents_=(value: CFuncPtr4[Ptr[PangoFont], PangoGlyph, Ptr[PangoRectangle], Ptr[PangoRectangle], Unit]): Unit = !struct.at4 = value
    def get_metrics : CFuncPtr2[Ptr[PangoFont], Ptr[PangoLanguage], Ptr[PangoFontMetrics]] = struct._5
    def get_metrics_=(value: CFuncPtr2[Ptr[PangoFont], Ptr[PangoLanguage], Ptr[PangoFontMetrics]]): Unit = !struct.at5 = value
    def get_font_map : CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontMap]] = struct._6
    def get_font_map_=(value: CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontMap]]): Unit = !struct.at6 = value
    def describe_absolute : CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontDescription]] = struct._7
    def describe_absolute_=(value: CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontDescription]]): Unit = !struct.at7 = value
    def get_features : CFuncPtr4[Ptr[PangoFont], Ptr[hb_feature_t], guint, Ptr[guint], Unit] = struct._8
    def get_features_=(value: CFuncPtr4[Ptr[PangoFont], Ptr[hb_feature_t], guint, Ptr[guint], Unit]): Unit = !struct.at8 = value
    def create_hb_font : CFuncPtr1[Ptr[PangoFont], Ptr[hb_font_t]] = struct._9
    def create_hb_font_=(value: CFuncPtr1[Ptr[PangoFont], Ptr[hb_font_t]]): Unit = !struct.at9 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
*/
opaque type PangoFontDescription = CStruct0
object PangoFontDescription:
  given _tag: Tag[PangoFontDescription] = Tag.materializeCStruct0Tag

/**
 * PangoFontFace:

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
*/
opaque type PangoFontFace = CStruct1[GObject]
object PangoFontFace:
  given _tag: Tag[PangoFontFace] = Tag.materializeCStruct1Tag[GObject]
  def apply()(using Zone): Ptr[PangoFontFace] = scala.scalanative.unsafe.alloc[PangoFontFace](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[PangoFontFace] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: PangoFontFace)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
*/
opaque type PangoFontFaceClass = CStruct8[GObjectClass, CFuncPtr1[Ptr[PangoFontFace], CString], CFuncPtr1[Ptr[PangoFontFace], Ptr[PangoFontDescription]], CFuncPtr3[Ptr[PangoFontFace], Ptr[Ptr[CInt]], Ptr[CInt], Unit], CFuncPtr1[Ptr[PangoFontFace], gboolean], CFuncPtr1[Ptr[PangoFontFace], Ptr[PangoFontFamily]], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object PangoFontFaceClass:
  given _tag: Tag[PangoFontFaceClass] = Tag.materializeCStruct8Tag[GObjectClass, CFuncPtr1[Ptr[PangoFontFace], CString], CFuncPtr1[Ptr[PangoFontFace], Ptr[PangoFontDescription]], CFuncPtr3[Ptr[PangoFontFace], Ptr[Ptr[CInt]], Ptr[CInt], Unit], CFuncPtr1[Ptr[PangoFontFace], gboolean], CFuncPtr1[Ptr[PangoFontFace], Ptr[PangoFontFamily]], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[PangoFontFaceClass] = scala.scalanative.unsafe.alloc[PangoFontFaceClass](1)
  def apply(parent_class : GObjectClass, get_face_name : CFuncPtr1[Ptr[PangoFontFace], CString], describe : CFuncPtr1[Ptr[PangoFontFace], Ptr[PangoFontDescription]], list_sizes : CFuncPtr3[Ptr[PangoFontFace], Ptr[Ptr[CInt]], Ptr[CInt], Unit], is_synthesized : CFuncPtr1[Ptr[PangoFontFace], gboolean], get_family : CFuncPtr1[Ptr[PangoFontFace], Ptr[PangoFontFamily]], _pango_reserved3 : CFuncPtr0[Unit], _pango_reserved4 : CFuncPtr0[Unit])(using Zone): Ptr[PangoFontFaceClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_face_name = get_face_name
    (!____ptr).describe = describe
    (!____ptr).list_sizes = list_sizes
    (!____ptr).is_synthesized = is_synthesized
    (!____ptr).get_family = get_family
    (!____ptr)._pango_reserved3 = _pango_reserved3
    (!____ptr)._pango_reserved4 = _pango_reserved4
    ____ptr
  extension (struct: PangoFontFaceClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def get_face_name : CFuncPtr1[Ptr[PangoFontFace], CString] = struct._2
    def get_face_name_=(value: CFuncPtr1[Ptr[PangoFontFace], CString]): Unit = !struct.at2 = value
    def describe : CFuncPtr1[Ptr[PangoFontFace], Ptr[PangoFontDescription]] = struct._3
    def describe_=(value: CFuncPtr1[Ptr[PangoFontFace], Ptr[PangoFontDescription]]): Unit = !struct.at3 = value
    def list_sizes : CFuncPtr3[Ptr[PangoFontFace], Ptr[Ptr[CInt]], Ptr[CInt], Unit] = struct._4
    def list_sizes_=(value: CFuncPtr3[Ptr[PangoFontFace], Ptr[Ptr[CInt]], Ptr[CInt], Unit]): Unit = !struct.at4 = value
    def is_synthesized : CFuncPtr1[Ptr[PangoFontFace], gboolean] = struct._5
    def is_synthesized_=(value: CFuncPtr1[Ptr[PangoFontFace], gboolean]): Unit = !struct.at5 = value
    def get_family : CFuncPtr1[Ptr[PangoFontFace], Ptr[PangoFontFamily]] = struct._6
    def get_family_=(value: CFuncPtr1[Ptr[PangoFontFace], Ptr[PangoFontFamily]]): Unit = !struct.at6 = value
    def _pango_reserved3 : CFuncPtr0[Unit] = struct._7
    def _pango_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at7 = value
    def _pango_reserved4 : CFuncPtr0[Unit] = struct._8
    def _pango_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at8 = value

/**
 * PangoFontFamily:

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
*/
opaque type PangoFontFamily = CStruct1[GObject]
object PangoFontFamily:
  given _tag: Tag[PangoFontFamily] = Tag.materializeCStruct1Tag[GObject]
  def apply()(using Zone): Ptr[PangoFontFamily] = scala.scalanative.unsafe.alloc[PangoFontFamily](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[PangoFontFamily] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: PangoFontFamily)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
*/
opaque type PangoFontFamilyClass = CStruct7[GObjectClass, CFuncPtr3[Ptr[PangoFontFamily], Ptr[Ptr[Ptr[PangoFontFace]]], Ptr[CInt], Unit], CFuncPtr1[Ptr[PangoFontFamily], CString], CFuncPtr1[Ptr[PangoFontFamily], gboolean], CFuncPtr1[Ptr[PangoFontFamily], gboolean], CFuncPtr2[Ptr[PangoFontFamily], CString, Ptr[PangoFontFace]], CFuncPtr0[Unit]]
object PangoFontFamilyClass:
  given _tag: Tag[PangoFontFamilyClass] = Tag.materializeCStruct7Tag[GObjectClass, CFuncPtr3[Ptr[PangoFontFamily], Ptr[Ptr[Ptr[PangoFontFace]]], Ptr[CInt], Unit], CFuncPtr1[Ptr[PangoFontFamily], CString], CFuncPtr1[Ptr[PangoFontFamily], gboolean], CFuncPtr1[Ptr[PangoFontFamily], gboolean], CFuncPtr2[Ptr[PangoFontFamily], CString, Ptr[PangoFontFace]], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[PangoFontFamilyClass] = scala.scalanative.unsafe.alloc[PangoFontFamilyClass](1)
  def apply(parent_class : GObjectClass, list_faces : CFuncPtr3[Ptr[PangoFontFamily], Ptr[Ptr[Ptr[PangoFontFace]]], Ptr[CInt], Unit], get_name : CFuncPtr1[Ptr[PangoFontFamily], CString], is_monospace : CFuncPtr1[Ptr[PangoFontFamily], gboolean], is_variable : CFuncPtr1[Ptr[PangoFontFamily], gboolean], get_face : CFuncPtr2[Ptr[PangoFontFamily], CString, Ptr[PangoFontFace]], _pango_reserved2 : CFuncPtr0[Unit])(using Zone): Ptr[PangoFontFamilyClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).list_faces = list_faces
    (!____ptr).get_name = get_name
    (!____ptr).is_monospace = is_monospace
    (!____ptr).is_variable = is_variable
    (!____ptr).get_face = get_face
    (!____ptr)._pango_reserved2 = _pango_reserved2
    ____ptr
  extension (struct: PangoFontFamilyClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def list_faces : CFuncPtr3[Ptr[PangoFontFamily], Ptr[Ptr[Ptr[PangoFontFace]]], Ptr[CInt], Unit] = struct._2
    def list_faces_=(value: CFuncPtr3[Ptr[PangoFontFamily], Ptr[Ptr[Ptr[PangoFontFace]]], Ptr[CInt], Unit]): Unit = !struct.at2 = value
    def get_name : CFuncPtr1[Ptr[PangoFontFamily], CString] = struct._3
    def get_name_=(value: CFuncPtr1[Ptr[PangoFontFamily], CString]): Unit = !struct.at3 = value
    def is_monospace : CFuncPtr1[Ptr[PangoFontFamily], gboolean] = struct._4
    def is_monospace_=(value: CFuncPtr1[Ptr[PangoFontFamily], gboolean]): Unit = !struct.at4 = value
    def is_variable : CFuncPtr1[Ptr[PangoFontFamily], gboolean] = struct._5
    def is_variable_=(value: CFuncPtr1[Ptr[PangoFontFamily], gboolean]): Unit = !struct.at5 = value
    def get_face : CFuncPtr2[Ptr[PangoFontFamily], CString, Ptr[PangoFontFace]] = struct._6
    def get_face_=(value: CFuncPtr2[Ptr[PangoFontFamily], CString, Ptr[PangoFontFace]]): Unit = !struct.at6 = value
    def _pango_reserved2 : CFuncPtr0[Unit] = struct._7
    def _pango_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at7 = value

/**
 * PangoFontMap:

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontmap.h
*/
opaque type PangoFontMap = CStruct1[GObject]
object PangoFontMap:
  given _tag: Tag[PangoFontMap] = Tag.materializeCStruct1Tag[GObject]
  def apply()(using Zone): Ptr[PangoFontMap] = scala.scalanative.unsafe.alloc[PangoFontMap](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[PangoFontMap] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: PangoFontMap)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value

/**
 * PangoFontMapClass: _class: parent `GObjectClass` _font: a function to load a font with a given description. See pango_font_map_load_font(). _families: A function to list available font families. See pango_font_map_list_families(). _fontset: a function to load a fontset with a given given description suitable for a particular language. See pango_font_map_load_fontset(). _engine_type: the type of rendering-system-dependent engines that can handle fonts of this fonts loaded with this fontmap. _serial: a function to get the serial number of the fontmap. See pango_font_map_get_serial(). : See pango_font_map_changed()

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontmap.h
*/
opaque type PangoFontMapClass = CStruct9[GObjectClass, CFuncPtr3[Ptr[PangoFontMap], Ptr[PangoContext], Ptr[PangoFontDescription], Ptr[PangoFont]], CFuncPtr3[Ptr[PangoFontMap], Ptr[Ptr[Ptr[PangoFontFamily]]], Ptr[CInt], Unit], CFuncPtr4[Ptr[PangoFontMap], Ptr[PangoContext], Ptr[PangoFontDescription], Ptr[PangoLanguage], Ptr[PangoFontset]], CString, CFuncPtr1[Ptr[PangoFontMap], guint], CFuncPtr1[Ptr[PangoFontMap], Unit], CFuncPtr2[Ptr[PangoFontMap], CString, Ptr[PangoFontFamily]], CFuncPtr2[Ptr[PangoFontMap], Ptr[PangoFont], Ptr[PangoFontFace]]]
object PangoFontMapClass:
  given _tag: Tag[PangoFontMapClass] = Tag.materializeCStruct9Tag[GObjectClass, CFuncPtr3[Ptr[PangoFontMap], Ptr[PangoContext], Ptr[PangoFontDescription], Ptr[PangoFont]], CFuncPtr3[Ptr[PangoFontMap], Ptr[Ptr[Ptr[PangoFontFamily]]], Ptr[CInt], Unit], CFuncPtr4[Ptr[PangoFontMap], Ptr[PangoContext], Ptr[PangoFontDescription], Ptr[PangoLanguage], Ptr[PangoFontset]], CString, CFuncPtr1[Ptr[PangoFontMap], guint], CFuncPtr1[Ptr[PangoFontMap], Unit], CFuncPtr2[Ptr[PangoFontMap], CString, Ptr[PangoFontFamily]], CFuncPtr2[Ptr[PangoFontMap], Ptr[PangoFont], Ptr[PangoFontFace]]]
  def apply()(using Zone): Ptr[PangoFontMapClass] = scala.scalanative.unsafe.alloc[PangoFontMapClass](1)
  def apply(parent_class : GObjectClass, load_font : CFuncPtr3[Ptr[PangoFontMap], Ptr[PangoContext], Ptr[PangoFontDescription], Ptr[PangoFont]], list_families : CFuncPtr3[Ptr[PangoFontMap], Ptr[Ptr[Ptr[PangoFontFamily]]], Ptr[CInt], Unit], load_fontset : CFuncPtr4[Ptr[PangoFontMap], Ptr[PangoContext], Ptr[PangoFontDescription], Ptr[PangoLanguage], Ptr[PangoFontset]], shape_engine_type : CString, get_serial : CFuncPtr1[Ptr[PangoFontMap], guint], changed : CFuncPtr1[Ptr[PangoFontMap], Unit], get_family : CFuncPtr2[Ptr[PangoFontMap], CString, Ptr[PangoFontFamily]], get_face : CFuncPtr2[Ptr[PangoFontMap], Ptr[PangoFont], Ptr[PangoFontFace]])(using Zone): Ptr[PangoFontMapClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).load_font = load_font
    (!____ptr).list_families = list_families
    (!____ptr).load_fontset = load_fontset
    (!____ptr).shape_engine_type = shape_engine_type
    (!____ptr).get_serial = get_serial
    (!____ptr).changed = changed
    (!____ptr).get_family = get_family
    (!____ptr).get_face = get_face
    ____ptr
  extension (struct: PangoFontMapClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def load_font : CFuncPtr3[Ptr[PangoFontMap], Ptr[PangoContext], Ptr[PangoFontDescription], Ptr[PangoFont]] = struct._2
    def load_font_=(value: CFuncPtr3[Ptr[PangoFontMap], Ptr[PangoContext], Ptr[PangoFontDescription], Ptr[PangoFont]]): Unit = !struct.at2 = value
    def list_families : CFuncPtr3[Ptr[PangoFontMap], Ptr[Ptr[Ptr[PangoFontFamily]]], Ptr[CInt], Unit] = struct._3
    def list_families_=(value: CFuncPtr3[Ptr[PangoFontMap], Ptr[Ptr[Ptr[PangoFontFamily]]], Ptr[CInt], Unit]): Unit = !struct.at3 = value
    def load_fontset : CFuncPtr4[Ptr[PangoFontMap], Ptr[PangoContext], Ptr[PangoFontDescription], Ptr[PangoLanguage], Ptr[PangoFontset]] = struct._4
    def load_fontset_=(value: CFuncPtr4[Ptr[PangoFontMap], Ptr[PangoContext], Ptr[PangoFontDescription], Ptr[PangoLanguage], Ptr[PangoFontset]]): Unit = !struct.at4 = value
    def shape_engine_type : CString = struct._5
    def shape_engine_type_=(value: CString): Unit = !struct.at5 = value
    def get_serial : CFuncPtr1[Ptr[PangoFontMap], guint] = struct._6
    def get_serial_=(value: CFuncPtr1[Ptr[PangoFontMap], guint]): Unit = !struct.at6 = value
    def changed : CFuncPtr1[Ptr[PangoFontMap], Unit] = struct._7
    def changed_=(value: CFuncPtr1[Ptr[PangoFontMap], Unit]): Unit = !struct.at7 = value
    def get_family : CFuncPtr2[Ptr[PangoFontMap], CString, Ptr[PangoFontFamily]] = struct._8
    def get_family_=(value: CFuncPtr2[Ptr[PangoFontMap], CString, Ptr[PangoFontFamily]]): Unit = !struct.at8 = value
    def get_face : CFuncPtr2[Ptr[PangoFontMap], Ptr[PangoFont], Ptr[PangoFontFace]] = struct._9
    def get_face_=(value: CFuncPtr2[Ptr[PangoFontMap], Ptr[PangoFont], Ptr[PangoFontFace]]): Unit = !struct.at9 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
*/
opaque type PangoFontMetrics = CStruct10[guint, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt]
object PangoFontMetrics:
  given _tag: Tag[PangoFontMetrics] = Tag.materializeCStruct10Tag[guint, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt]
  def apply()(using Zone): Ptr[PangoFontMetrics] = scala.scalanative.unsafe.alloc[PangoFontMetrics](1)
  def apply(ref_count : guint, ascent : CInt, descent : CInt, height : CInt, approximate_char_width : CInt, approximate_digit_width : CInt, underline_position : CInt, underline_thickness : CInt, strikethrough_position : CInt, strikethrough_thickness : CInt)(using Zone): Ptr[PangoFontMetrics] = 
    val ____ptr = apply()
    (!____ptr).ref_count = ref_count
    (!____ptr).ascent = ascent
    (!____ptr).descent = descent
    (!____ptr).height = height
    (!____ptr).approximate_char_width = approximate_char_width
    (!____ptr).approximate_digit_width = approximate_digit_width
    (!____ptr).underline_position = underline_position
    (!____ptr).underline_thickness = underline_thickness
    (!____ptr).strikethrough_position = strikethrough_position
    (!____ptr).strikethrough_thickness = strikethrough_thickness
    ____ptr
  extension (struct: PangoFontMetrics)
    def ref_count : guint = struct._1
    def ref_count_=(value: guint): Unit = !struct.at1 = value
    def ascent : CInt = struct._2
    def ascent_=(value: CInt): Unit = !struct.at2 = value
    def descent : CInt = struct._3
    def descent_=(value: CInt): Unit = !struct.at3 = value
    def height : CInt = struct._4
    def height_=(value: CInt): Unit = !struct.at4 = value
    def approximate_char_width : CInt = struct._5
    def approximate_char_width_=(value: CInt): Unit = !struct.at5 = value
    def approximate_digit_width : CInt = struct._6
    def approximate_digit_width_=(value: CInt): Unit = !struct.at6 = value
    def underline_position : CInt = struct._7
    def underline_position_=(value: CInt): Unit = !struct.at7 = value
    def underline_thickness : CInt = struct._8
    def underline_thickness_=(value: CInt): Unit = !struct.at8 = value
    def strikethrough_position : CInt = struct._9
    def strikethrough_position_=(value: CInt): Unit = !struct.at9 = value
    def strikethrough_thickness : CInt = struct._10
    def strikethrough_thickness_=(value: CInt): Unit = !struct.at10 = value

/**
 * PangoFontset:

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontset.h
*/
opaque type PangoFontset = CStruct1[GObject]
object PangoFontset:
  given _tag: Tag[PangoFontset] = Tag.materializeCStruct1Tag[GObject]
  def apply()(using Zone): Ptr[PangoFontset] = scala.scalanative.unsafe.alloc[PangoFontset](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[PangoFontset] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: PangoFontset)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value

/**
 * PangoFontsetClass: _class: parent `GObjectClass` _font: a function to get the font in the fontset that contains the best glyph for the given Unicode character; see [method.Fontset.get_font] _metrics: a function to get overall metric information for the fonts in the fontset; see [method.Fontset.get_metrics] _language: a function to get the language of the fontset. : a function to loop over the fonts in the fontset. See [method.Fontset.foreach]

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontset.h
*/
opaque type PangoFontsetClass = CStruct9[GObjectClass, CFuncPtr2[Ptr[PangoFontset], guint, Ptr[PangoFont]], CFuncPtr1[Ptr[PangoFontset], Ptr[PangoFontMetrics]], CFuncPtr1[Ptr[PangoFontset], Ptr[PangoLanguage]], CFuncPtr3[Ptr[PangoFontset], PangoFontsetForeachFunc, gpointer, Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object PangoFontsetClass:
  given _tag: Tag[PangoFontsetClass] = Tag.materializeCStruct9Tag[GObjectClass, CFuncPtr2[Ptr[PangoFontset], guint, Ptr[PangoFont]], CFuncPtr1[Ptr[PangoFontset], Ptr[PangoFontMetrics]], CFuncPtr1[Ptr[PangoFontset], Ptr[PangoLanguage]], CFuncPtr3[Ptr[PangoFontset], PangoFontsetForeachFunc, gpointer, Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[PangoFontsetClass] = scala.scalanative.unsafe.alloc[PangoFontsetClass](1)
  def apply(parent_class : GObjectClass, get_font : CFuncPtr2[Ptr[PangoFontset], guint, Ptr[PangoFont]], get_metrics : CFuncPtr1[Ptr[PangoFontset], Ptr[PangoFontMetrics]], get_language : CFuncPtr1[Ptr[PangoFontset], Ptr[PangoLanguage]], foreach : CFuncPtr3[Ptr[PangoFontset], PangoFontsetForeachFunc, gpointer, Unit], _pango_reserved1 : CFuncPtr0[Unit], _pango_reserved2 : CFuncPtr0[Unit], _pango_reserved3 : CFuncPtr0[Unit], _pango_reserved4 : CFuncPtr0[Unit])(using Zone): Ptr[PangoFontsetClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_font = get_font
    (!____ptr).get_metrics = get_metrics
    (!____ptr).get_language = get_language
    (!____ptr).foreach = foreach
    (!____ptr)._pango_reserved1 = _pango_reserved1
    (!____ptr)._pango_reserved2 = _pango_reserved2
    (!____ptr)._pango_reserved3 = _pango_reserved3
    (!____ptr)._pango_reserved4 = _pango_reserved4
    ____ptr
  extension (struct: PangoFontsetClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def get_font : CFuncPtr2[Ptr[PangoFontset], guint, Ptr[PangoFont]] = struct._2
    def get_font_=(value: CFuncPtr2[Ptr[PangoFontset], guint, Ptr[PangoFont]]): Unit = !struct.at2 = value
    def get_metrics : CFuncPtr1[Ptr[PangoFontset], Ptr[PangoFontMetrics]] = struct._3
    def get_metrics_=(value: CFuncPtr1[Ptr[PangoFontset], Ptr[PangoFontMetrics]]): Unit = !struct.at3 = value
    def get_language : CFuncPtr1[Ptr[PangoFontset], Ptr[PangoLanguage]] = struct._4
    def get_language_=(value: CFuncPtr1[Ptr[PangoFontset], Ptr[PangoLanguage]]): Unit = !struct.at4 = value
    def foreach : CFuncPtr3[Ptr[PangoFontset], PangoFontsetForeachFunc, gpointer, Unit] = struct._5
    def foreach_=(value: CFuncPtr3[Ptr[PangoFontset], PangoFontsetForeachFunc, gpointer, Unit]): Unit = !struct.at5 = value
    def _pango_reserved1 : CFuncPtr0[Unit] = struct._6
    def _pango_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at6 = value
    def _pango_reserved2 : CFuncPtr0[Unit] = struct._7
    def _pango_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at7 = value
    def _pango_reserved3 : CFuncPtr0[Unit] = struct._8
    def _pango_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at8 = value
    def _pango_reserved4 : CFuncPtr0[Unit] = struct._9
    def _pango_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at9 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontset-simple.h
*/
opaque type PangoFontsetSimple = CStruct0
object PangoFontsetSimple:
  given _tag: Tag[PangoFontsetSimple] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontset-simple.h
*/
opaque type PangoFontsetSimpleClass = CStruct0
object PangoFontsetSimpleClass:
  given _tag: Tag[PangoFontsetSimpleClass] = Tag.materializeCStruct0Tag

/**
 * PangoGlyphGeometry: : the logical width to use for the the character. _offset: horizontal offset from nominal character position. _offset: vertical offset from nominal character position.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
*/
opaque type PangoGlyphGeometry = CStruct3[PangoGlyphUnit, PangoGlyphUnit, PangoGlyphUnit]
object PangoGlyphGeometry:
  given _tag: Tag[PangoGlyphGeometry] = Tag.materializeCStruct3Tag[PangoGlyphUnit, PangoGlyphUnit, PangoGlyphUnit]
  def apply()(using Zone): Ptr[PangoGlyphGeometry] = scala.scalanative.unsafe.alloc[PangoGlyphGeometry](1)
  def apply(width : PangoGlyphUnit, x_offset : PangoGlyphUnit, y_offset : PangoGlyphUnit)(using Zone): Ptr[PangoGlyphGeometry] = 
    val ____ptr = apply()
    (!____ptr).width = width
    (!____ptr).x_offset = x_offset
    (!____ptr).y_offset = y_offset
    ____ptr
  extension (struct: PangoGlyphGeometry)
    def width : PangoGlyphUnit = struct._1
    def width_=(value: PangoGlyphUnit): Unit = !struct.at1 = value
    def x_offset : PangoGlyphUnit = struct._2
    def x_offset_=(value: PangoGlyphUnit): Unit = !struct.at2 = value
    def y_offset : PangoGlyphUnit = struct._3
    def y_offset_=(value: PangoGlyphUnit): Unit = !struct.at3 = value

/**
 * PangoGlyphInfo: : the glyph itself. : the positional information about the glyph. : the visual attributes of the glyph.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
*/
opaque type PangoGlyphInfo = CStruct3[PangoGlyph, PangoGlyphGeometry, PangoGlyphVisAttr]
object PangoGlyphInfo:
  given _tag: Tag[PangoGlyphInfo] = Tag.materializeCStruct3Tag[PangoGlyph, PangoGlyphGeometry, PangoGlyphVisAttr]
  def apply()(using Zone): Ptr[PangoGlyphInfo] = scala.scalanative.unsafe.alloc[PangoGlyphInfo](1)
  def apply(glyph : PangoGlyph, geometry : PangoGlyphGeometry, attr : PangoGlyphVisAttr)(using Zone): Ptr[PangoGlyphInfo] = 
    val ____ptr = apply()
    (!____ptr).glyph = glyph
    (!____ptr).geometry = geometry
    (!____ptr).attr = attr
    ____ptr
  extension (struct: PangoGlyphInfo)
    def glyph : PangoGlyph = struct._1
    def glyph_=(value: PangoGlyph): Unit = !struct.at1 = value
    def geometry : PangoGlyphGeometry = struct._2
    def geometry_=(value: PangoGlyphGeometry): Unit = !struct.at2 = value
    def attr : PangoGlyphVisAttr = struct._3
    def attr_=(value: PangoGlyphVisAttr): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph-item.h
*/
opaque type PangoGlyphItem = CStruct5[Ptr[Byte], Ptr[PangoGlyphString], CInt, CInt, CInt]
object PangoGlyphItem:
  given _tag: Tag[PangoGlyphItem] = Tag.materializeCStruct5Tag[Ptr[Byte], Ptr[PangoGlyphString], CInt, CInt, CInt]
  def apply()(using Zone): Ptr[PangoGlyphItem] = scala.scalanative.unsafe.alloc[PangoGlyphItem](1)
  def apply(item : Ptr[PangoItem], glyphs : Ptr[PangoGlyphString], y_offset : CInt, start_x_offset : CInt, end_x_offset : CInt)(using Zone): Ptr[PangoGlyphItem] = 
    val ____ptr = apply()
    (!____ptr).item = item
    (!____ptr).glyphs = glyphs
    (!____ptr).y_offset = y_offset
    (!____ptr).start_x_offset = start_x_offset
    (!____ptr).end_x_offset = end_x_offset
    ____ptr
  extension (struct: PangoGlyphItem)
    def item : Ptr[PangoItem] = struct._1.asInstanceOf[Ptr[PangoItem]]
    def item_=(value: Ptr[PangoItem]): Unit = !struct.at1 = value.asInstanceOf[Ptr[Byte]]
    def glyphs : Ptr[PangoGlyphString] = struct._2
    def glyphs_=(value: Ptr[PangoGlyphString]): Unit = !struct.at2 = value
    def y_offset : CInt = struct._3
    def y_offset_=(value: CInt): Unit = !struct.at3 = value
    def start_x_offset : CInt = struct._4
    def start_x_offset_=(value: CInt): Unit = !struct.at4 = value
    def end_x_offset : CInt = struct._5
    def end_x_offset_=(value: CInt): Unit = !struct.at5 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph-item.h
*/
opaque type PangoGlyphItemIter = CStruct8[Ptr[Byte], Ptr[gchar], CInt, CInt, CInt, CInt, CInt, CInt]
object PangoGlyphItemIter:
  given _tag: Tag[PangoGlyphItemIter] = Tag.materializeCStruct8Tag[Ptr[Byte], Ptr[gchar], CInt, CInt, CInt, CInt, CInt, CInt]
  def apply()(using Zone): Ptr[PangoGlyphItemIter] = scala.scalanative.unsafe.alloc[PangoGlyphItemIter](1)
  def apply(glyph_item : Ptr[PangoGlyphItem], text : Ptr[gchar], start_glyph : CInt, start_index : CInt, start_char : CInt, end_glyph : CInt, end_index : CInt, end_char : CInt)(using Zone): Ptr[PangoGlyphItemIter] = 
    val ____ptr = apply()
    (!____ptr).glyph_item = glyph_item
    (!____ptr).text = text
    (!____ptr).start_glyph = start_glyph
    (!____ptr).start_index = start_index
    (!____ptr).start_char = start_char
    (!____ptr).end_glyph = end_glyph
    (!____ptr).end_index = end_index
    (!____ptr).end_char = end_char
    ____ptr
  extension (struct: PangoGlyphItemIter)
    def glyph_item : Ptr[PangoGlyphItem] = struct._1.asInstanceOf[Ptr[PangoGlyphItem]]
    def glyph_item_=(value: Ptr[PangoGlyphItem]): Unit = !struct.at1 = value.asInstanceOf[Ptr[Byte]]
    def text : Ptr[gchar] = struct._2
    def text_=(value: Ptr[gchar]): Unit = !struct.at2 = value
    def start_glyph : CInt = struct._3
    def start_glyph_=(value: CInt): Unit = !struct.at3 = value
    def start_index : CInt = struct._4
    def start_index_=(value: CInt): Unit = !struct.at4 = value
    def start_char : CInt = struct._5
    def start_char_=(value: CInt): Unit = !struct.at5 = value
    def end_glyph : CInt = struct._6
    def end_glyph_=(value: CInt): Unit = !struct.at6 = value
    def end_index : CInt = struct._7
    def end_index_=(value: CInt): Unit = !struct.at7 = value
    def end_char : CInt = struct._8
    def end_char_=(value: CInt): Unit = !struct.at8 = value

/**
 * PangoGlyphString: : (array length=num_glyphs): array of glyph information _clusters: logical cluster info, indexed by the byte index within the text corresponding to the glyph string

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
*/
opaque type PangoGlyphString = CStruct4[CInt, Ptr[PangoGlyphInfo], Ptr[CInt], CInt]
object PangoGlyphString:
  given _tag: Tag[PangoGlyphString] = Tag.materializeCStruct4Tag[CInt, Ptr[PangoGlyphInfo], Ptr[CInt], CInt]
  def apply()(using Zone): Ptr[PangoGlyphString] = scala.scalanative.unsafe.alloc[PangoGlyphString](1)
  def apply(num_glyphs : CInt, glyphs : Ptr[PangoGlyphInfo], log_clusters : Ptr[CInt], space : CInt)(using Zone): Ptr[PangoGlyphString] = 
    val ____ptr = apply()
    (!____ptr).num_glyphs = num_glyphs
    (!____ptr).glyphs = glyphs
    (!____ptr).log_clusters = log_clusters
    (!____ptr).space = space
    ____ptr
  extension (struct: PangoGlyphString)
    def num_glyphs : CInt = struct._1
    def num_glyphs_=(value: CInt): Unit = !struct.at1 = value
    def glyphs : Ptr[PangoGlyphInfo] = struct._2
    def glyphs_=(value: Ptr[PangoGlyphInfo]): Unit = !struct.at2 = value
    def log_clusters : Ptr[CInt] = struct._3
    def log_clusters_=(value: Ptr[CInt]): Unit = !struct.at3 = value
    def space : CInt = struct._4
    def space_=(value: CInt): Unit = !struct.at4 = value

/**
 * PangoGlyphVisAttr:

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
*/
opaque type PangoGlyphVisAttr = CStruct2[guint, guint]
object PangoGlyphVisAttr:
  given _tag: Tag[PangoGlyphVisAttr] = Tag.materializeCStruct2Tag[guint, guint]
  def apply()(using Zone): Ptr[PangoGlyphVisAttr] = scala.scalanative.unsafe.alloc[PangoGlyphVisAttr](1)
  def apply(is_cluster_start : guint, is_color : guint)(using Zone): Ptr[PangoGlyphVisAttr] = 
    val ____ptr = apply()
    (!____ptr).is_cluster_start = is_cluster_start
    (!____ptr).is_color = is_color
    ____ptr
  extension (struct: PangoGlyphVisAttr)
    def is_cluster_start : guint = struct._1
    def is_cluster_start_=(value: guint): Unit = !struct.at1 = value
    def is_color : guint = struct._2
    def is_color_=(value: guint): Unit = !struct.at2 = value

/**
 * PangoItem: : byte offset of the start of this item in text. : length of this item in bytes. _offset: character offset of the start of this item in text. Since 1.50 : analysis results for the item.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-item.h
*/
opaque type PangoItem = CStruct4[CInt, CInt, CInt, PangoAnalysis]
object PangoItem:
  given _tag: Tag[PangoItem] = Tag.materializeCStruct4Tag[CInt, CInt, CInt, PangoAnalysis]
  def apply()(using Zone): Ptr[PangoItem] = scala.scalanative.unsafe.alloc[PangoItem](1)
  def apply(offset : CInt, length : CInt, num_chars : CInt, analysis : PangoAnalysis)(using Zone): Ptr[PangoItem] = 
    val ____ptr = apply()
    (!____ptr).offset = offset
    (!____ptr).length = length
    (!____ptr).num_chars = num_chars
    (!____ptr).analysis = analysis
    ____ptr
  extension (struct: PangoItem)
    def offset : CInt = struct._1
    def offset_=(value: CInt): Unit = !struct.at1 = value
    def length : CInt = struct._2
    def length_=(value: CInt): Unit = !struct.at2 = value
    def num_chars : CInt = struct._3
    def num_chars_=(value: CInt): Unit = !struct.at3 = value
    def analysis : PangoAnalysis = struct._4
    def analysis_=(value: PangoAnalysis): Unit = !struct.at4 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-types.h
*/
opaque type PangoLanguage = CStruct0
object PangoLanguage:
  given _tag: Tag[PangoLanguage] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
*/
opaque type PangoLayout = CStruct0
object PangoLayout:
  given _tag: Tag[PangoLayout] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
*/
opaque type PangoLayoutClass = CStruct0
object PangoLayoutClass:
  given _tag: Tag[PangoLayoutClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
*/
opaque type PangoLayoutIter = CStruct0
object PangoLayoutIter:
  given _tag: Tag[PangoLayoutIter] = Tag.materializeCStruct0Tag

/**
 * PangoLayoutLine: : (nullable): the layout this line belongs to, might be %NULL _index: start of line as byte index into layout->text : length of line in bytes : (nullable) (element-type Pango.LayoutRun): list of runs in the line, from left to right _dir: #Resolved PangoDirection of line

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
*/
opaque type PangoLayoutLine = CStruct6[Ptr[PangoLayout], gint, gint, Ptr[Byte], guint, guint]
object PangoLayoutLine:
  given _tag: Tag[PangoLayoutLine] = Tag.materializeCStruct6Tag[Ptr[PangoLayout], gint, gint, Ptr[Byte], guint, guint]
  def apply()(using Zone): Ptr[PangoLayoutLine] = scala.scalanative.unsafe.alloc[PangoLayoutLine](1)
  def apply(layout : Ptr[PangoLayout], start_index : gint, length : gint, runs : Ptr[GSList], is_paragraph_start : guint, resolved_dir : guint)(using Zone): Ptr[PangoLayoutLine] = 
    val ____ptr = apply()
    (!____ptr).layout = layout
    (!____ptr).start_index = start_index
    (!____ptr).length = length
    (!____ptr).runs = runs
    (!____ptr).is_paragraph_start = is_paragraph_start
    (!____ptr).resolved_dir = resolved_dir
    ____ptr
  extension (struct: PangoLayoutLine)
    def layout : Ptr[PangoLayout] = struct._1
    def layout_=(value: Ptr[PangoLayout]): Unit = !struct.at1 = value
    def start_index : gint = struct._2
    def start_index_=(value: gint): Unit = !struct.at2 = value
    def length : gint = struct._3
    def length_=(value: gint): Unit = !struct.at3 = value
    def runs : Ptr[GSList] = struct._4.asInstanceOf[Ptr[GSList]]
    def runs_=(value: Ptr[GSList]): Unit = !struct.at4 = value.asInstanceOf[Ptr[Byte]]
    def is_paragraph_start : guint = struct._5
    def is_paragraph_start_=(value: guint): Unit = !struct.at5 = value
    def resolved_dir : guint = struct._6
    def resolved_dir_=(value: guint): Unit = !struct.at6 = value

/**
 * PangoLogAttr: i.e. this is a grapheme boundary, or the first character in the text. This flag implements Unicode's [Grapheme Cluster Boundaries](http://www.unicode.org/reports/tr29/) semantics. Note that in degenerate cases, you could have both and There are two ways to divide sentences. The first assigns all inter-sentence whitespace/control/format chars to some sentence, so all chars are in some sentence; the boundaries there. The second way doesn't assign between-sentence spaces, etc. to any sentence, so Note that in degenerate cases, you could have both and period, so the next sentence starts right away) _deletes_character: if set, backspace deletes one character rather than the entire grapheme cluster. This field is only meaningful on grapheme boundaries (where the full grapheme (e.g. letter + diacritics) is considered a unit, while in others, each decomposed character in the grapheme is a unit. In the default implementation of [func], this bit is set on all grapheme boundaries except those following Latin, Cyrillic or Greek base characters. expanded for justification purposes. (Since: 1.18) More specifically, means that this is not a position in the middle of a word. For example, both sides of a punctuation mark are considered word boundaries. This flag is particularly useful when selecting text word-by-word. This flag implements Unicode's [Word Boundaries](http://www.unicode.org/reports/tr29/) semantics. (Since: 1.22) _inserts_hyphen: when breaking lines before this char, insert a hyphen. Since: 1.50 _removes_preceding: when breaking lines before this char, remove the preceding char. Since 1.50

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-break.h
*/
opaque type PangoLogAttr = CStruct16[guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint]
object PangoLogAttr:
  given _tag: Tag[PangoLogAttr] = Tag.materializeCStruct16Tag[guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint]
  def apply()(using Zone): Ptr[PangoLogAttr] = scala.scalanative.unsafe.alloc[PangoLogAttr](1)
  def apply(is_line_break : guint, is_mandatory_break : guint, is_char_break : guint, is_white : guint, is_cursor_position : guint, is_word_start : guint, is_word_end : guint, is_sentence_boundary : guint, is_sentence_start : guint, is_sentence_end : guint, backspace_deletes_character : guint, is_expandable_space : guint, is_word_boundary : guint, break_inserts_hyphen : guint, break_removes_preceding : guint, reserved : guint)(using Zone): Ptr[PangoLogAttr] = 
    val ____ptr = apply()
    (!____ptr).is_line_break = is_line_break
    (!____ptr).is_mandatory_break = is_mandatory_break
    (!____ptr).is_char_break = is_char_break
    (!____ptr).is_white = is_white
    (!____ptr).is_cursor_position = is_cursor_position
    (!____ptr).is_word_start = is_word_start
    (!____ptr).is_word_end = is_word_end
    (!____ptr).is_sentence_boundary = is_sentence_boundary
    (!____ptr).is_sentence_start = is_sentence_start
    (!____ptr).is_sentence_end = is_sentence_end
    (!____ptr).backspace_deletes_character = backspace_deletes_character
    (!____ptr).is_expandable_space = is_expandable_space
    (!____ptr).is_word_boundary = is_word_boundary
    (!____ptr).break_inserts_hyphen = break_inserts_hyphen
    (!____ptr).break_removes_preceding = break_removes_preceding
    (!____ptr).reserved = reserved
    ____ptr
  extension (struct: PangoLogAttr)
    def is_line_break : guint = struct._1
    def is_line_break_=(value: guint): Unit = !struct.at1 = value
    def is_mandatory_break : guint = struct._2
    def is_mandatory_break_=(value: guint): Unit = !struct.at2 = value
    def is_char_break : guint = struct._3
    def is_char_break_=(value: guint): Unit = !struct.at3 = value
    def is_white : guint = struct._4
    def is_white_=(value: guint): Unit = !struct.at4 = value
    def is_cursor_position : guint = struct._5
    def is_cursor_position_=(value: guint): Unit = !struct.at5 = value
    def is_word_start : guint = struct._6
    def is_word_start_=(value: guint): Unit = !struct.at6 = value
    def is_word_end : guint = struct._7
    def is_word_end_=(value: guint): Unit = !struct.at7 = value
    def is_sentence_boundary : guint = struct._8
    def is_sentence_boundary_=(value: guint): Unit = !struct.at8 = value
    def is_sentence_start : guint = struct._9
    def is_sentence_start_=(value: guint): Unit = !struct.at9 = value
    def is_sentence_end : guint = struct._10
    def is_sentence_end_=(value: guint): Unit = !struct.at10 = value
    def backspace_deletes_character : guint = struct._11
    def backspace_deletes_character_=(value: guint): Unit = !struct.at11 = value
    def is_expandable_space : guint = struct._12
    def is_expandable_space_=(value: guint): Unit = !struct.at12 = value
    def is_word_boundary : guint = struct._13
    def is_word_boundary_=(value: guint): Unit = !struct.at13 = value
    def break_inserts_hyphen : guint = struct._14
    def break_inserts_hyphen_=(value: guint): Unit = !struct.at14 = value
    def break_removes_preceding : guint = struct._15
    def break_removes_preceding_=(value: guint): Unit = !struct.at15 = value
    def reserved : guint = struct._16
    def reserved_=(value: guint): Unit = !struct.at16 = value

/**
 * PangoMatrix: : 1st component of the transformation matrix : 2nd component of the transformation matrix : 3rd component of the transformation matrix : 4th component of the transformation matrix : x translation : y translation

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-matrix.h
*/
opaque type PangoMatrix = CStruct6[Double, Double, Double, Double, Double, Double]
object PangoMatrix:
  given _tag: Tag[PangoMatrix] = Tag.materializeCStruct6Tag[Double, Double, Double, Double, Double, Double]
  def apply()(using Zone): Ptr[PangoMatrix] = scala.scalanative.unsafe.alloc[PangoMatrix](1)
  def apply(xx : Double, xy : Double, yx : Double, yy : Double, x0 : Double, y0 : Double)(using Zone): Ptr[PangoMatrix] = 
    val ____ptr = apply()
    (!____ptr).xx = xx
    (!____ptr).xy = xy
    (!____ptr).yx = yx
    (!____ptr).yy = yy
    (!____ptr).x0 = x0
    (!____ptr).y0 = y0
    ____ptr
  extension (struct: PangoMatrix)
    def xx : Double = struct._1
    def xx_=(value: Double): Unit = !struct.at1 = value
    def xy : Double = struct._2
    def xy_=(value: Double): Unit = !struct.at2 = value
    def yx : Double = struct._3
    def yx_=(value: Double): Unit = !struct.at3 = value
    def yy : Double = struct._4
    def yy_=(value: Double): Unit = !struct.at4 = value
    def x0 : Double = struct._5
    def x0_=(value: Double): Unit = !struct.at5 = value
    def y0 : Double = struct._6
    def y0_=(value: Double): Unit = !struct.at6 = value

/**
 * PangoRectangle: : X coordinate of the left side of the rectangle. : Y coordinate of the the top side of the rectangle. : width of the rectangle. : height of the rectangle.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-types.h
*/
opaque type PangoRectangle = CStruct4[CInt, CInt, CInt, CInt]
object PangoRectangle:
  given _tag: Tag[PangoRectangle] = Tag.materializeCStruct4Tag[CInt, CInt, CInt, CInt]
  def apply()(using Zone): Ptr[PangoRectangle] = scala.scalanative.unsafe.alloc[PangoRectangle](1)
  def apply(x : CInt, y : CInt, width : CInt, height : CInt)(using Zone): Ptr[PangoRectangle] = 
    val ____ptr = apply()
    (!____ptr).x = x
    (!____ptr).y = y
    (!____ptr).width = width
    (!____ptr).height = height
    ____ptr
  extension (struct: PangoRectangle)
    def x : CInt = struct._1
    def x_=(value: CInt): Unit = !struct.at1 = value
    def y : CInt = struct._2
    def y_=(value: CInt): Unit = !struct.at2 = value
    def width : CInt = struct._3
    def width_=(value: CInt): Unit = !struct.at3 = value
    def height : CInt = struct._4
    def height_=(value: CInt): Unit = !struct.at4 = value

/**
 * PangoRenderer: : (nullable): the current transformation matrix for the Renderer; may be %NULL, which should be treated the same as the identity matrix.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
*/
opaque type PangoRenderer = CStruct6[GObject, PangoUnderline, gboolean, CInt, Ptr[PangoMatrix], Ptr[PangoRendererPrivate]]
object PangoRenderer:
  given _tag: Tag[PangoRenderer] = Tag.materializeCStruct6Tag[GObject, PangoUnderline, gboolean, CInt, Ptr[PangoMatrix], Ptr[PangoRendererPrivate]]
  def apply()(using Zone): Ptr[PangoRenderer] = scala.scalanative.unsafe.alloc[PangoRenderer](1)
  def apply(parent_instance : GObject, underline : PangoUnderline, strikethrough : gboolean, active_count : CInt, matrix : Ptr[PangoMatrix], priv : Ptr[PangoRendererPrivate])(using Zone): Ptr[PangoRenderer] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).underline = underline
    (!____ptr).strikethrough = strikethrough
    (!____ptr).active_count = active_count
    (!____ptr).matrix = matrix
    (!____ptr).priv = priv
    ____ptr
  extension (struct: PangoRenderer)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def underline : PangoUnderline = struct._2
    def underline_=(value: PangoUnderline): Unit = !struct.at2 = value
    def strikethrough : gboolean = struct._3
    def strikethrough_=(value: gboolean): Unit = !struct.at3 = value
    def active_count : CInt = struct._4
    def active_count_=(value: CInt): Unit = !struct.at4 = value
    def matrix : Ptr[PangoMatrix] = struct._5
    def matrix_=(value: Ptr[PangoMatrix]): Unit = !struct.at5 = value
    def priv : Ptr[PangoRendererPrivate] = struct._6
    def priv_=(value: Ptr[PangoRendererPrivate]): Unit = !struct.at6 = value

/**
 * PangoRendererClass: _glyphs: draws a `PangoGlyphString` _rectangle: draws a rectangle _error_underline: draws a squiggly line that approximately covers the given rectangle in the style of an underline used to indicate a spelling error. _shape: draw content for a glyph shaped with `PangoAttrShape` , are the coordinates of the left edge of the baseline, in user coordinates. _trapezoid: draws a trapezoidal filled area _glyph: draws a single glyph

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
*/
opaque type PangoRendererClass = CStruct15[GObjectClass, CFuncPtr5[Ptr[PangoRenderer], Ptr[PangoFont], Ptr[PangoGlyphString], CInt, CInt, Unit], CFuncPtr6[Ptr[PangoRenderer], PangoRenderPart, CInt, CInt, CInt, CInt, Unit], CFuncPtr5[Ptr[PangoRenderer], CInt, CInt, CInt, CInt, Unit], CFuncPtr4[Ptr[PangoRenderer], Ptr[Byte], CInt, CInt, Unit], CFuncPtr8[Ptr[PangoRenderer], PangoRenderPart, Double, Double, Double, Double, Double, Double, Unit], CFuncPtr5[Ptr[PangoRenderer], Ptr[PangoFont], PangoGlyph, Double, Double, Unit], CFuncPtr2[Ptr[PangoRenderer], PangoRenderPart, Unit], CFuncPtr1[Ptr[PangoRenderer], Unit], CFuncPtr1[Ptr[PangoRenderer], Unit], CFuncPtr2[Ptr[PangoRenderer], Ptr[Byte], Unit], CFuncPtr5[Ptr[PangoRenderer], CString, Ptr[Byte], CInt, CInt, Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object PangoRendererClass:
  given _tag: Tag[PangoRendererClass] = Tag.materializeCStruct15Tag[GObjectClass, CFuncPtr5[Ptr[PangoRenderer], Ptr[PangoFont], Ptr[PangoGlyphString], CInt, CInt, Unit], CFuncPtr6[Ptr[PangoRenderer], PangoRenderPart, CInt, CInt, CInt, CInt, Unit], CFuncPtr5[Ptr[PangoRenderer], CInt, CInt, CInt, CInt, Unit], CFuncPtr4[Ptr[PangoRenderer], Ptr[Byte], CInt, CInt, Unit], CFuncPtr8[Ptr[PangoRenderer], PangoRenderPart, Double, Double, Double, Double, Double, Double, Unit], CFuncPtr5[Ptr[PangoRenderer], Ptr[PangoFont], PangoGlyph, Double, Double, Unit], CFuncPtr2[Ptr[PangoRenderer], PangoRenderPart, Unit], CFuncPtr1[Ptr[PangoRenderer], Unit], CFuncPtr1[Ptr[PangoRenderer], Unit], CFuncPtr2[Ptr[PangoRenderer], Ptr[Byte], Unit], CFuncPtr5[Ptr[PangoRenderer], CString, Ptr[Byte], CInt, CInt, Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[PangoRendererClass] = scala.scalanative.unsafe.alloc[PangoRendererClass](1)
  def apply(parent_class : GObjectClass, draw_glyphs : CFuncPtr5[Ptr[PangoRenderer], Ptr[PangoFont], Ptr[PangoGlyphString], CInt, CInt, Unit], draw_rectangle : CFuncPtr6[Ptr[PangoRenderer], PangoRenderPart, CInt, CInt, CInt, CInt, Unit], draw_error_underline : CFuncPtr5[Ptr[PangoRenderer], CInt, CInt, CInt, CInt, Unit], draw_shape : CFuncPtr4[Ptr[PangoRenderer], Ptr[PangoAttrShape], CInt, CInt, Unit], draw_trapezoid : CFuncPtr8[Ptr[PangoRenderer], PangoRenderPart, Double, Double, Double, Double, Double, Double, Unit], draw_glyph : CFuncPtr5[Ptr[PangoRenderer], Ptr[PangoFont], PangoGlyph, Double, Double, Unit], part_changed : CFuncPtr2[Ptr[PangoRenderer], PangoRenderPart, Unit], begin : CFuncPtr1[Ptr[PangoRenderer], Unit], end : CFuncPtr1[Ptr[PangoRenderer], Unit], prepare_run : CFuncPtr2[Ptr[PangoRenderer], Ptr[PangoLayoutRun], Unit], draw_glyph_item : CFuncPtr5[Ptr[PangoRenderer], CString, Ptr[PangoGlyphItem], CInt, CInt, Unit], _pango_reserved2 : CFuncPtr0[Unit], _pango_reserved3 : CFuncPtr0[Unit], _pango_reserved4 : CFuncPtr0[Unit])(using Zone): Ptr[PangoRendererClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).draw_glyphs = draw_glyphs
    (!____ptr).draw_rectangle = draw_rectangle
    (!____ptr).draw_error_underline = draw_error_underline
    (!____ptr).draw_shape = draw_shape
    (!____ptr).draw_trapezoid = draw_trapezoid
    (!____ptr).draw_glyph = draw_glyph
    (!____ptr).part_changed = part_changed
    (!____ptr).begin = begin
    (!____ptr).end = end
    (!____ptr).prepare_run = prepare_run
    (!____ptr).draw_glyph_item = draw_glyph_item
    (!____ptr)._pango_reserved2 = _pango_reserved2
    (!____ptr)._pango_reserved3 = _pango_reserved3
    (!____ptr)._pango_reserved4 = _pango_reserved4
    ____ptr
  extension (struct: PangoRendererClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def draw_glyphs : CFuncPtr5[Ptr[PangoRenderer], Ptr[PangoFont], Ptr[PangoGlyphString], CInt, CInt, Unit] = struct._2
    def draw_glyphs_=(value: CFuncPtr5[Ptr[PangoRenderer], Ptr[PangoFont], Ptr[PangoGlyphString], CInt, CInt, Unit]): Unit = !struct.at2 = value
    def draw_rectangle : CFuncPtr6[Ptr[PangoRenderer], PangoRenderPart, CInt, CInt, CInt, CInt, Unit] = struct._3
    def draw_rectangle_=(value: CFuncPtr6[Ptr[PangoRenderer], PangoRenderPart, CInt, CInt, CInt, CInt, Unit]): Unit = !struct.at3 = value
    def draw_error_underline : CFuncPtr5[Ptr[PangoRenderer], CInt, CInt, CInt, CInt, Unit] = struct._4
    def draw_error_underline_=(value: CFuncPtr5[Ptr[PangoRenderer], CInt, CInt, CInt, CInt, Unit]): Unit = !struct.at4 = value
    def draw_shape : CFuncPtr4[Ptr[PangoRenderer], Ptr[PangoAttrShape], CInt, CInt, Unit] = struct._5.asInstanceOf[CFuncPtr4[Ptr[PangoRenderer], Ptr[PangoAttrShape], CInt, CInt, Unit]]
    def draw_shape_=(value: CFuncPtr4[Ptr[PangoRenderer], Ptr[PangoAttrShape], CInt, CInt, Unit]): Unit = !struct.at5 = value.asInstanceOf[CFuncPtr4[Ptr[PangoRenderer], Ptr[Byte], CInt, CInt, Unit]]
    def draw_trapezoid : CFuncPtr8[Ptr[PangoRenderer], PangoRenderPart, Double, Double, Double, Double, Double, Double, Unit] = struct._6
    def draw_trapezoid_=(value: CFuncPtr8[Ptr[PangoRenderer], PangoRenderPart, Double, Double, Double, Double, Double, Double, Unit]): Unit = !struct.at6 = value
    def draw_glyph : CFuncPtr5[Ptr[PangoRenderer], Ptr[PangoFont], PangoGlyph, Double, Double, Unit] = struct._7
    def draw_glyph_=(value: CFuncPtr5[Ptr[PangoRenderer], Ptr[PangoFont], PangoGlyph, Double, Double, Unit]): Unit = !struct.at7 = value
    def part_changed : CFuncPtr2[Ptr[PangoRenderer], PangoRenderPart, Unit] = struct._8
    def part_changed_=(value: CFuncPtr2[Ptr[PangoRenderer], PangoRenderPart, Unit]): Unit = !struct.at8 = value
    def begin : CFuncPtr1[Ptr[PangoRenderer], Unit] = struct._9
    def begin_=(value: CFuncPtr1[Ptr[PangoRenderer], Unit]): Unit = !struct.at9 = value
    def end : CFuncPtr1[Ptr[PangoRenderer], Unit] = struct._10
    def end_=(value: CFuncPtr1[Ptr[PangoRenderer], Unit]): Unit = !struct.at10 = value
    def prepare_run : CFuncPtr2[Ptr[PangoRenderer], Ptr[PangoLayoutRun], Unit] = struct._11.asInstanceOf[CFuncPtr2[Ptr[PangoRenderer], Ptr[PangoLayoutRun], Unit]]
    def prepare_run_=(value: CFuncPtr2[Ptr[PangoRenderer], Ptr[PangoLayoutRun], Unit]): Unit = !struct.at11 = value.asInstanceOf[CFuncPtr2[Ptr[PangoRenderer], Ptr[Byte], Unit]]
    def draw_glyph_item : CFuncPtr5[Ptr[PangoRenderer], CString, Ptr[PangoGlyphItem], CInt, CInt, Unit] = struct._12.asInstanceOf[CFuncPtr5[Ptr[PangoRenderer], CString, Ptr[PangoGlyphItem], CInt, CInt, Unit]]
    def draw_glyph_item_=(value: CFuncPtr5[Ptr[PangoRenderer], CString, Ptr[PangoGlyphItem], CInt, CInt, Unit]): Unit = !struct.at12 = value.asInstanceOf[CFuncPtr5[Ptr[PangoRenderer], CString, Ptr[Byte], CInt, CInt, Unit]]
    def _pango_reserved2 : CFuncPtr0[Unit] = struct._13
    def _pango_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at13 = value
    def _pango_reserved3 : CFuncPtr0[Unit] = struct._14
    def _pango_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at14 = value
    def _pango_reserved4 : CFuncPtr0[Unit] = struct._15
    def _pango_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at15 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
*/
opaque type PangoRendererPrivate = CStruct0
object PangoRendererPrivate:
  given _tag: Tag[PangoRendererPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-script.h
*/
opaque type PangoScriptIter = CStruct0
object PangoScriptIter:
  given _tag: Tag[PangoScriptIter] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
*/
opaque type PangoTabArray = CStruct0
object PangoTabArray:
  given _tag: Tag[PangoTabArray] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
*/
opaque type _AdwActionRow = CStruct1[AdwPreferencesRow]
object _AdwActionRow:
  given _tag: Tag[_AdwActionRow] = Tag.materializeCStruct1Tag[AdwPreferencesRow]
  def apply()(using Zone): Ptr[_AdwActionRow] = scala.scalanative.unsafe.alloc[_AdwActionRow](1)
  def apply(parent_instance : AdwPreferencesRow)(using Zone): Ptr[_AdwActionRow] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _AdwActionRow)
    def parent_instance : AdwPreferencesRow = struct._1
    def parent_instance_=(value: AdwPreferencesRow): Unit = !struct.at1 = value

/**
 * AdwActionRowClass _class: The parent class : Activates the row to trigger its main action.

 * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
*/
opaque type _AdwActionRowClass = CStruct3[AdwPreferencesRowClass, CFuncPtr1[Ptr[AdwActionRow], Unit], CArray[gpointer, Nat._4]]
object _AdwActionRowClass:
  given _tag: Tag[_AdwActionRowClass] = Tag.materializeCStruct3Tag[AdwPreferencesRowClass, CFuncPtr1[Ptr[AdwActionRow], Unit], CArray[gpointer, Nat._4]]
  def apply()(using Zone): Ptr[_AdwActionRowClass] = scala.scalanative.unsafe.alloc[_AdwActionRowClass](1)
  def apply(parent_class : AdwPreferencesRowClass, activate : CFuncPtr1[Ptr[AdwActionRow], Unit], padding : CArray[gpointer, Nat._4])(using Zone): Ptr[_AdwActionRowClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).activate = activate
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _AdwActionRowClass)
    def parent_class : AdwPreferencesRowClass = struct._1
    def parent_class_=(value: AdwPreferencesRowClass): Unit = !struct.at1 = value
    def activate : CFuncPtr1[Ptr[AdwActionRow], Unit] = struct._2
    def activate_=(value: CFuncPtr1[Ptr[AdwActionRow], Unit]): Unit = !struct.at2 = value
    def padding : CArray[gpointer, Nat._4] = struct._3
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
*/
opaque type _AdwAnimation = CStruct1[GObject]
object _AdwAnimation:
  given _tag: Tag[_AdwAnimation] = Tag.materializeCStruct1Tag[GObject]
  def apply()(using Zone): Ptr[_AdwAnimation] = scala.scalanative.unsafe.alloc[_AdwAnimation](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[_AdwAnimation] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _AdwAnimation)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
*/
opaque type _AdwAnimationClass = CStruct0
object _AdwAnimationClass:
  given _tag: Tag[_AdwAnimationClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
*/
opaque type _AdwAnimationTarget = CStruct0
object _AdwAnimationTarget:
  given _tag: Tag[_AdwAnimationTarget] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
*/
opaque type _AdwAnimationTargetClass = CStruct0
object _AdwAnimationTargetClass:
  given _tag: Tag[_AdwAnimationTargetClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
*/
opaque type _AdwApplication = CStruct1[_root_.gtk4.all.GtkApplication]
object _AdwApplication:
  given _tag: Tag[_AdwApplication] = Tag.materializeCStruct1Tag[_root_.gtk4.all.GtkApplication]
  def apply()(using Zone): Ptr[_AdwApplication] = scala.scalanative.unsafe.alloc[_AdwApplication](1)
  def apply(parent_instance : _root_.gtk4.all.GtkApplication)(using Zone): Ptr[_AdwApplication] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _AdwApplication)
    def parent_instance : _root_.gtk4.all.GtkApplication = struct._1
    def parent_instance_=(value: _root_.gtk4.all.GtkApplication): Unit = !struct.at1 = value

/**
 * AdwApplicationClass: _class: The parent class

 * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
*/
opaque type _AdwApplicationClass = CStruct2[_root_.gtk4.all.GtkApplicationClass, CArray[gpointer, Nat._4]]
object _AdwApplicationClass:
  given _tag: Tag[_AdwApplicationClass] = Tag.materializeCStruct2Tag[_root_.gtk4.all.GtkApplicationClass, CArray[gpointer, Nat._4]]
  def apply()(using Zone): Ptr[_AdwApplicationClass] = scala.scalanative.unsafe.alloc[_AdwApplicationClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkApplicationClass, padding : CArray[gpointer, Nat._4])(using Zone): Ptr[_AdwApplicationClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _AdwApplicationClass)
    def parent_class : _root_.gtk4.all.GtkApplicationClass = struct._1
    def parent_class_=(value: _root_.gtk4.all.GtkApplicationClass): Unit = !struct.at1 = value
    def padding : CArray[gpointer, Nat._4] = struct._2
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
*/
opaque type _AdwApplicationWindow = CStruct1[_root_.gtk4.all.GtkApplicationWindow]
object _AdwApplicationWindow:
  given _tag: Tag[_AdwApplicationWindow] = Tag.materializeCStruct1Tag[_root_.gtk4.all.GtkApplicationWindow]
  def apply()(using Zone): Ptr[_AdwApplicationWindow] = scala.scalanative.unsafe.alloc[_AdwApplicationWindow](1)
  def apply(parent_instance : _root_.gtk4.all.GtkApplicationWindow)(using Zone): Ptr[_AdwApplicationWindow] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _AdwApplicationWindow)
    def parent_instance : _root_.gtk4.all.GtkApplicationWindow = struct._1
    def parent_instance_=(value: _root_.gtk4.all.GtkApplicationWindow): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
*/
opaque type _AdwApplicationWindowClass = CStruct2[_root_.gtk4.all.GtkApplicationWindowClass, CArray[gpointer, Nat._4]]
object _AdwApplicationWindowClass:
  given _tag: Tag[_AdwApplicationWindowClass] = Tag.materializeCStruct2Tag[_root_.gtk4.all.GtkApplicationWindowClass, CArray[gpointer, Nat._4]]
  def apply()(using Zone): Ptr[_AdwApplicationWindowClass] = scala.scalanative.unsafe.alloc[_AdwApplicationWindowClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkApplicationWindowClass, padding : CArray[gpointer, Nat._4])(using Zone): Ptr[_AdwApplicationWindowClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _AdwApplicationWindowClass)
    def parent_class : _root_.gtk4.all.GtkApplicationWindowClass = struct._1
    def parent_class_=(value: _root_.gtk4.all.GtkApplicationWindowClass): Unit = !struct.at1 = value
    def padding : CArray[gpointer, Nat._4] = struct._2
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
*/
opaque type _AdwAvatar = CStruct0
object _AdwAvatar:
  given _tag: Tag[_AdwAvatar] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
*/
opaque type _AdwBin = CStruct1[_root_.gtk4.all.GtkWidget]
object _AdwBin:
  given _tag: Tag[_AdwBin] = Tag.materializeCStruct1Tag[_root_.gtk4.all.GtkWidget]
  def apply()(using Zone): Ptr[_AdwBin] = scala.scalanative.unsafe.alloc[_AdwBin](1)
  def apply(parent_instance : _root_.gtk4.all.GtkWidget)(using Zone): Ptr[_AdwBin] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _AdwBin)
    def parent_instance : _root_.gtk4.all.GtkWidget = struct._1
    def parent_instance_=(value: _root_.gtk4.all.GtkWidget): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
*/
opaque type _AdwBinClass = CStruct1[_root_.gtk4.all.GtkWidgetClass]
object _AdwBinClass:
  given _tag: Tag[_AdwBinClass] = Tag.materializeCStruct1Tag[_root_.gtk4.all.GtkWidgetClass]
  def apply()(using Zone): Ptr[_AdwBinClass] = scala.scalanative.unsafe.alloc[_AdwBinClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass)(using Zone): Ptr[_AdwBinClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: _AdwBinClass)
    def parent_class : _root_.gtk4.all.GtkWidgetClass = struct._1
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
*/
opaque type _AdwButtonContent = CStruct0
object _AdwButtonContent:
  given _tag: Tag[_AdwButtonContent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
*/
opaque type _AdwCallbackAnimationTarget = CStruct0
object _AdwCallbackAnimationTarget:
  given _tag: Tag[_AdwCallbackAnimationTarget] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
*/
opaque type _AdwCallbackAnimationTargetClass = CStruct0
object _AdwCallbackAnimationTargetClass:
  given _tag: Tag[_AdwCallbackAnimationTargetClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
*/
opaque type _AdwCarousel = CStruct0
object _AdwCarousel:
  given _tag: Tag[_AdwCarousel] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-dots.h
*/
opaque type _AdwCarouselIndicatorDots = CStruct0
object _AdwCarouselIndicatorDots:
  given _tag: Tag[_AdwCarouselIndicatorDots] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-lines.h
*/
opaque type _AdwCarouselIndicatorLines = CStruct0
object _AdwCarouselIndicatorLines:
  given _tag: Tag[_AdwCarouselIndicatorLines] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
*/
opaque type _AdwClamp = CStruct0
object _AdwClamp:
  given _tag: Tag[_AdwClamp] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
*/
opaque type _AdwClampLayout = CStruct0
object _AdwClampLayout:
  given _tag: Tag[_AdwClampLayout] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
*/
opaque type _AdwClampScrollable = CStruct0
object _AdwClampScrollable:
  given _tag: Tag[_AdwClampScrollable] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
*/
opaque type _AdwComboRow = CStruct1[AdwActionRow]
object _AdwComboRow:
  given _tag: Tag[_AdwComboRow] = Tag.materializeCStruct1Tag[AdwActionRow]
  def apply()(using Zone): Ptr[_AdwComboRow] = scala.scalanative.unsafe.alloc[_AdwComboRow](1)
  def apply(parent_instance : AdwActionRow)(using Zone): Ptr[_AdwComboRow] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _AdwComboRow)
    def parent_instance : AdwActionRow = struct._1
    def parent_instance_=(value: AdwActionRow): Unit = !struct.at1 = value

/**
 * AdwComboRowClass _class: The parent class

 * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
*/
opaque type _AdwComboRowClass = CStruct2[AdwActionRowClass, CArray[gpointer, Nat._4]]
object _AdwComboRowClass:
  given _tag: Tag[_AdwComboRowClass] = Tag.materializeCStruct2Tag[AdwActionRowClass, CArray[gpointer, Nat._4]]
  def apply()(using Zone): Ptr[_AdwComboRowClass] = scala.scalanative.unsafe.alloc[_AdwComboRowClass](1)
  def apply(parent_class : AdwActionRowClass, padding : CArray[gpointer, Nat._4])(using Zone): Ptr[_AdwComboRowClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _AdwComboRowClass)
    def parent_class : AdwActionRowClass = struct._1
    def parent_class_=(value: AdwActionRowClass): Unit = !struct.at1 = value
    def padding : CArray[gpointer, Nat._4] = struct._2
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
*/
opaque type _AdwEnumListItem = CStruct0
object _AdwEnumListItem:
  given _tag: Tag[_AdwEnumListItem] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
*/
opaque type _AdwEnumListModel = CStruct0
object _AdwEnumListModel:
  given _tag: Tag[_AdwEnumListModel] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
*/
opaque type _AdwExpanderRow = CStruct1[AdwPreferencesRow]
object _AdwExpanderRow:
  given _tag: Tag[_AdwExpanderRow] = Tag.materializeCStruct1Tag[AdwPreferencesRow]
  def apply()(using Zone): Ptr[_AdwExpanderRow] = scala.scalanative.unsafe.alloc[_AdwExpanderRow](1)
  def apply(parent_instance : AdwPreferencesRow)(using Zone): Ptr[_AdwExpanderRow] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _AdwExpanderRow)
    def parent_instance : AdwPreferencesRow = struct._1
    def parent_instance_=(value: AdwPreferencesRow): Unit = !struct.at1 = value

/**
 * AdwExpanderRowClass _class: The parent class

 * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
*/
opaque type _AdwExpanderRowClass = CStruct2[AdwPreferencesRowClass, CArray[gpointer, Nat._4]]
object _AdwExpanderRowClass:
  given _tag: Tag[_AdwExpanderRowClass] = Tag.materializeCStruct2Tag[AdwPreferencesRowClass, CArray[gpointer, Nat._4]]
  def apply()(using Zone): Ptr[_AdwExpanderRowClass] = scala.scalanative.unsafe.alloc[_AdwExpanderRowClass](1)
  def apply(parent_class : AdwPreferencesRowClass, padding : CArray[gpointer, Nat._4])(using Zone): Ptr[_AdwExpanderRowClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _AdwExpanderRowClass)
    def parent_class : AdwPreferencesRowClass = struct._1
    def parent_class_=(value: AdwPreferencesRowClass): Unit = !struct.at1 = value
    def padding : CArray[gpointer, Nat._4] = struct._2
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
*/
opaque type _AdwFlap = CStruct0
object _AdwFlap:
  given _tag: Tag[_AdwFlap] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
*/
opaque type _AdwHeaderBar = CStruct0
object _AdwHeaderBar:
  given _tag: Tag[_AdwHeaderBar] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
*/
opaque type _AdwLeaflet = CStruct0
object _AdwLeaflet:
  given _tag: Tag[_AdwLeaflet] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
*/
opaque type _AdwLeafletPage = CStruct0
object _AdwLeafletPage:
  given _tag: Tag[_AdwLeafletPage] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
*/
opaque type _AdwPreferencesGroup = CStruct1[_root_.gtk4.all.GtkWidget]
object _AdwPreferencesGroup:
  given _tag: Tag[_AdwPreferencesGroup] = Tag.materializeCStruct1Tag[_root_.gtk4.all.GtkWidget]
  def apply()(using Zone): Ptr[_AdwPreferencesGroup] = scala.scalanative.unsafe.alloc[_AdwPreferencesGroup](1)
  def apply(parent_instance : _root_.gtk4.all.GtkWidget)(using Zone): Ptr[_AdwPreferencesGroup] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _AdwPreferencesGroup)
    def parent_instance : _root_.gtk4.all.GtkWidget = struct._1
    def parent_instance_=(value: _root_.gtk4.all.GtkWidget): Unit = !struct.at1 = value

/**
 * AdwPreferencesGroupClass _class: The parent class

 * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
*/
opaque type _AdwPreferencesGroupClass = CStruct2[_root_.gtk4.all.GtkWidgetClass, CArray[gpointer, Nat._4]]
object _AdwPreferencesGroupClass:
  given _tag: Tag[_AdwPreferencesGroupClass] = Tag.materializeCStruct2Tag[_root_.gtk4.all.GtkWidgetClass, CArray[gpointer, Nat._4]]
  def apply()(using Zone): Ptr[_AdwPreferencesGroupClass] = scala.scalanative.unsafe.alloc[_AdwPreferencesGroupClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass, padding : CArray[gpointer, Nat._4])(using Zone): Ptr[_AdwPreferencesGroupClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _AdwPreferencesGroupClass)
    def parent_class : _root_.gtk4.all.GtkWidgetClass = struct._1
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at1 = value
    def padding : CArray[gpointer, Nat._4] = struct._2
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
*/
opaque type _AdwPreferencesPage = CStruct1[_root_.gtk4.all.GtkWidget]
object _AdwPreferencesPage:
  given _tag: Tag[_AdwPreferencesPage] = Tag.materializeCStruct1Tag[_root_.gtk4.all.GtkWidget]
  def apply()(using Zone): Ptr[_AdwPreferencesPage] = scala.scalanative.unsafe.alloc[_AdwPreferencesPage](1)
  def apply(parent_instance : _root_.gtk4.all.GtkWidget)(using Zone): Ptr[_AdwPreferencesPage] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _AdwPreferencesPage)
    def parent_instance : _root_.gtk4.all.GtkWidget = struct._1
    def parent_instance_=(value: _root_.gtk4.all.GtkWidget): Unit = !struct.at1 = value

/**
 * AdwPreferencesPageClass _class: The parent class

 * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
*/
opaque type _AdwPreferencesPageClass = CStruct2[_root_.gtk4.all.GtkWidgetClass, CArray[gpointer, Nat._4]]
object _AdwPreferencesPageClass:
  given _tag: Tag[_AdwPreferencesPageClass] = Tag.materializeCStruct2Tag[_root_.gtk4.all.GtkWidgetClass, CArray[gpointer, Nat._4]]
  def apply()(using Zone): Ptr[_AdwPreferencesPageClass] = scala.scalanative.unsafe.alloc[_AdwPreferencesPageClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWidgetClass, padding : CArray[gpointer, Nat._4])(using Zone): Ptr[_AdwPreferencesPageClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _AdwPreferencesPageClass)
    def parent_class : _root_.gtk4.all.GtkWidgetClass = struct._1
    def parent_class_=(value: _root_.gtk4.all.GtkWidgetClass): Unit = !struct.at1 = value
    def padding : CArray[gpointer, Nat._4] = struct._2
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
*/
opaque type _AdwPreferencesRow = CStruct1[_root_.gtk4.all.GtkListBoxRow]
object _AdwPreferencesRow:
  given _tag: Tag[_AdwPreferencesRow] = Tag.materializeCStruct1Tag[_root_.gtk4.all.GtkListBoxRow]
  def apply()(using Zone): Ptr[_AdwPreferencesRow] = scala.scalanative.unsafe.alloc[_AdwPreferencesRow](1)
  def apply(parent_instance : _root_.gtk4.all.GtkListBoxRow)(using Zone): Ptr[_AdwPreferencesRow] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _AdwPreferencesRow)
    def parent_instance : _root_.gtk4.all.GtkListBoxRow = struct._1
    def parent_instance_=(value: _root_.gtk4.all.GtkListBoxRow): Unit = !struct.at1 = value

/**
 * AdwPreferencesRowClass _class: The parent class

 * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
*/
opaque type _AdwPreferencesRowClass = CStruct2[_root_.gtk4.all.GtkListBoxRowClass, CArray[gpointer, Nat._4]]
object _AdwPreferencesRowClass:
  given _tag: Tag[_AdwPreferencesRowClass] = Tag.materializeCStruct2Tag[_root_.gtk4.all.GtkListBoxRowClass, CArray[gpointer, Nat._4]]
  def apply()(using Zone): Ptr[_AdwPreferencesRowClass] = scala.scalanative.unsafe.alloc[_AdwPreferencesRowClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkListBoxRowClass, padding : CArray[gpointer, Nat._4])(using Zone): Ptr[_AdwPreferencesRowClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _AdwPreferencesRowClass)
    def parent_class : _root_.gtk4.all.GtkListBoxRowClass = struct._1
    def parent_class_=(value: _root_.gtk4.all.GtkListBoxRowClass): Unit = !struct.at1 = value
    def padding : CArray[gpointer, Nat._4] = struct._2
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
*/
opaque type _AdwPreferencesWindow = CStruct1[AdwWindow]
object _AdwPreferencesWindow:
  given _tag: Tag[_AdwPreferencesWindow] = Tag.materializeCStruct1Tag[AdwWindow]
  def apply()(using Zone): Ptr[_AdwPreferencesWindow] = scala.scalanative.unsafe.alloc[_AdwPreferencesWindow](1)
  def apply(parent_instance : AdwWindow)(using Zone): Ptr[_AdwPreferencesWindow] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _AdwPreferencesWindow)
    def parent_instance : AdwWindow = struct._1
    def parent_instance_=(value: AdwWindow): Unit = !struct.at1 = value

/**
 * AdwPreferencesWindowClass _class: The parent class

 * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
*/
opaque type _AdwPreferencesWindowClass = CStruct2[AdwWindowClass, CArray[gpointer, Nat._4]]
object _AdwPreferencesWindowClass:
  given _tag: Tag[_AdwPreferencesWindowClass] = Tag.materializeCStruct2Tag[AdwWindowClass, CArray[gpointer, Nat._4]]
  def apply()(using Zone): Ptr[_AdwPreferencesWindowClass] = scala.scalanative.unsafe.alloc[_AdwPreferencesWindowClass](1)
  def apply(parent_class : AdwWindowClass, padding : CArray[gpointer, Nat._4])(using Zone): Ptr[_AdwPreferencesWindowClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _AdwPreferencesWindowClass)
    def parent_class : AdwWindowClass = struct._1
    def parent_class_=(value: AdwWindowClass): Unit = !struct.at1 = value
    def padding : CArray[gpointer, Nat._4] = struct._2
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
*/
opaque type _AdwSplitButton = CStruct0
object _AdwSplitButton:
  given _tag: Tag[_AdwSplitButton] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
*/
opaque type _AdwSpringAnimation = CStruct0
object _AdwSpringAnimation:
  given _tag: Tag[_AdwSpringAnimation] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
*/
opaque type _AdwSpringAnimationClass = CStruct0
object _AdwSpringAnimationClass:
  given _tag: Tag[_AdwSpringAnimationClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-spring-params.h
*/
opaque type _AdwSpringParams = CStruct0
object _AdwSpringParams:
  given _tag: Tag[_AdwSpringParams] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
*/
opaque type _AdwSqueezer = CStruct0
object _AdwSqueezer:
  given _tag: Tag[_AdwSqueezer] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
*/
opaque type _AdwSqueezerPage = CStruct0
object _AdwSqueezerPage:
  given _tag: Tag[_AdwSqueezerPage] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
*/
opaque type _AdwStatusPage = CStruct0
object _AdwStatusPage:
  given _tag: Tag[_AdwStatusPage] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
*/
opaque type _AdwStyleManager = CStruct0
object _AdwStyleManager:
  given _tag: Tag[_AdwStyleManager] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
*/
opaque type _AdwSwipeTracker = CStruct0
object _AdwSwipeTracker:
  given _tag: Tag[_AdwSwipeTracker] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-swipeable.h
*/
opaque type _AdwSwipeable = CStruct0
object _AdwSwipeable:
  given _tag: Tag[_AdwSwipeable] = Tag.materializeCStruct0Tag

/**
 * AdwSwipeableInterface: : The parent interface. _distance: Gets the swipe distance. _snap_points: Gets the snap points. _progress: Gets the current progress. _cancel_progress: Gets the cancel progress. _swipe_area: Gets the swipeable rectangle.

 * [bindgen] header: /usr/include/libadwaita-1/adw-swipeable.h
*/
opaque type _AdwSwipeableInterface = CStruct7[GTypeInterface, CFuncPtr1[Ptr[AdwSwipeable], Double], CFuncPtr2[Ptr[AdwSwipeable], Ptr[CInt], Ptr[Double]], CFuncPtr1[Ptr[AdwSwipeable], Double], CFuncPtr1[Ptr[AdwSwipeable], Double], CFuncPtr4[Ptr[AdwSwipeable], AdwNavigationDirection, gboolean, Ptr[GdkRectangle], Unit], CArray[gpointer, Nat._4]]
object _AdwSwipeableInterface:
  given _tag: Tag[_AdwSwipeableInterface] = Tag.materializeCStruct7Tag[GTypeInterface, CFuncPtr1[Ptr[AdwSwipeable], Double], CFuncPtr2[Ptr[AdwSwipeable], Ptr[CInt], Ptr[Double]], CFuncPtr1[Ptr[AdwSwipeable], Double], CFuncPtr1[Ptr[AdwSwipeable], Double], CFuncPtr4[Ptr[AdwSwipeable], AdwNavigationDirection, gboolean, Ptr[GdkRectangle], Unit], CArray[gpointer, Nat._4]]
  def apply()(using Zone): Ptr[_AdwSwipeableInterface] = scala.scalanative.unsafe.alloc[_AdwSwipeableInterface](1)
  def apply(parent : GTypeInterface, get_distance : CFuncPtr1[Ptr[AdwSwipeable], Double], get_snap_points : CFuncPtr2[Ptr[AdwSwipeable], Ptr[CInt], Ptr[Double]], get_progress : CFuncPtr1[Ptr[AdwSwipeable], Double], get_cancel_progress : CFuncPtr1[Ptr[AdwSwipeable], Double], get_swipe_area : CFuncPtr4[Ptr[AdwSwipeable], AdwNavigationDirection, gboolean, Ptr[GdkRectangle], Unit], padding : CArray[gpointer, Nat._4])(using Zone): Ptr[_AdwSwipeableInterface] = 
    val ____ptr = apply()
    (!____ptr).parent = parent
    (!____ptr).get_distance = get_distance
    (!____ptr).get_snap_points = get_snap_points
    (!____ptr).get_progress = get_progress
    (!____ptr).get_cancel_progress = get_cancel_progress
    (!____ptr).get_swipe_area = get_swipe_area
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _AdwSwipeableInterface)
    def parent : GTypeInterface = struct._1
    def parent_=(value: GTypeInterface): Unit = !struct.at1 = value
    def get_distance : CFuncPtr1[Ptr[AdwSwipeable], Double] = struct._2
    def get_distance_=(value: CFuncPtr1[Ptr[AdwSwipeable], Double]): Unit = !struct.at2 = value
    def get_snap_points : CFuncPtr2[Ptr[AdwSwipeable], Ptr[CInt], Ptr[Double]] = struct._3
    def get_snap_points_=(value: CFuncPtr2[Ptr[AdwSwipeable], Ptr[CInt], Ptr[Double]]): Unit = !struct.at3 = value
    def get_progress : CFuncPtr1[Ptr[AdwSwipeable], Double] = struct._4
    def get_progress_=(value: CFuncPtr1[Ptr[AdwSwipeable], Double]): Unit = !struct.at4 = value
    def get_cancel_progress : CFuncPtr1[Ptr[AdwSwipeable], Double] = struct._5
    def get_cancel_progress_=(value: CFuncPtr1[Ptr[AdwSwipeable], Double]): Unit = !struct.at5 = value
    def get_swipe_area : CFuncPtr4[Ptr[AdwSwipeable], AdwNavigationDirection, gboolean, Ptr[GdkRectangle], Unit] = struct._6
    def get_swipe_area_=(value: CFuncPtr4[Ptr[AdwSwipeable], AdwNavigationDirection, gboolean, Ptr[GdkRectangle], Unit]): Unit = !struct.at6 = value
    def padding : CArray[gpointer, Nat._4] = struct._7
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at7 = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
*/
opaque type _AdwTabBar = CStruct0
object _AdwTabBar:
  given _tag: Tag[_AdwTabBar] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
*/
opaque type _AdwTabPage = CStruct0
object _AdwTabPage:
  given _tag: Tag[_AdwTabPage] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
*/
opaque type _AdwTabView = CStruct0
object _AdwTabView:
  given _tag: Tag[_AdwTabView] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
*/
opaque type _AdwTimedAnimation = CStruct0
object _AdwTimedAnimation:
  given _tag: Tag[_AdwTimedAnimation] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
*/
opaque type _AdwTimedAnimationClass = CStruct0
object _AdwTimedAnimationClass:
  given _tag: Tag[_AdwTimedAnimationClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
*/
opaque type _AdwToast = CStruct0
object _AdwToast:
  given _tag: Tag[_AdwToast] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-toast-overlay.h
*/
opaque type _AdwToastOverlay = CStruct0
object _AdwToastOverlay:
  given _tag: Tag[_AdwToastOverlay] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
*/
opaque type _AdwViewStack = CStruct0
object _AdwViewStack:
  given _tag: Tag[_AdwViewStack] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
*/
opaque type _AdwViewStackPage = CStruct0
object _AdwViewStackPage:
  given _tag: Tag[_AdwViewStackPage] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
*/
opaque type _AdwViewSwitcher = CStruct0
object _AdwViewSwitcher:
  given _tag: Tag[_AdwViewSwitcher] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
*/
opaque type _AdwViewSwitcherBar = CStruct0
object _AdwViewSwitcherBar:
  given _tag: Tag[_AdwViewSwitcherBar] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
*/
opaque type _AdwViewSwitcherTitle = CStruct0
object _AdwViewSwitcherTitle:
  given _tag: Tag[_AdwViewSwitcherTitle] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
*/
opaque type _AdwWindow = CStruct1[_root_.gtk4.all.GtkWindow]
object _AdwWindow:
  given _tag: Tag[_AdwWindow] = Tag.materializeCStruct1Tag[_root_.gtk4.all.GtkWindow]
  def apply()(using Zone): Ptr[_AdwWindow] = scala.scalanative.unsafe.alloc[_AdwWindow](1)
  def apply(parent_instance : _root_.gtk4.all.GtkWindow)(using Zone): Ptr[_AdwWindow] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _AdwWindow)
    def parent_instance : _root_.gtk4.all.GtkWindow = struct._1
    def parent_instance_=(value: _root_.gtk4.all.GtkWindow): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
*/
opaque type _AdwWindowClass = CStruct2[_root_.gtk4.all.GtkWindowClass, CArray[gpointer, Nat._4]]
object _AdwWindowClass:
  given _tag: Tag[_AdwWindowClass] = Tag.materializeCStruct2Tag[_root_.gtk4.all.GtkWindowClass, CArray[gpointer, Nat._4]]
  def apply()(using Zone): Ptr[_AdwWindowClass] = scala.scalanative.unsafe.alloc[_AdwWindowClass](1)
  def apply(parent_class : _root_.gtk4.all.GtkWindowClass, padding : CArray[gpointer, Nat._4])(using Zone): Ptr[_AdwWindowClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _AdwWindowClass)
    def parent_class : _root_.gtk4.all.GtkWindowClass = struct._1
    def parent_class_=(value: _root_.gtk4.all.GtkWindowClass): Unit = !struct.at1 = value
    def padding : CArray[gpointer, Nat._4] = struct._2
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
*/
opaque type _AdwWindowTitle = CStruct0
object _AdwWindowTitle:
  given _tag: Tag[_AdwWindowTitle] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GAction = CStruct0
object _GAction:
  given _tag: Tag[_GAction] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gactionmap.h
*/
opaque type _GActionEntry = CStruct6[Ptr[gchar], CFuncPtr3[Ptr[GSimpleAction], Ptr[GVariant], gpointer, Unit], Ptr[gchar], Ptr[gchar], CFuncPtr3[Ptr[GSimpleAction], Ptr[GVariant], gpointer, Unit], CArray[gsize, Nat._3]]
object _GActionEntry:
  given _tag: Tag[_GActionEntry] = Tag.materializeCStruct6Tag[Ptr[gchar], CFuncPtr3[Ptr[GSimpleAction], Ptr[GVariant], gpointer, Unit], Ptr[gchar], Ptr[gchar], CFuncPtr3[Ptr[GSimpleAction], Ptr[GVariant], gpointer, Unit], CArray[gsize, Nat._3]]
  def apply()(using Zone): Ptr[_GActionEntry] = scala.scalanative.unsafe.alloc[_GActionEntry](1)
  def apply(name : Ptr[gchar], activate : CFuncPtr3[Ptr[GSimpleAction], Ptr[GVariant], gpointer, Unit], parameter_type : Ptr[gchar], state : Ptr[gchar], change_state : CFuncPtr3[Ptr[GSimpleAction], Ptr[GVariant], gpointer, Unit], padding : CArray[gsize, Nat._3])(using Zone): Ptr[_GActionEntry] = 
    val ____ptr = apply()
    (!____ptr).name = name
    (!____ptr).activate = activate
    (!____ptr).parameter_type = parameter_type
    (!____ptr).state = state
    (!____ptr).change_state = change_state
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GActionEntry)
    def name : Ptr[gchar] = struct._1
    def name_=(value: Ptr[gchar]): Unit = !struct.at1 = value
    def activate : CFuncPtr3[Ptr[GSimpleAction], Ptr[GVariant], gpointer, Unit] = struct._2
    def activate_=(value: CFuncPtr3[Ptr[GSimpleAction], Ptr[GVariant], gpointer, Unit]): Unit = !struct.at2 = value
    def parameter_type : Ptr[gchar] = struct._3
    def parameter_type_=(value: Ptr[gchar]): Unit = !struct.at3 = value
    def state : Ptr[gchar] = struct._4
    def state_=(value: Ptr[gchar]): Unit = !struct.at4 = value
    def change_state : CFuncPtr3[Ptr[GSimpleAction], Ptr[GVariant], gpointer, Unit] = struct._5
    def change_state_=(value: CFuncPtr3[Ptr[GSimpleAction], Ptr[GVariant], gpointer, Unit]): Unit = !struct.at5 = value
    def padding : CArray[gsize, Nat._3] = struct._6
    def padding_=(value: CArray[gsize, Nat._3]): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GActionGroup = CStruct0
object _GActionGroup:
  given _tag: Tag[_GActionGroup] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gactiongroup.h
*/
opaque type _GActionGroupInterface = CStruct15[GTypeInterface, CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], gboolean], CFuncPtr1[Ptr[GActionGroup], Ptr[Ptr[gchar]]], CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], gboolean], CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariantType]], CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariantType]], CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant]], CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant]], CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit], CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit], CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Unit], CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Unit], CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], gboolean, Unit], CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit], CFuncPtr7[Ptr[GActionGroup], Ptr[gchar], Ptr[gboolean], Ptr[Ptr[GVariantType]], Ptr[Ptr[GVariantType]], Ptr[Ptr[GVariant]], Ptr[Ptr[GVariant]], gboolean]]
object _GActionGroupInterface:
  given _tag: Tag[_GActionGroupInterface] = Tag.materializeCStruct15Tag[GTypeInterface, CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], gboolean], CFuncPtr1[Ptr[GActionGroup], Ptr[Ptr[gchar]]], CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], gboolean], CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariantType]], CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariantType]], CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant]], CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant]], CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit], CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit], CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Unit], CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Unit], CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], gboolean, Unit], CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit], CFuncPtr7[Ptr[GActionGroup], Ptr[gchar], Ptr[gboolean], Ptr[Ptr[GVariantType]], Ptr[Ptr[GVariantType]], Ptr[Ptr[GVariant]], Ptr[Ptr[GVariant]], gboolean]]
  def apply()(using Zone): Ptr[_GActionGroupInterface] = scala.scalanative.unsafe.alloc[_GActionGroupInterface](1)
  def apply(g_iface : GTypeInterface, has_action : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], gboolean], list_actions : CFuncPtr1[Ptr[GActionGroup], Ptr[Ptr[gchar]]], get_action_enabled : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], gboolean], get_action_parameter_type : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariantType]], get_action_state_type : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariantType]], get_action_state_hint : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant]], get_action_state : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant]], change_action_state : CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit], activate_action : CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit], action_added : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Unit], action_removed : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Unit], action_enabled_changed : CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], gboolean, Unit], action_state_changed : CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit], query_action : CFuncPtr7[Ptr[GActionGroup], Ptr[gchar], Ptr[gboolean], Ptr[Ptr[GVariantType]], Ptr[Ptr[GVariantType]], Ptr[Ptr[GVariant]], Ptr[Ptr[GVariant]], gboolean])(using Zone): Ptr[_GActionGroupInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).has_action = has_action
    (!____ptr).list_actions = list_actions
    (!____ptr).get_action_enabled = get_action_enabled
    (!____ptr).get_action_parameter_type = get_action_parameter_type
    (!____ptr).get_action_state_type = get_action_state_type
    (!____ptr).get_action_state_hint = get_action_state_hint
    (!____ptr).get_action_state = get_action_state
    (!____ptr).change_action_state = change_action_state
    (!____ptr).activate_action = activate_action
    (!____ptr).action_added = action_added
    (!____ptr).action_removed = action_removed
    (!____ptr).action_enabled_changed = action_enabled_changed
    (!____ptr).action_state_changed = action_state_changed
    (!____ptr).query_action = query_action
    ____ptr
  extension (struct: _GActionGroupInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def has_action : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], gboolean] = struct._2
    def has_action_=(value: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], gboolean]): Unit = !struct.at2 = value
    def list_actions : CFuncPtr1[Ptr[GActionGroup], Ptr[Ptr[gchar]]] = struct._3
    def list_actions_=(value: CFuncPtr1[Ptr[GActionGroup], Ptr[Ptr[gchar]]]): Unit = !struct.at3 = value
    def get_action_enabled : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], gboolean] = struct._4
    def get_action_enabled_=(value: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], gboolean]): Unit = !struct.at4 = value
    def get_action_parameter_type : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariantType]] = struct._5
    def get_action_parameter_type_=(value: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariantType]]): Unit = !struct.at5 = value
    def get_action_state_type : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariantType]] = struct._6
    def get_action_state_type_=(value: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariantType]]): Unit = !struct.at6 = value
    def get_action_state_hint : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant]] = struct._7
    def get_action_state_hint_=(value: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant]]): Unit = !struct.at7 = value
    def get_action_state : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant]] = struct._8
    def get_action_state_=(value: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant]]): Unit = !struct.at8 = value
    def change_action_state : CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit] = struct._9
    def change_action_state_=(value: CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit]): Unit = !struct.at9 = value
    def activate_action : CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit] = struct._10
    def activate_action_=(value: CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit]): Unit = !struct.at10 = value
    def action_added : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Unit] = struct._11
    def action_added_=(value: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Unit]): Unit = !struct.at11 = value
    def action_removed : CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Unit] = struct._12
    def action_removed_=(value: CFuncPtr2[Ptr[GActionGroup], Ptr[gchar], Unit]): Unit = !struct.at12 = value
    def action_enabled_changed : CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], gboolean, Unit] = struct._13
    def action_enabled_changed_=(value: CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], gboolean, Unit]): Unit = !struct.at13 = value
    def action_state_changed : CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit] = struct._14
    def action_state_changed_=(value: CFuncPtr3[Ptr[GActionGroup], Ptr[gchar], Ptr[GVariant], Unit]): Unit = !struct.at14 = value
    def query_action : CFuncPtr7[Ptr[GActionGroup], Ptr[gchar], Ptr[gboolean], Ptr[Ptr[GVariantType]], Ptr[Ptr[GVariantType]], Ptr[Ptr[GVariant]], Ptr[Ptr[GVariant]], gboolean] = struct._15
    def query_action_=(value: CFuncPtr7[Ptr[GActionGroup], Ptr[gchar], Ptr[gboolean], Ptr[Ptr[GVariantType]], Ptr[Ptr[GVariantType]], Ptr[Ptr[GVariant]], Ptr[Ptr[GVariant]], gboolean]): Unit = !struct.at15 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gaction.h
*/
opaque type _GActionInterface = CStruct9[GTypeInterface, CFuncPtr1[Ptr[GAction], Ptr[gchar]], CFuncPtr1[Ptr[GAction], Ptr[GVariantType]], CFuncPtr1[Ptr[GAction], Ptr[GVariantType]], CFuncPtr1[Ptr[GAction], Ptr[GVariant]], CFuncPtr1[Ptr[GAction], gboolean], CFuncPtr1[Ptr[GAction], Ptr[GVariant]], CFuncPtr2[Ptr[GAction], Ptr[GVariant], Unit], CFuncPtr2[Ptr[GAction], Ptr[GVariant], Unit]]
object _GActionInterface:
  given _tag: Tag[_GActionInterface] = Tag.materializeCStruct9Tag[GTypeInterface, CFuncPtr1[Ptr[GAction], Ptr[gchar]], CFuncPtr1[Ptr[GAction], Ptr[GVariantType]], CFuncPtr1[Ptr[GAction], Ptr[GVariantType]], CFuncPtr1[Ptr[GAction], Ptr[GVariant]], CFuncPtr1[Ptr[GAction], gboolean], CFuncPtr1[Ptr[GAction], Ptr[GVariant]], CFuncPtr2[Ptr[GAction], Ptr[GVariant], Unit], CFuncPtr2[Ptr[GAction], Ptr[GVariant], Unit]]
  def apply()(using Zone): Ptr[_GActionInterface] = scala.scalanative.unsafe.alloc[_GActionInterface](1)
  def apply(g_iface : GTypeInterface, get_name : CFuncPtr1[Ptr[GAction], Ptr[gchar]], get_parameter_type : CFuncPtr1[Ptr[GAction], Ptr[GVariantType]], get_state_type : CFuncPtr1[Ptr[GAction], Ptr[GVariantType]], get_state_hint : CFuncPtr1[Ptr[GAction], Ptr[GVariant]], get_enabled : CFuncPtr1[Ptr[GAction], gboolean], get_state : CFuncPtr1[Ptr[GAction], Ptr[GVariant]], change_state : CFuncPtr2[Ptr[GAction], Ptr[GVariant], Unit], activate : CFuncPtr2[Ptr[GAction], Ptr[GVariant], Unit])(using Zone): Ptr[_GActionInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).get_name = get_name
    (!____ptr).get_parameter_type = get_parameter_type
    (!____ptr).get_state_type = get_state_type
    (!____ptr).get_state_hint = get_state_hint
    (!____ptr).get_enabled = get_enabled
    (!____ptr).get_state = get_state
    (!____ptr).change_state = change_state
    (!____ptr).activate = activate
    ____ptr
  extension (struct: _GActionInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def get_name : CFuncPtr1[Ptr[GAction], Ptr[gchar]] = struct._2
    def get_name_=(value: CFuncPtr1[Ptr[GAction], Ptr[gchar]]): Unit = !struct.at2 = value
    def get_parameter_type : CFuncPtr1[Ptr[GAction], Ptr[GVariantType]] = struct._3
    def get_parameter_type_=(value: CFuncPtr1[Ptr[GAction], Ptr[GVariantType]]): Unit = !struct.at3 = value
    def get_state_type : CFuncPtr1[Ptr[GAction], Ptr[GVariantType]] = struct._4
    def get_state_type_=(value: CFuncPtr1[Ptr[GAction], Ptr[GVariantType]]): Unit = !struct.at4 = value
    def get_state_hint : CFuncPtr1[Ptr[GAction], Ptr[GVariant]] = struct._5
    def get_state_hint_=(value: CFuncPtr1[Ptr[GAction], Ptr[GVariant]]): Unit = !struct.at5 = value
    def get_enabled : CFuncPtr1[Ptr[GAction], gboolean] = struct._6
    def get_enabled_=(value: CFuncPtr1[Ptr[GAction], gboolean]): Unit = !struct.at6 = value
    def get_state : CFuncPtr1[Ptr[GAction], Ptr[GVariant]] = struct._7
    def get_state_=(value: CFuncPtr1[Ptr[GAction], Ptr[GVariant]]): Unit = !struct.at7 = value
    def change_state : CFuncPtr2[Ptr[GAction], Ptr[GVariant], Unit] = struct._8
    def change_state_=(value: CFuncPtr2[Ptr[GAction], Ptr[GVariant], Unit]): Unit = !struct.at8 = value
    def activate : CFuncPtr2[Ptr[GAction], Ptr[GVariant], Unit] = struct._9
    def activate_=(value: CFuncPtr2[Ptr[GAction], Ptr[GVariant], Unit]): Unit = !struct.at9 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GActionMap = CStruct0
object _GActionMap:
  given _tag: Tag[_GActionMap] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gactionmap.h
*/
opaque type _GActionMapInterface = CStruct4[GTypeInterface, CFuncPtr2[Ptr[GActionMap], Ptr[gchar], Ptr[GAction]], CFuncPtr2[Ptr[GActionMap], Ptr[GAction], Unit], CFuncPtr2[Ptr[GActionMap], Ptr[gchar], Unit]]
object _GActionMapInterface:
  given _tag: Tag[_GActionMapInterface] = Tag.materializeCStruct4Tag[GTypeInterface, CFuncPtr2[Ptr[GActionMap], Ptr[gchar], Ptr[GAction]], CFuncPtr2[Ptr[GActionMap], Ptr[GAction], Unit], CFuncPtr2[Ptr[GActionMap], Ptr[gchar], Unit]]
  def apply()(using Zone): Ptr[_GActionMapInterface] = scala.scalanative.unsafe.alloc[_GActionMapInterface](1)
  def apply(g_iface : GTypeInterface, lookup_action : CFuncPtr2[Ptr[GActionMap], Ptr[gchar], Ptr[GAction]], add_action : CFuncPtr2[Ptr[GActionMap], Ptr[GAction], Unit], remove_action : CFuncPtr2[Ptr[GActionMap], Ptr[gchar], Unit])(using Zone): Ptr[_GActionMapInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).lookup_action = lookup_action
    (!____ptr).add_action = add_action
    (!____ptr).remove_action = remove_action
    ____ptr
  extension (struct: _GActionMapInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def lookup_action : CFuncPtr2[Ptr[GActionMap], Ptr[gchar], Ptr[GAction]] = struct._2
    def lookup_action_=(value: CFuncPtr2[Ptr[GActionMap], Ptr[gchar], Ptr[GAction]]): Unit = !struct.at2 = value
    def add_action : CFuncPtr2[Ptr[GActionMap], Ptr[GAction], Unit] = struct._3
    def add_action_=(value: CFuncPtr2[Ptr[GActionMap], Ptr[GAction], Unit]): Unit = !struct.at3 = value
    def remove_action : CFuncPtr2[Ptr[GActionMap], Ptr[gchar], Unit] = struct._4
    def remove_action_=(value: CFuncPtr2[Ptr[GActionMap], Ptr[gchar], Unit]): Unit = !struct.at4 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
*/
opaque type _GAllocator = CStruct0
object _GAllocator:
  given _tag: Tag[_GAllocator] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GAppInfo = CStruct0
object _GAppInfo:
  given _tag: Tag[_GAppInfo] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
*/
opaque type _GAppInfoIface = CArray[CChar, Nat.Digit3[Nat._2, Nat._1, Nat._6]]
object _GAppInfoIface:
  given _tag: Tag[_GAppInfoIface] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._1, Nat._6]](Tag.Byte, Tag.Digit3[Nat._2, Nat._1, Nat._6](Tag.Nat2, Tag.Nat1, Tag.Nat6))
  def apply()(using Zone): Ptr[_GAppInfoIface] = scala.scalanative.unsafe.alloc[_GAppInfoIface](1)
  def apply(g_iface : GTypeInterface, dup : CFuncPtr1[Ptr[GAppInfo], Ptr[GAppInfo]], equal : CFuncPtr2[Ptr[GAppInfo], Ptr[GAppInfo], gboolean], get_id : CFuncPtr1[Ptr[GAppInfo], CString], get_name : CFuncPtr1[Ptr[GAppInfo], CString], get_description : CFuncPtr1[Ptr[GAppInfo], CString], get_executable : CFuncPtr1[Ptr[GAppInfo], CString], get_icon : CFuncPtr1[Ptr[GAppInfo], Ptr[GIcon]], launch : CFuncPtr4[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[Ptr[GError]], gboolean], supports_uris : CFuncPtr1[Ptr[GAppInfo], gboolean], supports_files : CFuncPtr1[Ptr[GAppInfo], gboolean], launch_uris : CFuncPtr4[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[Ptr[GError]], gboolean], should_show : CFuncPtr1[Ptr[GAppInfo], gboolean], set_as_default_for_type : CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean], set_as_default_for_extension : CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean], add_supports_type : CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean], can_remove_supports_type : CFuncPtr1[Ptr[GAppInfo], gboolean], remove_supports_type : CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean], can_delete : CFuncPtr1[Ptr[GAppInfo], gboolean], do_delete : CFuncPtr1[Ptr[GAppInfo], gboolean], get_commandline : CFuncPtr1[Ptr[GAppInfo], CString], get_display_name : CFuncPtr1[Ptr[GAppInfo], CString], set_as_last_used_for_type : CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean], get_supported_types : CFuncPtr1[Ptr[GAppInfo], Ptr[CString]], launch_uris_async : CFuncPtr6[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], launch_uris_finish : CFuncPtr3[Ptr[GAppInfo], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean])(using Zone): Ptr[_GAppInfoIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).dup = dup
    (!____ptr).equal = equal
    (!____ptr).get_id = get_id
    (!____ptr).get_name = get_name
    (!____ptr).get_description = get_description
    (!____ptr).get_executable = get_executable
    (!____ptr).get_icon = get_icon
    (!____ptr).launch = launch
    (!____ptr).supports_uris = supports_uris
    (!____ptr).supports_files = supports_files
    (!____ptr).launch_uris = launch_uris
    (!____ptr).should_show = should_show
    (!____ptr).set_as_default_for_type = set_as_default_for_type
    (!____ptr).set_as_default_for_extension = set_as_default_for_extension
    (!____ptr).add_supports_type = add_supports_type
    (!____ptr).can_remove_supports_type = can_remove_supports_type
    (!____ptr).remove_supports_type = remove_supports_type
    (!____ptr).can_delete = can_delete
    (!____ptr).do_delete = do_delete
    (!____ptr).get_commandline = get_commandline
    (!____ptr).get_display_name = get_display_name
    (!____ptr).set_as_last_used_for_type = set_as_last_used_for_type
    (!____ptr).get_supported_types = get_supported_types
    (!____ptr).launch_uris_async = launch_uris_async
    (!____ptr).launch_uris_finish = launch_uris_finish
    ____ptr
  extension (struct: _GAppInfoIface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def dup: CFuncPtr1[Ptr[GAppInfo], Ptr[GAppInfo]] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], Ptr[GAppInfo]]]]
    def dup_=(value: CFuncPtr1[Ptr[GAppInfo], Ptr[GAppInfo]]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], Ptr[GAppInfo]]]] = value
    def equal: CFuncPtr2[Ptr[GAppInfo], Ptr[GAppInfo], gboolean] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr2[Ptr[GAppInfo], Ptr[GAppInfo], gboolean]]]
    def equal_=(value: CFuncPtr2[Ptr[GAppInfo], Ptr[GAppInfo], gboolean]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr2[Ptr[GAppInfo], Ptr[GAppInfo], gboolean]]] = value
    def get_id: CFuncPtr1[Ptr[GAppInfo], CString] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]]
    def get_id_=(value: CFuncPtr1[Ptr[GAppInfo], CString]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]] = value
    def get_name: CFuncPtr1[Ptr[GAppInfo], CString] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]]
    def get_name_=(value: CFuncPtr1[Ptr[GAppInfo], CString]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]] = value
    def get_description: CFuncPtr1[Ptr[GAppInfo], CString] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]]
    def get_description_=(value: CFuncPtr1[Ptr[GAppInfo], CString]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]] = value
    def get_executable: CFuncPtr1[Ptr[GAppInfo], CString] = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]]
    def get_executable_=(value: CFuncPtr1[Ptr[GAppInfo], CString]): Unit = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]] = value
    def get_icon: CFuncPtr1[Ptr[GAppInfo], Ptr[GIcon]] = !struct.at(64).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], Ptr[GIcon]]]]
    def get_icon_=(value: CFuncPtr1[Ptr[GAppInfo], Ptr[GIcon]]): Unit = !struct.at(64).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], Ptr[GIcon]]]] = value
    def launch: CFuncPtr4[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[Ptr[GError]], gboolean] = !struct.at(72).asInstanceOf[Ptr[CFuncPtr4[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[Ptr[GError]], gboolean]]]
    def launch_=(value: CFuncPtr4[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(72).asInstanceOf[Ptr[CFuncPtr4[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[Ptr[GError]], gboolean]]] = value
    def supports_uris: CFuncPtr1[Ptr[GAppInfo], gboolean] = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]]
    def supports_uris_=(value: CFuncPtr1[Ptr[GAppInfo], gboolean]): Unit = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]] = value
    def supports_files: CFuncPtr1[Ptr[GAppInfo], gboolean] = !struct.at(88).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]]
    def supports_files_=(value: CFuncPtr1[Ptr[GAppInfo], gboolean]): Unit = !struct.at(88).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]] = value
    def launch_uris: CFuncPtr4[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[Ptr[GError]], gboolean] = !struct.at(96).asInstanceOf[Ptr[CFuncPtr4[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[Ptr[GError]], gboolean]]]
    def launch_uris_=(value: CFuncPtr4[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(96).asInstanceOf[Ptr[CFuncPtr4[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[Ptr[GError]], gboolean]]] = value
    def should_show: CFuncPtr1[Ptr[GAppInfo], gboolean] = !struct.at(104).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]]
    def should_show_=(value: CFuncPtr1[Ptr[GAppInfo], gboolean]): Unit = !struct.at(104).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]] = value
    def set_as_default_for_type: CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean] = !struct.at(112).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]]]
    def set_as_default_for_type_=(value: CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(112).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]]] = value
    def set_as_default_for_extension: CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean] = !struct.at(120).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]]]
    def set_as_default_for_extension_=(value: CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(120).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]]] = value
    def add_supports_type: CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean] = !struct.at(128).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]]]
    def add_supports_type_=(value: CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(128).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]]] = value
    def can_remove_supports_type: CFuncPtr1[Ptr[GAppInfo], gboolean] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]]
    def can_remove_supports_type_=(value: CFuncPtr1[Ptr[GAppInfo], gboolean]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]] = value
    def remove_supports_type: CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]]]
    def remove_supports_type_=(value: CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]]] = value
    def can_delete: CFuncPtr1[Ptr[GAppInfo], gboolean] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]]
    def can_delete_=(value: CFuncPtr1[Ptr[GAppInfo], gboolean]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]] = value
    def do_delete: CFuncPtr1[Ptr[GAppInfo], gboolean] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]]
    def do_delete_=(value: CFuncPtr1[Ptr[GAppInfo], gboolean]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], gboolean]]] = value
    def get_commandline: CFuncPtr1[Ptr[GAppInfo], CString] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]]
    def get_commandline_=(value: CFuncPtr1[Ptr[GAppInfo], CString]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]] = value
    def get_display_name: CFuncPtr1[Ptr[GAppInfo], CString] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]]
    def get_display_name_=(value: CFuncPtr1[Ptr[GAppInfo], CString]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], CString]]] = value
    def set_as_last_used_for_type: CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]]]
    def set_as_last_used_for_type_=(value: CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], CString, Ptr[Ptr[GError]], gboolean]]] = value
    def get_supported_types: CFuncPtr1[Ptr[GAppInfo], Ptr[CString]] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], Ptr[CString]]]]
    def get_supported_types_=(value: CFuncPtr1[Ptr[GAppInfo], Ptr[CString]]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr1[Ptr[GAppInfo], Ptr[CString]]]] = value
    def launch_uris_async: CFuncPtr6[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr6[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def launch_uris_async_=(value: CFuncPtr6[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr6[Ptr[GAppInfo], Ptr[GList], Ptr[GAppLaunchContext], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def launch_uris_finish: CFuncPtr3[Ptr[GAppInfo], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def launch_uris_finish_=(value: CFuncPtr3[Ptr[GAppInfo], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr3[Ptr[GAppInfo], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
*/
opaque type _GAppInfoMonitor = CStruct0
object _GAppInfoMonitor:
  given _tag: Tag[_GAppInfoMonitor] = Tag.materializeCStruct0Tag

/**
 * GAppLaunchContext:

 * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
*/
opaque type _GAppLaunchContext = CStruct2[GObject, Ptr[GAppLaunchContextPrivate]]
object _GAppLaunchContext:
  given _tag: Tag[_GAppLaunchContext] = Tag.materializeCStruct2Tag[GObject, Ptr[GAppLaunchContextPrivate]]
  def apply()(using Zone): Ptr[_GAppLaunchContext] = scala.scalanative.unsafe.alloc[_GAppLaunchContext](1)
  def apply(parent_instance : GObject, priv : Ptr[GAppLaunchContextPrivate])(using Zone): Ptr[_GAppLaunchContext] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GAppLaunchContext)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GAppLaunchContextPrivate] = struct._2
    def priv_=(value: Ptr[GAppLaunchContextPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
*/
opaque type _GAppLaunchContextClass = CStruct9[GObjectClass, CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[Byte], CString], CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[Byte], CString], CFuncPtr2[Ptr[GAppLaunchContext], CString, Unit], CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GVariant], Unit], CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GVariant], Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GAppLaunchContextClass:
  given _tag: Tag[_GAppLaunchContextClass] = Tag.materializeCStruct9Tag[GObjectClass, CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[Byte], CString], CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[Byte], CString], CFuncPtr2[Ptr[GAppLaunchContext], CString, Unit], CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GVariant], Unit], CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GVariant], Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GAppLaunchContextClass] = scala.scalanative.unsafe.alloc[_GAppLaunchContextClass](1)
  def apply(parent_class : GObjectClass, get_display : CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GList], CString], get_startup_notify_id : CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GList], CString], launch_failed : CFuncPtr2[Ptr[GAppLaunchContext], CString, Unit], launched : CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GVariant], Unit], launch_started : CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GVariant], Unit], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit])(using Zone): Ptr[_GAppLaunchContextClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_display = get_display
    (!____ptr).get_startup_notify_id = get_startup_notify_id
    (!____ptr).launch_failed = launch_failed
    (!____ptr).launched = launched
    (!____ptr).launch_started = launch_started
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    ____ptr
  extension (struct: _GAppLaunchContextClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def get_display : CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GList], CString] = struct._2.asInstanceOf[CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GList], CString]]
    def get_display_=(value: CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GList], CString]): Unit = !struct.at2 = value.asInstanceOf[CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[Byte], CString]]
    def get_startup_notify_id : CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GList], CString] = struct._3.asInstanceOf[CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GList], CString]]
    def get_startup_notify_id_=(value: CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GList], CString]): Unit = !struct.at3 = value.asInstanceOf[CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[Byte], CString]]
    def launch_failed : CFuncPtr2[Ptr[GAppLaunchContext], CString, Unit] = struct._4
    def launch_failed_=(value: CFuncPtr2[Ptr[GAppLaunchContext], CString, Unit]): Unit = !struct.at4 = value
    def launched : CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GVariant], Unit] = struct._5
    def launched_=(value: CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GVariant], Unit]): Unit = !struct.at5 = value
    def launch_started : CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GVariant], Unit] = struct._6
    def launch_started_=(value: CFuncPtr3[Ptr[GAppLaunchContext], Ptr[GAppInfo], Ptr[GVariant], Unit]): Unit = !struct.at6 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._7
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at7 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._8
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at8 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._9
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at9 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
*/
opaque type _GAppLaunchContextPrivate = CStruct0
object _GAppLaunchContextPrivate:
  given _tag: Tag[_GAppLaunchContextPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
*/
opaque type _GApplication = CStruct2[GObject, Ptr[GApplicationPrivate]]
object _GApplication:
  given _tag: Tag[_GApplication] = Tag.materializeCStruct2Tag[GObject, Ptr[GApplicationPrivate]]
  def apply()(using Zone): Ptr[_GApplication] = scala.scalanative.unsafe.alloc[_GApplication](1)
  def apply(parent_instance : GObject, priv : Ptr[GApplicationPrivate])(using Zone): Ptr[_GApplication] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GApplication)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GApplicationPrivate] = struct._2
    def priv_=(value: Ptr[GApplicationPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
*/
opaque type _GApplicationClass = CStruct17[GObjectClass, CFuncPtr1[Ptr[GApplication], Unit], CFuncPtr1[Ptr[GApplication], Unit], CFuncPtr4[Ptr[GApplication], Ptr[Ptr[GFile]], gint, Ptr[gchar], Unit], CFuncPtr2[Ptr[GApplication], Ptr[GApplicationCommandLine], CInt], CFuncPtr3[Ptr[GApplication], Ptr[Ptr[Ptr[gchar]]], Ptr[CInt], gboolean], CFuncPtr2[Ptr[GApplication], Ptr[GVariant], Unit], CFuncPtr2[Ptr[GApplication], Ptr[GVariant], Unit], CFuncPtr2[Ptr[GApplication], Ptr[GVariantBuilder], Unit], CFuncPtr1[Ptr[GApplication], Unit], CFuncPtr1[Ptr[GApplication], Unit], CFuncPtr1[Ptr[GApplication], Unit], CFuncPtr4[Ptr[GApplication], Ptr[GDBusConnection], Ptr[gchar], Ptr[Ptr[GError]], gboolean], CFuncPtr3[Ptr[GApplication], Ptr[GDBusConnection], Ptr[gchar], Unit], CFuncPtr2[Ptr[GApplication], Ptr[GVariantDict], gint], CFuncPtr1[Ptr[GApplication], gboolean], CArray[gpointer, Nat._7]]
object _GApplicationClass:
  given _tag: Tag[_GApplicationClass] = Tag.materializeCStruct17Tag[GObjectClass, CFuncPtr1[Ptr[GApplication], Unit], CFuncPtr1[Ptr[GApplication], Unit], CFuncPtr4[Ptr[GApplication], Ptr[Ptr[GFile]], gint, Ptr[gchar], Unit], CFuncPtr2[Ptr[GApplication], Ptr[GApplicationCommandLine], CInt], CFuncPtr3[Ptr[GApplication], Ptr[Ptr[Ptr[gchar]]], Ptr[CInt], gboolean], CFuncPtr2[Ptr[GApplication], Ptr[GVariant], Unit], CFuncPtr2[Ptr[GApplication], Ptr[GVariant], Unit], CFuncPtr2[Ptr[GApplication], Ptr[GVariantBuilder], Unit], CFuncPtr1[Ptr[GApplication], Unit], CFuncPtr1[Ptr[GApplication], Unit], CFuncPtr1[Ptr[GApplication], Unit], CFuncPtr4[Ptr[GApplication], Ptr[GDBusConnection], Ptr[gchar], Ptr[Ptr[GError]], gboolean], CFuncPtr3[Ptr[GApplication], Ptr[GDBusConnection], Ptr[gchar], Unit], CFuncPtr2[Ptr[GApplication], Ptr[GVariantDict], gint], CFuncPtr1[Ptr[GApplication], gboolean], CArray[gpointer, Nat._7]]
  def apply()(using Zone): Ptr[_GApplicationClass] = scala.scalanative.unsafe.alloc[_GApplicationClass](1)
  def apply(parent_class : GObjectClass, startup : CFuncPtr1[Ptr[GApplication], Unit], activate : CFuncPtr1[Ptr[GApplication], Unit], open : CFuncPtr4[Ptr[GApplication], Ptr[Ptr[GFile]], gint, Ptr[gchar], Unit], command_line : CFuncPtr2[Ptr[GApplication], Ptr[GApplicationCommandLine], CInt], local_command_line : CFuncPtr3[Ptr[GApplication], Ptr[Ptr[Ptr[gchar]]], Ptr[CInt], gboolean], before_emit : CFuncPtr2[Ptr[GApplication], Ptr[GVariant], Unit], after_emit : CFuncPtr2[Ptr[GApplication], Ptr[GVariant], Unit], add_platform_data : CFuncPtr2[Ptr[GApplication], Ptr[GVariantBuilder], Unit], quit_mainloop : CFuncPtr1[Ptr[GApplication], Unit], run_mainloop : CFuncPtr1[Ptr[GApplication], Unit], shutdown : CFuncPtr1[Ptr[GApplication], Unit], dbus_register : CFuncPtr4[Ptr[GApplication], Ptr[GDBusConnection], Ptr[gchar], Ptr[Ptr[GError]], gboolean], dbus_unregister : CFuncPtr3[Ptr[GApplication], Ptr[GDBusConnection], Ptr[gchar], Unit], handle_local_options : CFuncPtr2[Ptr[GApplication], Ptr[GVariantDict], gint], name_lost : CFuncPtr1[Ptr[GApplication], gboolean], padding : CArray[gpointer, Nat._7])(using Zone): Ptr[_GApplicationClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).startup = startup
    (!____ptr).activate = activate
    (!____ptr).open = open
    (!____ptr).command_line = command_line
    (!____ptr).local_command_line = local_command_line
    (!____ptr).before_emit = before_emit
    (!____ptr).after_emit = after_emit
    (!____ptr).add_platform_data = add_platform_data
    (!____ptr).quit_mainloop = quit_mainloop
    (!____ptr).run_mainloop = run_mainloop
    (!____ptr).shutdown = shutdown
    (!____ptr).dbus_register = dbus_register
    (!____ptr).dbus_unregister = dbus_unregister
    (!____ptr).handle_local_options = handle_local_options
    (!____ptr).name_lost = name_lost
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GApplicationClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def startup : CFuncPtr1[Ptr[GApplication], Unit] = struct._2
    def startup_=(value: CFuncPtr1[Ptr[GApplication], Unit]): Unit = !struct.at2 = value
    def activate : CFuncPtr1[Ptr[GApplication], Unit] = struct._3
    def activate_=(value: CFuncPtr1[Ptr[GApplication], Unit]): Unit = !struct.at3 = value
    def open : CFuncPtr4[Ptr[GApplication], Ptr[Ptr[GFile]], gint, Ptr[gchar], Unit] = struct._4
    def open_=(value: CFuncPtr4[Ptr[GApplication], Ptr[Ptr[GFile]], gint, Ptr[gchar], Unit]): Unit = !struct.at4 = value
    def command_line : CFuncPtr2[Ptr[GApplication], Ptr[GApplicationCommandLine], CInt] = struct._5
    def command_line_=(value: CFuncPtr2[Ptr[GApplication], Ptr[GApplicationCommandLine], CInt]): Unit = !struct.at5 = value
    def local_command_line : CFuncPtr3[Ptr[GApplication], Ptr[Ptr[Ptr[gchar]]], Ptr[CInt], gboolean] = struct._6
    def local_command_line_=(value: CFuncPtr3[Ptr[GApplication], Ptr[Ptr[Ptr[gchar]]], Ptr[CInt], gboolean]): Unit = !struct.at6 = value
    def before_emit : CFuncPtr2[Ptr[GApplication], Ptr[GVariant], Unit] = struct._7
    def before_emit_=(value: CFuncPtr2[Ptr[GApplication], Ptr[GVariant], Unit]): Unit = !struct.at7 = value
    def after_emit : CFuncPtr2[Ptr[GApplication], Ptr[GVariant], Unit] = struct._8
    def after_emit_=(value: CFuncPtr2[Ptr[GApplication], Ptr[GVariant], Unit]): Unit = !struct.at8 = value
    def add_platform_data : CFuncPtr2[Ptr[GApplication], Ptr[GVariantBuilder], Unit] = struct._9
    def add_platform_data_=(value: CFuncPtr2[Ptr[GApplication], Ptr[GVariantBuilder], Unit]): Unit = !struct.at9 = value
    def quit_mainloop : CFuncPtr1[Ptr[GApplication], Unit] = struct._10
    def quit_mainloop_=(value: CFuncPtr1[Ptr[GApplication], Unit]): Unit = !struct.at10 = value
    def run_mainloop : CFuncPtr1[Ptr[GApplication], Unit] = struct._11
    def run_mainloop_=(value: CFuncPtr1[Ptr[GApplication], Unit]): Unit = !struct.at11 = value
    def shutdown : CFuncPtr1[Ptr[GApplication], Unit] = struct._12
    def shutdown_=(value: CFuncPtr1[Ptr[GApplication], Unit]): Unit = !struct.at12 = value
    def dbus_register : CFuncPtr4[Ptr[GApplication], Ptr[GDBusConnection], Ptr[gchar], Ptr[Ptr[GError]], gboolean] = struct._13
    def dbus_register_=(value: CFuncPtr4[Ptr[GApplication], Ptr[GDBusConnection], Ptr[gchar], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at13 = value
    def dbus_unregister : CFuncPtr3[Ptr[GApplication], Ptr[GDBusConnection], Ptr[gchar], Unit] = struct._14
    def dbus_unregister_=(value: CFuncPtr3[Ptr[GApplication], Ptr[GDBusConnection], Ptr[gchar], Unit]): Unit = !struct.at14 = value
    def handle_local_options : CFuncPtr2[Ptr[GApplication], Ptr[GVariantDict], gint] = struct._15
    def handle_local_options_=(value: CFuncPtr2[Ptr[GApplication], Ptr[GVariantDict], gint]): Unit = !struct.at15 = value
    def name_lost : CFuncPtr1[Ptr[GApplication], gboolean] = struct._16
    def name_lost_=(value: CFuncPtr1[Ptr[GApplication], gboolean]): Unit = !struct.at16 = value
    def padding : CArray[gpointer, Nat._7] = struct._17
    def padding_=(value: CArray[gpointer, Nat._7]): Unit = !struct.at17 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gapplicationcommandline.h
*/
opaque type _GApplicationCommandLine = CStruct2[GObject, Ptr[GApplicationCommandLinePrivate]]
object _GApplicationCommandLine:
  given _tag: Tag[_GApplicationCommandLine] = Tag.materializeCStruct2Tag[GObject, Ptr[GApplicationCommandLinePrivate]]
  def apply()(using Zone): Ptr[_GApplicationCommandLine] = scala.scalanative.unsafe.alloc[_GApplicationCommandLine](1)
  def apply(parent_instance : GObject, priv : Ptr[GApplicationCommandLinePrivate])(using Zone): Ptr[_GApplicationCommandLine] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GApplicationCommandLine)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GApplicationCommandLinePrivate] = struct._2
    def priv_=(value: Ptr[GApplicationCommandLinePrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gapplicationcommandline.h
*/
opaque type _GApplicationCommandLineClass = CStruct5[GObjectClass, CFuncPtr2[Ptr[GApplicationCommandLine], Ptr[gchar], Unit], CFuncPtr2[Ptr[GApplicationCommandLine], Ptr[gchar], Unit], CFuncPtr1[Ptr[GApplicationCommandLine], Ptr[GInputStream]], CArray[gpointer, Nat.Digit2[Nat._1, Nat._1]]]
object _GApplicationCommandLineClass:
  given _tag: Tag[_GApplicationCommandLineClass] = Tag.materializeCStruct5Tag[GObjectClass, CFuncPtr2[Ptr[GApplicationCommandLine], Ptr[gchar], Unit], CFuncPtr2[Ptr[GApplicationCommandLine], Ptr[gchar], Unit], CFuncPtr1[Ptr[GApplicationCommandLine], Ptr[GInputStream]], CArray[gpointer, Nat.Digit2[Nat._1, Nat._1]]]
  def apply()(using Zone): Ptr[_GApplicationCommandLineClass] = scala.scalanative.unsafe.alloc[_GApplicationCommandLineClass](1)
  def apply(parent_class : GObjectClass, print_literal : CFuncPtr2[Ptr[GApplicationCommandLine], Ptr[gchar], Unit], printerr_literal : CFuncPtr2[Ptr[GApplicationCommandLine], Ptr[gchar], Unit], get_stdin : CFuncPtr1[Ptr[GApplicationCommandLine], Ptr[GInputStream]], padding : CArray[gpointer, Nat.Digit2[Nat._1, Nat._1]])(using Zone): Ptr[_GApplicationCommandLineClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).print_literal = print_literal
    (!____ptr).printerr_literal = printerr_literal
    (!____ptr).get_stdin = get_stdin
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GApplicationCommandLineClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def print_literal : CFuncPtr2[Ptr[GApplicationCommandLine], Ptr[gchar], Unit] = struct._2
    def print_literal_=(value: CFuncPtr2[Ptr[GApplicationCommandLine], Ptr[gchar], Unit]): Unit = !struct.at2 = value
    def printerr_literal : CFuncPtr2[Ptr[GApplicationCommandLine], Ptr[gchar], Unit] = struct._3
    def printerr_literal_=(value: CFuncPtr2[Ptr[GApplicationCommandLine], Ptr[gchar], Unit]): Unit = !struct.at3 = value
    def get_stdin : CFuncPtr1[Ptr[GApplicationCommandLine], Ptr[GInputStream]] = struct._4
    def get_stdin_=(value: CFuncPtr1[Ptr[GApplicationCommandLine], Ptr[GInputStream]]): Unit = !struct.at4 = value
    def padding : CArray[gpointer, Nat.Digit2[Nat._1, Nat._1]] = struct._5
    def padding_=(value: CArray[gpointer, Nat.Digit2[Nat._1, Nat._1]]): Unit = !struct.at5 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gapplicationcommandline.h
*/
opaque type _GApplicationCommandLinePrivate = CStruct0
object _GApplicationCommandLinePrivate:
  given _tag: Tag[_GApplicationCommandLinePrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
*/
opaque type _GApplicationPrivate = CStruct0
object _GApplicationPrivate:
  given _tag: Tag[_GApplicationPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
*/
opaque type _GArray = CStruct2[Ptr[gchar], guint]
object _GArray:
  given _tag: Tag[_GArray] = Tag.materializeCStruct2Tag[Ptr[gchar], guint]
  def apply()(using Zone): Ptr[_GArray] = scala.scalanative.unsafe.alloc[_GArray](1)
  def apply(data : Ptr[gchar], len : guint)(using Zone): Ptr[_GArray] = 
    val ____ptr = apply()
    (!____ptr).data = data
    (!____ptr).len = len
    ____ptr
  extension (struct: _GArray)
    def data : Ptr[gchar] = struct._1
    def data_=(value: Ptr[gchar]): Unit = !struct.at1 = value
    def len : guint = struct._2
    def len_=(value: guint): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GAsyncInitable = CStruct0
object _GAsyncInitable:
  given _tag: Tag[_GAsyncInitable] = Tag.materializeCStruct0Tag

/**
 * GAsyncInitableIface: _iface: The parent interface. _async: Starts initialization of the object. _finish: Finishes initialization of the object.

 * [bindgen] header: /usr/include/glib-2.0/gio/gasyncinitable.h
*/
opaque type _GAsyncInitableIface = CStruct3[GTypeInterface, CFuncPtr5[Ptr[GAsyncInitable], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GAsyncInitable], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]
object _GAsyncInitableIface:
  given _tag: Tag[_GAsyncInitableIface] = Tag.materializeCStruct3Tag[GTypeInterface, CFuncPtr5[Ptr[GAsyncInitable], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GAsyncInitable], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]
  def apply()(using Zone): Ptr[_GAsyncInitableIface] = scala.scalanative.unsafe.alloc[_GAsyncInitableIface](1)
  def apply(g_iface : GTypeInterface, init_async : CFuncPtr5[Ptr[GAsyncInitable], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], init_finish : CFuncPtr3[Ptr[GAsyncInitable], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean])(using Zone): Ptr[_GAsyncInitableIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).init_async = init_async
    (!____ptr).init_finish = init_finish
    ____ptr
  extension (struct: _GAsyncInitableIface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def init_async : CFuncPtr5[Ptr[GAsyncInitable], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._2
    def init_async_=(value: CFuncPtr5[Ptr[GAsyncInitable], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at2 = value
    def init_finish : CFuncPtr3[Ptr[GAsyncInitable], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = struct._3
    def init_finish_=(value: CFuncPtr3[Ptr[GAsyncInitable], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
*/
opaque type _GAsyncQueue = CStruct0
object _GAsyncQueue:
  given _tag: Tag[_GAsyncQueue] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GAsyncResult = CStruct0
object _GAsyncResult:
  given _tag: Tag[_GAsyncResult] = Tag.materializeCStruct0Tag

/**
 * GAsyncResultIface: _iface: The parent interface. _user_data: Gets the user data passed to the callback. _source_object: Gets the source object that issued the asynchronous operation.

 * [bindgen] header: /usr/include/glib-2.0/gio/gasyncresult.h
*/
opaque type _GAsyncResultIface = CStruct4[GTypeInterface, CFuncPtr1[Ptr[GAsyncResult], gpointer], CFuncPtr1[Ptr[GAsyncResult], Ptr[GObject]], CFuncPtr2[Ptr[GAsyncResult], gpointer, gboolean]]
object _GAsyncResultIface:
  given _tag: Tag[_GAsyncResultIface] = Tag.materializeCStruct4Tag[GTypeInterface, CFuncPtr1[Ptr[GAsyncResult], gpointer], CFuncPtr1[Ptr[GAsyncResult], Ptr[GObject]], CFuncPtr2[Ptr[GAsyncResult], gpointer, gboolean]]
  def apply()(using Zone): Ptr[_GAsyncResultIface] = scala.scalanative.unsafe.alloc[_GAsyncResultIface](1)
  def apply(g_iface : GTypeInterface, get_user_data : CFuncPtr1[Ptr[GAsyncResult], gpointer], get_source_object : CFuncPtr1[Ptr[GAsyncResult], Ptr[GObject]], is_tagged : CFuncPtr2[Ptr[GAsyncResult], gpointer, gboolean])(using Zone): Ptr[_GAsyncResultIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).get_user_data = get_user_data
    (!____ptr).get_source_object = get_source_object
    (!____ptr).is_tagged = is_tagged
    ____ptr
  extension (struct: _GAsyncResultIface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def get_user_data : CFuncPtr1[Ptr[GAsyncResult], gpointer] = struct._2
    def get_user_data_=(value: CFuncPtr1[Ptr[GAsyncResult], gpointer]): Unit = !struct.at2 = value
    def get_source_object : CFuncPtr1[Ptr[GAsyncResult], Ptr[GObject]] = struct._3
    def get_source_object_=(value: CFuncPtr1[Ptr[GAsyncResult], Ptr[GObject]]): Unit = !struct.at3 = value
    def is_tagged : CFuncPtr2[Ptr[GAsyncResult], gpointer, gboolean] = struct._4
    def is_tagged_=(value: CFuncPtr2[Ptr[GAsyncResult], gpointer, gboolean]): Unit = !struct.at4 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gobject/gbinding.h
*/
opaque type _GBinding = CStruct0
object _GBinding:
  given _tag: Tag[_GBinding] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gobject/gbindinggroup.h
*/
opaque type _GBindingGroup = CStruct0
object _GBindingGroup:
  given _tag: Tag[_GBindingGroup] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
*/
opaque type _GBookmarkFile = CStruct0
object _GBookmarkFile:
  given _tag: Tag[_GBookmarkFile] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedinputstream.h
*/
opaque type _GBufferedInputStream = CStruct2[GFilterInputStream, Ptr[GBufferedInputStreamPrivate]]
object _GBufferedInputStream:
  given _tag: Tag[_GBufferedInputStream] = Tag.materializeCStruct2Tag[GFilterInputStream, Ptr[GBufferedInputStreamPrivate]]
  def apply()(using Zone): Ptr[_GBufferedInputStream] = scala.scalanative.unsafe.alloc[_GBufferedInputStream](1)
  def apply(parent_instance : GFilterInputStream, priv : Ptr[GBufferedInputStreamPrivate])(using Zone): Ptr[_GBufferedInputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GBufferedInputStream)
    def parent_instance : GFilterInputStream = struct._1
    def parent_instance_=(value: GFilterInputStream): Unit = !struct.at1 = value
    def priv : Ptr[GBufferedInputStreamPrivate] = struct._2
    def priv_=(value: Ptr[GBufferedInputStreamPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedinputstream.h
*/
opaque type _GBufferedInputStreamClass = CStruct9[GFilterInputStreamClass, CFuncPtr4[Ptr[GBufferedInputStream], gssize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize], CFuncPtr6[Ptr[GBufferedInputStream], gssize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GBufferedInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GBufferedInputStreamClass:
  given _tag: Tag[_GBufferedInputStreamClass] = Tag.materializeCStruct9Tag[GFilterInputStreamClass, CFuncPtr4[Ptr[GBufferedInputStream], gssize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize], CFuncPtr6[Ptr[GBufferedInputStream], gssize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GBufferedInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GBufferedInputStreamClass] = scala.scalanative.unsafe.alloc[_GBufferedInputStreamClass](1)
  def apply(parent_class : GFilterInputStreamClass, fill : CFuncPtr4[Ptr[GBufferedInputStream], gssize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize], fill_async : CFuncPtr6[Ptr[GBufferedInputStream], gssize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], fill_finish : CFuncPtr3[Ptr[GBufferedInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[_GBufferedInputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).fill = fill
    (!____ptr).fill_async = fill_async
    (!____ptr).fill_finish = fill_finish
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: _GBufferedInputStreamClass)
    def parent_class : GFilterInputStreamClass = struct._1
    def parent_class_=(value: GFilterInputStreamClass): Unit = !struct.at1 = value
    def fill : CFuncPtr4[Ptr[GBufferedInputStream], gssize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize] = struct._2
    def fill_=(value: CFuncPtr4[Ptr[GBufferedInputStream], gssize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize]): Unit = !struct.at2 = value
    def fill_async : CFuncPtr6[Ptr[GBufferedInputStream], gssize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._3
    def fill_async_=(value: CFuncPtr6[Ptr[GBufferedInputStream], gssize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at3 = value
    def fill_finish : CFuncPtr3[Ptr[GBufferedInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize] = struct._4
    def fill_finish_=(value: CFuncPtr3[Ptr[GBufferedInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize]): Unit = !struct.at4 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._5
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at5 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._6
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at6 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._7
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at7 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._8
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at8 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._9
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at9 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedinputstream.h
*/
opaque type _GBufferedInputStreamPrivate = CStruct0
object _GBufferedInputStreamPrivate:
  given _tag: Tag[_GBufferedInputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedoutputstream.h
*/
opaque type _GBufferedOutputStream = CStruct2[GFilterOutputStream, Ptr[GBufferedOutputStreamPrivate]]
object _GBufferedOutputStream:
  given _tag: Tag[_GBufferedOutputStream] = Tag.materializeCStruct2Tag[GFilterOutputStream, Ptr[GBufferedOutputStreamPrivate]]
  def apply()(using Zone): Ptr[_GBufferedOutputStream] = scala.scalanative.unsafe.alloc[_GBufferedOutputStream](1)
  def apply(parent_instance : GFilterOutputStream, priv : Ptr[GBufferedOutputStreamPrivate])(using Zone): Ptr[_GBufferedOutputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GBufferedOutputStream)
    def parent_instance : GFilterOutputStream = struct._1
    def parent_instance_=(value: GFilterOutputStream): Unit = !struct.at1 = value
    def priv : Ptr[GBufferedOutputStreamPrivate] = struct._2
    def priv_=(value: Ptr[GBufferedOutputStreamPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedoutputstream.h
*/
opaque type _GBufferedOutputStreamClass = CStruct3[GFilterOutputStreamClass, CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GBufferedOutputStreamClass:
  given _tag: Tag[_GBufferedOutputStreamClass] = Tag.materializeCStruct3Tag[GFilterOutputStreamClass, CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GBufferedOutputStreamClass] = scala.scalanative.unsafe.alloc[_GBufferedOutputStreamClass](1)
  def apply(parent_class : GFilterOutputStreamClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit])(using Zone): Ptr[_GBufferedOutputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    ____ptr
  extension (struct: _GBufferedOutputStreamClass)
    def parent_class : GFilterOutputStreamClass = struct._1
    def parent_class_=(value: GFilterOutputStreamClass): Unit = !struct.at1 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._2
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at2 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._3
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedoutputstream.h
*/
opaque type _GBufferedOutputStreamPrivate = CStruct0
object _GBufferedOutputStreamPrivate:
  given _tag: Tag[_GBufferedOutputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
*/
opaque type _GByteArray = CStruct2[Ptr[guint8], guint]
object _GByteArray:
  given _tag: Tag[_GByteArray] = Tag.materializeCStruct2Tag[Ptr[guint8], guint]
  def apply()(using Zone): Ptr[_GByteArray] = scala.scalanative.unsafe.alloc[_GByteArray](1)
  def apply(data : Ptr[guint8], len : guint)(using Zone): Ptr[_GByteArray] = 
    val ____ptr = apply()
    (!____ptr).data = data
    (!____ptr).len = len
    ____ptr
  extension (struct: _GByteArray)
    def data : Ptr[guint8] = struct._1
    def data_=(value: Ptr[guint8]): Unit = !struct.at1 = value
    def len : guint = struct._2
    def len_=(value: guint): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
*/
opaque type _GBytes = CStruct0
object _GBytes:
  given _tag: Tag[_GBytes] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GBytesIcon = CStruct0
object _GBytesIcon:
  given _tag: Tag[_GBytesIcon] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
*/
opaque type _GCClosure = CStruct2[GClosure, gpointer]
object _GCClosure:
  given _tag: Tag[_GCClosure] = Tag.materializeCStruct2Tag[GClosure, gpointer]
  def apply()(using Zone): Ptr[_GCClosure] = scala.scalanative.unsafe.alloc[_GCClosure](1)
  def apply(closure : GClosure, callback : gpointer)(using Zone): Ptr[_GCClosure] = 
    val ____ptr = apply()
    (!____ptr).closure = closure
    (!____ptr).callback = callback
    ____ptr
  extension (struct: _GCClosure)
    def closure : GClosure = struct._1
    def closure_=(value: GClosure): Unit = !struct.at1 = value
    def callback : gpointer = struct._2
    def callback_=(value: gpointer): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gcache.h
*/
opaque type _GCache = CStruct0
object _GCache:
  given _tag: Tag[_GCache] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
*/
opaque type _GCancellable = CStruct2[GObject, Ptr[GCancellablePrivate]]
object _GCancellable:
  given _tag: Tag[_GCancellable] = Tag.materializeCStruct2Tag[GObject, Ptr[GCancellablePrivate]]
  def apply()(using Zone): Ptr[_GCancellable] = scala.scalanative.unsafe.alloc[_GCancellable](1)
  def apply(parent_instance : GObject, priv : Ptr[GCancellablePrivate])(using Zone): Ptr[_GCancellable] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GCancellable)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GCancellablePrivate] = struct._2
    def priv_=(value: Ptr[GCancellablePrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
*/
opaque type _GCancellableClass = CStruct7[GObjectClass, CFuncPtr1[Ptr[GCancellable], Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GCancellableClass:
  given _tag: Tag[_GCancellableClass] = Tag.materializeCStruct7Tag[GObjectClass, CFuncPtr1[Ptr[GCancellable], Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GCancellableClass] = scala.scalanative.unsafe.alloc[_GCancellableClass](1)
  def apply(parent_class : GObjectClass, cancelled : CFuncPtr1[Ptr[GCancellable], Unit], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[_GCancellableClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).cancelled = cancelled
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: _GCancellableClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def cancelled : CFuncPtr1[Ptr[GCancellable], Unit] = struct._2
    def cancelled_=(value: CFuncPtr1[Ptr[GCancellable], Unit]): Unit = !struct.at2 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._3
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at3 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._4
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at4 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._5
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at5 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._6
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at6 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._7
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at7 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
*/
opaque type _GCancellablePrivate = CStruct0
object _GCancellablePrivate:
  given _tag: Tag[_GCancellablePrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GCharsetConverter = CStruct0
object _GCharsetConverter:
  given _tag: Tag[_GCharsetConverter] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gcharsetconverter.h
*/
opaque type _GCharsetConverterClass = CStruct1[GObjectClass]
object _GCharsetConverterClass:
  given _tag: Tag[_GCharsetConverterClass] = Tag.materializeCStruct1Tag[GObjectClass]
  def apply()(using Zone): Ptr[_GCharsetConverterClass] = scala.scalanative.unsafe.alloc[_GCharsetConverterClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[_GCharsetConverterClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: _GCharsetConverterClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gchecksum.h
*/
opaque type _GChecksum = CStruct0
object _GChecksum:
  given _tag: Tag[_GChecksum] = Tag.materializeCStruct0Tag

/**
 * GClosure: _marshal: Indicates whether the closure is currently being invoked with g_closure_invoke() g_closure_invalidate()

 * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
*/
opaque type _GClosure = CStruct13[guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, CFuncPtr6[Ptr[Byte], Ptr[GValue], guint, Ptr[GValue], gpointer, gpointer, Unit], gpointer, Ptr[Byte]]
object _GClosure:
  given _tag: Tag[_GClosure] = Tag.materializeCStruct13Tag[guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, CFuncPtr6[Ptr[Byte], Ptr[GValue], guint, Ptr[GValue], gpointer, gpointer, Unit], gpointer, Ptr[Byte]]
  def apply()(using Zone): Ptr[_GClosure] = scala.scalanative.unsafe.alloc[_GClosure](1)
  def apply(ref_count : guint, meta_marshal_nouse : guint, n_guards : guint, n_fnotifiers : guint, n_inotifiers : guint, in_inotify : guint, floating : guint, derivative_flag : guint, in_marshal : guint, is_invalid : guint, marshal : CFuncPtr6[Ptr[GClosure], Ptr[GValue], guint, Ptr[GValue], gpointer, gpointer, Unit], data : gpointer, notifiers : Ptr[GClosureNotifyData])(using Zone): Ptr[_GClosure] = 
    val ____ptr = apply()
    (!____ptr).ref_count = ref_count
    (!____ptr).meta_marshal_nouse = meta_marshal_nouse
    (!____ptr).n_guards = n_guards
    (!____ptr).n_fnotifiers = n_fnotifiers
    (!____ptr).n_inotifiers = n_inotifiers
    (!____ptr).in_inotify = in_inotify
    (!____ptr).floating = floating
    (!____ptr).derivative_flag = derivative_flag
    (!____ptr).in_marshal = in_marshal
    (!____ptr).is_invalid = is_invalid
    (!____ptr).marshal = marshal
    (!____ptr).data = data
    (!____ptr).notifiers = notifiers
    ____ptr
  extension (struct: _GClosure)
    def ref_count : guint = struct._1
    def ref_count_=(value: guint): Unit = !struct.at1 = value
    def meta_marshal_nouse : guint = struct._2
    def meta_marshal_nouse_=(value: guint): Unit = !struct.at2 = value
    def n_guards : guint = struct._3
    def n_guards_=(value: guint): Unit = !struct.at3 = value
    def n_fnotifiers : guint = struct._4
    def n_fnotifiers_=(value: guint): Unit = !struct.at4 = value
    def n_inotifiers : guint = struct._5
    def n_inotifiers_=(value: guint): Unit = !struct.at5 = value
    def in_inotify : guint = struct._6
    def in_inotify_=(value: guint): Unit = !struct.at6 = value
    def floating : guint = struct._7
    def floating_=(value: guint): Unit = !struct.at7 = value
    def derivative_flag : guint = struct._8
    def derivative_flag_=(value: guint): Unit = !struct.at8 = value
    def in_marshal : guint = struct._9
    def in_marshal_=(value: guint): Unit = !struct.at9 = value
    def is_invalid : guint = struct._10
    def is_invalid_=(value: guint): Unit = !struct.at10 = value
    def marshal : CFuncPtr6[Ptr[GClosure], Ptr[GValue], guint, Ptr[GValue], gpointer, gpointer, Unit] = struct._11.asInstanceOf[CFuncPtr6[Ptr[GClosure], Ptr[GValue], guint, Ptr[GValue], gpointer, gpointer, Unit]]
    def marshal_=(value: CFuncPtr6[Ptr[GClosure], Ptr[GValue], guint, Ptr[GValue], gpointer, gpointer, Unit]): Unit = !struct.at11 = value.asInstanceOf[CFuncPtr6[Ptr[Byte], Ptr[GValue], guint, Ptr[GValue], gpointer, gpointer, Unit]]
    def data : gpointer = struct._12
    def data_=(value: gpointer): Unit = !struct.at12 = value
    def notifiers : Ptr[GClosureNotifyData] = struct._13.asInstanceOf[Ptr[GClosureNotifyData]]
    def notifiers_=(value: Ptr[GClosureNotifyData]): Unit = !struct.at13 = value.asInstanceOf[Ptr[Byte]]

/**
 * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
*/
opaque type _GClosureNotifyData = CStruct2[gpointer, Ptr[Byte]]
object _GClosureNotifyData:
  given _tag: Tag[_GClosureNotifyData] = Tag.materializeCStruct2Tag[gpointer, Ptr[Byte]]
  def apply()(using Zone): Ptr[_GClosureNotifyData] = scala.scalanative.unsafe.alloc[_GClosureNotifyData](1)
  def apply(data : gpointer, _notify : GClosureNotify)(using Zone): Ptr[_GClosureNotifyData] = 
    val ____ptr = apply()
    (!____ptr).data = data
    (!____ptr)._notify = _notify
    ____ptr
  extension (struct: _GClosureNotifyData)
    def data : gpointer = struct._1
    def data_=(value: gpointer): Unit = !struct.at1 = value
    def _notify : GClosureNotify = struct._2.asInstanceOf[GClosureNotify]
    def _notify_=(value: GClosureNotify): Unit = !struct.at2 = value.asInstanceOf[Ptr[Byte]]

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gcompletion.h
*/
opaque type _GCompletion = CStruct5[Ptr[Byte], GCompletionFunc, Ptr[gchar], Ptr[Byte], GCompletionStrncmpFunc]
object _GCompletion:
  given _tag: Tag[_GCompletion] = Tag.materializeCStruct5Tag[Ptr[Byte], GCompletionFunc, Ptr[gchar], Ptr[Byte], GCompletionStrncmpFunc]
  def apply()(using Zone): Ptr[_GCompletion] = scala.scalanative.unsafe.alloc[_GCompletion](1)
  def apply(items : Ptr[GList], func : GCompletionFunc, prefix : Ptr[gchar], cache : Ptr[GList], strncmp_func : GCompletionStrncmpFunc)(using Zone): Ptr[_GCompletion] = 
    val ____ptr = apply()
    (!____ptr).items = items
    (!____ptr).func = func
    (!____ptr).prefix = prefix
    (!____ptr).cache = cache
    (!____ptr).strncmp_func = strncmp_func
    ____ptr
  extension (struct: _GCompletion)
    def items : Ptr[GList] = struct._1.asInstanceOf[Ptr[GList]]
    def items_=(value: Ptr[GList]): Unit = !struct.at1 = value.asInstanceOf[Ptr[Byte]]
    def func : GCompletionFunc = struct._2
    def func_=(value: GCompletionFunc): Unit = !struct.at2 = value
    def prefix : Ptr[gchar] = struct._3
    def prefix_=(value: Ptr[gchar]): Unit = !struct.at3 = value
    def cache : Ptr[GList] = struct._4.asInstanceOf[Ptr[GList]]
    def cache_=(value: Ptr[GList]): Unit = !struct.at4 = value.asInstanceOf[Ptr[Byte]]
    def strncmp_func : GCompletionStrncmpFunc = struct._5
    def strncmp_func_=(value: GCompletionStrncmpFunc): Unit = !struct.at5 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
*/
opaque type _GCond = CStruct2[gpointer, CArray[guint, Nat._2]]
object _GCond:
  given _tag: Tag[_GCond] = Tag.materializeCStruct2Tag[gpointer, CArray[guint, Nat._2]]
  def apply()(using Zone): Ptr[_GCond] = scala.scalanative.unsafe.alloc[_GCond](1)
  def apply(p : gpointer, i : CArray[guint, Nat._2])(using Zone): Ptr[_GCond] = 
    val ____ptr = apply()
    (!____ptr).p = p
    (!____ptr).i = i
    ____ptr
  extension (struct: _GCond)
    def p : gpointer = struct._1
    def p_=(value: gpointer): Unit = !struct.at1 = value
    def i : CArray[guint, Nat._2] = struct._2
    def i_=(value: CArray[guint, Nat._2]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GConverter = CStruct0
object _GConverter:
  given _tag: Tag[_GConverter] = Tag.materializeCStruct0Tag

/**
 * GConverterIface: _iface: The parent interface. : Converts data. : Reverts the internal state of the converter to its initial state.

 * [bindgen] header: /usr/include/glib-2.0/gio/gconverter.h
*/
opaque type _GConverterIface = CStruct3[GTypeInterface, CFuncPtr9[Ptr[GConverter], Ptr[Byte], gsize, Ptr[Byte], gsize, GConverterFlags, Ptr[gsize], Ptr[gsize], Ptr[Ptr[GError]], GConverterResult], CFuncPtr1[Ptr[GConverter], Unit]]
object _GConverterIface:
  given _tag: Tag[_GConverterIface] = Tag.materializeCStruct3Tag[GTypeInterface, CFuncPtr9[Ptr[GConverter], Ptr[Byte], gsize, Ptr[Byte], gsize, GConverterFlags, Ptr[gsize], Ptr[gsize], Ptr[Ptr[GError]], GConverterResult], CFuncPtr1[Ptr[GConverter], Unit]]
  def apply()(using Zone): Ptr[_GConverterIface] = scala.scalanative.unsafe.alloc[_GConverterIface](1)
  def apply(g_iface : GTypeInterface, convert : CFuncPtr9[Ptr[GConverter], Ptr[Byte], gsize, Ptr[Byte], gsize, GConverterFlags, Ptr[gsize], Ptr[gsize], Ptr[Ptr[GError]], GConverterResult], reset : CFuncPtr1[Ptr[GConverter], Unit])(using Zone): Ptr[_GConverterIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).convert = convert
    (!____ptr).reset = reset
    ____ptr
  extension (struct: _GConverterIface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def convert : CFuncPtr9[Ptr[GConverter], Ptr[Byte], gsize, Ptr[Byte], gsize, GConverterFlags, Ptr[gsize], Ptr[gsize], Ptr[Ptr[GError]], GConverterResult] = struct._2
    def convert_=(value: CFuncPtr9[Ptr[GConverter], Ptr[Byte], gsize, Ptr[Byte], gsize, GConverterFlags, Ptr[gsize], Ptr[gsize], Ptr[Ptr[GError]], GConverterResult]): Unit = !struct.at2 = value
    def reset : CFuncPtr1[Ptr[GConverter], Unit] = struct._3
    def reset_=(value: CFuncPtr1[Ptr[GConverter], Unit]): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gconverterinputstream.h
*/
opaque type _GConverterInputStream = CStruct2[GFilterInputStream, Ptr[GConverterInputStreamPrivate]]
object _GConverterInputStream:
  given _tag: Tag[_GConverterInputStream] = Tag.materializeCStruct2Tag[GFilterInputStream, Ptr[GConverterInputStreamPrivate]]
  def apply()(using Zone): Ptr[_GConverterInputStream] = scala.scalanative.unsafe.alloc[_GConverterInputStream](1)
  def apply(parent_instance : GFilterInputStream, priv : Ptr[GConverterInputStreamPrivate])(using Zone): Ptr[_GConverterInputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GConverterInputStream)
    def parent_instance : GFilterInputStream = struct._1
    def parent_instance_=(value: GFilterInputStream): Unit = !struct.at1 = value
    def priv : Ptr[GConverterInputStreamPrivate] = struct._2
    def priv_=(value: Ptr[GConverterInputStreamPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gconverterinputstream.h
*/
opaque type _GConverterInputStreamClass = CStruct6[GFilterInputStreamClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GConverterInputStreamClass:
  given _tag: Tag[_GConverterInputStreamClass] = Tag.materializeCStruct6Tag[GFilterInputStreamClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GConverterInputStreamClass] = scala.scalanative.unsafe.alloc[_GConverterInputStreamClass](1)
  def apply(parent_class : GFilterInputStreamClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[_GConverterInputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: _GConverterInputStreamClass)
    def parent_class : GFilterInputStreamClass = struct._1
    def parent_class_=(value: GFilterInputStreamClass): Unit = !struct.at1 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._2
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at2 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._3
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at3 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._4
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at4 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._5
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at5 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._6
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gconverterinputstream.h
*/
opaque type _GConverterInputStreamPrivate = CStruct0
object _GConverterInputStreamPrivate:
  given _tag: Tag[_GConverterInputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gconverteroutputstream.h
*/
opaque type _GConverterOutputStream = CStruct2[GFilterOutputStream, Ptr[GConverterOutputStreamPrivate]]
object _GConverterOutputStream:
  given _tag: Tag[_GConverterOutputStream] = Tag.materializeCStruct2Tag[GFilterOutputStream, Ptr[GConverterOutputStreamPrivate]]
  def apply()(using Zone): Ptr[_GConverterOutputStream] = scala.scalanative.unsafe.alloc[_GConverterOutputStream](1)
  def apply(parent_instance : GFilterOutputStream, priv : Ptr[GConverterOutputStreamPrivate])(using Zone): Ptr[_GConverterOutputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GConverterOutputStream)
    def parent_instance : GFilterOutputStream = struct._1
    def parent_instance_=(value: GFilterOutputStream): Unit = !struct.at1 = value
    def priv : Ptr[GConverterOutputStreamPrivate] = struct._2
    def priv_=(value: Ptr[GConverterOutputStreamPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gconverteroutputstream.h
*/
opaque type _GConverterOutputStreamClass = CStruct6[GFilterOutputStreamClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GConverterOutputStreamClass:
  given _tag: Tag[_GConverterOutputStreamClass] = Tag.materializeCStruct6Tag[GFilterOutputStreamClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GConverterOutputStreamClass] = scala.scalanative.unsafe.alloc[_GConverterOutputStreamClass](1)
  def apply(parent_class : GFilterOutputStreamClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[_GConverterOutputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: _GConverterOutputStreamClass)
    def parent_class : GFilterOutputStreamClass = struct._1
    def parent_class_=(value: GFilterOutputStreamClass): Unit = !struct.at1 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._2
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at2 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._3
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at3 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._4
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at4 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._5
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at5 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._6
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gconverteroutputstream.h
*/
opaque type _GConverterOutputStreamPrivate = CStruct0
object _GConverterOutputStreamPrivate:
  given _tag: Tag[_GConverterOutputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GCredentials = CStruct0
object _GCredentials:
  given _tag: Tag[_GCredentials] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gcredentials.h
*/
opaque type _GCredentialsClass = CStruct0
object _GCredentialsClass:
  given _tag: Tag[_GCredentialsClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GDBusActionGroup = CStruct0
object _GDBusActionGroup:
  given _tag: Tag[_GDBusActionGroup] = Tag.materializeCStruct0Tag

/**
 * GDBusAnnotationInfo: _count: The reference count or -1 if statically allocated. : The name of the annotation, e.g. "org.freedesktop.DBus.Deprecated". : The value of the annotation. : (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
*/
opaque type _GDBusAnnotationInfo = CStruct4[gint, Ptr[gchar], Ptr[gchar], Ptr[Byte]]
object _GDBusAnnotationInfo:
  given _tag: Tag[_GDBusAnnotationInfo] = Tag.materializeCStruct4Tag[gint, Ptr[gchar], Ptr[gchar], Ptr[Byte]]
  def apply()(using Zone): Ptr[_GDBusAnnotationInfo] = scala.scalanative.unsafe.alloc[_GDBusAnnotationInfo](1)
  def apply(ref_count : gint, key : Ptr[gchar], value : Ptr[gchar], annotations : Ptr[Ptr[GDBusAnnotationInfo]])(using Zone): Ptr[_GDBusAnnotationInfo] = 
    val ____ptr = apply()
    (!____ptr).ref_count = ref_count
    (!____ptr).key = key
    (!____ptr).value = value
    (!____ptr).annotations = annotations
    ____ptr
  extension (struct: _GDBusAnnotationInfo)
    def ref_count : gint = struct._1
    def ref_count_=(value: gint): Unit = !struct.at1 = value
    def key : Ptr[gchar] = struct._2
    def key_=(value: Ptr[gchar]): Unit = !struct.at2 = value
    def value : Ptr[gchar] = struct._3
    def value_=(value: Ptr[gchar]): Unit = !struct.at3 = value
    def annotations : Ptr[Ptr[GDBusAnnotationInfo]] = struct._4.asInstanceOf[Ptr[Ptr[GDBusAnnotationInfo]]]
    def annotations_=(value: Ptr[Ptr[GDBusAnnotationInfo]]): Unit = !struct.at4 = value.asInstanceOf[Ptr[Byte]]

/**
 * GDBusArgInfo: _count: The reference count or -1 if statically allocated. : D-Bus signature of the argument (a single complete type). : (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
*/
opaque type _GDBusArgInfo = CStruct4[gint, Ptr[gchar], Ptr[gchar], Ptr[Byte]]
object _GDBusArgInfo:
  given _tag: Tag[_GDBusArgInfo] = Tag.materializeCStruct4Tag[gint, Ptr[gchar], Ptr[gchar], Ptr[Byte]]
  def apply()(using Zone): Ptr[_GDBusArgInfo] = scala.scalanative.unsafe.alloc[_GDBusArgInfo](1)
  def apply(ref_count : gint, name : Ptr[gchar], signature : Ptr[gchar], annotations : Ptr[Ptr[GDBusAnnotationInfo]])(using Zone): Ptr[_GDBusArgInfo] = 
    val ____ptr = apply()
    (!____ptr).ref_count = ref_count
    (!____ptr).name = name
    (!____ptr).signature = signature
    (!____ptr).annotations = annotations
    ____ptr
  extension (struct: _GDBusArgInfo)
    def ref_count : gint = struct._1
    def ref_count_=(value: gint): Unit = !struct.at1 = value
    def name : Ptr[gchar] = struct._2
    def name_=(value: Ptr[gchar]): Unit = !struct.at2 = value
    def signature : Ptr[gchar] = struct._3
    def signature_=(value: Ptr[gchar]): Unit = !struct.at3 = value
    def annotations : Ptr[Ptr[GDBusAnnotationInfo]] = struct._4.asInstanceOf[Ptr[Ptr[GDBusAnnotationInfo]]]
    def annotations_=(value: Ptr[Ptr[GDBusAnnotationInfo]]): Unit = !struct.at4 = value.asInstanceOf[Ptr[Byte]]

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GDBusAuthObserver = CStruct0
object _GDBusAuthObserver:
  given _tag: Tag[_GDBusAuthObserver] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GDBusConnection = CStruct0
object _GDBusConnection:
  given _tag: Tag[_GDBusConnection] = Tag.materializeCStruct0Tag

/**
 * GDBusErrorEntry: _code: An error code. _error_name: The D-Bus error name to associate with _code.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbuserror.h
*/
opaque type _GDBusErrorEntry = CStruct2[gint, Ptr[gchar]]
object _GDBusErrorEntry:
  given _tag: Tag[_GDBusErrorEntry] = Tag.materializeCStruct2Tag[gint, Ptr[gchar]]
  def apply()(using Zone): Ptr[_GDBusErrorEntry] = scala.scalanative.unsafe.alloc[_GDBusErrorEntry](1)
  def apply(error_code : gint, dbus_error_name : Ptr[gchar])(using Zone): Ptr[_GDBusErrorEntry] = 
    val ____ptr = apply()
    (!____ptr).error_code = error_code
    (!____ptr).dbus_error_name = dbus_error_name
    ____ptr
  extension (struct: _GDBusErrorEntry)
    def error_code : gint = struct._1
    def error_code_=(value: gint): Unit = !struct.at1 = value
    def dbus_error_name : Ptr[gchar] = struct._2
    def dbus_error_name_=(value: Ptr[gchar]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GDBusInterface = CStruct0
object _GDBusInterface:
  given _tag: Tag[_GDBusInterface] = Tag.materializeCStruct0Tag

/**
 * GDBusInterfaceIface: _iface: The parent interface. _info: Returns a #GDBusInterfaceInfo. See g_dbus_interface_get_info(). _object: Gets the enclosing #GDBusObject. See g_dbus_interface_get_object().

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterface.h
*/
opaque type _GDBusInterfaceIface = CStruct5[GTypeInterface, CFuncPtr1[Ptr[GDBusInterface], Ptr[Byte]], CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusObject]], CFuncPtr2[Ptr[GDBusInterface], Ptr[GDBusObject], Unit], CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusObject]]]
object _GDBusInterfaceIface:
  given _tag: Tag[_GDBusInterfaceIface] = Tag.materializeCStruct5Tag[GTypeInterface, CFuncPtr1[Ptr[GDBusInterface], Ptr[Byte]], CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusObject]], CFuncPtr2[Ptr[GDBusInterface], Ptr[GDBusObject], Unit], CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusObject]]]
  def apply()(using Zone): Ptr[_GDBusInterfaceIface] = scala.scalanative.unsafe.alloc[_GDBusInterfaceIface](1)
  def apply(parent_iface : GTypeInterface, get_info : CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusInterfaceInfo]], get_object : CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusObject]], set_object : CFuncPtr2[Ptr[GDBusInterface], Ptr[GDBusObject], Unit], dup_object : CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusObject]])(using Zone): Ptr[_GDBusInterfaceIface] = 
    val ____ptr = apply()
    (!____ptr).parent_iface = parent_iface
    (!____ptr).get_info = get_info
    (!____ptr).get_object = get_object
    (!____ptr).set_object = set_object
    (!____ptr).dup_object = dup_object
    ____ptr
  extension (struct: _GDBusInterfaceIface)
    def parent_iface : GTypeInterface = struct._1
    def parent_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def get_info : CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusInterfaceInfo]] = struct._2.asInstanceOf[CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusInterfaceInfo]]]
    def get_info_=(value: CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusInterfaceInfo]]): Unit = !struct.at2 = value.asInstanceOf[CFuncPtr1[Ptr[GDBusInterface], Ptr[Byte]]]
    def get_object : CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusObject]] = struct._3
    def get_object_=(value: CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusObject]]): Unit = !struct.at3 = value
    def set_object : CFuncPtr2[Ptr[GDBusInterface], Ptr[GDBusObject], Unit] = struct._4
    def set_object_=(value: CFuncPtr2[Ptr[GDBusInterface], Ptr[GDBusObject], Unit]): Unit = !struct.at4 = value
    def dup_object : CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusObject]] = struct._5
    def dup_object_=(value: CFuncPtr1[Ptr[GDBusInterface], Ptr[GDBusObject]]): Unit = !struct.at5 = value

/**
 * GDBusInterfaceInfo: _count: The reference count or -1 if statically allocated. : (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusSignalInfo structures or %NULL if there are no signals. : (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusPropertyInfo structures or %NULL if there are no properties. : (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
*/
opaque type _GDBusInterfaceInfo = CStruct6[gint, Ptr[gchar], Ptr[Byte], Ptr[Byte], Ptr[Byte], Ptr[Byte]]
object _GDBusInterfaceInfo:
  given _tag: Tag[_GDBusInterfaceInfo] = Tag.materializeCStruct6Tag[gint, Ptr[gchar], Ptr[Byte], Ptr[Byte], Ptr[Byte], Ptr[Byte]]
  def apply()(using Zone): Ptr[_GDBusInterfaceInfo] = scala.scalanative.unsafe.alloc[_GDBusInterfaceInfo](1)
  def apply(ref_count : gint, name : Ptr[gchar], methods : Ptr[Ptr[GDBusMethodInfo]], signals : Ptr[Ptr[GDBusSignalInfo]], properties : Ptr[Ptr[GDBusPropertyInfo]], annotations : Ptr[Ptr[GDBusAnnotationInfo]])(using Zone): Ptr[_GDBusInterfaceInfo] = 
    val ____ptr = apply()
    (!____ptr).ref_count = ref_count
    (!____ptr).name = name
    (!____ptr).methods = methods
    (!____ptr).signals = signals
    (!____ptr).properties = properties
    (!____ptr).annotations = annotations
    ____ptr
  extension (struct: _GDBusInterfaceInfo)
    def ref_count : gint = struct._1
    def ref_count_=(value: gint): Unit = !struct.at1 = value
    def name : Ptr[gchar] = struct._2
    def name_=(value: Ptr[gchar]): Unit = !struct.at2 = value
    def methods : Ptr[Ptr[GDBusMethodInfo]] = struct._3.asInstanceOf[Ptr[Ptr[GDBusMethodInfo]]]
    def methods_=(value: Ptr[Ptr[GDBusMethodInfo]]): Unit = !struct.at3 = value.asInstanceOf[Ptr[Byte]]
    def signals : Ptr[Ptr[GDBusSignalInfo]] = struct._4.asInstanceOf[Ptr[Ptr[GDBusSignalInfo]]]
    def signals_=(value: Ptr[Ptr[GDBusSignalInfo]]): Unit = !struct.at4 = value.asInstanceOf[Ptr[Byte]]
    def properties : Ptr[Ptr[GDBusPropertyInfo]] = struct._5.asInstanceOf[Ptr[Ptr[GDBusPropertyInfo]]]
    def properties_=(value: Ptr[Ptr[GDBusPropertyInfo]]): Unit = !struct.at5 = value.asInstanceOf[Ptr[Byte]]
    def annotations : Ptr[Ptr[GDBusAnnotationInfo]] = struct._6.asInstanceOf[Ptr[Ptr[GDBusAnnotationInfo]]]
    def annotations_=(value: Ptr[Ptr[GDBusAnnotationInfo]]): Unit = !struct.at6 = value.asInstanceOf[Ptr[Byte]]

/**
 * GDBusInterfaceSkeleton:

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
*/
opaque type _GDBusInterfaceSkeleton = CStruct2[GObject, Ptr[GDBusInterfaceSkeletonPrivate]]
object _GDBusInterfaceSkeleton:
  given _tag: Tag[_GDBusInterfaceSkeleton] = Tag.materializeCStruct2Tag[GObject, Ptr[GDBusInterfaceSkeletonPrivate]]
  def apply()(using Zone): Ptr[_GDBusInterfaceSkeleton] = scala.scalanative.unsafe.alloc[_GDBusInterfaceSkeleton](1)
  def apply(parent_instance : GObject, priv : Ptr[GDBusInterfaceSkeletonPrivate])(using Zone): Ptr[_GDBusInterfaceSkeleton] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GDBusInterfaceSkeleton)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GDBusInterfaceSkeletonPrivate] = struct._2
    def priv_=(value: Ptr[GDBusInterfaceSkeletonPrivate]): Unit = !struct.at2 = value

/**
 * GDBusInterfaceSkeletonClass: _class: The parent class. _info: Returns a #GDBusInterfaceInfo. See g_dbus_interface_skeleton_get_info() for details. _vtable: Returns a #GDBusInterfaceVTable. See g_dbus_interface_skeleton_get_vtable() for details. _properties: Returns a #GVariant with all properties. See g_dbus_interface_skeleton_get_properties(). : Emits outstanding changes, if any. See g_dbus_interface_skeleton_flush(). _authorize_method: Signal class handler for the #GDBusInterfaceSkeleton::g-authorize-method signal.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
*/
opaque type _GDBusInterfaceSkeletonClass = CStruct8[GObjectClass, CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[Byte]], CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusInterfaceVTable]], CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GVariant]], CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Unit], CArray[gpointer, Nat._8], CFuncPtr2[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusMethodInvocation], gboolean], CArray[gpointer, Nat._8]]
object _GDBusInterfaceSkeletonClass:
  given _tag: Tag[_GDBusInterfaceSkeletonClass] = Tag.materializeCStruct8Tag[GObjectClass, CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[Byte]], CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusInterfaceVTable]], CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GVariant]], CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Unit], CArray[gpointer, Nat._8], CFuncPtr2[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusMethodInvocation], gboolean], CArray[gpointer, Nat._8]]
  def apply()(using Zone): Ptr[_GDBusInterfaceSkeletonClass] = scala.scalanative.unsafe.alloc[_GDBusInterfaceSkeletonClass](1)
  def apply(parent_class : GObjectClass, get_info : CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusInterfaceInfo]], get_vtable : CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusInterfaceVTable]], get_properties : CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GVariant]], flush : CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Unit], vfunc_padding : CArray[gpointer, Nat._8], g_authorize_method : CFuncPtr2[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusMethodInvocation], gboolean], signal_padding : CArray[gpointer, Nat._8])(using Zone): Ptr[_GDBusInterfaceSkeletonClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_info = get_info
    (!____ptr).get_vtable = get_vtable
    (!____ptr).get_properties = get_properties
    (!____ptr).flush = flush
    (!____ptr).vfunc_padding = vfunc_padding
    (!____ptr).g_authorize_method = g_authorize_method
    (!____ptr).signal_padding = signal_padding
    ____ptr
  extension (struct: _GDBusInterfaceSkeletonClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def get_info : CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusInterfaceInfo]] = struct._2.asInstanceOf[CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusInterfaceInfo]]]
    def get_info_=(value: CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusInterfaceInfo]]): Unit = !struct.at2 = value.asInstanceOf[CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[Byte]]]
    def get_vtable : CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusInterfaceVTable]] = struct._3
    def get_vtable_=(value: CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusInterfaceVTable]]): Unit = !struct.at3 = value
    def get_properties : CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GVariant]] = struct._4
    def get_properties_=(value: CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Ptr[GVariant]]): Unit = !struct.at4 = value
    def flush : CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Unit] = struct._5
    def flush_=(value: CFuncPtr1[Ptr[GDBusInterfaceSkeleton], Unit]): Unit = !struct.at5 = value
    def vfunc_padding : CArray[gpointer, Nat._8] = struct._6
    def vfunc_padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at6 = value
    def g_authorize_method : CFuncPtr2[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusMethodInvocation], gboolean] = struct._7
    def g_authorize_method_=(value: CFuncPtr2[Ptr[GDBusInterfaceSkeleton], Ptr[GDBusMethodInvocation], gboolean]): Unit = !struct.at7 = value
    def signal_padding : CArray[gpointer, Nat._8] = struct._8
    def signal_padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at8 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
*/
opaque type _GDBusInterfaceSkeletonPrivate = CStruct0
object _GDBusInterfaceSkeletonPrivate:
  given _tag: Tag[_GDBusInterfaceSkeletonPrivate] = Tag.materializeCStruct0Tag

/**
 * GDBusInterfaceVTable: _property: Function for getting a property.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
*/
opaque type _GDBusInterfaceVTable = CStruct4[GDBusInterfaceMethodCallFunc, GDBusInterfaceGetPropertyFunc, GDBusInterfaceSetPropertyFunc, CArray[gpointer, Nat._8]]
object _GDBusInterfaceVTable:
  given _tag: Tag[_GDBusInterfaceVTable] = Tag.materializeCStruct4Tag[GDBusInterfaceMethodCallFunc, GDBusInterfaceGetPropertyFunc, GDBusInterfaceSetPropertyFunc, CArray[gpointer, Nat._8]]
  def apply()(using Zone): Ptr[_GDBusInterfaceVTable] = scala.scalanative.unsafe.alloc[_GDBusInterfaceVTable](1)
  def apply(method_call : GDBusInterfaceMethodCallFunc, get_property : GDBusInterfaceGetPropertyFunc, set_property : GDBusInterfaceSetPropertyFunc, padding : CArray[gpointer, Nat._8])(using Zone): Ptr[_GDBusInterfaceVTable] = 
    val ____ptr = apply()
    (!____ptr).method_call = method_call
    (!____ptr).get_property = get_property
    (!____ptr).set_property = set_property
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GDBusInterfaceVTable)
    def method_call : GDBusInterfaceMethodCallFunc = struct._1
    def method_call_=(value: GDBusInterfaceMethodCallFunc): Unit = !struct.at1 = value
    def get_property : GDBusInterfaceGetPropertyFunc = struct._2
    def get_property_=(value: GDBusInterfaceGetPropertyFunc): Unit = !struct.at2 = value
    def set_property : GDBusInterfaceSetPropertyFunc = struct._3
    def set_property_=(value: GDBusInterfaceSetPropertyFunc): Unit = !struct.at3 = value
    def padding : CArray[gpointer, Nat._8] = struct._4
    def padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at4 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmenumodel.h
*/
opaque type _GDBusMenuModel = CStruct0
object _GDBusMenuModel:
  given _tag: Tag[_GDBusMenuModel] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GDBusMessage = CStruct0
object _GDBusMessage:
  given _tag: Tag[_GDBusMessage] = Tag.materializeCStruct0Tag

/**
 * GDBusMethodInfo: _count: The reference count or -1 if statically allocated. _args: (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusArgInfo structures or %NULL if there are no in arguments. _args: (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusArgInfo structures or %NULL if there are no out arguments. : (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
*/
opaque type _GDBusMethodInfo = CStruct5[gint, Ptr[gchar], Ptr[Byte], Ptr[Byte], Ptr[Byte]]
object _GDBusMethodInfo:
  given _tag: Tag[_GDBusMethodInfo] = Tag.materializeCStruct5Tag[gint, Ptr[gchar], Ptr[Byte], Ptr[Byte], Ptr[Byte]]
  def apply()(using Zone): Ptr[_GDBusMethodInfo] = scala.scalanative.unsafe.alloc[_GDBusMethodInfo](1)
  def apply(ref_count : gint, name : Ptr[gchar], in_args : Ptr[Ptr[GDBusArgInfo]], out_args : Ptr[Ptr[GDBusArgInfo]], annotations : Ptr[Ptr[GDBusAnnotationInfo]])(using Zone): Ptr[_GDBusMethodInfo] = 
    val ____ptr = apply()
    (!____ptr).ref_count = ref_count
    (!____ptr).name = name
    (!____ptr).in_args = in_args
    (!____ptr).out_args = out_args
    (!____ptr).annotations = annotations
    ____ptr
  extension (struct: _GDBusMethodInfo)
    def ref_count : gint = struct._1
    def ref_count_=(value: gint): Unit = !struct.at1 = value
    def name : Ptr[gchar] = struct._2
    def name_=(value: Ptr[gchar]): Unit = !struct.at2 = value
    def in_args : Ptr[Ptr[GDBusArgInfo]] = struct._3.asInstanceOf[Ptr[Ptr[GDBusArgInfo]]]
    def in_args_=(value: Ptr[Ptr[GDBusArgInfo]]): Unit = !struct.at3 = value.asInstanceOf[Ptr[Byte]]
    def out_args : Ptr[Ptr[GDBusArgInfo]] = struct._4.asInstanceOf[Ptr[Ptr[GDBusArgInfo]]]
    def out_args_=(value: Ptr[Ptr[GDBusArgInfo]]): Unit = !struct.at4 = value.asInstanceOf[Ptr[Byte]]
    def annotations : Ptr[Ptr[GDBusAnnotationInfo]] = struct._5.asInstanceOf[Ptr[Ptr[GDBusAnnotationInfo]]]
    def annotations_=(value: Ptr[Ptr[GDBusAnnotationInfo]]): Unit = !struct.at5 = value.asInstanceOf[Ptr[Byte]]

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GDBusMethodInvocation = CStruct0
object _GDBusMethodInvocation:
  given _tag: Tag[_GDBusMethodInvocation] = Tag.materializeCStruct0Tag

/**
 * GDBusNodeInfo: _count: The reference count or -1 if statically allocated. : The path of the node or %NULL if omitted. Note that this may be a relative path. See the D-Bus specification for more details. : (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusNodeInfo structures or %NULL if there are no nodes. : (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
*/
opaque type _GDBusNodeInfo = CStruct5[gint, Ptr[gchar], Ptr[Byte], Ptr[Byte], Ptr[Byte]]
object _GDBusNodeInfo:
  given _tag: Tag[_GDBusNodeInfo] = Tag.materializeCStruct5Tag[gint, Ptr[gchar], Ptr[Byte], Ptr[Byte], Ptr[Byte]]
  def apply()(using Zone): Ptr[_GDBusNodeInfo] = scala.scalanative.unsafe.alloc[_GDBusNodeInfo](1)
  def apply(ref_count : gint, path : Ptr[gchar], interfaces : Ptr[Ptr[GDBusInterfaceInfo]], nodes : Ptr[Ptr[GDBusNodeInfo]], annotations : Ptr[Ptr[GDBusAnnotationInfo]])(using Zone): Ptr[_GDBusNodeInfo] = 
    val ____ptr = apply()
    (!____ptr).ref_count = ref_count
    (!____ptr).path = path
    (!____ptr).interfaces = interfaces
    (!____ptr).nodes = nodes
    (!____ptr).annotations = annotations
    ____ptr
  extension (struct: _GDBusNodeInfo)
    def ref_count : gint = struct._1
    def ref_count_=(value: gint): Unit = !struct.at1 = value
    def path : Ptr[gchar] = struct._2
    def path_=(value: Ptr[gchar]): Unit = !struct.at2 = value
    def interfaces : Ptr[Ptr[GDBusInterfaceInfo]] = struct._3.asInstanceOf[Ptr[Ptr[GDBusInterfaceInfo]]]
    def interfaces_=(value: Ptr[Ptr[GDBusInterfaceInfo]]): Unit = !struct.at3 = value.asInstanceOf[Ptr[Byte]]
    def nodes : Ptr[Ptr[GDBusNodeInfo]] = struct._4.asInstanceOf[Ptr[Ptr[GDBusNodeInfo]]]
    def nodes_=(value: Ptr[Ptr[GDBusNodeInfo]]): Unit = !struct.at4 = value.asInstanceOf[Ptr[Byte]]
    def annotations : Ptr[Ptr[GDBusAnnotationInfo]] = struct._5.asInstanceOf[Ptr[Ptr[GDBusAnnotationInfo]]]
    def annotations_=(value: Ptr[Ptr[GDBusAnnotationInfo]]): Unit = !struct.at5 = value.asInstanceOf[Ptr[Byte]]

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GDBusObject = CStruct0
object _GDBusObject:
  given _tag: Tag[_GDBusObject] = Tag.materializeCStruct0Tag

/**
 * GDBusObjectIface: _iface: The parent interface. _object_path: Returns the object path. See g_dbus_object_get_object_path(). _interfaces: Returns all interfaces. See g_dbus_object_get_interfaces(). _interface: Returns an interface by name. See g_dbus_object_get_interface().

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobject.h
*/
opaque type _GDBusObjectIface = CStruct6[GTypeInterface, CFuncPtr1[Ptr[GDBusObject], Ptr[gchar]], CFuncPtr1[Ptr[GDBusObject], Ptr[Byte]], CFuncPtr2[Ptr[GDBusObject], Ptr[gchar], Ptr[GDBusInterface]], CFuncPtr2[Ptr[GDBusObject], Ptr[GDBusInterface], Unit], CFuncPtr2[Ptr[GDBusObject], Ptr[GDBusInterface], Unit]]
object _GDBusObjectIface:
  given _tag: Tag[_GDBusObjectIface] = Tag.materializeCStruct6Tag[GTypeInterface, CFuncPtr1[Ptr[GDBusObject], Ptr[gchar]], CFuncPtr1[Ptr[GDBusObject], Ptr[Byte]], CFuncPtr2[Ptr[GDBusObject], Ptr[gchar], Ptr[GDBusInterface]], CFuncPtr2[Ptr[GDBusObject], Ptr[GDBusInterface], Unit], CFuncPtr2[Ptr[GDBusObject], Ptr[GDBusInterface], Unit]]
  def apply()(using Zone): Ptr[_GDBusObjectIface] = scala.scalanative.unsafe.alloc[_GDBusObjectIface](1)
  def apply(parent_iface : GTypeInterface, get_object_path : CFuncPtr1[Ptr[GDBusObject], Ptr[gchar]], get_interfaces : CFuncPtr1[Ptr[GDBusObject], Ptr[GList]], get_interface : CFuncPtr2[Ptr[GDBusObject], Ptr[gchar], Ptr[GDBusInterface]], interface_added : CFuncPtr2[Ptr[GDBusObject], Ptr[GDBusInterface], Unit], interface_removed : CFuncPtr2[Ptr[GDBusObject], Ptr[GDBusInterface], Unit])(using Zone): Ptr[_GDBusObjectIface] = 
    val ____ptr = apply()
    (!____ptr).parent_iface = parent_iface
    (!____ptr).get_object_path = get_object_path
    (!____ptr).get_interfaces = get_interfaces
    (!____ptr).get_interface = get_interface
    (!____ptr).interface_added = interface_added
    (!____ptr).interface_removed = interface_removed
    ____ptr
  extension (struct: _GDBusObjectIface)
    def parent_iface : GTypeInterface = struct._1
    def parent_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def get_object_path : CFuncPtr1[Ptr[GDBusObject], Ptr[gchar]] = struct._2
    def get_object_path_=(value: CFuncPtr1[Ptr[GDBusObject], Ptr[gchar]]): Unit = !struct.at2 = value
    def get_interfaces : CFuncPtr1[Ptr[GDBusObject], Ptr[GList]] = struct._3.asInstanceOf[CFuncPtr1[Ptr[GDBusObject], Ptr[GList]]]
    def get_interfaces_=(value: CFuncPtr1[Ptr[GDBusObject], Ptr[GList]]): Unit = !struct.at3 = value.asInstanceOf[CFuncPtr1[Ptr[GDBusObject], Ptr[Byte]]]
    def get_interface : CFuncPtr2[Ptr[GDBusObject], Ptr[gchar], Ptr[GDBusInterface]] = struct._4
    def get_interface_=(value: CFuncPtr2[Ptr[GDBusObject], Ptr[gchar], Ptr[GDBusInterface]]): Unit = !struct.at4 = value
    def interface_added : CFuncPtr2[Ptr[GDBusObject], Ptr[GDBusInterface], Unit] = struct._5
    def interface_added_=(value: CFuncPtr2[Ptr[GDBusObject], Ptr[GDBusInterface], Unit]): Unit = !struct.at5 = value
    def interface_removed : CFuncPtr2[Ptr[GDBusObject], Ptr[GDBusInterface], Unit] = struct._6
    def interface_removed_=(value: CFuncPtr2[Ptr[GDBusObject], Ptr[GDBusInterface], Unit]): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GDBusObjectManager = CStruct0
object _GDBusObjectManager:
  given _tag: Tag[_GDBusObjectManager] = Tag.materializeCStruct0Tag

/**
 * GDBusObjectManagerClient:

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h
*/
opaque type _GDBusObjectManagerClient = CStruct2[GObject, Ptr[GDBusObjectManagerClientPrivate]]
object _GDBusObjectManagerClient:
  given _tag: Tag[_GDBusObjectManagerClient] = Tag.materializeCStruct2Tag[GObject, Ptr[GDBusObjectManagerClientPrivate]]
  def apply()(using Zone): Ptr[_GDBusObjectManagerClient] = scala.scalanative.unsafe.alloc[_GDBusObjectManagerClient](1)
  def apply(parent_instance : GObject, priv : Ptr[GDBusObjectManagerClientPrivate])(using Zone): Ptr[_GDBusObjectManagerClient] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GDBusObjectManagerClient)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GDBusObjectManagerClientPrivate] = struct._2
    def priv_=(value: Ptr[GDBusObjectManagerClientPrivate]): Unit = !struct.at2 = value

/**
 * GDBusObjectManagerClientClass: _class: The parent class.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h
*/
opaque type _GDBusObjectManagerClientClass = CStruct4[GObjectClass, CFuncPtr6[Ptr[GDBusObjectManagerClient], Ptr[GDBusObjectProxy], Ptr[GDBusProxy], Ptr[gchar], Ptr[gchar], Ptr[GVariant], Unit], CFuncPtr5[Ptr[GDBusObjectManagerClient], Ptr[GDBusObjectProxy], Ptr[GDBusProxy], Ptr[GVariant], Ptr[Ptr[gchar]], Unit], CArray[gpointer, Nat._8]]
object _GDBusObjectManagerClientClass:
  given _tag: Tag[_GDBusObjectManagerClientClass] = Tag.materializeCStruct4Tag[GObjectClass, CFuncPtr6[Ptr[GDBusObjectManagerClient], Ptr[GDBusObjectProxy], Ptr[GDBusProxy], Ptr[gchar], Ptr[gchar], Ptr[GVariant], Unit], CFuncPtr5[Ptr[GDBusObjectManagerClient], Ptr[GDBusObjectProxy], Ptr[GDBusProxy], Ptr[GVariant], Ptr[Ptr[gchar]], Unit], CArray[gpointer, Nat._8]]
  def apply()(using Zone): Ptr[_GDBusObjectManagerClientClass] = scala.scalanative.unsafe.alloc[_GDBusObjectManagerClientClass](1)
  def apply(parent_class : GObjectClass, interface_proxy_signal : CFuncPtr6[Ptr[GDBusObjectManagerClient], Ptr[GDBusObjectProxy], Ptr[GDBusProxy], Ptr[gchar], Ptr[gchar], Ptr[GVariant], Unit], interface_proxy_properties_changed : CFuncPtr5[Ptr[GDBusObjectManagerClient], Ptr[GDBusObjectProxy], Ptr[GDBusProxy], Ptr[GVariant], Ptr[Ptr[gchar]], Unit], padding : CArray[gpointer, Nat._8])(using Zone): Ptr[_GDBusObjectManagerClientClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).interface_proxy_signal = interface_proxy_signal
    (!____ptr).interface_proxy_properties_changed = interface_proxy_properties_changed
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GDBusObjectManagerClientClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def interface_proxy_signal : CFuncPtr6[Ptr[GDBusObjectManagerClient], Ptr[GDBusObjectProxy], Ptr[GDBusProxy], Ptr[gchar], Ptr[gchar], Ptr[GVariant], Unit] = struct._2
    def interface_proxy_signal_=(value: CFuncPtr6[Ptr[GDBusObjectManagerClient], Ptr[GDBusObjectProxy], Ptr[GDBusProxy], Ptr[gchar], Ptr[gchar], Ptr[GVariant], Unit]): Unit = !struct.at2 = value
    def interface_proxy_properties_changed : CFuncPtr5[Ptr[GDBusObjectManagerClient], Ptr[GDBusObjectProxy], Ptr[GDBusProxy], Ptr[GVariant], Ptr[Ptr[gchar]], Unit] = struct._3
    def interface_proxy_properties_changed_=(value: CFuncPtr5[Ptr[GDBusObjectManagerClient], Ptr[GDBusObjectProxy], Ptr[GDBusProxy], Ptr[GVariant], Ptr[Ptr[gchar]], Unit]): Unit = !struct.at3 = value
    def padding : CArray[gpointer, Nat._8] = struct._4
    def padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at4 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h
*/
opaque type _GDBusObjectManagerClientPrivate = CStruct0
object _GDBusObjectManagerClientPrivate:
  given _tag: Tag[_GDBusObjectManagerClientPrivate] = Tag.materializeCStruct0Tag

/**
 * GDBusObjectManagerIface: _iface: The parent interface. _object_path: Virtual function for g_dbus_object_manager_get_object_path(). _objects: Virtual function for g_dbus_object_manager_get_objects(). _object: Virtual function for g_dbus_object_manager_get_object(). _interface: Virtual function for g_dbus_object_manager_get_interface(). _added: Signal handler for the #GDBusObjectManager::object-added signal. _removed: Signal handler for the #GDBusObjectManager::object-removed signal.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanager.h
*/
opaque type _GDBusObjectManagerIface = CStruct9[GTypeInterface, CFuncPtr1[Ptr[GDBusObjectManager], Ptr[gchar]], CFuncPtr1[Ptr[GDBusObjectManager], Ptr[Byte]], CFuncPtr2[Ptr[GDBusObjectManager], Ptr[gchar], Ptr[GDBusObject]], CFuncPtr3[Ptr[GDBusObjectManager], Ptr[gchar], Ptr[gchar], Ptr[GDBusInterface]], CFuncPtr2[Ptr[GDBusObjectManager], Ptr[GDBusObject], Unit], CFuncPtr2[Ptr[GDBusObjectManager], Ptr[GDBusObject], Unit], CFuncPtr3[Ptr[GDBusObjectManager], Ptr[GDBusObject], Ptr[GDBusInterface], Unit], CFuncPtr3[Ptr[GDBusObjectManager], Ptr[GDBusObject], Ptr[GDBusInterface], Unit]]
object _GDBusObjectManagerIface:
  given _tag: Tag[_GDBusObjectManagerIface] = Tag.materializeCStruct9Tag[GTypeInterface, CFuncPtr1[Ptr[GDBusObjectManager], Ptr[gchar]], CFuncPtr1[Ptr[GDBusObjectManager], Ptr[Byte]], CFuncPtr2[Ptr[GDBusObjectManager], Ptr[gchar], Ptr[GDBusObject]], CFuncPtr3[Ptr[GDBusObjectManager], Ptr[gchar], Ptr[gchar], Ptr[GDBusInterface]], CFuncPtr2[Ptr[GDBusObjectManager], Ptr[GDBusObject], Unit], CFuncPtr2[Ptr[GDBusObjectManager], Ptr[GDBusObject], Unit], CFuncPtr3[Ptr[GDBusObjectManager], Ptr[GDBusObject], Ptr[GDBusInterface], Unit], CFuncPtr3[Ptr[GDBusObjectManager], Ptr[GDBusObject], Ptr[GDBusInterface], Unit]]
  def apply()(using Zone): Ptr[_GDBusObjectManagerIface] = scala.scalanative.unsafe.alloc[_GDBusObjectManagerIface](1)
  def apply(parent_iface : GTypeInterface, get_object_path : CFuncPtr1[Ptr[GDBusObjectManager], Ptr[gchar]], get_objects : CFuncPtr1[Ptr[GDBusObjectManager], Ptr[GList]], get_object : CFuncPtr2[Ptr[GDBusObjectManager], Ptr[gchar], Ptr[GDBusObject]], get_interface : CFuncPtr3[Ptr[GDBusObjectManager], Ptr[gchar], Ptr[gchar], Ptr[GDBusInterface]], object_added : CFuncPtr2[Ptr[GDBusObjectManager], Ptr[GDBusObject], Unit], object_removed : CFuncPtr2[Ptr[GDBusObjectManager], Ptr[GDBusObject], Unit], interface_added : CFuncPtr3[Ptr[GDBusObjectManager], Ptr[GDBusObject], Ptr[GDBusInterface], Unit], interface_removed : CFuncPtr3[Ptr[GDBusObjectManager], Ptr[GDBusObject], Ptr[GDBusInterface], Unit])(using Zone): Ptr[_GDBusObjectManagerIface] = 
    val ____ptr = apply()
    (!____ptr).parent_iface = parent_iface
    (!____ptr).get_object_path = get_object_path
    (!____ptr).get_objects = get_objects
    (!____ptr).get_object = get_object
    (!____ptr).get_interface = get_interface
    (!____ptr).object_added = object_added
    (!____ptr).object_removed = object_removed
    (!____ptr).interface_added = interface_added
    (!____ptr).interface_removed = interface_removed
    ____ptr
  extension (struct: _GDBusObjectManagerIface)
    def parent_iface : GTypeInterface = struct._1
    def parent_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def get_object_path : CFuncPtr1[Ptr[GDBusObjectManager], Ptr[gchar]] = struct._2
    def get_object_path_=(value: CFuncPtr1[Ptr[GDBusObjectManager], Ptr[gchar]]): Unit = !struct.at2 = value
    def get_objects : CFuncPtr1[Ptr[GDBusObjectManager], Ptr[GList]] = struct._3.asInstanceOf[CFuncPtr1[Ptr[GDBusObjectManager], Ptr[GList]]]
    def get_objects_=(value: CFuncPtr1[Ptr[GDBusObjectManager], Ptr[GList]]): Unit = !struct.at3 = value.asInstanceOf[CFuncPtr1[Ptr[GDBusObjectManager], Ptr[Byte]]]
    def get_object : CFuncPtr2[Ptr[GDBusObjectManager], Ptr[gchar], Ptr[GDBusObject]] = struct._4
    def get_object_=(value: CFuncPtr2[Ptr[GDBusObjectManager], Ptr[gchar], Ptr[GDBusObject]]): Unit = !struct.at4 = value
    def get_interface : CFuncPtr3[Ptr[GDBusObjectManager], Ptr[gchar], Ptr[gchar], Ptr[GDBusInterface]] = struct._5
    def get_interface_=(value: CFuncPtr3[Ptr[GDBusObjectManager], Ptr[gchar], Ptr[gchar], Ptr[GDBusInterface]]): Unit = !struct.at5 = value
    def object_added : CFuncPtr2[Ptr[GDBusObjectManager], Ptr[GDBusObject], Unit] = struct._6
    def object_added_=(value: CFuncPtr2[Ptr[GDBusObjectManager], Ptr[GDBusObject], Unit]): Unit = !struct.at6 = value
    def object_removed : CFuncPtr2[Ptr[GDBusObjectManager], Ptr[GDBusObject], Unit] = struct._7
    def object_removed_=(value: CFuncPtr2[Ptr[GDBusObjectManager], Ptr[GDBusObject], Unit]): Unit = !struct.at7 = value
    def interface_added : CFuncPtr3[Ptr[GDBusObjectManager], Ptr[GDBusObject], Ptr[GDBusInterface], Unit] = struct._8
    def interface_added_=(value: CFuncPtr3[Ptr[GDBusObjectManager], Ptr[GDBusObject], Ptr[GDBusInterface], Unit]): Unit = !struct.at8 = value
    def interface_removed : CFuncPtr3[Ptr[GDBusObjectManager], Ptr[GDBusObject], Ptr[GDBusInterface], Unit] = struct._9
    def interface_removed_=(value: CFuncPtr3[Ptr[GDBusObjectManager], Ptr[GDBusObject], Ptr[GDBusInterface], Unit]): Unit = !struct.at9 = value

/**
 * GDBusObjectManagerServer:

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h
*/
opaque type _GDBusObjectManagerServer = CStruct2[GObject, Ptr[GDBusObjectManagerServerPrivate]]
object _GDBusObjectManagerServer:
  given _tag: Tag[_GDBusObjectManagerServer] = Tag.materializeCStruct2Tag[GObject, Ptr[GDBusObjectManagerServerPrivate]]
  def apply()(using Zone): Ptr[_GDBusObjectManagerServer] = scala.scalanative.unsafe.alloc[_GDBusObjectManagerServer](1)
  def apply(parent_instance : GObject, priv : Ptr[GDBusObjectManagerServerPrivate])(using Zone): Ptr[_GDBusObjectManagerServer] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GDBusObjectManagerServer)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GDBusObjectManagerServerPrivate] = struct._2
    def priv_=(value: Ptr[GDBusObjectManagerServerPrivate]): Unit = !struct.at2 = value

/**
 * GDBusObjectManagerServerClass: _class: The parent class.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h
*/
opaque type _GDBusObjectManagerServerClass = CStruct2[GObjectClass, CArray[gpointer, Nat._8]]
object _GDBusObjectManagerServerClass:
  given _tag: Tag[_GDBusObjectManagerServerClass] = Tag.materializeCStruct2Tag[GObjectClass, CArray[gpointer, Nat._8]]
  def apply()(using Zone): Ptr[_GDBusObjectManagerServerClass] = scala.scalanative.unsafe.alloc[_GDBusObjectManagerServerClass](1)
  def apply(parent_class : GObjectClass, padding : CArray[gpointer, Nat._8])(using Zone): Ptr[_GDBusObjectManagerServerClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GDBusObjectManagerServerClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def padding : CArray[gpointer, Nat._8] = struct._2
    def padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h
*/
opaque type _GDBusObjectManagerServerPrivate = CStruct0
object _GDBusObjectManagerServerPrivate:
  given _tag: Tag[_GDBusObjectManagerServerPrivate] = Tag.materializeCStruct0Tag

/**
 * GDBusObjectProxy:

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectproxy.h
*/
opaque type _GDBusObjectProxy = CStruct2[GObject, Ptr[GDBusObjectProxyPrivate]]
object _GDBusObjectProxy:
  given _tag: Tag[_GDBusObjectProxy] = Tag.materializeCStruct2Tag[GObject, Ptr[GDBusObjectProxyPrivate]]
  def apply()(using Zone): Ptr[_GDBusObjectProxy] = scala.scalanative.unsafe.alloc[_GDBusObjectProxy](1)
  def apply(parent_instance : GObject, priv : Ptr[GDBusObjectProxyPrivate])(using Zone): Ptr[_GDBusObjectProxy] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GDBusObjectProxy)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GDBusObjectProxyPrivate] = struct._2
    def priv_=(value: Ptr[GDBusObjectProxyPrivate]): Unit = !struct.at2 = value

/**
 * GDBusObjectProxyClass: _class: The parent class.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectproxy.h
*/
opaque type _GDBusObjectProxyClass = CStruct2[GObjectClass, CArray[gpointer, Nat._8]]
object _GDBusObjectProxyClass:
  given _tag: Tag[_GDBusObjectProxyClass] = Tag.materializeCStruct2Tag[GObjectClass, CArray[gpointer, Nat._8]]
  def apply()(using Zone): Ptr[_GDBusObjectProxyClass] = scala.scalanative.unsafe.alloc[_GDBusObjectProxyClass](1)
  def apply(parent_class : GObjectClass, padding : CArray[gpointer, Nat._8])(using Zone): Ptr[_GDBusObjectProxyClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GDBusObjectProxyClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def padding : CArray[gpointer, Nat._8] = struct._2
    def padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectproxy.h
*/
opaque type _GDBusObjectProxyPrivate = CStruct0
object _GDBusObjectProxyPrivate:
  given _tag: Tag[_GDBusObjectProxyPrivate] = Tag.materializeCStruct0Tag

/**
 * GDBusObjectSkeleton:

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectskeleton.h
*/
opaque type _GDBusObjectSkeleton = CStruct2[GObject, Ptr[GDBusObjectSkeletonPrivate]]
object _GDBusObjectSkeleton:
  given _tag: Tag[_GDBusObjectSkeleton] = Tag.materializeCStruct2Tag[GObject, Ptr[GDBusObjectSkeletonPrivate]]
  def apply()(using Zone): Ptr[_GDBusObjectSkeleton] = scala.scalanative.unsafe.alloc[_GDBusObjectSkeleton](1)
  def apply(parent_instance : GObject, priv : Ptr[GDBusObjectSkeletonPrivate])(using Zone): Ptr[_GDBusObjectSkeleton] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GDBusObjectSkeleton)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GDBusObjectSkeletonPrivate] = struct._2
    def priv_=(value: Ptr[GDBusObjectSkeletonPrivate]): Unit = !struct.at2 = value

/**
 * GDBusObjectSkeletonClass: _class: The parent class. _method: Signal class handler for the #GDBusObjectSkeleton::authorize-method signal.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectskeleton.h
*/
opaque type _GDBusObjectSkeletonClass = CStruct3[GObjectClass, CFuncPtr3[Ptr[GDBusObjectSkeleton], Ptr[GDBusInterfaceSkeleton], Ptr[GDBusMethodInvocation], gboolean], CArray[gpointer, Nat._8]]
object _GDBusObjectSkeletonClass:
  given _tag: Tag[_GDBusObjectSkeletonClass] = Tag.materializeCStruct3Tag[GObjectClass, CFuncPtr3[Ptr[GDBusObjectSkeleton], Ptr[GDBusInterfaceSkeleton], Ptr[GDBusMethodInvocation], gboolean], CArray[gpointer, Nat._8]]
  def apply()(using Zone): Ptr[_GDBusObjectSkeletonClass] = scala.scalanative.unsafe.alloc[_GDBusObjectSkeletonClass](1)
  def apply(parent_class : GObjectClass, authorize_method : CFuncPtr3[Ptr[GDBusObjectSkeleton], Ptr[GDBusInterfaceSkeleton], Ptr[GDBusMethodInvocation], gboolean], padding : CArray[gpointer, Nat._8])(using Zone): Ptr[_GDBusObjectSkeletonClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).authorize_method = authorize_method
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GDBusObjectSkeletonClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def authorize_method : CFuncPtr3[Ptr[GDBusObjectSkeleton], Ptr[GDBusInterfaceSkeleton], Ptr[GDBusMethodInvocation], gboolean] = struct._2
    def authorize_method_=(value: CFuncPtr3[Ptr[GDBusObjectSkeleton], Ptr[GDBusInterfaceSkeleton], Ptr[GDBusMethodInvocation], gboolean]): Unit = !struct.at2 = value
    def padding : CArray[gpointer, Nat._8] = struct._3
    def padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectskeleton.h
*/
opaque type _GDBusObjectSkeletonPrivate = CStruct0
object _GDBusObjectSkeletonPrivate:
  given _tag: Tag[_GDBusObjectSkeletonPrivate] = Tag.materializeCStruct0Tag

/**
 * GDBusPropertyInfo: _count: The reference count or -1 if statically allocated. : The D-Bus signature of the property (a single complete type). : Access control flags for the property. : (array zero-terminated=1): A pointer to a %NULL-terminated array of pointers to #GDBusAnnotationInfo structures or %NULL if there are no annotations.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
*/
opaque type _GDBusPropertyInfo = CStruct5[gint, Ptr[gchar], Ptr[gchar], GDBusPropertyInfoFlags, Ptr[Byte]]
object _GDBusPropertyInfo:
  given _tag: Tag[_GDBusPropertyInfo] = Tag.materializeCStruct5Tag[gint, Ptr[gchar], Ptr[gchar], GDBusPropertyInfoFlags, Ptr[Byte]]
  def apply()(using Zone): Ptr[_GDBusPropertyInfo] = scala.scalanative.unsafe.alloc[_GDBusPropertyInfo](1)
  def apply(ref_count : gint, name : Ptr[gchar], signature : Ptr[gchar], flags : GDBusPropertyInfoFlags, annotations : Ptr[Ptr[GDBusAnnotationInfo]])(using Zone): Ptr[_GDBusPropertyInfo] = 
    val ____ptr = apply()
    (!____ptr).ref_count = ref_count
    (!____ptr).name = name
    (!____ptr).signature = signature
    (!____ptr).flags = flags
    (!____ptr).annotations = annotations
    ____ptr
  extension (struct: _GDBusPropertyInfo)
    def ref_count : gint = struct._1
    def ref_count_=(value: gint): Unit = !struct.at1 = value
    def name : Ptr[gchar] = struct._2
    def name_=(value: Ptr[gchar]): Unit = !struct.at2 = value
    def signature : Ptr[gchar] = struct._3
    def signature_=(value: Ptr[gchar]): Unit = !struct.at3 = value
    def flags : GDBusPropertyInfoFlags = struct._4
    def flags_=(value: GDBusPropertyInfoFlags): Unit = !struct.at4 = value
    def annotations : Ptr[Ptr[GDBusAnnotationInfo]] = struct._5.asInstanceOf[Ptr[Ptr[GDBusAnnotationInfo]]]
    def annotations_=(value: Ptr[Ptr[GDBusAnnotationInfo]]): Unit = !struct.at5 = value.asInstanceOf[Ptr[Byte]]

/**
 * GDBusProxy:

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
*/
opaque type _GDBusProxy = CStruct2[GObject, Ptr[GDBusProxyPrivate]]
object _GDBusProxy:
  given _tag: Tag[_GDBusProxy] = Tag.materializeCStruct2Tag[GObject, Ptr[GDBusProxyPrivate]]
  def apply()(using Zone): Ptr[_GDBusProxy] = scala.scalanative.unsafe.alloc[_GDBusProxy](1)
  def apply(parent_instance : GObject, priv : Ptr[GDBusProxyPrivate])(using Zone): Ptr[_GDBusProxy] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GDBusProxy)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GDBusProxyPrivate] = struct._2
    def priv_=(value: Ptr[GDBusProxyPrivate]): Unit = !struct.at2 = value

/**
 * GDBusProxyClass: _properties_changed: Signal class handler for the #GDBusProxy::g-properties-changed signal. _signal: Signal class handler for the #GDBusProxy::g-signal signal.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
*/
opaque type _GDBusProxyClass = CStruct4[GObjectClass, CFuncPtr3[Ptr[GDBusProxy], Ptr[GVariant], Ptr[Ptr[gchar]], Unit], CFuncPtr4[Ptr[GDBusProxy], Ptr[gchar], Ptr[gchar], Ptr[GVariant], Unit], CArray[gpointer, Nat.Digit2[Nat._3, Nat._2]]]
object _GDBusProxyClass:
  given _tag: Tag[_GDBusProxyClass] = Tag.materializeCStruct4Tag[GObjectClass, CFuncPtr3[Ptr[GDBusProxy], Ptr[GVariant], Ptr[Ptr[gchar]], Unit], CFuncPtr4[Ptr[GDBusProxy], Ptr[gchar], Ptr[gchar], Ptr[GVariant], Unit], CArray[gpointer, Nat.Digit2[Nat._3, Nat._2]]]
  def apply()(using Zone): Ptr[_GDBusProxyClass] = scala.scalanative.unsafe.alloc[_GDBusProxyClass](1)
  def apply(parent_class : GObjectClass, g_properties_changed : CFuncPtr3[Ptr[GDBusProxy], Ptr[GVariant], Ptr[Ptr[gchar]], Unit], g_signal : CFuncPtr4[Ptr[GDBusProxy], Ptr[gchar], Ptr[gchar], Ptr[GVariant], Unit], padding : CArray[gpointer, Nat.Digit2[Nat._3, Nat._2]])(using Zone): Ptr[_GDBusProxyClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).g_properties_changed = g_properties_changed
    (!____ptr).g_signal = g_signal
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GDBusProxyClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def g_properties_changed : CFuncPtr3[Ptr[GDBusProxy], Ptr[GVariant], Ptr[Ptr[gchar]], Unit] = struct._2
    def g_properties_changed_=(value: CFuncPtr3[Ptr[GDBusProxy], Ptr[GVariant], Ptr[Ptr[gchar]], Unit]): Unit = !struct.at2 = value
    def g_signal : CFuncPtr4[Ptr[GDBusProxy], Ptr[gchar], Ptr[gchar], Ptr[GVariant], Unit] = struct._3
    def g_signal_=(value: CFuncPtr4[Ptr[GDBusProxy], Ptr[gchar], Ptr[gchar], Ptr[GVariant], Unit]): Unit = !struct.at3 = value
    def padding : CArray[gpointer, Nat.Digit2[Nat._3, Nat._2]] = struct._4
    def padding_=(value: CArray[gpointer, Nat.Digit2[Nat._3, Nat._2]]): Unit = !struct.at4 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
*/
opaque type _GDBusProxyPrivate = CStruct0
object _GDBusProxyPrivate:
  given _tag: Tag[_GDBusProxyPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GDBusServer = CStruct0
object _GDBusServer:
  given _tag: Tag[_GDBusServer] = Tag.materializeCStruct0Tag

/**
 * GDBusSignalInfo: _count: The reference count or -1 if statically allocated.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
*/
opaque type _GDBusSignalInfo = CStruct4[gint, Ptr[gchar], Ptr[Byte], Ptr[Byte]]
object _GDBusSignalInfo:
  given _tag: Tag[_GDBusSignalInfo] = Tag.materializeCStruct4Tag[gint, Ptr[gchar], Ptr[Byte], Ptr[Byte]]
  def apply()(using Zone): Ptr[_GDBusSignalInfo] = scala.scalanative.unsafe.alloc[_GDBusSignalInfo](1)
  def apply(ref_count : gint, name : Ptr[gchar], args : Ptr[Ptr[GDBusArgInfo]], annotations : Ptr[Ptr[GDBusAnnotationInfo]])(using Zone): Ptr[_GDBusSignalInfo] = 
    val ____ptr = apply()
    (!____ptr).ref_count = ref_count
    (!____ptr).name = name
    (!____ptr).args = args
    (!____ptr).annotations = annotations
    ____ptr
  extension (struct: _GDBusSignalInfo)
    def ref_count : gint = struct._1
    def ref_count_=(value: gint): Unit = !struct.at1 = value
    def name : Ptr[gchar] = struct._2
    def name_=(value: Ptr[gchar]): Unit = !struct.at2 = value
    def args : Ptr[Ptr[GDBusArgInfo]] = struct._3.asInstanceOf[Ptr[Ptr[GDBusArgInfo]]]
    def args_=(value: Ptr[Ptr[GDBusArgInfo]]): Unit = !struct.at3 = value.asInstanceOf[Ptr[Byte]]
    def annotations : Ptr[Ptr[GDBusAnnotationInfo]] = struct._4.asInstanceOf[Ptr[Ptr[GDBusAnnotationInfo]]]
    def annotations_=(value: Ptr[Ptr[GDBusAnnotationInfo]]): Unit = !struct.at4 = value.asInstanceOf[Ptr[Byte]]

/**
 * GDBusSubtreeVTable: : Function for enumerating child nodes. : Function for introspecting a child node. : Function for dispatching a remote call on a child node.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
*/
opaque type _GDBusSubtreeVTable = CStruct4[GDBusSubtreeEnumerateFunc, Ptr[Byte], GDBusSubtreeDispatchFunc, CArray[gpointer, Nat._8]]
object _GDBusSubtreeVTable:
  given _tag: Tag[_GDBusSubtreeVTable] = Tag.materializeCStruct4Tag[GDBusSubtreeEnumerateFunc, Ptr[Byte], GDBusSubtreeDispatchFunc, CArray[gpointer, Nat._8]]
  def apply()(using Zone): Ptr[_GDBusSubtreeVTable] = scala.scalanative.unsafe.alloc[_GDBusSubtreeVTable](1)
  def apply(enumerate : GDBusSubtreeEnumerateFunc, introspect : GDBusSubtreeIntrospectFunc, dispatch : GDBusSubtreeDispatchFunc, padding : CArray[gpointer, Nat._8])(using Zone): Ptr[_GDBusSubtreeVTable] = 
    val ____ptr = apply()
    (!____ptr).enumerate = enumerate
    (!____ptr).introspect = introspect
    (!____ptr).dispatch = dispatch
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GDBusSubtreeVTable)
    def enumerate : GDBusSubtreeEnumerateFunc = struct._1
    def enumerate_=(value: GDBusSubtreeEnumerateFunc): Unit = !struct.at1 = value
    def introspect : GDBusSubtreeIntrospectFunc = struct._2.asInstanceOf[GDBusSubtreeIntrospectFunc]
    def introspect_=(value: GDBusSubtreeIntrospectFunc): Unit = !struct.at2 = value.asInstanceOf[Ptr[Byte]]
    def dispatch : GDBusSubtreeDispatchFunc = struct._3
    def dispatch_=(value: GDBusSubtreeDispatchFunc): Unit = !struct.at3 = value
    def padding : CArray[gpointer, Nat._8] = struct._4
    def padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at4 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gdataset.h
*/
opaque type _GData = CStruct0
object _GData:
  given _tag: Tag[_GData] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
*/
opaque type _GDataInputStream = CStruct2[GBufferedInputStream, Ptr[GDataInputStreamPrivate]]
object _GDataInputStream:
  given _tag: Tag[_GDataInputStream] = Tag.materializeCStruct2Tag[GBufferedInputStream, Ptr[GDataInputStreamPrivate]]
  def apply()(using Zone): Ptr[_GDataInputStream] = scala.scalanative.unsafe.alloc[_GDataInputStream](1)
  def apply(parent_instance : GBufferedInputStream, priv : Ptr[GDataInputStreamPrivate])(using Zone): Ptr[_GDataInputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GDataInputStream)
    def parent_instance : GBufferedInputStream = struct._1
    def parent_instance_=(value: GBufferedInputStream): Unit = !struct.at1 = value
    def priv : Ptr[GDataInputStreamPrivate] = struct._2
    def priv_=(value: Ptr[GDataInputStreamPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
*/
opaque type _GDataInputStreamClass = CStruct6[GBufferedInputStreamClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GDataInputStreamClass:
  given _tag: Tag[_GDataInputStreamClass] = Tag.materializeCStruct6Tag[GBufferedInputStreamClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GDataInputStreamClass] = scala.scalanative.unsafe.alloc[_GDataInputStreamClass](1)
  def apply(parent_class : GBufferedInputStreamClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[_GDataInputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: _GDataInputStreamClass)
    def parent_class : GBufferedInputStreamClass = struct._1
    def parent_class_=(value: GBufferedInputStreamClass): Unit = !struct.at1 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._2
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at2 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._3
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at3 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._4
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at4 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._5
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at5 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._6
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
*/
opaque type _GDataInputStreamPrivate = CStruct0
object _GDataInputStreamPrivate:
  given _tag: Tag[_GDataInputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdataoutputstream.h
*/
opaque type _GDataOutputStream = CStruct2[GFilterOutputStream, Ptr[GDataOutputStreamPrivate]]
object _GDataOutputStream:
  given _tag: Tag[_GDataOutputStream] = Tag.materializeCStruct2Tag[GFilterOutputStream, Ptr[GDataOutputStreamPrivate]]
  def apply()(using Zone): Ptr[_GDataOutputStream] = scala.scalanative.unsafe.alloc[_GDataOutputStream](1)
  def apply(parent_instance : GFilterOutputStream, priv : Ptr[GDataOutputStreamPrivate])(using Zone): Ptr[_GDataOutputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GDataOutputStream)
    def parent_instance : GFilterOutputStream = struct._1
    def parent_instance_=(value: GFilterOutputStream): Unit = !struct.at1 = value
    def priv : Ptr[GDataOutputStreamPrivate] = struct._2
    def priv_=(value: Ptr[GDataOutputStreamPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdataoutputstream.h
*/
opaque type _GDataOutputStreamClass = CStruct6[GFilterOutputStreamClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GDataOutputStreamClass:
  given _tag: Tag[_GDataOutputStreamClass] = Tag.materializeCStruct6Tag[GFilterOutputStreamClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GDataOutputStreamClass] = scala.scalanative.unsafe.alloc[_GDataOutputStreamClass](1)
  def apply(parent_class : GFilterOutputStreamClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[_GDataOutputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: _GDataOutputStreamClass)
    def parent_class : GFilterOutputStreamClass = struct._1
    def parent_class_=(value: GFilterOutputStreamClass): Unit = !struct.at1 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._2
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at2 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._3
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at3 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._4
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at4 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._5
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at5 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._6
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdataoutputstream.h
*/
opaque type _GDataOutputStreamPrivate = CStruct0
object _GDataOutputStreamPrivate:
  given _tag: Tag[_GDataOutputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GDatagramBased = CStruct0
object _GDatagramBased:
  given _tag: Tag[_GDatagramBased] = Tag.materializeCStruct0Tag

/**
 * GDatagramBasedInterface: _iface: The parent interface. _messages: Virtual method for g_datagram_based_receive_messages(). _messages: Virtual method for g_datagram_based_send_messages(). _source: Virtual method for g_datagram_based_create_source(). _check: Virtual method for g_datagram_based_condition_check(). _wait: Virtual method for g_datagram_based_condition_wait().

 * [bindgen] header: /usr/include/glib-2.0/gio/gdatagrambased.h
*/
opaque type _GDatagramBasedInterface = CStruct6[GTypeInterface, CFuncPtr7[Ptr[GDatagramBased], Ptr[GInputMessage], guint, gint, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gint], CFuncPtr7[Ptr[GDatagramBased], Ptr[GOutputMessage], guint, gint, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gint], CFuncPtr3[Ptr[GDatagramBased], GIOCondition, Ptr[GCancellable], Ptr[Byte]], CFuncPtr2[Ptr[GDatagramBased], GIOCondition, GIOCondition], CFuncPtr5[Ptr[GDatagramBased], GIOCondition, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]
object _GDatagramBasedInterface:
  given _tag: Tag[_GDatagramBasedInterface] = Tag.materializeCStruct6Tag[GTypeInterface, CFuncPtr7[Ptr[GDatagramBased], Ptr[GInputMessage], guint, gint, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gint], CFuncPtr7[Ptr[GDatagramBased], Ptr[GOutputMessage], guint, gint, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gint], CFuncPtr3[Ptr[GDatagramBased], GIOCondition, Ptr[GCancellable], Ptr[Byte]], CFuncPtr2[Ptr[GDatagramBased], GIOCondition, GIOCondition], CFuncPtr5[Ptr[GDatagramBased], GIOCondition, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]
  def apply()(using Zone): Ptr[_GDatagramBasedInterface] = scala.scalanative.unsafe.alloc[_GDatagramBasedInterface](1)
  def apply(g_iface : GTypeInterface, receive_messages : CFuncPtr7[Ptr[GDatagramBased], Ptr[GInputMessage], guint, gint, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gint], send_messages : CFuncPtr7[Ptr[GDatagramBased], Ptr[GOutputMessage], guint, gint, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gint], create_source : CFuncPtr3[Ptr[GDatagramBased], GIOCondition, Ptr[GCancellable], Ptr[GSource]], condition_check : CFuncPtr2[Ptr[GDatagramBased], GIOCondition, GIOCondition], condition_wait : CFuncPtr5[Ptr[GDatagramBased], GIOCondition, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean])(using Zone): Ptr[_GDatagramBasedInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).receive_messages = receive_messages
    (!____ptr).send_messages = send_messages
    (!____ptr).create_source = create_source
    (!____ptr).condition_check = condition_check
    (!____ptr).condition_wait = condition_wait
    ____ptr
  extension (struct: _GDatagramBasedInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def receive_messages : CFuncPtr7[Ptr[GDatagramBased], Ptr[GInputMessage], guint, gint, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gint] = struct._2
    def receive_messages_=(value: CFuncPtr7[Ptr[GDatagramBased], Ptr[GInputMessage], guint, gint, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gint]): Unit = !struct.at2 = value
    def send_messages : CFuncPtr7[Ptr[GDatagramBased], Ptr[GOutputMessage], guint, gint, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gint] = struct._3
    def send_messages_=(value: CFuncPtr7[Ptr[GDatagramBased], Ptr[GOutputMessage], guint, gint, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gint]): Unit = !struct.at3 = value
    def create_source : CFuncPtr3[Ptr[GDatagramBased], GIOCondition, Ptr[GCancellable], Ptr[GSource]] = struct._4.asInstanceOf[CFuncPtr3[Ptr[GDatagramBased], GIOCondition, Ptr[GCancellable], Ptr[GSource]]]
    def create_source_=(value: CFuncPtr3[Ptr[GDatagramBased], GIOCondition, Ptr[GCancellable], Ptr[GSource]]): Unit = !struct.at4 = value.asInstanceOf[CFuncPtr3[Ptr[GDatagramBased], GIOCondition, Ptr[GCancellable], Ptr[Byte]]]
    def condition_check : CFuncPtr2[Ptr[GDatagramBased], GIOCondition, GIOCondition] = struct._5
    def condition_check_=(value: CFuncPtr2[Ptr[GDatagramBased], GIOCondition, GIOCondition]): Unit = !struct.at5 = value
    def condition_wait : CFuncPtr5[Ptr[GDatagramBased], GIOCondition, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._6
    def condition_wait_=(value: CFuncPtr5[Ptr[GDatagramBased], GIOCondition, gint64, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
*/
opaque type _GDate = CStruct6[guint, guint, guint, guint, guint, guint]
object _GDate:
  given _tag: Tag[_GDate] = Tag.materializeCStruct6Tag[guint, guint, guint, guint, guint, guint]
  def apply()(using Zone): Ptr[_GDate] = scala.scalanative.unsafe.alloc[_GDate](1)
  def apply(julian_days : guint, julian : guint, dmy : guint, day : guint, month : guint, year : guint)(using Zone): Ptr[_GDate] = 
    val ____ptr = apply()
    (!____ptr).julian_days = julian_days
    (!____ptr).julian = julian
    (!____ptr).dmy = dmy
    (!____ptr).day = day
    (!____ptr).month = month
    (!____ptr).year = year
    ____ptr
  extension (struct: _GDate)
    def julian_days : guint = struct._1
    def julian_days_=(value: guint): Unit = !struct.at1 = value
    def julian : guint = struct._2
    def julian_=(value: guint): Unit = !struct.at2 = value
    def dmy : guint = struct._3
    def dmy_=(value: guint): Unit = !struct.at3 = value
    def day : guint = struct._4
    def day_=(value: guint): Unit = !struct.at4 = value
    def month : guint = struct._5
    def month_=(value: guint): Unit = !struct.at5 = value
    def year : guint = struct._6
    def year_=(value: guint): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
*/
opaque type _GDateTime = CStruct0
object _GDateTime:
  given _tag: Tag[_GDateTime] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontroller.h
*/
opaque type _GDebugController = CStruct0
object _GDebugController:
  given _tag: Tag[_GDebugController] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
*/
opaque type _GDebugControllerDBus = CStruct1[GObject]
object _GDebugControllerDBus:
  given _tag: Tag[_GDebugControllerDBus] = Tag.materializeCStruct1Tag[GObject]
  def apply()(using Zone): Ptr[_GDebugControllerDBus] = scala.scalanative.unsafe.alloc[_GDebugControllerDBus](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[_GDebugControllerDBus] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _GDebugControllerDBus)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value

/**
 * GDebugControllerDBusClass: _class: The parent class. : Default handler for the #GDebugControllerDBus::authorize signal.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
*/
opaque type _GDebugControllerDBusClass = CStruct3[GObjectClass, CFuncPtr2[Ptr[GDebugControllerDBus], Ptr[GDBusMethodInvocation], gboolean], CArray[gpointer, Nat.Digit2[Nat._1, Nat._2]]]
object _GDebugControllerDBusClass:
  given _tag: Tag[_GDebugControllerDBusClass] = Tag.materializeCStruct3Tag[GObjectClass, CFuncPtr2[Ptr[GDebugControllerDBus], Ptr[GDBusMethodInvocation], gboolean], CArray[gpointer, Nat.Digit2[Nat._1, Nat._2]]]
  def apply()(using Zone): Ptr[_GDebugControllerDBusClass] = scala.scalanative.unsafe.alloc[_GDebugControllerDBusClass](1)
  def apply(parent_class : GObjectClass, authorize : CFuncPtr2[Ptr[GDebugControllerDBus], Ptr[GDBusMethodInvocation], gboolean], padding : CArray[gpointer, Nat.Digit2[Nat._1, Nat._2]])(using Zone): Ptr[_GDebugControllerDBusClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).authorize = authorize
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GDebugControllerDBusClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def authorize : CFuncPtr2[Ptr[GDebugControllerDBus], Ptr[GDBusMethodInvocation], gboolean] = struct._2
    def authorize_=(value: CFuncPtr2[Ptr[GDebugControllerDBus], Ptr[GDBusMethodInvocation], gboolean]): Unit = !struct.at2 = value
    def padding : CArray[gpointer, Nat.Digit2[Nat._1, Nat._2]] = struct._3
    def padding_=(value: CArray[gpointer, Nat.Digit2[Nat._1, Nat._2]]): Unit = !struct.at3 = value

/**
 * GDebugControllerInterface: _iface: The parent interface.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontroller.h
*/
opaque type _GDebugControllerInterface = CStruct1[GTypeInterface]
object _GDebugControllerInterface:
  given _tag: Tag[_GDebugControllerInterface] = Tag.materializeCStruct1Tag[GTypeInterface]
  def apply()(using Zone): Ptr[_GDebugControllerInterface] = scala.scalanative.unsafe.alloc[_GDebugControllerInterface](1)
  def apply(g_iface : GTypeInterface)(using Zone): Ptr[_GDebugControllerInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    ____ptr
  extension (struct: _GDebugControllerInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
*/
opaque type _GDebugKey = CStruct2[Ptr[gchar], guint]
object _GDebugKey:
  given _tag: Tag[_GDebugKey] = Tag.materializeCStruct2Tag[Ptr[gchar], guint]
  def apply()(using Zone): Ptr[_GDebugKey] = scala.scalanative.unsafe.alloc[_GDebugKey](1)
  def apply(key : Ptr[gchar], value : guint)(using Zone): Ptr[_GDebugKey] = 
    val ____ptr = apply()
    (!____ptr).key = key
    (!____ptr).value = value
    ____ptr
  extension (struct: _GDebugKey)
    def key : Ptr[gchar] = struct._1
    def key_=(value: Ptr[gchar]): Unit = !struct.at1 = value
    def value : guint = struct._2
    def value_=(value: guint): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gdir.h
*/
opaque type _GDir = CStruct0
object _GDir:
  given _tag: Tag[_GDir] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GDrive = CStruct0
object _GDrive:
  given _tag: Tag[_GDrive] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
*/
opaque type _GDriveIface = CArray[CChar, Nat.Digit3[Nat._2, Nat._7, Nat._2]]
object _GDriveIface:
  given _tag: Tag[_GDriveIface] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._7, Nat._2]](Tag.Byte, Tag.Digit3[Nat._2, Nat._7, Nat._2](Tag.Nat2, Tag.Nat7, Tag.Nat2))
  def apply()(using Zone): Ptr[_GDriveIface] = scala.scalanative.unsafe.alloc[_GDriveIface](1)
  def apply(g_iface : GTypeInterface, changed : CFuncPtr1[Ptr[GDrive], Unit], disconnected : CFuncPtr1[Ptr[GDrive], Unit], eject_button : CFuncPtr1[Ptr[GDrive], Unit], get_name : CFuncPtr1[Ptr[GDrive], CString], get_icon : CFuncPtr1[Ptr[GDrive], Ptr[GIcon]], has_volumes : CFuncPtr1[Ptr[GDrive], gboolean], get_volumes : CFuncPtr1[Ptr[GDrive], Ptr[GList]], is_media_removable : CFuncPtr1[Ptr[GDrive], gboolean], has_media : CFuncPtr1[Ptr[GDrive], gboolean], is_media_check_automatic : CFuncPtr1[Ptr[GDrive], gboolean], can_eject : CFuncPtr1[Ptr[GDrive], gboolean], can_poll_for_media : CFuncPtr1[Ptr[GDrive], gboolean], eject : CFuncPtr5[Ptr[GDrive], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], eject_finish : CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], poll_for_media : CFuncPtr4[Ptr[GDrive], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], poll_for_media_finish : CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], get_identifier : CFuncPtr2[Ptr[GDrive], CString, CString], enumerate_identifiers : CFuncPtr1[Ptr[GDrive], Ptr[CString]], get_start_stop_type : CFuncPtr1[Ptr[GDrive], GDriveStartStopType], can_start : CFuncPtr1[Ptr[GDrive], gboolean], can_start_degraded : CFuncPtr1[Ptr[GDrive], gboolean], start : CFuncPtr6[Ptr[GDrive], GDriveStartFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], start_finish : CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], can_stop : CFuncPtr1[Ptr[GDrive], gboolean], stop : CFuncPtr6[Ptr[GDrive], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], stop_finish : CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], stop_button : CFuncPtr1[Ptr[GDrive], Unit], eject_with_operation : CFuncPtr6[Ptr[GDrive], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], eject_with_operation_finish : CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], get_sort_key : CFuncPtr1[Ptr[GDrive], Ptr[gchar]], get_symbolic_icon : CFuncPtr1[Ptr[GDrive], Ptr[GIcon]], is_removable : CFuncPtr1[Ptr[GDrive], gboolean])(using Zone): Ptr[_GDriveIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).changed = changed
    (!____ptr).disconnected = disconnected
    (!____ptr).eject_button = eject_button
    (!____ptr).get_name = get_name
    (!____ptr).get_icon = get_icon
    (!____ptr).has_volumes = has_volumes
    (!____ptr).get_volumes = get_volumes
    (!____ptr).is_media_removable = is_media_removable
    (!____ptr).has_media = has_media
    (!____ptr).is_media_check_automatic = is_media_check_automatic
    (!____ptr).can_eject = can_eject
    (!____ptr).can_poll_for_media = can_poll_for_media
    (!____ptr).eject = eject
    (!____ptr).eject_finish = eject_finish
    (!____ptr).poll_for_media = poll_for_media
    (!____ptr).poll_for_media_finish = poll_for_media_finish
    (!____ptr).get_identifier = get_identifier
    (!____ptr).enumerate_identifiers = enumerate_identifiers
    (!____ptr).get_start_stop_type = get_start_stop_type
    (!____ptr).can_start = can_start
    (!____ptr).can_start_degraded = can_start_degraded
    (!____ptr).start = start
    (!____ptr).start_finish = start_finish
    (!____ptr).can_stop = can_stop
    (!____ptr).stop = stop
    (!____ptr).stop_finish = stop_finish
    (!____ptr).stop_button = stop_button
    (!____ptr).eject_with_operation = eject_with_operation
    (!____ptr).eject_with_operation_finish = eject_with_operation_finish
    (!____ptr).get_sort_key = get_sort_key
    (!____ptr).get_symbolic_icon = get_symbolic_icon
    (!____ptr).is_removable = is_removable
    ____ptr
  extension (struct: _GDriveIface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def changed: CFuncPtr1[Ptr[GDrive], Unit] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Unit]]]
    def changed_=(value: CFuncPtr1[Ptr[GDrive], Unit]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Unit]]] = value
    def disconnected: CFuncPtr1[Ptr[GDrive], Unit] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Unit]]]
    def disconnected_=(value: CFuncPtr1[Ptr[GDrive], Unit]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Unit]]] = value
    def eject_button: CFuncPtr1[Ptr[GDrive], Unit] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Unit]]]
    def eject_button_=(value: CFuncPtr1[Ptr[GDrive], Unit]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Unit]]] = value
    def get_name: CFuncPtr1[Ptr[GDrive], CString] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], CString]]]
    def get_name_=(value: CFuncPtr1[Ptr[GDrive], CString]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], CString]]] = value
    def get_icon: CFuncPtr1[Ptr[GDrive], Ptr[GIcon]] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Ptr[GIcon]]]]
    def get_icon_=(value: CFuncPtr1[Ptr[GDrive], Ptr[GIcon]]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Ptr[GIcon]]]] = value
    def has_volumes: CFuncPtr1[Ptr[GDrive], gboolean] = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]]
    def has_volumes_=(value: CFuncPtr1[Ptr[GDrive], gboolean]): Unit = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]] = value
    def get_volumes: CFuncPtr1[Ptr[GDrive], Ptr[GList]] = !struct.at(64).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Ptr[GList]]]]
    def get_volumes_=(value: CFuncPtr1[Ptr[GDrive], Ptr[GList]]): Unit = !struct.at(64).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Ptr[GList]]]] = value
    def is_media_removable: CFuncPtr1[Ptr[GDrive], gboolean] = !struct.at(72).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]]
    def is_media_removable_=(value: CFuncPtr1[Ptr[GDrive], gboolean]): Unit = !struct.at(72).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]] = value
    def has_media: CFuncPtr1[Ptr[GDrive], gboolean] = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]]
    def has_media_=(value: CFuncPtr1[Ptr[GDrive], gboolean]): Unit = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]] = value
    def is_media_check_automatic: CFuncPtr1[Ptr[GDrive], gboolean] = !struct.at(88).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]]
    def is_media_check_automatic_=(value: CFuncPtr1[Ptr[GDrive], gboolean]): Unit = !struct.at(88).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]] = value
    def can_eject: CFuncPtr1[Ptr[GDrive], gboolean] = !struct.at(96).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]]
    def can_eject_=(value: CFuncPtr1[Ptr[GDrive], gboolean]): Unit = !struct.at(96).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]] = value
    def can_poll_for_media: CFuncPtr1[Ptr[GDrive], gboolean] = !struct.at(104).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]]
    def can_poll_for_media_=(value: CFuncPtr1[Ptr[GDrive], gboolean]): Unit = !struct.at(104).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]] = value
    def eject: CFuncPtr5[Ptr[GDrive], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(112).asInstanceOf[Ptr[CFuncPtr5[Ptr[GDrive], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def eject_=(value: CFuncPtr5[Ptr[GDrive], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(112).asInstanceOf[Ptr[CFuncPtr5[Ptr[GDrive], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def eject_finish: CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(120).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def eject_finish_=(value: CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(120).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def poll_for_media: CFuncPtr4[Ptr[GDrive], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(128).asInstanceOf[Ptr[CFuncPtr4[Ptr[GDrive], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def poll_for_media_=(value: CFuncPtr4[Ptr[GDrive], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(128).asInstanceOf[Ptr[CFuncPtr4[Ptr[GDrive], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def poll_for_media_finish: CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def poll_for_media_finish_=(value: CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def get_identifier: CFuncPtr2[Ptr[GDrive], CString, CString] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDrive], CString, CString]]]
    def get_identifier_=(value: CFuncPtr2[Ptr[GDrive], CString, CString]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr2[Ptr[GDrive], CString, CString]]] = value
    def enumerate_identifiers: CFuncPtr1[Ptr[GDrive], Ptr[CString]] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Ptr[CString]]]]
    def enumerate_identifiers_=(value: CFuncPtr1[Ptr[GDrive], Ptr[CString]]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Ptr[CString]]]] = value
    def get_start_stop_type: CFuncPtr1[Ptr[GDrive], GDriveStartStopType] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], GDriveStartStopType]]]
    def get_start_stop_type_=(value: CFuncPtr1[Ptr[GDrive], GDriveStartStopType]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], GDriveStartStopType]]] = value
    def can_start: CFuncPtr1[Ptr[GDrive], gboolean] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]]
    def can_start_=(value: CFuncPtr1[Ptr[GDrive], gboolean]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]] = value
    def can_start_degraded: CFuncPtr1[Ptr[GDrive], gboolean] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]]
    def can_start_degraded_=(value: CFuncPtr1[Ptr[GDrive], gboolean]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]] = value
    def start: CFuncPtr6[Ptr[GDrive], GDriveStartFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr6[Ptr[GDrive], GDriveStartFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def start_=(value: CFuncPtr6[Ptr[GDrive], GDriveStartFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr6[Ptr[GDrive], GDriveStartFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def start_finish: CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def start_finish_=(value: CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def can_stop: CFuncPtr1[Ptr[GDrive], gboolean] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]]
    def can_stop_=(value: CFuncPtr1[Ptr[GDrive], gboolean]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]] = value
    def stop: CFuncPtr6[Ptr[GDrive], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr6[Ptr[GDrive], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def stop_=(value: CFuncPtr6[Ptr[GDrive], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr6[Ptr[GDrive], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def stop_finish: CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(216).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def stop_finish_=(value: CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(216).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def stop_button: CFuncPtr1[Ptr[GDrive], Unit] = !struct.at(224).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Unit]]]
    def stop_button_=(value: CFuncPtr1[Ptr[GDrive], Unit]): Unit = !struct.at(224).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Unit]]] = value
    def eject_with_operation: CFuncPtr6[Ptr[GDrive], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(232).asInstanceOf[Ptr[CFuncPtr6[Ptr[GDrive], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def eject_with_operation_=(value: CFuncPtr6[Ptr[GDrive], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(232).asInstanceOf[Ptr[CFuncPtr6[Ptr[GDrive], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def eject_with_operation_finish: CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(240).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def eject_with_operation_finish_=(value: CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(240).asInstanceOf[Ptr[CFuncPtr3[Ptr[GDrive], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def get_sort_key: CFuncPtr1[Ptr[GDrive], Ptr[gchar]] = !struct.at(248).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Ptr[gchar]]]]
    def get_sort_key_=(value: CFuncPtr1[Ptr[GDrive], Ptr[gchar]]): Unit = !struct.at(248).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Ptr[gchar]]]] = value
    def get_symbolic_icon: CFuncPtr1[Ptr[GDrive], Ptr[GIcon]] = !struct.at(256).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Ptr[GIcon]]]]
    def get_symbolic_icon_=(value: CFuncPtr1[Ptr[GDrive], Ptr[GIcon]]): Unit = !struct.at(256).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], Ptr[GIcon]]]] = value
    def is_removable: CFuncPtr1[Ptr[GDrive], gboolean] = !struct.at(264).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]]
    def is_removable_=(value: CFuncPtr1[Ptr[GDrive], gboolean]): Unit = !struct.at(264).asInstanceOf[Ptr[CFuncPtr1[Ptr[GDrive], gboolean]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GDtlsClientConnection = CStruct0
object _GDtlsClientConnection:
  given _tag: Tag[_GDtlsClientConnection] = Tag.materializeCStruct0Tag

/**
 * GDtlsClientConnectionInterface: _iface: The parent interface.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsclientconnection.h
*/
opaque type _GDtlsClientConnectionInterface = CStruct1[GTypeInterface]
object _GDtlsClientConnectionInterface:
  given _tag: Tag[_GDtlsClientConnectionInterface] = Tag.materializeCStruct1Tag[GTypeInterface]
  def apply()(using Zone): Ptr[_GDtlsClientConnectionInterface] = scala.scalanative.unsafe.alloc[_GDtlsClientConnectionInterface](1)
  def apply(g_iface : GTypeInterface)(using Zone): Ptr[_GDtlsClientConnectionInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    ____ptr
  extension (struct: _GDtlsClientConnectionInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GDtlsConnection = CStruct0
object _GDtlsConnection:
  given _tag: Tag[_GDtlsConnection] = Tag.materializeCStruct0Tag

/**
 * GDtlsConnectionInterface: _iface: The parent interface. _certificate: Check whether to accept a certificate. : Perform a handshake operation. _async: Start an asynchronous handshake operation. _finish: Finish an asynchronous handshake operation. : Shut down one or both directions of the connection. _async: Start an asynchronous shutdown operation. _finish: Finish an asynchronous shutdown operation.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
*/
opaque type _GDtlsConnectionInterface = CStruct11[GTypeInterface, CFuncPtr3[Ptr[GDtlsConnection], Ptr[GTlsCertificate], GTlsCertificateFlags, gboolean], CFuncPtr3[Ptr[GDtlsConnection], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr5[Ptr[GDtlsConnection], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GDtlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr5[Ptr[GDtlsConnection], gboolean, gboolean, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr7[Ptr[GDtlsConnection], gboolean, gboolean, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GDtlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr2[Ptr[GDtlsConnection], Ptr[Ptr[gchar]], Unit], CFuncPtr1[Ptr[GDtlsConnection], Ptr[gchar]], CFuncPtr4[Ptr[GDtlsConnection], GTlsChannelBindingType, Ptr[GByteArray], Ptr[Ptr[GError]], gboolean]]
object _GDtlsConnectionInterface:
  given _tag: Tag[_GDtlsConnectionInterface] = Tag.materializeCStruct11Tag[GTypeInterface, CFuncPtr3[Ptr[GDtlsConnection], Ptr[GTlsCertificate], GTlsCertificateFlags, gboolean], CFuncPtr3[Ptr[GDtlsConnection], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr5[Ptr[GDtlsConnection], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GDtlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr5[Ptr[GDtlsConnection], gboolean, gboolean, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr7[Ptr[GDtlsConnection], gboolean, gboolean, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GDtlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr2[Ptr[GDtlsConnection], Ptr[Ptr[gchar]], Unit], CFuncPtr1[Ptr[GDtlsConnection], Ptr[gchar]], CFuncPtr4[Ptr[GDtlsConnection], GTlsChannelBindingType, Ptr[GByteArray], Ptr[Ptr[GError]], gboolean]]
  def apply()(using Zone): Ptr[_GDtlsConnectionInterface] = scala.scalanative.unsafe.alloc[_GDtlsConnectionInterface](1)
  def apply(g_iface : GTypeInterface, accept_certificate : CFuncPtr3[Ptr[GDtlsConnection], Ptr[GTlsCertificate], GTlsCertificateFlags, gboolean], handshake : CFuncPtr3[Ptr[GDtlsConnection], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], handshake_async : CFuncPtr5[Ptr[GDtlsConnection], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], handshake_finish : CFuncPtr3[Ptr[GDtlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], shutdown : CFuncPtr5[Ptr[GDtlsConnection], gboolean, gboolean, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], shutdown_async : CFuncPtr7[Ptr[GDtlsConnection], gboolean, gboolean, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], shutdown_finish : CFuncPtr3[Ptr[GDtlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], set_advertised_protocols : CFuncPtr2[Ptr[GDtlsConnection], Ptr[Ptr[gchar]], Unit], get_negotiated_protocol : CFuncPtr1[Ptr[GDtlsConnection], Ptr[gchar]], get_binding_data : CFuncPtr4[Ptr[GDtlsConnection], GTlsChannelBindingType, Ptr[GByteArray], Ptr[Ptr[GError]], gboolean])(using Zone): Ptr[_GDtlsConnectionInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).accept_certificate = accept_certificate
    (!____ptr).handshake = handshake
    (!____ptr).handshake_async = handshake_async
    (!____ptr).handshake_finish = handshake_finish
    (!____ptr).shutdown = shutdown
    (!____ptr).shutdown_async = shutdown_async
    (!____ptr).shutdown_finish = shutdown_finish
    (!____ptr).set_advertised_protocols = set_advertised_protocols
    (!____ptr).get_negotiated_protocol = get_negotiated_protocol
    (!____ptr).get_binding_data = get_binding_data
    ____ptr
  extension (struct: _GDtlsConnectionInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def accept_certificate : CFuncPtr3[Ptr[GDtlsConnection], Ptr[GTlsCertificate], GTlsCertificateFlags, gboolean] = struct._2
    def accept_certificate_=(value: CFuncPtr3[Ptr[GDtlsConnection], Ptr[GTlsCertificate], GTlsCertificateFlags, gboolean]): Unit = !struct.at2 = value
    def handshake : CFuncPtr3[Ptr[GDtlsConnection], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._3
    def handshake_=(value: CFuncPtr3[Ptr[GDtlsConnection], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at3 = value
    def handshake_async : CFuncPtr5[Ptr[GDtlsConnection], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._4
    def handshake_async_=(value: CFuncPtr5[Ptr[GDtlsConnection], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at4 = value
    def handshake_finish : CFuncPtr3[Ptr[GDtlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = struct._5
    def handshake_finish_=(value: CFuncPtr3[Ptr[GDtlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at5 = value
    def shutdown : CFuncPtr5[Ptr[GDtlsConnection], gboolean, gboolean, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._6
    def shutdown_=(value: CFuncPtr5[Ptr[GDtlsConnection], gboolean, gboolean, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at6 = value
    def shutdown_async : CFuncPtr7[Ptr[GDtlsConnection], gboolean, gboolean, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._7
    def shutdown_async_=(value: CFuncPtr7[Ptr[GDtlsConnection], gboolean, gboolean, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at7 = value
    def shutdown_finish : CFuncPtr3[Ptr[GDtlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = struct._8
    def shutdown_finish_=(value: CFuncPtr3[Ptr[GDtlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at8 = value
    def set_advertised_protocols : CFuncPtr2[Ptr[GDtlsConnection], Ptr[Ptr[gchar]], Unit] = struct._9
    def set_advertised_protocols_=(value: CFuncPtr2[Ptr[GDtlsConnection], Ptr[Ptr[gchar]], Unit]): Unit = !struct.at9 = value
    def get_negotiated_protocol : CFuncPtr1[Ptr[GDtlsConnection], Ptr[gchar]] = struct._10
    def get_negotiated_protocol_=(value: CFuncPtr1[Ptr[GDtlsConnection], Ptr[gchar]]): Unit = !struct.at10 = value
    def get_binding_data : CFuncPtr4[Ptr[GDtlsConnection], GTlsChannelBindingType, Ptr[GByteArray], Ptr[Ptr[GError]], gboolean] = struct._11
    def get_binding_data_=(value: CFuncPtr4[Ptr[GDtlsConnection], GTlsChannelBindingType, Ptr[GByteArray], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at11 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GDtlsServerConnection = CStruct0
object _GDtlsServerConnection:
  given _tag: Tag[_GDtlsServerConnection] = Tag.materializeCStruct0Tag

/**
 * GDtlsServerConnectionInterface: _iface: The parent interface.

 * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsserverconnection.h
*/
opaque type _GDtlsServerConnectionInterface = CStruct1[GTypeInterface]
object _GDtlsServerConnectionInterface:
  given _tag: Tag[_GDtlsServerConnectionInterface] = Tag.materializeCStruct1Tag[GTypeInterface]
  def apply()(using Zone): Ptr[_GDtlsServerConnectionInterface] = scala.scalanative.unsafe.alloc[_GDtlsServerConnectionInterface](1)
  def apply(g_iface : GTypeInterface)(using Zone): Ptr[_GDtlsServerConnectionInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    ____ptr
  extension (struct: _GDtlsServerConnectionInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gemblem.h
*/
opaque type _GEmblem = CStruct0
object _GEmblem:
  given _tag: Tag[_GEmblem] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gemblem.h
*/
opaque type _GEmblemClass = CStruct0
object _GEmblemClass:
  given _tag: Tag[_GEmblemClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gemblemedicon.h
*/
opaque type _GEmblemedIcon = CStruct2[GObject, Ptr[GEmblemedIconPrivate]]
object _GEmblemedIcon:
  given _tag: Tag[_GEmblemedIcon] = Tag.materializeCStruct2Tag[GObject, Ptr[GEmblemedIconPrivate]]
  def apply()(using Zone): Ptr[_GEmblemedIcon] = scala.scalanative.unsafe.alloc[_GEmblemedIcon](1)
  def apply(parent_instance : GObject, priv : Ptr[GEmblemedIconPrivate])(using Zone): Ptr[_GEmblemedIcon] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GEmblemedIcon)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GEmblemedIconPrivate] = struct._2
    def priv_=(value: Ptr[GEmblemedIconPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gemblemedicon.h
*/
opaque type _GEmblemedIconClass = CStruct1[GObjectClass]
object _GEmblemedIconClass:
  given _tag: Tag[_GEmblemedIconClass] = Tag.materializeCStruct1Tag[GObjectClass]
  def apply()(using Zone): Ptr[_GEmblemedIconClass] = scala.scalanative.unsafe.alloc[_GEmblemedIconClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[_GEmblemedIconClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: _GEmblemedIconClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gemblemedicon.h
*/
opaque type _GEmblemedIconPrivate = CStruct0
object _GEmblemedIconPrivate:
  given _tag: Tag[_GEmblemedIconPrivate] = Tag.materializeCStruct0Tag

/**
 * GEnumClass: _type_class: the parent class : the smallest possible value. : the largest possible value. _values: the number of possible values. : an array of #GEnumValue structs describing the individual values.

 * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
*/
opaque type _GEnumClass = CStruct5[GTypeClass, gint, gint, guint, Ptr[GEnumValue]]
object _GEnumClass:
  given _tag: Tag[_GEnumClass] = Tag.materializeCStruct5Tag[GTypeClass, gint, gint, guint, Ptr[GEnumValue]]
  def apply()(using Zone): Ptr[_GEnumClass] = scala.scalanative.unsafe.alloc[_GEnumClass](1)
  def apply(g_type_class : GTypeClass, minimum : gint, maximum : gint, n_values : guint, values : Ptr[GEnumValue])(using Zone): Ptr[_GEnumClass] = 
    val ____ptr = apply()
    (!____ptr).g_type_class = g_type_class
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).n_values = n_values
    (!____ptr).values = values
    ____ptr
  extension (struct: _GEnumClass)
    def g_type_class : GTypeClass = struct._1
    def g_type_class_=(value: GTypeClass): Unit = !struct.at1 = value
    def minimum : gint = struct._2
    def minimum_=(value: gint): Unit = !struct.at2 = value
    def maximum : gint = struct._3
    def maximum_=(value: gint): Unit = !struct.at3 = value
    def n_values : guint = struct._4
    def n_values_=(value: guint): Unit = !struct.at4 = value
    def values : Ptr[GEnumValue] = struct._5
    def values_=(value: Ptr[GEnumValue]): Unit = !struct.at5 = value

/**
 * GEnumValue: : the enum value _name: the name of the value _nick: the nickname of the value

 * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
*/
opaque type _GEnumValue = CStruct3[gint, Ptr[gchar], Ptr[gchar]]
object _GEnumValue:
  given _tag: Tag[_GEnumValue] = Tag.materializeCStruct3Tag[gint, Ptr[gchar], Ptr[gchar]]
  def apply()(using Zone): Ptr[_GEnumValue] = scala.scalanative.unsafe.alloc[_GEnumValue](1)
  def apply(value : gint, value_name : Ptr[gchar], value_nick : Ptr[gchar])(using Zone): Ptr[_GEnumValue] = 
    val ____ptr = apply()
    (!____ptr).value = value
    (!____ptr).value_name = value_name
    (!____ptr).value_nick = value_nick
    ____ptr
  extension (struct: _GEnumValue)
    def value : gint = struct._1
    def value_=(value: gint): Unit = !struct.at1 = value
    def value_name : Ptr[gchar] = struct._2
    def value_name_=(value: Ptr[gchar]): Unit = !struct.at2 = value
    def value_nick : Ptr[gchar] = struct._3
    def value_nick_=(value: Ptr[gchar]): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gerror.h
*/
opaque type _GError = CStruct3[GQuark, gint, Ptr[gchar]]
object _GError:
  given _tag: Tag[_GError] = Tag.materializeCStruct3Tag[GQuark, gint, Ptr[gchar]]
  def apply()(using Zone): Ptr[_GError] = scala.scalanative.unsafe.alloc[_GError](1)
  def apply(domain : GQuark, code : gint, message : Ptr[gchar])(using Zone): Ptr[_GError] = 
    val ____ptr = apply()
    (!____ptr).domain = domain
    (!____ptr).code = code
    (!____ptr).message = message
    ____ptr
  extension (struct: _GError)
    def domain : GQuark = struct._1
    def domain_=(value: GQuark): Unit = !struct.at1 = value
    def code : gint = struct._2
    def code_=(value: gint): Unit = !struct.at2 = value
    def message : Ptr[gchar] = struct._3
    def message_=(value: Ptr[gchar]): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GFile = CStruct0
object _GFile:
  given _tag: Tag[_GFile] = Tag.materializeCStruct0Tag

/**
 * GFileAttributeInfo: : the #GFileAttributeType type of the attribute. : a set of #GFileAttributeInfoFlags.

 * [bindgen] header: /usr/include/glib-2.0/gio/gfileattribute.h
*/
opaque type _GFileAttributeInfo = CStruct3[CString, GFileAttributeType, GFileAttributeInfoFlags]
object _GFileAttributeInfo:
  given _tag: Tag[_GFileAttributeInfo] = Tag.materializeCStruct3Tag[CString, GFileAttributeType, GFileAttributeInfoFlags]
  def apply()(using Zone): Ptr[_GFileAttributeInfo] = scala.scalanative.unsafe.alloc[_GFileAttributeInfo](1)
  def apply(name : CString, `type` : GFileAttributeType, flags : GFileAttributeInfoFlags)(using Zone): Ptr[_GFileAttributeInfo] = 
    val ____ptr = apply()
    (!____ptr).name = name
    (!____ptr).`type` = `type`
    (!____ptr).flags = flags
    ____ptr
  extension (struct: _GFileAttributeInfo)
    def name : CString = struct._1
    def name_=(value: CString): Unit = !struct.at1 = value
    def `type` : GFileAttributeType = struct._2
    def type_=(value: GFileAttributeType): Unit = !struct.at2 = value
    def flags : GFileAttributeInfoFlags = struct._3
    def flags_=(value: GFileAttributeInfoFlags): Unit = !struct.at3 = value

/**
 * GFileAttributeInfoList: : an array of #GFileAttributeInfos. _infos: the number of values in the array.

 * [bindgen] header: /usr/include/glib-2.0/gio/gfileattribute.h
*/
opaque type _GFileAttributeInfoList = CStruct2[Ptr[GFileAttributeInfo], CInt]
object _GFileAttributeInfoList:
  given _tag: Tag[_GFileAttributeInfoList] = Tag.materializeCStruct2Tag[Ptr[GFileAttributeInfo], CInt]
  def apply()(using Zone): Ptr[_GFileAttributeInfoList] = scala.scalanative.unsafe.alloc[_GFileAttributeInfoList](1)
  def apply(infos : Ptr[GFileAttributeInfo], n_infos : CInt)(using Zone): Ptr[_GFileAttributeInfoList] = 
    val ____ptr = apply()
    (!____ptr).infos = infos
    (!____ptr).n_infos = n_infos
    ____ptr
  extension (struct: _GFileAttributeInfoList)
    def infos : Ptr[GFileAttributeInfo] = struct._1
    def infos_=(value: Ptr[GFileAttributeInfo]): Unit = !struct.at1 = value
    def n_infos : CInt = struct._2
    def n_infos_=(value: CInt): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GFileAttributeMatcher = CStruct0
object _GFileAttributeMatcher:
  given _tag: Tag[_GFileAttributeMatcher] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GFileDescriptorBased = CStruct0
object _GFileDescriptorBased:
  given _tag: Tag[_GFileDescriptorBased] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileenumerator.h
*/
opaque type _GFileEnumerator = CStruct2[GObject, Ptr[GFileEnumeratorPrivate]]
object _GFileEnumerator:
  given _tag: Tag[_GFileEnumerator] = Tag.materializeCStruct2Tag[GObject, Ptr[GFileEnumeratorPrivate]]
  def apply()(using Zone): Ptr[_GFileEnumerator] = scala.scalanative.unsafe.alloc[_GFileEnumerator](1)
  def apply(parent_instance : GObject, priv : Ptr[GFileEnumeratorPrivate])(using Zone): Ptr[_GFileEnumerator] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GFileEnumerator)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GFileEnumeratorPrivate] = struct._2
    def priv_=(value: Ptr[GFileEnumeratorPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileenumerator.h
*/
opaque type _GFileEnumeratorClass = CStruct14[GObjectClass, CFuncPtr3[Ptr[GFileEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]], CFuncPtr3[Ptr[GFileEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr6[Ptr[GFileEnumerator], CInt, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Byte]], CFuncPtr5[Ptr[GFileEnumerator], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GFileEnumeratorClass:
  given _tag: Tag[_GFileEnumeratorClass] = Tag.materializeCStruct14Tag[GObjectClass, CFuncPtr3[Ptr[GFileEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]], CFuncPtr3[Ptr[GFileEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr6[Ptr[GFileEnumerator], CInt, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Byte]], CFuncPtr5[Ptr[GFileEnumerator], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GFileEnumeratorClass] = scala.scalanative.unsafe.alloc[_GFileEnumeratorClass](1)
  def apply(parent_class : GObjectClass, next_file : CFuncPtr3[Ptr[GFileEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]], close_fn : CFuncPtr3[Ptr[GFileEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], next_files_async : CFuncPtr6[Ptr[GFileEnumerator], CInt, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], next_files_finish : CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]], close_async : CFuncPtr5[Ptr[GFileEnumerator], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], close_finish : CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit], _g_reserved7 : CFuncPtr0[Unit])(using Zone): Ptr[_GFileEnumeratorClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).next_file = next_file
    (!____ptr).close_fn = close_fn
    (!____ptr).next_files_async = next_files_async
    (!____ptr).next_files_finish = next_files_finish
    (!____ptr).close_async = close_async
    (!____ptr).close_finish = close_finish
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    (!____ptr)._g_reserved7 = _g_reserved7
    ____ptr
  extension (struct: _GFileEnumeratorClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def next_file : CFuncPtr3[Ptr[GFileEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]] = struct._2
    def next_file_=(value: CFuncPtr3[Ptr[GFileEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at2 = value
    def close_fn : CFuncPtr3[Ptr[GFileEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._3
    def close_fn_=(value: CFuncPtr3[Ptr[GFileEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at3 = value
    def next_files_async : CFuncPtr6[Ptr[GFileEnumerator], CInt, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._4
    def next_files_async_=(value: CFuncPtr6[Ptr[GFileEnumerator], CInt, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at4 = value
    def next_files_finish : CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]] = struct._5.asInstanceOf[CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]]
    def next_files_finish_=(value: CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at5 = value.asInstanceOf[CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Byte]]]
    def close_async : CFuncPtr5[Ptr[GFileEnumerator], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._6
    def close_async_=(value: CFuncPtr5[Ptr[GFileEnumerator], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at6 = value
    def close_finish : CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = struct._7
    def close_finish_=(value: CFuncPtr3[Ptr[GFileEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at7 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._8
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at8 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._9
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at9 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._10
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at10 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._11
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at11 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._12
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at12 = value
    def _g_reserved6 : CFuncPtr0[Unit] = struct._13
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at13 = value
    def _g_reserved7 : CFuncPtr0[Unit] = struct._14
    def _g_reserved7_=(value: CFuncPtr0[Unit]): Unit = !struct.at14 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileenumerator.h
*/
opaque type _GFileEnumeratorPrivate = CStruct0
object _GFileEnumeratorPrivate:
  given _tag: Tag[_GFileEnumeratorPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileiostream.h
*/
opaque type _GFileIOStream = CStruct2[GIOStream, Ptr[GFileIOStreamPrivate]]
object _GFileIOStream:
  given _tag: Tag[_GFileIOStream] = Tag.materializeCStruct2Tag[GIOStream, Ptr[GFileIOStreamPrivate]]
  def apply()(using Zone): Ptr[_GFileIOStream] = scala.scalanative.unsafe.alloc[_GFileIOStream](1)
  def apply(parent_instance : GIOStream, priv : Ptr[GFileIOStreamPrivate])(using Zone): Ptr[_GFileIOStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GFileIOStream)
    def parent_instance : GIOStream = struct._1
    def parent_instance_=(value: GIOStream): Unit = !struct.at1 = value
    def priv : Ptr[GFileIOStreamPrivate] = struct._2
    def priv_=(value: Ptr[GFileIOStreamPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileiostream.h
*/
opaque type _GFileIOStreamClass = CStruct15[GIOStreamClass, CFuncPtr1[Ptr[GFileIOStream], goffset], CFuncPtr1[Ptr[GFileIOStream], gboolean], CFuncPtr5[Ptr[GFileIOStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr1[Ptr[GFileIOStream], gboolean], CFuncPtr4[Ptr[GFileIOStream], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr4[Ptr[GFileIOStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]], CFuncPtr6[Ptr[GFileIOStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GFileIOStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]], CFuncPtr1[Ptr[GFileIOStream], CString], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GFileIOStreamClass:
  given _tag: Tag[_GFileIOStreamClass] = Tag.materializeCStruct15Tag[GIOStreamClass, CFuncPtr1[Ptr[GFileIOStream], goffset], CFuncPtr1[Ptr[GFileIOStream], gboolean], CFuncPtr5[Ptr[GFileIOStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr1[Ptr[GFileIOStream], gboolean], CFuncPtr4[Ptr[GFileIOStream], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr4[Ptr[GFileIOStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]], CFuncPtr6[Ptr[GFileIOStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GFileIOStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]], CFuncPtr1[Ptr[GFileIOStream], CString], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GFileIOStreamClass] = scala.scalanative.unsafe.alloc[_GFileIOStreamClass](1)
  def apply(parent_class : GIOStreamClass, tell : CFuncPtr1[Ptr[GFileIOStream], goffset], can_seek : CFuncPtr1[Ptr[GFileIOStream], gboolean], seek : CFuncPtr5[Ptr[GFileIOStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], can_truncate : CFuncPtr1[Ptr[GFileIOStream], gboolean], truncate_fn : CFuncPtr4[Ptr[GFileIOStream], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], query_info : CFuncPtr4[Ptr[GFileIOStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]], query_info_async : CFuncPtr6[Ptr[GFileIOStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], query_info_finish : CFuncPtr3[Ptr[GFileIOStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]], get_etag : CFuncPtr1[Ptr[GFileIOStream], CString], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[_GFileIOStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).tell = tell
    (!____ptr).can_seek = can_seek
    (!____ptr).seek = seek
    (!____ptr).can_truncate = can_truncate
    (!____ptr).truncate_fn = truncate_fn
    (!____ptr).query_info = query_info
    (!____ptr).query_info_async = query_info_async
    (!____ptr).query_info_finish = query_info_finish
    (!____ptr).get_etag = get_etag
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: _GFileIOStreamClass)
    def parent_class : GIOStreamClass = struct._1
    def parent_class_=(value: GIOStreamClass): Unit = !struct.at1 = value
    def tell : CFuncPtr1[Ptr[GFileIOStream], goffset] = struct._2
    def tell_=(value: CFuncPtr1[Ptr[GFileIOStream], goffset]): Unit = !struct.at2 = value
    def can_seek : CFuncPtr1[Ptr[GFileIOStream], gboolean] = struct._3
    def can_seek_=(value: CFuncPtr1[Ptr[GFileIOStream], gboolean]): Unit = !struct.at3 = value
    def seek : CFuncPtr5[Ptr[GFileIOStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._4
    def seek_=(value: CFuncPtr5[Ptr[GFileIOStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at4 = value
    def can_truncate : CFuncPtr1[Ptr[GFileIOStream], gboolean] = struct._5
    def can_truncate_=(value: CFuncPtr1[Ptr[GFileIOStream], gboolean]): Unit = !struct.at5 = value
    def truncate_fn : CFuncPtr4[Ptr[GFileIOStream], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._6
    def truncate_fn_=(value: CFuncPtr4[Ptr[GFileIOStream], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at6 = value
    def query_info : CFuncPtr4[Ptr[GFileIOStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]] = struct._7
    def query_info_=(value: CFuncPtr4[Ptr[GFileIOStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at7 = value
    def query_info_async : CFuncPtr6[Ptr[GFileIOStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._8
    def query_info_async_=(value: CFuncPtr6[Ptr[GFileIOStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at8 = value
    def query_info_finish : CFuncPtr3[Ptr[GFileIOStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]] = struct._9
    def query_info_finish_=(value: CFuncPtr3[Ptr[GFileIOStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at9 = value
    def get_etag : CFuncPtr1[Ptr[GFileIOStream], CString] = struct._10
    def get_etag_=(value: CFuncPtr1[Ptr[GFileIOStream], CString]): Unit = !struct.at10 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._11
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at11 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._12
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at12 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._13
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at13 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._14
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at14 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._15
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at15 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileiostream.h
*/
opaque type _GFileIOStreamPrivate = CStruct0
object _GFileIOStreamPrivate:
  given _tag: Tag[_GFileIOStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GFileIcon = CStruct0
object _GFileIcon:
  given _tag: Tag[_GFileIcon] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileicon.h
*/
opaque type _GFileIconClass = CStruct0
object _GFileIconClass:
  given _tag: Tag[_GFileIconClass] = Tag.materializeCStruct0Tag

/**
 * GFileIface: _iface: The parent interface. : Duplicates a #GFile. : Creates a hash of a #GFile. : Checks equality of two given #GFiles. _uri_scheme: Checks to see if a #GFile has a given URI scheme. _uri_scheme: Gets the URI scheme for a #GFile. _basename: Gets the basename for a given #GFile. _path: Gets the current path within a #GFile. _uri: Gets a URI for the path within a #GFile. _parse_name: Gets the parsed name for the #GFile. _parent: Gets the parent directory for the #GFile. _matches: Checks whether a #GFile contains a specified file. _relative_path: Gets the path for a #GFile relative to a given path. _relative_path: Resolves a relative path for a #GFile to an absolute path. _child_for_display_name: Gets the child #GFile for a given display name. _children: Gets a #GFileEnumerator with the children of a #GFile. _children_async: Asynchronously gets a #GFileEnumerator with the children of a #GFile. _children_finish: Finishes asynchronously enumerating the children. _info: Gets the #GFileInfo for a #GFile. _info_async: Asynchronously gets the #GFileInfo for a #GFile. _info_finish: Finishes an asynchronous query info operation. _filesystem_info: Gets a #GFileInfo for the file system #GFile is on. _filesystem_info_async: Asynchronously gets a #GFileInfo for the file system #GFile is on. _filesystem_info_finish: Finishes asynchronously getting the file system info. _enclosing_mount: Gets a #GMount for the #GFile. _enclosing_mount_async: Asynchronously gets the #GMount for a #GFile. _enclosing_mount_finish: Finishes asynchronously getting the volume.

 * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
*/
opaque type _GFileIface = CArray[CChar, Nat.Digit3[Nat._8, Nat._4, Nat._0]]
object _GFileIface:
  given _tag: Tag[_GFileIface] = Tag.CArray[CChar, Nat.Digit3[Nat._8, Nat._4, Nat._0]](Tag.Byte, Tag.Digit3[Nat._8, Nat._4, Nat._0](Tag.Nat8, Tag.Nat4, Tag.Nat0))
  def apply()(using Zone): Ptr[_GFileIface] = scala.scalanative.unsafe.alloc[_GFileIface](1)
  def apply(g_iface : GTypeInterface, dup : CFuncPtr1[Ptr[GFile], Ptr[GFile]], hash : CFuncPtr1[Ptr[GFile], guint], equal : CFuncPtr2[Ptr[GFile], Ptr[GFile], gboolean], is_native : CFuncPtr1[Ptr[GFile], gboolean], has_uri_scheme : CFuncPtr2[Ptr[GFile], CString, gboolean], get_uri_scheme : CFuncPtr1[Ptr[GFile], CString], get_basename : CFuncPtr1[Ptr[GFile], CString], get_path : CFuncPtr1[Ptr[GFile], CString], get_uri : CFuncPtr1[Ptr[GFile], CString], get_parse_name : CFuncPtr1[Ptr[GFile], CString], get_parent : CFuncPtr1[Ptr[GFile], Ptr[GFile]], prefix_matches : CFuncPtr2[Ptr[GFile], Ptr[GFile], gboolean], get_relative_path : CFuncPtr2[Ptr[GFile], Ptr[GFile], CString], resolve_relative_path : CFuncPtr2[Ptr[GFile], CString, Ptr[GFile]], get_child_for_display_name : CFuncPtr3[Ptr[GFile], CString, Ptr[Ptr[GError]], Ptr[GFile]], enumerate_children : CFuncPtr5[Ptr[GFile], CString, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileEnumerator]], enumerate_children_async : CFuncPtr7[Ptr[GFile], CString, GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], enumerate_children_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileEnumerator]], query_info : CFuncPtr5[Ptr[GFile], CString, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]], query_info_async : CFuncPtr7[Ptr[GFile], CString, GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], query_info_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]], query_filesystem_info : CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]], query_filesystem_info_async : CFuncPtr6[Ptr[GFile], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], query_filesystem_info_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]], find_enclosing_mount : CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GMount]], find_enclosing_mount_async : CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], find_enclosing_mount_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GMount]], set_display_name : CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFile]], set_display_name_async : CFuncPtr6[Ptr[GFile], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], set_display_name_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFile]], query_settable_attributes : CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileAttributeInfoList]], _query_settable_attributes_async : CFuncPtr0[Unit], _query_settable_attributes_finish : CFuncPtr0[Unit], query_writable_namespaces : CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileAttributeInfoList]], _query_writable_namespaces_async : CFuncPtr0[Unit], _query_writable_namespaces_finish : CFuncPtr0[Unit], set_attribute : CFuncPtr7[Ptr[GFile], CString, GFileAttributeType, gpointer, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], set_attributes_from_info : CFuncPtr5[Ptr[GFile], Ptr[GFileInfo], GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], set_attributes_async : CFuncPtr7[Ptr[GFile], Ptr[GFileInfo], GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], set_attributes_finish : CFuncPtr4[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GFileInfo]], Ptr[Ptr[GError]], gboolean], read_fn : CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInputStream]], read_async : CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], read_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInputStream]], append_to : CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]], append_to_async : CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], append_to_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]], create : CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]], create_async : CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], create_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]], replace : CFuncPtr6[Ptr[GFile], CString, gboolean, GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]], replace_async : CFuncPtr8[Ptr[GFile], CString, gboolean, GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], replace_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]], delete_file : CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], delete_file_async : CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], delete_file_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], trash : CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], trash_async : CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], trash_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], make_directory : CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], make_directory_async : CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], make_directory_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], make_symbolic_link : CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], _make_symbolic_link_async : CFuncPtr0[Unit], _make_symbolic_link_finish : CFuncPtr0[Unit], copy : CFuncPtr7[Ptr[GFile], Ptr[GFile], GFileCopyFlags, Ptr[GCancellable], GFileProgressCallback, gpointer, Ptr[Ptr[GError]], gboolean], copy_async : CFuncPtr9[Ptr[GFile], Ptr[GFile], GFileCopyFlags, CInt, Ptr[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit], copy_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], move : CFuncPtr7[Ptr[GFile], Ptr[GFile], GFileCopyFlags, Ptr[GCancellable], GFileProgressCallback, gpointer, Ptr[Ptr[GError]], gboolean], move_async : CFuncPtr9[Ptr[GFile], Ptr[GFile], GFileCopyFlags, CInt, Ptr[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit], move_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], mount_mountable : CFuncPtr6[Ptr[GFile], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], mount_mountable_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFile]], unmount_mountable : CFuncPtr5[Ptr[GFile], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], unmount_mountable_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], eject_mountable : CFuncPtr5[Ptr[GFile], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], eject_mountable_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], mount_enclosing_volume : CFuncPtr6[Ptr[GFile], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], mount_enclosing_volume_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], monitor_dir : CFuncPtr4[Ptr[GFile], GFileMonitorFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileMonitor]], monitor_file : CFuncPtr4[Ptr[GFile], GFileMonitorFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileMonitor]], open_readwrite : CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]], open_readwrite_async : CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], open_readwrite_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]], create_readwrite : CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]], create_readwrite_async : CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], create_readwrite_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]], replace_readwrite : CFuncPtr6[Ptr[GFile], CString, gboolean, GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]], replace_readwrite_async : CFuncPtr8[Ptr[GFile], CString, gboolean, GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], replace_readwrite_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]], start_mountable : CFuncPtr6[Ptr[GFile], GDriveStartFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], start_mountable_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], stop_mountable : CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], stop_mountable_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], supports_thread_contexts : gboolean, unmount_mountable_with_operation : CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], unmount_mountable_with_operation_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], eject_mountable_with_operation : CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], eject_mountable_with_operation_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], poll_mountable : CFuncPtr4[Ptr[GFile], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], poll_mountable_finish : CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], measure_disk_usage : CFuncPtr9[Ptr[GFile], GFileMeasureFlags, Ptr[GCancellable], GFileMeasureProgressCallback, gpointer, Ptr[guint64], Ptr[guint64], Ptr[guint64], Ptr[Ptr[GError]], gboolean], measure_disk_usage_async : CFuncPtr8[Ptr[GFile], GFileMeasureFlags, gint, Ptr[GCancellable], GFileMeasureProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit], measure_disk_usage_finish : CFuncPtr6[Ptr[GFile], Ptr[GAsyncResult], Ptr[guint64], Ptr[guint64], Ptr[guint64], Ptr[Ptr[GError]], gboolean])(using Zone): Ptr[_GFileIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).dup = dup
    (!____ptr).hash = hash
    (!____ptr).equal = equal
    (!____ptr).is_native = is_native
    (!____ptr).has_uri_scheme = has_uri_scheme
    (!____ptr).get_uri_scheme = get_uri_scheme
    (!____ptr).get_basename = get_basename
    (!____ptr).get_path = get_path
    (!____ptr).get_uri = get_uri
    (!____ptr).get_parse_name = get_parse_name
    (!____ptr).get_parent = get_parent
    (!____ptr).prefix_matches = prefix_matches
    (!____ptr).get_relative_path = get_relative_path
    (!____ptr).resolve_relative_path = resolve_relative_path
    (!____ptr).get_child_for_display_name = get_child_for_display_name
    (!____ptr).enumerate_children = enumerate_children
    (!____ptr).enumerate_children_async = enumerate_children_async
    (!____ptr).enumerate_children_finish = enumerate_children_finish
    (!____ptr).query_info = query_info
    (!____ptr).query_info_async = query_info_async
    (!____ptr).query_info_finish = query_info_finish
    (!____ptr).query_filesystem_info = query_filesystem_info
    (!____ptr).query_filesystem_info_async = query_filesystem_info_async
    (!____ptr).query_filesystem_info_finish = query_filesystem_info_finish
    (!____ptr).find_enclosing_mount = find_enclosing_mount
    (!____ptr).find_enclosing_mount_async = find_enclosing_mount_async
    (!____ptr).find_enclosing_mount_finish = find_enclosing_mount_finish
    (!____ptr).set_display_name = set_display_name
    (!____ptr).set_display_name_async = set_display_name_async
    (!____ptr).set_display_name_finish = set_display_name_finish
    (!____ptr).query_settable_attributes = query_settable_attributes
    (!____ptr)._query_settable_attributes_async = _query_settable_attributes_async
    (!____ptr)._query_settable_attributes_finish = _query_settable_attributes_finish
    (!____ptr).query_writable_namespaces = query_writable_namespaces
    (!____ptr)._query_writable_namespaces_async = _query_writable_namespaces_async
    (!____ptr)._query_writable_namespaces_finish = _query_writable_namespaces_finish
    (!____ptr).set_attribute = set_attribute
    (!____ptr).set_attributes_from_info = set_attributes_from_info
    (!____ptr).set_attributes_async = set_attributes_async
    (!____ptr).set_attributes_finish = set_attributes_finish
    (!____ptr).read_fn = read_fn
    (!____ptr).read_async = read_async
    (!____ptr).read_finish = read_finish
    (!____ptr).append_to = append_to
    (!____ptr).append_to_async = append_to_async
    (!____ptr).append_to_finish = append_to_finish
    (!____ptr).create = create
    (!____ptr).create_async = create_async
    (!____ptr).create_finish = create_finish
    (!____ptr).replace = replace
    (!____ptr).replace_async = replace_async
    (!____ptr).replace_finish = replace_finish
    (!____ptr).delete_file = delete_file
    (!____ptr).delete_file_async = delete_file_async
    (!____ptr).delete_file_finish = delete_file_finish
    (!____ptr).trash = trash
    (!____ptr).trash_async = trash_async
    (!____ptr).trash_finish = trash_finish
    (!____ptr).make_directory = make_directory
    (!____ptr).make_directory_async = make_directory_async
    (!____ptr).make_directory_finish = make_directory_finish
    (!____ptr).make_symbolic_link = make_symbolic_link
    (!____ptr)._make_symbolic_link_async = _make_symbolic_link_async
    (!____ptr)._make_symbolic_link_finish = _make_symbolic_link_finish
    (!____ptr).copy = copy
    (!____ptr).copy_async = copy_async
    (!____ptr).copy_finish = copy_finish
    (!____ptr).move = move
    (!____ptr).move_async = move_async
    (!____ptr).move_finish = move_finish
    (!____ptr).mount_mountable = mount_mountable
    (!____ptr).mount_mountable_finish = mount_mountable_finish
    (!____ptr).unmount_mountable = unmount_mountable
    (!____ptr).unmount_mountable_finish = unmount_mountable_finish
    (!____ptr).eject_mountable = eject_mountable
    (!____ptr).eject_mountable_finish = eject_mountable_finish
    (!____ptr).mount_enclosing_volume = mount_enclosing_volume
    (!____ptr).mount_enclosing_volume_finish = mount_enclosing_volume_finish
    (!____ptr).monitor_dir = monitor_dir
    (!____ptr).monitor_file = monitor_file
    (!____ptr).open_readwrite = open_readwrite
    (!____ptr).open_readwrite_async = open_readwrite_async
    (!____ptr).open_readwrite_finish = open_readwrite_finish
    (!____ptr).create_readwrite = create_readwrite
    (!____ptr).create_readwrite_async = create_readwrite_async
    (!____ptr).create_readwrite_finish = create_readwrite_finish
    (!____ptr).replace_readwrite = replace_readwrite
    (!____ptr).replace_readwrite_async = replace_readwrite_async
    (!____ptr).replace_readwrite_finish = replace_readwrite_finish
    (!____ptr).start_mountable = start_mountable
    (!____ptr).start_mountable_finish = start_mountable_finish
    (!____ptr).stop_mountable = stop_mountable
    (!____ptr).stop_mountable_finish = stop_mountable_finish
    (!____ptr).supports_thread_contexts = supports_thread_contexts
    (!____ptr).unmount_mountable_with_operation = unmount_mountable_with_operation
    (!____ptr).unmount_mountable_with_operation_finish = unmount_mountable_with_operation_finish
    (!____ptr).eject_mountable_with_operation = eject_mountable_with_operation
    (!____ptr).eject_mountable_with_operation_finish = eject_mountable_with_operation_finish
    (!____ptr).poll_mountable = poll_mountable
    (!____ptr).poll_mountable_finish = poll_mountable_finish
    (!____ptr).measure_disk_usage = measure_disk_usage
    (!____ptr).measure_disk_usage_async = measure_disk_usage_async
    (!____ptr).measure_disk_usage_finish = measure_disk_usage_finish
    ____ptr
  extension (struct: _GFileIface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def dup: CFuncPtr1[Ptr[GFile], Ptr[GFile]] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], Ptr[GFile]]]]
    def dup_=(value: CFuncPtr1[Ptr[GFile], Ptr[GFile]]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], Ptr[GFile]]]] = value
    def hash: CFuncPtr1[Ptr[GFile], guint] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], guint]]]
    def hash_=(value: CFuncPtr1[Ptr[GFile], guint]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], guint]]] = value
    def equal: CFuncPtr2[Ptr[GFile], Ptr[GFile], gboolean] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GFile], Ptr[GFile], gboolean]]]
    def equal_=(value: CFuncPtr2[Ptr[GFile], Ptr[GFile], gboolean]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr2[Ptr[GFile], Ptr[GFile], gboolean]]] = value
    def is_native: CFuncPtr1[Ptr[GFile], gboolean] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], gboolean]]]
    def is_native_=(value: CFuncPtr1[Ptr[GFile], gboolean]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], gboolean]]] = value
    def has_uri_scheme: CFuncPtr2[Ptr[GFile], CString, gboolean] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr2[Ptr[GFile], CString, gboolean]]]
    def has_uri_scheme_=(value: CFuncPtr2[Ptr[GFile], CString, gboolean]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr2[Ptr[GFile], CString, gboolean]]] = value
    def get_uri_scheme: CFuncPtr1[Ptr[GFile], CString] = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], CString]]]
    def get_uri_scheme_=(value: CFuncPtr1[Ptr[GFile], CString]): Unit = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], CString]]] = value
    def get_basename: CFuncPtr1[Ptr[GFile], CString] = !struct.at(64).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], CString]]]
    def get_basename_=(value: CFuncPtr1[Ptr[GFile], CString]): Unit = !struct.at(64).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], CString]]] = value
    def get_path: CFuncPtr1[Ptr[GFile], CString] = !struct.at(72).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], CString]]]
    def get_path_=(value: CFuncPtr1[Ptr[GFile], CString]): Unit = !struct.at(72).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], CString]]] = value
    def get_uri: CFuncPtr1[Ptr[GFile], CString] = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], CString]]]
    def get_uri_=(value: CFuncPtr1[Ptr[GFile], CString]): Unit = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], CString]]] = value
    def get_parse_name: CFuncPtr1[Ptr[GFile], CString] = !struct.at(88).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], CString]]]
    def get_parse_name_=(value: CFuncPtr1[Ptr[GFile], CString]): Unit = !struct.at(88).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], CString]]] = value
    def get_parent: CFuncPtr1[Ptr[GFile], Ptr[GFile]] = !struct.at(96).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], Ptr[GFile]]]]
    def get_parent_=(value: CFuncPtr1[Ptr[GFile], Ptr[GFile]]): Unit = !struct.at(96).asInstanceOf[Ptr[CFuncPtr1[Ptr[GFile], Ptr[GFile]]]] = value
    def prefix_matches: CFuncPtr2[Ptr[GFile], Ptr[GFile], gboolean] = !struct.at(104).asInstanceOf[Ptr[CFuncPtr2[Ptr[GFile], Ptr[GFile], gboolean]]]
    def prefix_matches_=(value: CFuncPtr2[Ptr[GFile], Ptr[GFile], gboolean]): Unit = !struct.at(104).asInstanceOf[Ptr[CFuncPtr2[Ptr[GFile], Ptr[GFile], gboolean]]] = value
    def get_relative_path: CFuncPtr2[Ptr[GFile], Ptr[GFile], CString] = !struct.at(112).asInstanceOf[Ptr[CFuncPtr2[Ptr[GFile], Ptr[GFile], CString]]]
    def get_relative_path_=(value: CFuncPtr2[Ptr[GFile], Ptr[GFile], CString]): Unit = !struct.at(112).asInstanceOf[Ptr[CFuncPtr2[Ptr[GFile], Ptr[GFile], CString]]] = value
    def resolve_relative_path: CFuncPtr2[Ptr[GFile], CString, Ptr[GFile]] = !struct.at(120).asInstanceOf[Ptr[CFuncPtr2[Ptr[GFile], CString, Ptr[GFile]]]]
    def resolve_relative_path_=(value: CFuncPtr2[Ptr[GFile], CString, Ptr[GFile]]): Unit = !struct.at(120).asInstanceOf[Ptr[CFuncPtr2[Ptr[GFile], CString, Ptr[GFile]]]] = value
    def get_child_for_display_name: CFuncPtr3[Ptr[GFile], CString, Ptr[Ptr[GError]], Ptr[GFile]] = !struct.at(128).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], CString, Ptr[Ptr[GError]], Ptr[GFile]]]]
    def get_child_for_display_name_=(value: CFuncPtr3[Ptr[GFile], CString, Ptr[Ptr[GError]], Ptr[GFile]]): Unit = !struct.at(128).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], CString, Ptr[Ptr[GError]], Ptr[GFile]]]] = value
    def enumerate_children: CFuncPtr5[Ptr[GFile], CString, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileEnumerator]] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CString, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileEnumerator]]]]
    def enumerate_children_=(value: CFuncPtr5[Ptr[GFile], CString, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileEnumerator]]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CString, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileEnumerator]]]] = value
    def enumerate_children_async: CFuncPtr7[Ptr[GFile], CString, GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], CString, GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def enumerate_children_async_=(value: CFuncPtr7[Ptr[GFile], CString, GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], CString, GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def enumerate_children_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileEnumerator]] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileEnumerator]]]]
    def enumerate_children_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileEnumerator]]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileEnumerator]]]] = value
    def query_info: CFuncPtr5[Ptr[GFile], CString, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CString, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]]]
    def query_info_=(value: CFuncPtr5[Ptr[GFile], CString, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CString, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]]] = value
    def query_info_async: CFuncPtr7[Ptr[GFile], CString, GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], CString, GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def query_info_async_=(value: CFuncPtr7[Ptr[GFile], CString, GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], CString, GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def query_info_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]]]
    def query_info_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]]] = value
    def query_filesystem_info: CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]]]
    def query_filesystem_info_=(value: CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]]] = value
    def query_filesystem_info_async: CFuncPtr6[Ptr[GFile], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def query_filesystem_info_async_=(value: CFuncPtr6[Ptr[GFile], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def query_filesystem_info_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]]]
    def query_filesystem_info_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]]] = value
    def find_enclosing_mount: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GMount]] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GMount]]]]
    def find_enclosing_mount_=(value: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GMount]]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GMount]]]] = value
    def find_enclosing_mount_async: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(216).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def find_enclosing_mount_async_=(value: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(216).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def find_enclosing_mount_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GMount]] = !struct.at(224).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GMount]]]]
    def find_enclosing_mount_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GMount]]): Unit = !struct.at(224).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GMount]]]] = value
    def set_display_name: CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFile]] = !struct.at(232).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFile]]]]
    def set_display_name_=(value: CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFile]]): Unit = !struct.at(232).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFile]]]] = value
    def set_display_name_async: CFuncPtr6[Ptr[GFile], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(240).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def set_display_name_async_=(value: CFuncPtr6[Ptr[GFile], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(240).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def set_display_name_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFile]] = !struct.at(248).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFile]]]]
    def set_display_name_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFile]]): Unit = !struct.at(248).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFile]]]] = value
    def query_settable_attributes: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileAttributeInfoList]] = !struct.at(256).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileAttributeInfoList]]]]
    def query_settable_attributes_=(value: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileAttributeInfoList]]): Unit = !struct.at(256).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileAttributeInfoList]]]] = value
    def _query_settable_attributes_async: CFuncPtr0[Unit] = !struct.at(264).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _query_settable_attributes_async_=(value: CFuncPtr0[Unit]): Unit = !struct.at(264).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _query_settable_attributes_finish: CFuncPtr0[Unit] = !struct.at(272).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _query_settable_attributes_finish_=(value: CFuncPtr0[Unit]): Unit = !struct.at(272).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def query_writable_namespaces: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileAttributeInfoList]] = !struct.at(280).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileAttributeInfoList]]]]
    def query_writable_namespaces_=(value: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileAttributeInfoList]]): Unit = !struct.at(280).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileAttributeInfoList]]]] = value
    def _query_writable_namespaces_async: CFuncPtr0[Unit] = !struct.at(288).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _query_writable_namespaces_async_=(value: CFuncPtr0[Unit]): Unit = !struct.at(288).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _query_writable_namespaces_finish: CFuncPtr0[Unit] = !struct.at(296).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _query_writable_namespaces_finish_=(value: CFuncPtr0[Unit]): Unit = !struct.at(296).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def set_attribute: CFuncPtr7[Ptr[GFile], CString, GFileAttributeType, gpointer, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(304).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], CString, GFileAttributeType, gpointer, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def set_attribute_=(value: CFuncPtr7[Ptr[GFile], CString, GFileAttributeType, gpointer, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(304).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], CString, GFileAttributeType, gpointer, GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def set_attributes_from_info: CFuncPtr5[Ptr[GFile], Ptr[GFileInfo], GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(312).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], Ptr[GFileInfo], GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def set_attributes_from_info_=(value: CFuncPtr5[Ptr[GFile], Ptr[GFileInfo], GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(312).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], Ptr[GFileInfo], GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def set_attributes_async: CFuncPtr7[Ptr[GFile], Ptr[GFileInfo], GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(320).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], Ptr[GFileInfo], GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def set_attributes_async_=(value: CFuncPtr7[Ptr[GFile], Ptr[GFileInfo], GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(320).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], Ptr[GFileInfo], GFileQueryInfoFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def set_attributes_finish: CFuncPtr4[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GFileInfo]], Ptr[Ptr[GError]], gboolean] = !struct.at(328).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GFileInfo]], Ptr[Ptr[GError]], gboolean]]]
    def set_attributes_finish_=(value: CFuncPtr4[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GFileInfo]], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(328).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GFileInfo]], Ptr[Ptr[GError]], gboolean]]] = value
    def read_fn: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInputStream]] = !struct.at(336).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInputStream]]]]
    def read_fn_=(value: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInputStream]]): Unit = !struct.at(336).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInputStream]]]] = value
    def read_async: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(344).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def read_async_=(value: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(344).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def read_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInputStream]] = !struct.at(352).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInputStream]]]]
    def read_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInputStream]]): Unit = !struct.at(352).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInputStream]]]] = value
    def append_to: CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]] = !struct.at(360).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]]
    def append_to_=(value: CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]): Unit = !struct.at(360).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]] = value
    def append_to_async: CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(368).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def append_to_async_=(value: CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(368).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def append_to_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]] = !struct.at(376).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]]
    def append_to_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]): Unit = !struct.at(376).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]] = value
    def create: CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]] = !struct.at(384).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]]
    def create_=(value: CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]): Unit = !struct.at(384).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]] = value
    def create_async: CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(392).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def create_async_=(value: CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(392).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def create_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]] = !struct.at(400).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]]
    def create_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]): Unit = !struct.at(400).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]] = value
    def replace: CFuncPtr6[Ptr[GFile], CString, gboolean, GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]] = !struct.at(408).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], CString, gboolean, GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]]
    def replace_=(value: CFuncPtr6[Ptr[GFile], CString, gboolean, GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]): Unit = !struct.at(408).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], CString, gboolean, GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]] = value
    def replace_async: CFuncPtr8[Ptr[GFile], CString, gboolean, GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(416).asInstanceOf[Ptr[CFuncPtr8[Ptr[GFile], CString, gboolean, GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def replace_async_=(value: CFuncPtr8[Ptr[GFile], CString, gboolean, GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(416).asInstanceOf[Ptr[CFuncPtr8[Ptr[GFile], CString, gboolean, GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def replace_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]] = !struct.at(424).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]]
    def replace_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]): Unit = !struct.at(424).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileOutputStream]]]] = value
    def delete_file: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(432).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def delete_file_=(value: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(432).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def delete_file_async: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(440).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def delete_file_async_=(value: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(440).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def delete_file_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(448).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def delete_file_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(448).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def trash: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(456).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def trash_=(value: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(456).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def trash_async: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(464).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def trash_async_=(value: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(464).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def trash_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(472).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def trash_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(472).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def make_directory: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(480).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def make_directory_=(value: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(480).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def make_directory_async: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(488).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def make_directory_async_=(value: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(488).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def make_directory_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(496).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def make_directory_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(496).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def make_symbolic_link: CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = !struct.at(504).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]]
    def make_symbolic_link_=(value: CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(504).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], CString, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]] = value
    def _make_symbolic_link_async: CFuncPtr0[Unit] = !struct.at(512).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _make_symbolic_link_async_=(value: CFuncPtr0[Unit]): Unit = !struct.at(512).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _make_symbolic_link_finish: CFuncPtr0[Unit] = !struct.at(520).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _make_symbolic_link_finish_=(value: CFuncPtr0[Unit]): Unit = !struct.at(520).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def copy: CFuncPtr7[Ptr[GFile], Ptr[GFile], GFileCopyFlags, Ptr[GCancellable], GFileProgressCallback, gpointer, Ptr[Ptr[GError]], gboolean] = !struct.at(528).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], Ptr[GFile], GFileCopyFlags, Ptr[GCancellable], GFileProgressCallback, gpointer, Ptr[Ptr[GError]], gboolean]]]
    def copy_=(value: CFuncPtr7[Ptr[GFile], Ptr[GFile], GFileCopyFlags, Ptr[GCancellable], GFileProgressCallback, gpointer, Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(528).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], Ptr[GFile], GFileCopyFlags, Ptr[GCancellable], GFileProgressCallback, gpointer, Ptr[Ptr[GError]], gboolean]]] = value
    def copy_async: CFuncPtr9[Ptr[GFile], Ptr[GFile], GFileCopyFlags, CInt, Ptr[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit] = !struct.at(536).asInstanceOf[Ptr[CFuncPtr9[Ptr[GFile], Ptr[GFile], GFileCopyFlags, CInt, Ptr[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit]]]
    def copy_async_=(value: CFuncPtr9[Ptr[GFile], Ptr[GFile], GFileCopyFlags, CInt, Ptr[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(536).asInstanceOf[Ptr[CFuncPtr9[Ptr[GFile], Ptr[GFile], GFileCopyFlags, CInt, Ptr[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit]]] = value
    def copy_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(544).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def copy_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(544).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def move: CFuncPtr7[Ptr[GFile], Ptr[GFile], GFileCopyFlags, Ptr[GCancellable], GFileProgressCallback, gpointer, Ptr[Ptr[GError]], gboolean] = !struct.at(552).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], Ptr[GFile], GFileCopyFlags, Ptr[GCancellable], GFileProgressCallback, gpointer, Ptr[Ptr[GError]], gboolean]]]
    def move_=(value: CFuncPtr7[Ptr[GFile], Ptr[GFile], GFileCopyFlags, Ptr[GCancellable], GFileProgressCallback, gpointer, Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(552).asInstanceOf[Ptr[CFuncPtr7[Ptr[GFile], Ptr[GFile], GFileCopyFlags, Ptr[GCancellable], GFileProgressCallback, gpointer, Ptr[Ptr[GError]], gboolean]]] = value
    def move_async: CFuncPtr9[Ptr[GFile], Ptr[GFile], GFileCopyFlags, CInt, Ptr[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit] = !struct.at(560).asInstanceOf[Ptr[CFuncPtr9[Ptr[GFile], Ptr[GFile], GFileCopyFlags, CInt, Ptr[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit]]]
    def move_async_=(value: CFuncPtr9[Ptr[GFile], Ptr[GFile], GFileCopyFlags, CInt, Ptr[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(560).asInstanceOf[Ptr[CFuncPtr9[Ptr[GFile], Ptr[GFile], GFileCopyFlags, CInt, Ptr[GCancellable], GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit]]] = value
    def move_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(568).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def move_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(568).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def mount_mountable: CFuncPtr6[Ptr[GFile], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(576).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def mount_mountable_=(value: CFuncPtr6[Ptr[GFile], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(576).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def mount_mountable_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFile]] = !struct.at(584).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFile]]]]
    def mount_mountable_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFile]]): Unit = !struct.at(584).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFile]]]] = value
    def unmount_mountable: CFuncPtr5[Ptr[GFile], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(592).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def unmount_mountable_=(value: CFuncPtr5[Ptr[GFile], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(592).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def unmount_mountable_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(600).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def unmount_mountable_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(600).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def eject_mountable: CFuncPtr5[Ptr[GFile], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(608).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def eject_mountable_=(value: CFuncPtr5[Ptr[GFile], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(608).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def eject_mountable_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(616).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def eject_mountable_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(616).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def mount_enclosing_volume: CFuncPtr6[Ptr[GFile], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(624).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def mount_enclosing_volume_=(value: CFuncPtr6[Ptr[GFile], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(624).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def mount_enclosing_volume_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(632).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def mount_enclosing_volume_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(632).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def monitor_dir: CFuncPtr4[Ptr[GFile], GFileMonitorFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileMonitor]] = !struct.at(640).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], GFileMonitorFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileMonitor]]]]
    def monitor_dir_=(value: CFuncPtr4[Ptr[GFile], GFileMonitorFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileMonitor]]): Unit = !struct.at(640).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], GFileMonitorFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileMonitor]]]] = value
    def monitor_file: CFuncPtr4[Ptr[GFile], GFileMonitorFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileMonitor]] = !struct.at(648).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], GFileMonitorFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileMonitor]]]]
    def monitor_file_=(value: CFuncPtr4[Ptr[GFile], GFileMonitorFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileMonitor]]): Unit = !struct.at(648).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], GFileMonitorFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileMonitor]]]] = value
    def open_readwrite: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]] = !struct.at(656).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]]
    def open_readwrite_=(value: CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]]): Unit = !struct.at(656).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]] = value
    def open_readwrite_async: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(664).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def open_readwrite_async_=(value: CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(664).asInstanceOf[Ptr[CFuncPtr5[Ptr[GFile], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def open_readwrite_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]] = !struct.at(672).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]]
    def open_readwrite_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]]): Unit = !struct.at(672).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]] = value
    def create_readwrite: CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]] = !struct.at(680).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]]
    def create_readwrite_=(value: CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]]): Unit = !struct.at(680).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]] = value
    def create_readwrite_async: CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(688).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def create_readwrite_async_=(value: CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(688).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def create_readwrite_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]] = !struct.at(696).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]]
    def create_readwrite_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]]): Unit = !struct.at(696).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]] = value
    def replace_readwrite: CFuncPtr6[Ptr[GFile], CString, gboolean, GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]] = !struct.at(704).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], CString, gboolean, GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]]
    def replace_readwrite_=(value: CFuncPtr6[Ptr[GFile], CString, gboolean, GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]]): Unit = !struct.at(704).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], CString, gboolean, GFileCreateFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]] = value
    def replace_readwrite_async: CFuncPtr8[Ptr[GFile], CString, gboolean, GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(712).asInstanceOf[Ptr[CFuncPtr8[Ptr[GFile], CString, gboolean, GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def replace_readwrite_async_=(value: CFuncPtr8[Ptr[GFile], CString, gboolean, GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(712).asInstanceOf[Ptr[CFuncPtr8[Ptr[GFile], CString, gboolean, GFileCreateFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def replace_readwrite_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]] = !struct.at(720).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]]
    def replace_readwrite_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]]): Unit = !struct.at(720).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileIOStream]]]] = value
    def start_mountable: CFuncPtr6[Ptr[GFile], GDriveStartFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(728).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GDriveStartFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def start_mountable_=(value: CFuncPtr6[Ptr[GFile], GDriveStartFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(728).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GDriveStartFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def start_mountable_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(736).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def start_mountable_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(736).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def stop_mountable: CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(744).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def stop_mountable_=(value: CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(744).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def stop_mountable_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(752).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def stop_mountable_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(752).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def supports_thread_contexts: gboolean = !struct.at(760).asInstanceOf[Ptr[gboolean]]
    def supports_thread_contexts_=(value: gboolean): Unit = !struct.at(760).asInstanceOf[Ptr[gboolean]] = value
    def unmount_mountable_with_operation: CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(768).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def unmount_mountable_with_operation_=(value: CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(768).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def unmount_mountable_with_operation_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(776).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def unmount_mountable_with_operation_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(776).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def eject_mountable_with_operation: CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(784).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def eject_mountable_with_operation_=(value: CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(784).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def eject_mountable_with_operation_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(792).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def eject_mountable_with_operation_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(792).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def poll_mountable: CFuncPtr4[Ptr[GFile], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(800).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def poll_mountable_=(value: CFuncPtr4[Ptr[GFile], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(800).asInstanceOf[Ptr[CFuncPtr4[Ptr[GFile], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def poll_mountable_finish: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(808).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def poll_mountable_finish_=(value: CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(808).asInstanceOf[Ptr[CFuncPtr3[Ptr[GFile], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def measure_disk_usage: CFuncPtr9[Ptr[GFile], GFileMeasureFlags, Ptr[GCancellable], GFileMeasureProgressCallback, gpointer, Ptr[guint64], Ptr[guint64], Ptr[guint64], Ptr[Ptr[GError]], gboolean] = !struct.at(816).asInstanceOf[Ptr[CFuncPtr9[Ptr[GFile], GFileMeasureFlags, Ptr[GCancellable], GFileMeasureProgressCallback, gpointer, Ptr[guint64], Ptr[guint64], Ptr[guint64], Ptr[Ptr[GError]], gboolean]]]
    def measure_disk_usage_=(value: CFuncPtr9[Ptr[GFile], GFileMeasureFlags, Ptr[GCancellable], GFileMeasureProgressCallback, gpointer, Ptr[guint64], Ptr[guint64], Ptr[guint64], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(816).asInstanceOf[Ptr[CFuncPtr9[Ptr[GFile], GFileMeasureFlags, Ptr[GCancellable], GFileMeasureProgressCallback, gpointer, Ptr[guint64], Ptr[guint64], Ptr[guint64], Ptr[Ptr[GError]], gboolean]]] = value
    def measure_disk_usage_async: CFuncPtr8[Ptr[GFile], GFileMeasureFlags, gint, Ptr[GCancellable], GFileMeasureProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit] = !struct.at(824).asInstanceOf[Ptr[CFuncPtr8[Ptr[GFile], GFileMeasureFlags, gint, Ptr[GCancellable], GFileMeasureProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit]]]
    def measure_disk_usage_async_=(value: CFuncPtr8[Ptr[GFile], GFileMeasureFlags, gint, Ptr[GCancellable], GFileMeasureProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(824).asInstanceOf[Ptr[CFuncPtr8[Ptr[GFile], GFileMeasureFlags, gint, Ptr[GCancellable], GFileMeasureProgressCallback, gpointer, GAsyncReadyCallback, gpointer, Unit]]] = value
    def measure_disk_usage_finish: CFuncPtr6[Ptr[GFile], Ptr[GAsyncResult], Ptr[guint64], Ptr[guint64], Ptr[guint64], Ptr[Ptr[GError]], gboolean] = !struct.at(832).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], Ptr[GAsyncResult], Ptr[guint64], Ptr[guint64], Ptr[guint64], Ptr[Ptr[GError]], gboolean]]]
    def measure_disk_usage_finish_=(value: CFuncPtr6[Ptr[GFile], Ptr[GAsyncResult], Ptr[guint64], Ptr[guint64], Ptr[guint64], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(832).asInstanceOf[Ptr[CFuncPtr6[Ptr[GFile], Ptr[GAsyncResult], Ptr[guint64], Ptr[guint64], Ptr[guint64], Ptr[Ptr[GError]], gboolean]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GFileInfo = CStruct0
object _GFileInfo:
  given _tag: Tag[_GFileInfo] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
*/
opaque type _GFileInfoClass = CStruct0
object _GFileInfoClass:
  given _tag: Tag[_GFileInfoClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileinputstream.h
*/
opaque type _GFileInputStream = CStruct2[GInputStream, Ptr[GFileInputStreamPrivate]]
object _GFileInputStream:
  given _tag: Tag[_GFileInputStream] = Tag.materializeCStruct2Tag[GInputStream, Ptr[GFileInputStreamPrivate]]
  def apply()(using Zone): Ptr[_GFileInputStream] = scala.scalanative.unsafe.alloc[_GFileInputStream](1)
  def apply(parent_instance : GInputStream, priv : Ptr[GFileInputStreamPrivate])(using Zone): Ptr[_GFileInputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GFileInputStream)
    def parent_instance : GInputStream = struct._1
    def parent_instance_=(value: GInputStream): Unit = !struct.at1 = value
    def priv : Ptr[GFileInputStreamPrivate] = struct._2
    def priv_=(value: Ptr[GFileInputStreamPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileinputstream.h
*/
opaque type _GFileInputStreamClass = CStruct12[GInputStreamClass, CFuncPtr1[Ptr[GFileInputStream], goffset], CFuncPtr1[Ptr[GFileInputStream], gboolean], CFuncPtr5[Ptr[GFileInputStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr4[Ptr[GFileInputStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]], CFuncPtr6[Ptr[GFileInputStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GFileInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GFileInputStreamClass:
  given _tag: Tag[_GFileInputStreamClass] = Tag.materializeCStruct12Tag[GInputStreamClass, CFuncPtr1[Ptr[GFileInputStream], goffset], CFuncPtr1[Ptr[GFileInputStream], gboolean], CFuncPtr5[Ptr[GFileInputStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr4[Ptr[GFileInputStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]], CFuncPtr6[Ptr[GFileInputStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GFileInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GFileInputStreamClass] = scala.scalanative.unsafe.alloc[_GFileInputStreamClass](1)
  def apply(parent_class : GInputStreamClass, tell : CFuncPtr1[Ptr[GFileInputStream], goffset], can_seek : CFuncPtr1[Ptr[GFileInputStream], gboolean], seek : CFuncPtr5[Ptr[GFileInputStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], query_info : CFuncPtr4[Ptr[GFileInputStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]], query_info_async : CFuncPtr6[Ptr[GFileInputStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], query_info_finish : CFuncPtr3[Ptr[GFileInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[_GFileInputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).tell = tell
    (!____ptr).can_seek = can_seek
    (!____ptr).seek = seek
    (!____ptr).query_info = query_info
    (!____ptr).query_info_async = query_info_async
    (!____ptr).query_info_finish = query_info_finish
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: _GFileInputStreamClass)
    def parent_class : GInputStreamClass = struct._1
    def parent_class_=(value: GInputStreamClass): Unit = !struct.at1 = value
    def tell : CFuncPtr1[Ptr[GFileInputStream], goffset] = struct._2
    def tell_=(value: CFuncPtr1[Ptr[GFileInputStream], goffset]): Unit = !struct.at2 = value
    def can_seek : CFuncPtr1[Ptr[GFileInputStream], gboolean] = struct._3
    def can_seek_=(value: CFuncPtr1[Ptr[GFileInputStream], gboolean]): Unit = !struct.at3 = value
    def seek : CFuncPtr5[Ptr[GFileInputStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._4
    def seek_=(value: CFuncPtr5[Ptr[GFileInputStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at4 = value
    def query_info : CFuncPtr4[Ptr[GFileInputStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]] = struct._5
    def query_info_=(value: CFuncPtr4[Ptr[GFileInputStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at5 = value
    def query_info_async : CFuncPtr6[Ptr[GFileInputStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._6
    def query_info_async_=(value: CFuncPtr6[Ptr[GFileInputStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at6 = value
    def query_info_finish : CFuncPtr3[Ptr[GFileInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]] = struct._7
    def query_info_finish_=(value: CFuncPtr3[Ptr[GFileInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at7 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._8
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at8 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._9
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at9 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._10
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at10 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._11
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at11 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._12
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at12 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileinputstream.h
*/
opaque type _GFileInputStreamPrivate = CStruct0
object _GFileInputStreamPrivate:
  given _tag: Tag[_GFileInputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * GFileMonitor:

 * [bindgen] header: /usr/include/glib-2.0/gio/gfilemonitor.h
*/
opaque type _GFileMonitor = CStruct2[GObject, Ptr[GFileMonitorPrivate]]
object _GFileMonitor:
  given _tag: Tag[_GFileMonitor] = Tag.materializeCStruct2Tag[GObject, Ptr[GFileMonitorPrivate]]
  def apply()(using Zone): Ptr[_GFileMonitor] = scala.scalanative.unsafe.alloc[_GFileMonitor](1)
  def apply(parent_instance : GObject, priv : Ptr[GFileMonitorPrivate])(using Zone): Ptr[_GFileMonitor] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GFileMonitor)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GFileMonitorPrivate] = struct._2
    def priv_=(value: Ptr[GFileMonitorPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfilemonitor.h
*/
opaque type _GFileMonitorClass = CStruct8[GObjectClass, CFuncPtr4[Ptr[GFileMonitor], Ptr[GFile], Ptr[GFile], GFileMonitorEvent, Unit], CFuncPtr1[Ptr[GFileMonitor], gboolean], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GFileMonitorClass:
  given _tag: Tag[_GFileMonitorClass] = Tag.materializeCStruct8Tag[GObjectClass, CFuncPtr4[Ptr[GFileMonitor], Ptr[GFile], Ptr[GFile], GFileMonitorEvent, Unit], CFuncPtr1[Ptr[GFileMonitor], gboolean], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GFileMonitorClass] = scala.scalanative.unsafe.alloc[_GFileMonitorClass](1)
  def apply(parent_class : GObjectClass, changed : CFuncPtr4[Ptr[GFileMonitor], Ptr[GFile], Ptr[GFile], GFileMonitorEvent, Unit], cancel : CFuncPtr1[Ptr[GFileMonitor], gboolean], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[_GFileMonitorClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).changed = changed
    (!____ptr).cancel = cancel
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: _GFileMonitorClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def changed : CFuncPtr4[Ptr[GFileMonitor], Ptr[GFile], Ptr[GFile], GFileMonitorEvent, Unit] = struct._2
    def changed_=(value: CFuncPtr4[Ptr[GFileMonitor], Ptr[GFile], Ptr[GFile], GFileMonitorEvent, Unit]): Unit = !struct.at2 = value
    def cancel : CFuncPtr1[Ptr[GFileMonitor], gboolean] = struct._3
    def cancel_=(value: CFuncPtr1[Ptr[GFileMonitor], gboolean]): Unit = !struct.at3 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._4
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at4 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._5
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at5 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._6
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at6 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._7
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at7 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._8
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at8 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfilemonitor.h
*/
opaque type _GFileMonitorPrivate = CStruct0
object _GFileMonitorPrivate:
  given _tag: Tag[_GFileMonitorPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileoutputstream.h
*/
opaque type _GFileOutputStream = CStruct2[GOutputStream, Ptr[GFileOutputStreamPrivate]]
object _GFileOutputStream:
  given _tag: Tag[_GFileOutputStream] = Tag.materializeCStruct2Tag[GOutputStream, Ptr[GFileOutputStreamPrivate]]
  def apply()(using Zone): Ptr[_GFileOutputStream] = scala.scalanative.unsafe.alloc[_GFileOutputStream](1)
  def apply(parent_instance : GOutputStream, priv : Ptr[GFileOutputStreamPrivate])(using Zone): Ptr[_GFileOutputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GFileOutputStream)
    def parent_instance : GOutputStream = struct._1
    def parent_instance_=(value: GOutputStream): Unit = !struct.at1 = value
    def priv : Ptr[GFileOutputStreamPrivate] = struct._2
    def priv_=(value: Ptr[GFileOutputStreamPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileoutputstream.h
*/
opaque type _GFileOutputStreamClass = CStruct15[GOutputStreamClass, CFuncPtr1[Ptr[GFileOutputStream], goffset], CFuncPtr1[Ptr[GFileOutputStream], gboolean], CFuncPtr5[Ptr[GFileOutputStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr1[Ptr[GFileOutputStream], gboolean], CFuncPtr4[Ptr[GFileOutputStream], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr4[Ptr[GFileOutputStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]], CFuncPtr6[Ptr[GFileOutputStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GFileOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]], CFuncPtr1[Ptr[GFileOutputStream], CString], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GFileOutputStreamClass:
  given _tag: Tag[_GFileOutputStreamClass] = Tag.materializeCStruct15Tag[GOutputStreamClass, CFuncPtr1[Ptr[GFileOutputStream], goffset], CFuncPtr1[Ptr[GFileOutputStream], gboolean], CFuncPtr5[Ptr[GFileOutputStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr1[Ptr[GFileOutputStream], gboolean], CFuncPtr4[Ptr[GFileOutputStream], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr4[Ptr[GFileOutputStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]], CFuncPtr6[Ptr[GFileOutputStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GFileOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]], CFuncPtr1[Ptr[GFileOutputStream], CString], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GFileOutputStreamClass] = scala.scalanative.unsafe.alloc[_GFileOutputStreamClass](1)
  def apply(parent_class : GOutputStreamClass, tell : CFuncPtr1[Ptr[GFileOutputStream], goffset], can_seek : CFuncPtr1[Ptr[GFileOutputStream], gboolean], seek : CFuncPtr5[Ptr[GFileOutputStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], can_truncate : CFuncPtr1[Ptr[GFileOutputStream], gboolean], truncate_fn : CFuncPtr4[Ptr[GFileOutputStream], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], query_info : CFuncPtr4[Ptr[GFileOutputStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]], query_info_async : CFuncPtr6[Ptr[GFileOutputStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], query_info_finish : CFuncPtr3[Ptr[GFileOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]], get_etag : CFuncPtr1[Ptr[GFileOutputStream], CString], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[_GFileOutputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).tell = tell
    (!____ptr).can_seek = can_seek
    (!____ptr).seek = seek
    (!____ptr).can_truncate = can_truncate
    (!____ptr).truncate_fn = truncate_fn
    (!____ptr).query_info = query_info
    (!____ptr).query_info_async = query_info_async
    (!____ptr).query_info_finish = query_info_finish
    (!____ptr).get_etag = get_etag
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: _GFileOutputStreamClass)
    def parent_class : GOutputStreamClass = struct._1
    def parent_class_=(value: GOutputStreamClass): Unit = !struct.at1 = value
    def tell : CFuncPtr1[Ptr[GFileOutputStream], goffset] = struct._2
    def tell_=(value: CFuncPtr1[Ptr[GFileOutputStream], goffset]): Unit = !struct.at2 = value
    def can_seek : CFuncPtr1[Ptr[GFileOutputStream], gboolean] = struct._3
    def can_seek_=(value: CFuncPtr1[Ptr[GFileOutputStream], gboolean]): Unit = !struct.at3 = value
    def seek : CFuncPtr5[Ptr[GFileOutputStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._4
    def seek_=(value: CFuncPtr5[Ptr[GFileOutputStream], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at4 = value
    def can_truncate : CFuncPtr1[Ptr[GFileOutputStream], gboolean] = struct._5
    def can_truncate_=(value: CFuncPtr1[Ptr[GFileOutputStream], gboolean]): Unit = !struct.at5 = value
    def truncate_fn : CFuncPtr4[Ptr[GFileOutputStream], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._6
    def truncate_fn_=(value: CFuncPtr4[Ptr[GFileOutputStream], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at6 = value
    def query_info : CFuncPtr4[Ptr[GFileOutputStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]] = struct._7
    def query_info_=(value: CFuncPtr4[Ptr[GFileOutputStream], CString, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at7 = value
    def query_info_async : CFuncPtr6[Ptr[GFileOutputStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._8
    def query_info_async_=(value: CFuncPtr6[Ptr[GFileOutputStream], CString, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at8 = value
    def query_info_finish : CFuncPtr3[Ptr[GFileOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]] = struct._9
    def query_info_finish_=(value: CFuncPtr3[Ptr[GFileOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GFileInfo]]): Unit = !struct.at9 = value
    def get_etag : CFuncPtr1[Ptr[GFileOutputStream], CString] = struct._10
    def get_etag_=(value: CFuncPtr1[Ptr[GFileOutputStream], CString]): Unit = !struct.at10 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._11
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at11 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._12
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at12 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._13
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at13 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._14
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at14 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._15
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at15 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfileoutputstream.h
*/
opaque type _GFileOutputStreamPrivate = CStruct0
object _GFileOutputStreamPrivate:
  given _tag: Tag[_GFileOutputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GFilenameCompleter = CStruct0
object _GFilenameCompleter:
  given _tag: Tag[_GFilenameCompleter] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfilenamecompleter.h
*/
opaque type _GFilenameCompleterClass = CStruct5[GObjectClass, CFuncPtr1[Ptr[GFilenameCompleter], Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GFilenameCompleterClass:
  given _tag: Tag[_GFilenameCompleterClass] = Tag.materializeCStruct5Tag[GObjectClass, CFuncPtr1[Ptr[GFilenameCompleter], Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GFilenameCompleterClass] = scala.scalanative.unsafe.alloc[_GFilenameCompleterClass](1)
  def apply(parent_class : GObjectClass, got_completion_data : CFuncPtr1[Ptr[GFilenameCompleter], Unit], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit])(using Zone): Ptr[_GFilenameCompleterClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).got_completion_data = got_completion_data
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    ____ptr
  extension (struct: _GFilenameCompleterClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def got_completion_data : CFuncPtr1[Ptr[GFilenameCompleter], Unit] = struct._2
    def got_completion_data_=(value: CFuncPtr1[Ptr[GFilenameCompleter], Unit]): Unit = !struct.at2 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._3
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at3 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._4
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at4 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._5
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at5 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfilterinputstream.h
*/
opaque type _GFilterInputStream = CStruct2[GInputStream, Ptr[GInputStream]]
object _GFilterInputStream:
  given _tag: Tag[_GFilterInputStream] = Tag.materializeCStruct2Tag[GInputStream, Ptr[GInputStream]]
  def apply()(using Zone): Ptr[_GFilterInputStream] = scala.scalanative.unsafe.alloc[_GFilterInputStream](1)
  def apply(parent_instance : GInputStream, base_stream : Ptr[GInputStream])(using Zone): Ptr[_GFilterInputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).base_stream = base_stream
    ____ptr
  extension (struct: _GFilterInputStream)
    def parent_instance : GInputStream = struct._1
    def parent_instance_=(value: GInputStream): Unit = !struct.at1 = value
    def base_stream : Ptr[GInputStream] = struct._2
    def base_stream_=(value: Ptr[GInputStream]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfilterinputstream.h
*/
opaque type _GFilterInputStreamClass = CStruct4[GInputStreamClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GFilterInputStreamClass:
  given _tag: Tag[_GFilterInputStreamClass] = Tag.materializeCStruct4Tag[GInputStreamClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GFilterInputStreamClass] = scala.scalanative.unsafe.alloc[_GFilterInputStreamClass](1)
  def apply(parent_class : GInputStreamClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit])(using Zone): Ptr[_GFilterInputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    ____ptr
  extension (struct: _GFilterInputStreamClass)
    def parent_class : GInputStreamClass = struct._1
    def parent_class_=(value: GInputStreamClass): Unit = !struct.at1 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._2
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at2 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._3
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at3 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._4
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at4 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfilteroutputstream.h
*/
opaque type _GFilterOutputStream = CStruct2[GOutputStream, Ptr[GOutputStream]]
object _GFilterOutputStream:
  given _tag: Tag[_GFilterOutputStream] = Tag.materializeCStruct2Tag[GOutputStream, Ptr[GOutputStream]]
  def apply()(using Zone): Ptr[_GFilterOutputStream] = scala.scalanative.unsafe.alloc[_GFilterOutputStream](1)
  def apply(parent_instance : GOutputStream, base_stream : Ptr[GOutputStream])(using Zone): Ptr[_GFilterOutputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).base_stream = base_stream
    ____ptr
  extension (struct: _GFilterOutputStream)
    def parent_instance : GOutputStream = struct._1
    def parent_instance_=(value: GOutputStream): Unit = !struct.at1 = value
    def base_stream : Ptr[GOutputStream] = struct._2
    def base_stream_=(value: Ptr[GOutputStream]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gfilteroutputstream.h
*/
opaque type _GFilterOutputStreamClass = CStruct4[GOutputStreamClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GFilterOutputStreamClass:
  given _tag: Tag[_GFilterOutputStreamClass] = Tag.materializeCStruct4Tag[GOutputStreamClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GFilterOutputStreamClass] = scala.scalanative.unsafe.alloc[_GFilterOutputStreamClass](1)
  def apply(parent_class : GOutputStreamClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit])(using Zone): Ptr[_GFilterOutputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    ____ptr
  extension (struct: _GFilterOutputStreamClass)
    def parent_class : GOutputStreamClass = struct._1
    def parent_class_=(value: GOutputStreamClass): Unit = !struct.at1 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._2
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at2 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._3
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at3 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._4
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at4 = value

/**
 * GFlagsClass: _type_class: the parent class : a mask covering all possible values. _values: the number of possible values. : an array of #GFlagsValue structs describing the individual values.

 * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
*/
opaque type _GFlagsClass = CStruct4[GTypeClass, guint, guint, Ptr[GFlagsValue]]
object _GFlagsClass:
  given _tag: Tag[_GFlagsClass] = Tag.materializeCStruct4Tag[GTypeClass, guint, guint, Ptr[GFlagsValue]]
  def apply()(using Zone): Ptr[_GFlagsClass] = scala.scalanative.unsafe.alloc[_GFlagsClass](1)
  def apply(g_type_class : GTypeClass, mask : guint, n_values : guint, values : Ptr[GFlagsValue])(using Zone): Ptr[_GFlagsClass] = 
    val ____ptr = apply()
    (!____ptr).g_type_class = g_type_class
    (!____ptr).mask = mask
    (!____ptr).n_values = n_values
    (!____ptr).values = values
    ____ptr
  extension (struct: _GFlagsClass)
    def g_type_class : GTypeClass = struct._1
    def g_type_class_=(value: GTypeClass): Unit = !struct.at1 = value
    def mask : guint = struct._2
    def mask_=(value: guint): Unit = !struct.at2 = value
    def n_values : guint = struct._3
    def n_values_=(value: guint): Unit = !struct.at3 = value
    def values : Ptr[GFlagsValue] = struct._4
    def values_=(value: Ptr[GFlagsValue]): Unit = !struct.at4 = value

/**
 * GFlagsValue: : the flags value _name: the name of the value _nick: the nickname of the value

 * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
*/
opaque type _GFlagsValue = CStruct3[guint, Ptr[gchar], Ptr[gchar]]
object _GFlagsValue:
  given _tag: Tag[_GFlagsValue] = Tag.materializeCStruct3Tag[guint, Ptr[gchar], Ptr[gchar]]
  def apply()(using Zone): Ptr[_GFlagsValue] = scala.scalanative.unsafe.alloc[_GFlagsValue](1)
  def apply(value : guint, value_name : Ptr[gchar], value_nick : Ptr[gchar])(using Zone): Ptr[_GFlagsValue] = 
    val ____ptr = apply()
    (!____ptr).value = value
    (!____ptr).value_name = value_name
    (!____ptr).value_nick = value_nick
    ____ptr
  extension (struct: _GFlagsValue)
    def value : guint = struct._1
    def value_=(value: guint): Unit = !struct.at1 = value
    def value_name : Ptr[gchar] = struct._2
    def value_name_=(value: Ptr[gchar]): Unit = !struct.at2 = value
    def value_nick : Ptr[gchar] = struct._3
    def value_nick_=(value: Ptr[gchar]): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
*/
opaque type _GHashTable = CStruct0
object _GHashTable:
  given _tag: Tag[_GHashTable] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
*/
opaque type _GHashTableIter = CStruct6[gpointer, gpointer, gpointer, CInt, gboolean, gpointer]
object _GHashTableIter:
  given _tag: Tag[_GHashTableIter] = Tag.materializeCStruct6Tag[gpointer, gpointer, gpointer, CInt, gboolean, gpointer]
  def apply()(using Zone): Ptr[_GHashTableIter] = scala.scalanative.unsafe.alloc[_GHashTableIter](1)
  def apply(dummy1 : gpointer, dummy2 : gpointer, dummy3 : gpointer, dummy4 : CInt, dummy5 : gboolean, dummy6 : gpointer)(using Zone): Ptr[_GHashTableIter] = 
    val ____ptr = apply()
    (!____ptr).dummy1 = dummy1
    (!____ptr).dummy2 = dummy2
    (!____ptr).dummy3 = dummy3
    (!____ptr).dummy4 = dummy4
    (!____ptr).dummy5 = dummy5
    (!____ptr).dummy6 = dummy6
    ____ptr
  extension (struct: _GHashTableIter)
    def dummy1 : gpointer = struct._1
    def dummy1_=(value: gpointer): Unit = !struct.at1 = value
    def dummy2 : gpointer = struct._2
    def dummy2_=(value: gpointer): Unit = !struct.at2 = value
    def dummy3 : gpointer = struct._3
    def dummy3_=(value: gpointer): Unit = !struct.at3 = value
    def dummy4 : CInt = struct._4
    def dummy4_=(value: CInt): Unit = !struct.at4 = value
    def dummy5 : gboolean = struct._5
    def dummy5_=(value: gboolean): Unit = !struct.at5 = value
    def dummy6 : gpointer = struct._6
    def dummy6_=(value: gpointer): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/ghmac.h
*/
opaque type _GHmac = CStruct0
object _GHmac:
  given _tag: Tag[_GHmac] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
*/
opaque type _GHook = CStruct8[gpointer, Ptr[Byte], Ptr[Byte], guint, gulong, guint, gpointer, GDestroyNotify]
object _GHook:
  given _tag: Tag[_GHook] = Tag.materializeCStruct8Tag[gpointer, Ptr[Byte], Ptr[Byte], guint, gulong, guint, gpointer, GDestroyNotify]
  def apply()(using Zone): Ptr[_GHook] = scala.scalanative.unsafe.alloc[_GHook](1)
  def apply(data : gpointer, next : Ptr[GHook], prev : Ptr[GHook], ref_count : guint, hook_id : gulong, flags : guint, func : gpointer, destroy : GDestroyNotify)(using Zone): Ptr[_GHook] = 
    val ____ptr = apply()
    (!____ptr).data = data
    (!____ptr).next = next
    (!____ptr).prev = prev
    (!____ptr).ref_count = ref_count
    (!____ptr).hook_id = hook_id
    (!____ptr).flags = flags
    (!____ptr).func = func
    (!____ptr).destroy = destroy
    ____ptr
  extension (struct: _GHook)
    def data : gpointer = struct._1
    def data_=(value: gpointer): Unit = !struct.at1 = value
    def next : Ptr[GHook] = struct._2.asInstanceOf[Ptr[GHook]]
    def next_=(value: Ptr[GHook]): Unit = !struct.at2 = value.asInstanceOf[Ptr[Byte]]
    def prev : Ptr[GHook] = struct._3.asInstanceOf[Ptr[GHook]]
    def prev_=(value: Ptr[GHook]): Unit = !struct.at3 = value.asInstanceOf[Ptr[Byte]]
    def ref_count : guint = struct._4
    def ref_count_=(value: guint): Unit = !struct.at4 = value
    def hook_id : gulong = struct._5
    def hook_id_=(value: gulong): Unit = !struct.at5 = value
    def flags : guint = struct._6
    def flags_=(value: guint): Unit = !struct.at6 = value
    def func : gpointer = struct._7
    def func_=(value: gpointer): Unit = !struct.at7 = value
    def destroy : GDestroyNotify = struct._8
    def destroy_=(value: GDestroyNotify): Unit = !struct.at8 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
*/
opaque type _GHookList = CStruct7[gulong, guint, guint, Ptr[Byte], gpointer, Ptr[Byte], CArray[gpointer, Nat._2]]
object _GHookList:
  given _tag: Tag[_GHookList] = Tag.materializeCStruct7Tag[gulong, guint, guint, Ptr[Byte], gpointer, Ptr[Byte], CArray[gpointer, Nat._2]]
  def apply()(using Zone): Ptr[_GHookList] = scala.scalanative.unsafe.alloc[_GHookList](1)
  def apply(seq_id : gulong, hook_size : guint, is_setup : guint, hooks : Ptr[GHook], dummy3 : gpointer, finalize_hook : GHookFinalizeFunc, dummy : CArray[gpointer, Nat._2])(using Zone): Ptr[_GHookList] = 
    val ____ptr = apply()
    (!____ptr).seq_id = seq_id
    (!____ptr).hook_size = hook_size
    (!____ptr).is_setup = is_setup
    (!____ptr).hooks = hooks
    (!____ptr).dummy3 = dummy3
    (!____ptr).finalize_hook = finalize_hook
    (!____ptr).dummy = dummy
    ____ptr
  extension (struct: _GHookList)
    def seq_id : gulong = struct._1
    def seq_id_=(value: gulong): Unit = !struct.at1 = value
    def hook_size : guint = struct._2
    def hook_size_=(value: guint): Unit = !struct.at2 = value
    def is_setup : guint = struct._3
    def is_setup_=(value: guint): Unit = !struct.at3 = value
    def hooks : Ptr[GHook] = struct._4.asInstanceOf[Ptr[GHook]]
    def hooks_=(value: Ptr[GHook]): Unit = !struct.at4 = value.asInstanceOf[Ptr[Byte]]
    def dummy3 : gpointer = struct._5
    def dummy3_=(value: gpointer): Unit = !struct.at5 = value
    def finalize_hook : GHookFinalizeFunc = struct._6.asInstanceOf[GHookFinalizeFunc]
    def finalize_hook_=(value: GHookFinalizeFunc): Unit = !struct.at6 = value.asInstanceOf[Ptr[Byte]]
    def dummy : CArray[gpointer, Nat._2] = struct._7
    def dummy_=(value: CArray[gpointer, Nat._2]): Unit = !struct.at7 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gconvert.h
*/
opaque type _GIConv = CStruct0
object _GIConv:
  given _tag: Tag[_GIConv] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
*/
opaque type _GIOChannel = CStruct20[gint, Ptr[Byte], Ptr[gchar], GIConv, GIConv, Ptr[gchar], guint, gsize, Ptr[GString], Ptr[GString], Ptr[GString], CArray[gchar, Nat._6], guint, guint, guint, guint, guint, guint, gpointer, gpointer]
object _GIOChannel:
  given _tag: Tag[_GIOChannel] = Tag.materializeCStruct20Tag[gint, Ptr[Byte], Ptr[gchar], GIConv, GIConv, Ptr[gchar], guint, gsize, Ptr[GString], Ptr[GString], Ptr[GString], CArray[gchar, Nat._6], guint, guint, guint, guint, guint, guint, gpointer, gpointer]
  def apply()(using Zone): Ptr[_GIOChannel] = scala.scalanative.unsafe.alloc[_GIOChannel](1)
  def apply(ref_count : gint, funcs : Ptr[GIOFuncs], encoding : Ptr[gchar], read_cd : GIConv, write_cd : GIConv, line_term : Ptr[gchar], line_term_len : guint, buf_size : gsize, read_buf : Ptr[GString], encoded_read_buf : Ptr[GString], write_buf : Ptr[GString], partial_write_buf : CArray[gchar, Nat._6], use_buffer : guint, do_encode : guint, close_on_unref : guint, is_readable : guint, is_writeable : guint, is_seekable : guint, reserved1 : gpointer, reserved2 : gpointer)(using Zone): Ptr[_GIOChannel] = 
    val ____ptr = apply()
    (!____ptr).ref_count = ref_count
    (!____ptr).funcs = funcs
    (!____ptr).encoding = encoding
    (!____ptr).read_cd = read_cd
    (!____ptr).write_cd = write_cd
    (!____ptr).line_term = line_term
    (!____ptr).line_term_len = line_term_len
    (!____ptr).buf_size = buf_size
    (!____ptr).read_buf = read_buf
    (!____ptr).encoded_read_buf = encoded_read_buf
    (!____ptr).write_buf = write_buf
    (!____ptr).partial_write_buf = partial_write_buf
    (!____ptr).use_buffer = use_buffer
    (!____ptr).do_encode = do_encode
    (!____ptr).close_on_unref = close_on_unref
    (!____ptr).is_readable = is_readable
    (!____ptr).is_writeable = is_writeable
    (!____ptr).is_seekable = is_seekable
    (!____ptr).reserved1 = reserved1
    (!____ptr).reserved2 = reserved2
    ____ptr
  extension (struct: _GIOChannel)
    def ref_count : gint = struct._1
    def ref_count_=(value: gint): Unit = !struct.at1 = value
    def funcs : Ptr[GIOFuncs] = struct._2.asInstanceOf[Ptr[GIOFuncs]]
    def funcs_=(value: Ptr[GIOFuncs]): Unit = !struct.at2 = value.asInstanceOf[Ptr[Byte]]
    def encoding : Ptr[gchar] = struct._3
    def encoding_=(value: Ptr[gchar]): Unit = !struct.at3 = value
    def read_cd : GIConv = struct._4
    def read_cd_=(value: GIConv): Unit = !struct.at4 = value
    def write_cd : GIConv = struct._5
    def write_cd_=(value: GIConv): Unit = !struct.at5 = value
    def line_term : Ptr[gchar] = struct._6
    def line_term_=(value: Ptr[gchar]): Unit = !struct.at6 = value
    def line_term_len : guint = struct._7
    def line_term_len_=(value: guint): Unit = !struct.at7 = value
    def buf_size : gsize = struct._8
    def buf_size_=(value: gsize): Unit = !struct.at8 = value
    def read_buf : Ptr[GString] = struct._9
    def read_buf_=(value: Ptr[GString]): Unit = !struct.at9 = value
    def encoded_read_buf : Ptr[GString] = struct._10
    def encoded_read_buf_=(value: Ptr[GString]): Unit = !struct.at10 = value
    def write_buf : Ptr[GString] = struct._11
    def write_buf_=(value: Ptr[GString]): Unit = !struct.at11 = value
    def partial_write_buf : CArray[gchar, Nat._6] = struct._12
    def partial_write_buf_=(value: CArray[gchar, Nat._6]): Unit = !struct.at12 = value
    def use_buffer : guint = struct._13
    def use_buffer_=(value: guint): Unit = !struct.at13 = value
    def do_encode : guint = struct._14
    def do_encode_=(value: guint): Unit = !struct.at14 = value
    def close_on_unref : guint = struct._15
    def close_on_unref_=(value: guint): Unit = !struct.at15 = value
    def is_readable : guint = struct._16
    def is_readable_=(value: guint): Unit = !struct.at16 = value
    def is_writeable : guint = struct._17
    def is_writeable_=(value: guint): Unit = !struct.at17 = value
    def is_seekable : guint = struct._18
    def is_seekable_=(value: guint): Unit = !struct.at18 = value
    def reserved1 : gpointer = struct._19
    def reserved1_=(value: gpointer): Unit = !struct.at19 = value
    def reserved2 : gpointer = struct._20
    def reserved2_=(value: gpointer): Unit = !struct.at20 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GIOExtension = CStruct0
object _GIOExtension:
  given _tag: Tag[_GIOExtension] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GIOExtensionPoint = CStruct0
object _GIOExtensionPoint:
  given _tag: Tag[_GIOExtensionPoint] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
*/
opaque type _GIOFuncs = CStruct8[CFuncPtr5[Ptr[Byte], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus], CFuncPtr5[Ptr[Byte], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus], CFuncPtr4[Ptr[Byte], gint64, GSeekType, Ptr[Ptr[GError]], GIOStatus], CFuncPtr2[Ptr[Byte], Ptr[Ptr[GError]], GIOStatus], CFuncPtr2[Ptr[Byte], GIOCondition, Ptr[Byte]], CFuncPtr1[Ptr[Byte], Unit], CFuncPtr3[Ptr[Byte], GIOFlags, Ptr[Ptr[GError]], GIOStatus], CFuncPtr1[Ptr[Byte], GIOFlags]]
object _GIOFuncs:
  given _tag: Tag[_GIOFuncs] = Tag.materializeCStruct8Tag[CFuncPtr5[Ptr[Byte], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus], CFuncPtr5[Ptr[Byte], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus], CFuncPtr4[Ptr[Byte], gint64, GSeekType, Ptr[Ptr[GError]], GIOStatus], CFuncPtr2[Ptr[Byte], Ptr[Ptr[GError]], GIOStatus], CFuncPtr2[Ptr[Byte], GIOCondition, Ptr[Byte]], CFuncPtr1[Ptr[Byte], Unit], CFuncPtr3[Ptr[Byte], GIOFlags, Ptr[Ptr[GError]], GIOStatus], CFuncPtr1[Ptr[Byte], GIOFlags]]
  def apply()(using Zone): Ptr[_GIOFuncs] = scala.scalanative.unsafe.alloc[_GIOFuncs](1)
  def apply(io_read : CFuncPtr5[Ptr[GIOChannel], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus], io_write : CFuncPtr5[Ptr[GIOChannel], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus], io_seek : CFuncPtr4[Ptr[GIOChannel], gint64, GSeekType, Ptr[Ptr[GError]], GIOStatus], io_close : CFuncPtr2[Ptr[GIOChannel], Ptr[Ptr[GError]], GIOStatus], io_create_watch : CFuncPtr2[Ptr[GIOChannel], GIOCondition, Ptr[GSource]], io_free : CFuncPtr1[Ptr[GIOChannel], Unit], io_set_flags : CFuncPtr3[Ptr[GIOChannel], GIOFlags, Ptr[Ptr[GError]], GIOStatus], io_get_flags : CFuncPtr1[Ptr[GIOChannel], GIOFlags])(using Zone): Ptr[_GIOFuncs] = 
    val ____ptr = apply()
    (!____ptr).io_read = io_read
    (!____ptr).io_write = io_write
    (!____ptr).io_seek = io_seek
    (!____ptr).io_close = io_close
    (!____ptr).io_create_watch = io_create_watch
    (!____ptr).io_free = io_free
    (!____ptr).io_set_flags = io_set_flags
    (!____ptr).io_get_flags = io_get_flags
    ____ptr
  extension (struct: _GIOFuncs)
    def io_read : CFuncPtr5[Ptr[GIOChannel], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus] = struct._1.asInstanceOf[CFuncPtr5[Ptr[GIOChannel], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus]]
    def io_read_=(value: CFuncPtr5[Ptr[GIOChannel], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus]): Unit = !struct.at1 = value.asInstanceOf[CFuncPtr5[Ptr[Byte], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus]]
    def io_write : CFuncPtr5[Ptr[GIOChannel], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus] = struct._2.asInstanceOf[CFuncPtr5[Ptr[GIOChannel], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus]]
    def io_write_=(value: CFuncPtr5[Ptr[GIOChannel], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus]): Unit = !struct.at2 = value.asInstanceOf[CFuncPtr5[Ptr[Byte], Ptr[gchar], gsize, Ptr[gsize], Ptr[Ptr[GError]], GIOStatus]]
    def io_seek : CFuncPtr4[Ptr[GIOChannel], gint64, GSeekType, Ptr[Ptr[GError]], GIOStatus] = struct._3.asInstanceOf[CFuncPtr4[Ptr[GIOChannel], gint64, GSeekType, Ptr[Ptr[GError]], GIOStatus]]
    def io_seek_=(value: CFuncPtr4[Ptr[GIOChannel], gint64, GSeekType, Ptr[Ptr[GError]], GIOStatus]): Unit = !struct.at3 = value.asInstanceOf[CFuncPtr4[Ptr[Byte], gint64, GSeekType, Ptr[Ptr[GError]], GIOStatus]]
    def io_close : CFuncPtr2[Ptr[GIOChannel], Ptr[Ptr[GError]], GIOStatus] = struct._4.asInstanceOf[CFuncPtr2[Ptr[GIOChannel], Ptr[Ptr[GError]], GIOStatus]]
    def io_close_=(value: CFuncPtr2[Ptr[GIOChannel], Ptr[Ptr[GError]], GIOStatus]): Unit = !struct.at4 = value.asInstanceOf[CFuncPtr2[Ptr[Byte], Ptr[Ptr[GError]], GIOStatus]]
    def io_create_watch : CFuncPtr2[Ptr[GIOChannel], GIOCondition, Ptr[GSource]] = struct._5.asInstanceOf[CFuncPtr2[Ptr[GIOChannel], GIOCondition, Ptr[GSource]]]
    def io_create_watch_=(value: CFuncPtr2[Ptr[GIOChannel], GIOCondition, Ptr[GSource]]): Unit = !struct.at5 = value.asInstanceOf[CFuncPtr2[Ptr[Byte], GIOCondition, Ptr[Byte]]]
    def io_free : CFuncPtr1[Ptr[GIOChannel], Unit] = struct._6.asInstanceOf[CFuncPtr1[Ptr[GIOChannel], Unit]]
    def io_free_=(value: CFuncPtr1[Ptr[GIOChannel], Unit]): Unit = !struct.at6 = value.asInstanceOf[CFuncPtr1[Ptr[Byte], Unit]]
    def io_set_flags : CFuncPtr3[Ptr[GIOChannel], GIOFlags, Ptr[Ptr[GError]], GIOStatus] = struct._7.asInstanceOf[CFuncPtr3[Ptr[GIOChannel], GIOFlags, Ptr[Ptr[GError]], GIOStatus]]
    def io_set_flags_=(value: CFuncPtr3[Ptr[GIOChannel], GIOFlags, Ptr[Ptr[GError]], GIOStatus]): Unit = !struct.at7 = value.asInstanceOf[CFuncPtr3[Ptr[Byte], GIOFlags, Ptr[Ptr[GError]], GIOStatus]]
    def io_get_flags : CFuncPtr1[Ptr[GIOChannel], GIOFlags] = struct._8.asInstanceOf[CFuncPtr1[Ptr[GIOChannel], GIOFlags]]
    def io_get_flags_=(value: CFuncPtr1[Ptr[GIOChannel], GIOFlags]): Unit = !struct.at8 = value.asInstanceOf[CFuncPtr1[Ptr[Byte], GIOFlags]]

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GIOModule = CStruct0
object _GIOModule:
  given _tag: Tag[_GIOModule] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
*/
opaque type _GIOModuleClass = CStruct0
object _GIOModuleClass:
  given _tag: Tag[_GIOModuleClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
*/
opaque type _GIOModuleScope = CStruct0
object _GIOModuleScope:
  given _tag: Tag[_GIOModuleScope] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GIOSchedulerJob = CStruct0
object _GIOSchedulerJob:
  given _tag: Tag[_GIOSchedulerJob] = Tag.materializeCStruct0Tag

/**
 * GIOStream:

 * [bindgen] header: /usr/include/glib-2.0/gio/giostream.h
*/
opaque type _GIOStream = CStruct2[GObject, Ptr[GIOStreamPrivate]]
object _GIOStream:
  given _tag: Tag[_GIOStream] = Tag.materializeCStruct2Tag[GObject, Ptr[GIOStreamPrivate]]
  def apply()(using Zone): Ptr[_GIOStream] = scala.scalanative.unsafe.alloc[_GIOStream](1)
  def apply(parent_instance : GObject, priv : Ptr[GIOStreamPrivate])(using Zone): Ptr[_GIOStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GIOStream)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GIOStreamPrivate] = struct._2
    def priv_=(value: Ptr[GIOStreamPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GIOStreamAdapter = CStruct0
object _GIOStreamAdapter:
  given _tag: Tag[_GIOStreamAdapter] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giostream.h
*/
opaque type _GIOStreamClass = CStruct16[GObjectClass, CFuncPtr1[Ptr[GIOStream], Ptr[GInputStream]], CFuncPtr1[Ptr[GIOStream], Ptr[GOutputStream]], CFuncPtr3[Ptr[GIOStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr5[Ptr[GIOStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GIOStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GIOStreamClass:
  given _tag: Tag[_GIOStreamClass] = Tag.materializeCStruct16Tag[GObjectClass, CFuncPtr1[Ptr[GIOStream], Ptr[GInputStream]], CFuncPtr1[Ptr[GIOStream], Ptr[GOutputStream]], CFuncPtr3[Ptr[GIOStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr5[Ptr[GIOStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GIOStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GIOStreamClass] = scala.scalanative.unsafe.alloc[_GIOStreamClass](1)
  def apply(parent_class : GObjectClass, get_input_stream : CFuncPtr1[Ptr[GIOStream], Ptr[GInputStream]], get_output_stream : CFuncPtr1[Ptr[GIOStream], Ptr[GOutputStream]], close_fn : CFuncPtr3[Ptr[GIOStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], close_async : CFuncPtr5[Ptr[GIOStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], close_finish : CFuncPtr3[Ptr[GIOStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit], _g_reserved7 : CFuncPtr0[Unit], _g_reserved8 : CFuncPtr0[Unit], _g_reserved9 : CFuncPtr0[Unit], _g_reserved10 : CFuncPtr0[Unit])(using Zone): Ptr[_GIOStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_input_stream = get_input_stream
    (!____ptr).get_output_stream = get_output_stream
    (!____ptr).close_fn = close_fn
    (!____ptr).close_async = close_async
    (!____ptr).close_finish = close_finish
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    (!____ptr)._g_reserved7 = _g_reserved7
    (!____ptr)._g_reserved8 = _g_reserved8
    (!____ptr)._g_reserved9 = _g_reserved9
    (!____ptr)._g_reserved10 = _g_reserved10
    ____ptr
  extension (struct: _GIOStreamClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def get_input_stream : CFuncPtr1[Ptr[GIOStream], Ptr[GInputStream]] = struct._2
    def get_input_stream_=(value: CFuncPtr1[Ptr[GIOStream], Ptr[GInputStream]]): Unit = !struct.at2 = value
    def get_output_stream : CFuncPtr1[Ptr[GIOStream], Ptr[GOutputStream]] = struct._3
    def get_output_stream_=(value: CFuncPtr1[Ptr[GIOStream], Ptr[GOutputStream]]): Unit = !struct.at3 = value
    def close_fn : CFuncPtr3[Ptr[GIOStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._4
    def close_fn_=(value: CFuncPtr3[Ptr[GIOStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at4 = value
    def close_async : CFuncPtr5[Ptr[GIOStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._5
    def close_async_=(value: CFuncPtr5[Ptr[GIOStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at5 = value
    def close_finish : CFuncPtr3[Ptr[GIOStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = struct._6
    def close_finish_=(value: CFuncPtr3[Ptr[GIOStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at6 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._7
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at7 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._8
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at8 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._9
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at9 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._10
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at10 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._11
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at11 = value
    def _g_reserved6 : CFuncPtr0[Unit] = struct._12
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at12 = value
    def _g_reserved7 : CFuncPtr0[Unit] = struct._13
    def _g_reserved7_=(value: CFuncPtr0[Unit]): Unit = !struct.at13 = value
    def _g_reserved8 : CFuncPtr0[Unit] = struct._14
    def _g_reserved8_=(value: CFuncPtr0[Unit]): Unit = !struct.at14 = value
    def _g_reserved9 : CFuncPtr0[Unit] = struct._15
    def _g_reserved9_=(value: CFuncPtr0[Unit]): Unit = !struct.at15 = value
    def _g_reserved10 : CFuncPtr0[Unit] = struct._16
    def _g_reserved10_=(value: CFuncPtr0[Unit]): Unit = !struct.at16 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giostream.h
*/
opaque type _GIOStreamPrivate = CStruct0
object _GIOStreamPrivate:
  given _tag: Tag[_GIOStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GIcon = CStruct0
object _GIcon:
  given _tag: Tag[_GIcon] = Tag.materializeCStruct0Tag

/**
 * GIconIface: _iface: The parent interface. : A hash for a given #GIcon. : Checks if two #GIcons are equal. _tokens: Serializes a #GIcon into tokens. The tokens must not contain any whitespace. Don't implement if the #GIcon can't be serialized (Since 2.20). _tokens: Constructs a #GIcon from tokens. Set the #GError if the tokens are malformed. Don't implement if the #GIcon can't be serialized (Since 2.20). : Serializes a #GIcon into a #GVariant. Since: 2.38

 * [bindgen] header: /usr/include/glib-2.0/gio/gicon.h
*/
opaque type _GIconIface = CStruct6[GTypeInterface, CFuncPtr1[Ptr[GIcon], guint], CFuncPtr2[Ptr[GIcon], Ptr[GIcon], gboolean], CFuncPtr3[Ptr[GIcon], Ptr[GPtrArray], Ptr[gint], gboolean], CFuncPtr4[Ptr[Ptr[gchar]], gint, gint, Ptr[Ptr[GError]], Ptr[GIcon]], CFuncPtr1[Ptr[GIcon], Ptr[GVariant]]]
object _GIconIface:
  given _tag: Tag[_GIconIface] = Tag.materializeCStruct6Tag[GTypeInterface, CFuncPtr1[Ptr[GIcon], guint], CFuncPtr2[Ptr[GIcon], Ptr[GIcon], gboolean], CFuncPtr3[Ptr[GIcon], Ptr[GPtrArray], Ptr[gint], gboolean], CFuncPtr4[Ptr[Ptr[gchar]], gint, gint, Ptr[Ptr[GError]], Ptr[GIcon]], CFuncPtr1[Ptr[GIcon], Ptr[GVariant]]]
  def apply()(using Zone): Ptr[_GIconIface] = scala.scalanative.unsafe.alloc[_GIconIface](1)
  def apply(g_iface : GTypeInterface, hash : CFuncPtr1[Ptr[GIcon], guint], equal : CFuncPtr2[Ptr[GIcon], Ptr[GIcon], gboolean], to_tokens : CFuncPtr3[Ptr[GIcon], Ptr[GPtrArray], Ptr[gint], gboolean], from_tokens : CFuncPtr4[Ptr[Ptr[gchar]], gint, gint, Ptr[Ptr[GError]], Ptr[GIcon]], serialize : CFuncPtr1[Ptr[GIcon], Ptr[GVariant]])(using Zone): Ptr[_GIconIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).hash = hash
    (!____ptr).equal = equal
    (!____ptr).to_tokens = to_tokens
    (!____ptr).from_tokens = from_tokens
    (!____ptr).serialize = serialize
    ____ptr
  extension (struct: _GIconIface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def hash : CFuncPtr1[Ptr[GIcon], guint] = struct._2
    def hash_=(value: CFuncPtr1[Ptr[GIcon], guint]): Unit = !struct.at2 = value
    def equal : CFuncPtr2[Ptr[GIcon], Ptr[GIcon], gboolean] = struct._3
    def equal_=(value: CFuncPtr2[Ptr[GIcon], Ptr[GIcon], gboolean]): Unit = !struct.at3 = value
    def to_tokens : CFuncPtr3[Ptr[GIcon], Ptr[GPtrArray], Ptr[gint], gboolean] = struct._4
    def to_tokens_=(value: CFuncPtr3[Ptr[GIcon], Ptr[GPtrArray], Ptr[gint], gboolean]): Unit = !struct.at4 = value
    def from_tokens : CFuncPtr4[Ptr[Ptr[gchar]], gint, gint, Ptr[Ptr[GError]], Ptr[GIcon]] = struct._5
    def from_tokens_=(value: CFuncPtr4[Ptr[Ptr[gchar]], gint, gint, Ptr[Ptr[GError]], Ptr[GIcon]]): Unit = !struct.at5 = value
    def serialize : CFuncPtr1[Ptr[GIcon], Ptr[GVariant]] = struct._6
    def serialize_=(value: CFuncPtr1[Ptr[GIcon], Ptr[GVariant]]): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
*/
opaque type _GInetAddress = CStruct2[GObject, Ptr[GInetAddressPrivate]]
object _GInetAddress:
  given _tag: Tag[_GInetAddress] = Tag.materializeCStruct2Tag[GObject, Ptr[GInetAddressPrivate]]
  def apply()(using Zone): Ptr[_GInetAddress] = scala.scalanative.unsafe.alloc[_GInetAddress](1)
  def apply(parent_instance : GObject, priv : Ptr[GInetAddressPrivate])(using Zone): Ptr[_GInetAddress] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GInetAddress)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GInetAddressPrivate] = struct._2
    def priv_=(value: Ptr[GInetAddressPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
*/
opaque type _GInetAddressClass = CStruct3[GObjectClass, CFuncPtr1[Ptr[GInetAddress], Ptr[gchar]], CFuncPtr1[Ptr[GInetAddress], Ptr[guint8]]]
object _GInetAddressClass:
  given _tag: Tag[_GInetAddressClass] = Tag.materializeCStruct3Tag[GObjectClass, CFuncPtr1[Ptr[GInetAddress], Ptr[gchar]], CFuncPtr1[Ptr[GInetAddress], Ptr[guint8]]]
  def apply()(using Zone): Ptr[_GInetAddressClass] = scala.scalanative.unsafe.alloc[_GInetAddressClass](1)
  def apply(parent_class : GObjectClass, to_string : CFuncPtr1[Ptr[GInetAddress], Ptr[gchar]], to_bytes : CFuncPtr1[Ptr[GInetAddress], Ptr[guint8]])(using Zone): Ptr[_GInetAddressClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).to_string = to_string
    (!____ptr).to_bytes = to_bytes
    ____ptr
  extension (struct: _GInetAddressClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def to_string : CFuncPtr1[Ptr[GInetAddress], Ptr[gchar]] = struct._2
    def to_string_=(value: CFuncPtr1[Ptr[GInetAddress], Ptr[gchar]]): Unit = !struct.at2 = value
    def to_bytes : CFuncPtr1[Ptr[GInetAddress], Ptr[guint8]] = struct._3
    def to_bytes_=(value: CFuncPtr1[Ptr[GInetAddress], Ptr[guint8]]): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddressmask.h
*/
opaque type _GInetAddressMask = CStruct2[GObject, Ptr[GInetAddressMaskPrivate]]
object _GInetAddressMask:
  given _tag: Tag[_GInetAddressMask] = Tag.materializeCStruct2Tag[GObject, Ptr[GInetAddressMaskPrivate]]
  def apply()(using Zone): Ptr[_GInetAddressMask] = scala.scalanative.unsafe.alloc[_GInetAddressMask](1)
  def apply(parent_instance : GObject, priv : Ptr[GInetAddressMaskPrivate])(using Zone): Ptr[_GInetAddressMask] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GInetAddressMask)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GInetAddressMaskPrivate] = struct._2
    def priv_=(value: Ptr[GInetAddressMaskPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddressmask.h
*/
opaque type _GInetAddressMaskClass = CStruct1[GObjectClass]
object _GInetAddressMaskClass:
  given _tag: Tag[_GInetAddressMaskClass] = Tag.materializeCStruct1Tag[GObjectClass]
  def apply()(using Zone): Ptr[_GInetAddressMaskClass] = scala.scalanative.unsafe.alloc[_GInetAddressMaskClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[_GInetAddressMaskClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: _GInetAddressMaskClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddressmask.h
*/
opaque type _GInetAddressMaskPrivate = CStruct0
object _GInetAddressMaskPrivate:
  given _tag: Tag[_GInetAddressMaskPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
*/
opaque type _GInetAddressPrivate = CStruct0
object _GInetAddressPrivate:
  given _tag: Tag[_GInetAddressPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginetsocketaddress.h
*/
opaque type _GInetSocketAddress = CStruct2[GSocketAddress, Ptr[GInetSocketAddressPrivate]]
object _GInetSocketAddress:
  given _tag: Tag[_GInetSocketAddress] = Tag.materializeCStruct2Tag[GSocketAddress, Ptr[GInetSocketAddressPrivate]]
  def apply()(using Zone): Ptr[_GInetSocketAddress] = scala.scalanative.unsafe.alloc[_GInetSocketAddress](1)
  def apply(parent_instance : GSocketAddress, priv : Ptr[GInetSocketAddressPrivate])(using Zone): Ptr[_GInetSocketAddress] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GInetSocketAddress)
    def parent_instance : GSocketAddress = struct._1
    def parent_instance_=(value: GSocketAddress): Unit = !struct.at1 = value
    def priv : Ptr[GInetSocketAddressPrivate] = struct._2
    def priv_=(value: Ptr[GInetSocketAddressPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginetsocketaddress.h
*/
opaque type _GInetSocketAddressClass = CStruct1[GSocketAddressClass]
object _GInetSocketAddressClass:
  given _tag: Tag[_GInetSocketAddressClass] = Tag.materializeCStruct1Tag[GSocketAddressClass]
  def apply()(using Zone): Ptr[_GInetSocketAddressClass] = scala.scalanative.unsafe.alloc[_GInetSocketAddressClass](1)
  def apply(parent_class : GSocketAddressClass)(using Zone): Ptr[_GInetSocketAddressClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: _GInetSocketAddressClass)
    def parent_class : GSocketAddressClass = struct._1
    def parent_class_=(value: GSocketAddressClass): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginetsocketaddress.h
*/
opaque type _GInetSocketAddressPrivate = CStruct0
object _GInetSocketAddressPrivate:
  given _tag: Tag[_GInetSocketAddressPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GInitable = CStruct0
object _GInitable:
  given _tag: Tag[_GInitable] = Tag.materializeCStruct0Tag

/**
 * GInitableIface: _iface: The parent interface. : Initializes the object.

 * [bindgen] header: /usr/include/glib-2.0/gio/ginitable.h
*/
opaque type _GInitableIface = CStruct2[GTypeInterface, CFuncPtr3[Ptr[GInitable], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]
object _GInitableIface:
  given _tag: Tag[_GInitableIface] = Tag.materializeCStruct2Tag[GTypeInterface, CFuncPtr3[Ptr[GInitable], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]
  def apply()(using Zone): Ptr[_GInitableIface] = scala.scalanative.unsafe.alloc[_GInitableIface](1)
  def apply(g_iface : GTypeInterface, init : CFuncPtr3[Ptr[GInitable], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean])(using Zone): Ptr[_GInitableIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).init = init
    ____ptr
  extension (struct: _GInitableIface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def init : CFuncPtr3[Ptr[GInitable], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._2
    def init_=(value: CFuncPtr3[Ptr[GInitable], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GInputMessage = CStruct7[Ptr[Ptr[GSocketAddress]], Ptr[GInputVector], guint, gsize, gint, Ptr[Ptr[Ptr[GSocketControlMessage]]], Ptr[guint]]
object _GInputMessage:
  given _tag: Tag[_GInputMessage] = Tag.materializeCStruct7Tag[Ptr[Ptr[GSocketAddress]], Ptr[GInputVector], guint, gsize, gint, Ptr[Ptr[Ptr[GSocketControlMessage]]], Ptr[guint]]
  def apply()(using Zone): Ptr[_GInputMessage] = scala.scalanative.unsafe.alloc[_GInputMessage](1)
  def apply(address : Ptr[Ptr[GSocketAddress]], vectors : Ptr[GInputVector], num_vectors : guint, bytes_received : gsize, flags : gint, control_messages : Ptr[Ptr[Ptr[GSocketControlMessage]]], num_control_messages : Ptr[guint])(using Zone): Ptr[_GInputMessage] = 
    val ____ptr = apply()
    (!____ptr).address = address
    (!____ptr).vectors = vectors
    (!____ptr).num_vectors = num_vectors
    (!____ptr).bytes_received = bytes_received
    (!____ptr).flags = flags
    (!____ptr).control_messages = control_messages
    (!____ptr).num_control_messages = num_control_messages
    ____ptr
  extension (struct: _GInputMessage)
    def address : Ptr[Ptr[GSocketAddress]] = struct._1
    def address_=(value: Ptr[Ptr[GSocketAddress]]): Unit = !struct.at1 = value
    def vectors : Ptr[GInputVector] = struct._2
    def vectors_=(value: Ptr[GInputVector]): Unit = !struct.at2 = value
    def num_vectors : guint = struct._3
    def num_vectors_=(value: guint): Unit = !struct.at3 = value
    def bytes_received : gsize = struct._4
    def bytes_received_=(value: gsize): Unit = !struct.at4 = value
    def flags : gint = struct._5
    def flags_=(value: gint): Unit = !struct.at5 = value
    def control_messages : Ptr[Ptr[Ptr[GSocketControlMessage]]] = struct._6
    def control_messages_=(value: Ptr[Ptr[Ptr[GSocketControlMessage]]]): Unit = !struct.at6 = value
    def num_control_messages : Ptr[guint] = struct._7
    def num_control_messages_=(value: Ptr[guint]): Unit = !struct.at7 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
*/
opaque type _GInputStream = CStruct2[GObject, Ptr[GInputStreamPrivate]]
object _GInputStream:
  given _tag: Tag[_GInputStream] = Tag.materializeCStruct2Tag[GObject, Ptr[GInputStreamPrivate]]
  def apply()(using Zone): Ptr[_GInputStream] = scala.scalanative.unsafe.alloc[_GInputStream](1)
  def apply(parent_instance : GObject, priv : Ptr[GInputStreamPrivate])(using Zone): Ptr[_GInputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GInputStream)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GInputStreamPrivate] = struct._2
    def priv_=(value: Ptr[GInputStreamPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
*/
opaque type _GInputStreamClass = CStruct15[GObjectClass, CFuncPtr5[Ptr[GInputStream], Ptr[Byte], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize], CFuncPtr4[Ptr[GInputStream], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize], CFuncPtr3[Ptr[GInputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr7[Ptr[GInputStream], Ptr[Byte], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize], CFuncPtr6[Ptr[GInputStream], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize], CFuncPtr5[Ptr[GInputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GInputStreamClass:
  given _tag: Tag[_GInputStreamClass] = Tag.materializeCStruct15Tag[GObjectClass, CFuncPtr5[Ptr[GInputStream], Ptr[Byte], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize], CFuncPtr4[Ptr[GInputStream], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize], CFuncPtr3[Ptr[GInputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr7[Ptr[GInputStream], Ptr[Byte], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize], CFuncPtr6[Ptr[GInputStream], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize], CFuncPtr5[Ptr[GInputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GInputStreamClass] = scala.scalanative.unsafe.alloc[_GInputStreamClass](1)
  def apply(parent_class : GObjectClass, read_fn : CFuncPtr5[Ptr[GInputStream], Ptr[Byte], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize], skip : CFuncPtr4[Ptr[GInputStream], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize], close_fn : CFuncPtr3[Ptr[GInputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], read_async : CFuncPtr7[Ptr[GInputStream], Ptr[Byte], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], read_finish : CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize], skip_async : CFuncPtr6[Ptr[GInputStream], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], skip_finish : CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize], close_async : CFuncPtr5[Ptr[GInputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], close_finish : CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[_GInputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).read_fn = read_fn
    (!____ptr).skip = skip
    (!____ptr).close_fn = close_fn
    (!____ptr).read_async = read_async
    (!____ptr).read_finish = read_finish
    (!____ptr).skip_async = skip_async
    (!____ptr).skip_finish = skip_finish
    (!____ptr).close_async = close_async
    (!____ptr).close_finish = close_finish
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: _GInputStreamClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def read_fn : CFuncPtr5[Ptr[GInputStream], Ptr[Byte], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize] = struct._2
    def read_fn_=(value: CFuncPtr5[Ptr[GInputStream], Ptr[Byte], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize]): Unit = !struct.at2 = value
    def skip : CFuncPtr4[Ptr[GInputStream], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize] = struct._3
    def skip_=(value: CFuncPtr4[Ptr[GInputStream], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize]): Unit = !struct.at3 = value
    def close_fn : CFuncPtr3[Ptr[GInputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._4
    def close_fn_=(value: CFuncPtr3[Ptr[GInputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at4 = value
    def read_async : CFuncPtr7[Ptr[GInputStream], Ptr[Byte], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._5
    def read_async_=(value: CFuncPtr7[Ptr[GInputStream], Ptr[Byte], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at5 = value
    def read_finish : CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize] = struct._6
    def read_finish_=(value: CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize]): Unit = !struct.at6 = value
    def skip_async : CFuncPtr6[Ptr[GInputStream], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._7
    def skip_async_=(value: CFuncPtr6[Ptr[GInputStream], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at7 = value
    def skip_finish : CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize] = struct._8
    def skip_finish_=(value: CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize]): Unit = !struct.at8 = value
    def close_async : CFuncPtr5[Ptr[GInputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._9
    def close_async_=(value: CFuncPtr5[Ptr[GInputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at9 = value
    def close_finish : CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = struct._10
    def close_finish_=(value: CFuncPtr3[Ptr[GInputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at10 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._11
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at11 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._12
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at12 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._13
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at13 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._14
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at14 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._15
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at15 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
*/
opaque type _GInputStreamPrivate = CStruct0
object _GInputStreamPrivate:
  given _tag: Tag[_GInputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GInputVector = CStruct2[gpointer, gsize]
object _GInputVector:
  given _tag: Tag[_GInputVector] = Tag.materializeCStruct2Tag[gpointer, gsize]
  def apply()(using Zone): Ptr[_GInputVector] = scala.scalanative.unsafe.alloc[_GInputVector](1)
  def apply(buffer : gpointer, size : gsize)(using Zone): Ptr[_GInputVector] = 
    val ____ptr = apply()
    (!____ptr).buffer = buffer
    (!____ptr).size = size
    ____ptr
  extension (struct: _GInputVector)
    def buffer : gpointer = struct._1
    def buffer_=(value: gpointer): Unit = !struct.at1 = value
    def size : gsize = struct._2
    def size_=(value: gsize): Unit = !struct.at2 = value

/**
 * GInterfaceInfo:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
*/
opaque type _GInterfaceInfo = CStruct3[GInterfaceInitFunc, GInterfaceFinalizeFunc, gpointer]
object _GInterfaceInfo:
  given _tag: Tag[_GInterfaceInfo] = Tag.materializeCStruct3Tag[GInterfaceInitFunc, GInterfaceFinalizeFunc, gpointer]
  def apply()(using Zone): Ptr[_GInterfaceInfo] = scala.scalanative.unsafe.alloc[_GInterfaceInfo](1)
  def apply(interface_init : GInterfaceInitFunc, interface_finalize : GInterfaceFinalizeFunc, interface_data : gpointer)(using Zone): Ptr[_GInterfaceInfo] = 
    val ____ptr = apply()
    (!____ptr).interface_init = interface_init
    (!____ptr).interface_finalize = interface_finalize
    (!____ptr).interface_data = interface_data
    ____ptr
  extension (struct: _GInterfaceInfo)
    def interface_init : GInterfaceInitFunc = struct._1
    def interface_init_=(value: GInterfaceInitFunc): Unit = !struct.at1 = value
    def interface_finalize : GInterfaceFinalizeFunc = struct._2
    def interface_finalize_=(value: GInterfaceFinalizeFunc): Unit = !struct.at2 = value
    def interface_data : gpointer = struct._3
    def interface_data_=(value: gpointer): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
*/
opaque type _GKeyFile = CStruct0
object _GKeyFile:
  given _tag: Tag[_GKeyFile] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
*/
opaque type _GList = CStruct3[gpointer, Ptr[Byte], Ptr[Byte]]
object _GList:
  given _tag: Tag[_GList] = Tag.materializeCStruct3Tag[gpointer, Ptr[Byte], Ptr[Byte]]
  def apply()(using Zone): Ptr[_GList] = scala.scalanative.unsafe.alloc[_GList](1)
  def apply(data : gpointer, next : Ptr[GList], prev : Ptr[GList])(using Zone): Ptr[_GList] = 
    val ____ptr = apply()
    (!____ptr).data = data
    (!____ptr).next = next
    (!____ptr).prev = prev
    ____ptr
  extension (struct: _GList)
    def data : gpointer = struct._1
    def data_=(value: gpointer): Unit = !struct.at1 = value
    def next : Ptr[GList] = struct._2.asInstanceOf[Ptr[GList]]
    def next_=(value: Ptr[GList]): Unit = !struct.at2 = value.asInstanceOf[Ptr[Byte]]
    def prev : Ptr[GList] = struct._3.asInstanceOf[Ptr[GList]]
    def prev_=(value: Ptr[GList]): Unit = !struct.at3 = value.asInstanceOf[Ptr[Byte]]

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/glistmodel.h
*/
opaque type _GListModel = CStruct0
object _GListModel:
  given _tag: Tag[_GListModel] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/glistmodel.h
*/
opaque type _GListModelInterface = CStruct4[GTypeInterface, CFuncPtr1[Ptr[GListModel], GType], CFuncPtr1[Ptr[GListModel], guint], CFuncPtr2[Ptr[GListModel], guint, gpointer]]
object _GListModelInterface:
  given _tag: Tag[_GListModelInterface] = Tag.materializeCStruct4Tag[GTypeInterface, CFuncPtr1[Ptr[GListModel], GType], CFuncPtr1[Ptr[GListModel], guint], CFuncPtr2[Ptr[GListModel], guint, gpointer]]
  def apply()(using Zone): Ptr[_GListModelInterface] = scala.scalanative.unsafe.alloc[_GListModelInterface](1)
  def apply(g_iface : GTypeInterface, get_item_type : CFuncPtr1[Ptr[GListModel], GType], get_n_items : CFuncPtr1[Ptr[GListModel], guint], get_item : CFuncPtr2[Ptr[GListModel], guint, gpointer])(using Zone): Ptr[_GListModelInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).get_item_type = get_item_type
    (!____ptr).get_n_items = get_n_items
    (!____ptr).get_item = get_item
    ____ptr
  extension (struct: _GListModelInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def get_item_type : CFuncPtr1[Ptr[GListModel], GType] = struct._2
    def get_item_type_=(value: CFuncPtr1[Ptr[GListModel], GType]): Unit = !struct.at2 = value
    def get_n_items : CFuncPtr1[Ptr[GListModel], guint] = struct._3
    def get_n_items_=(value: CFuncPtr1[Ptr[GListModel], guint]): Unit = !struct.at3 = value
    def get_item : CFuncPtr2[Ptr[GListModel], guint, gpointer] = struct._4
    def get_item_=(value: CFuncPtr2[Ptr[GListModel], guint, gpointer]): Unit = !struct.at4 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
*/
opaque type _GListStore = CStruct0
object _GListStore:
  given _tag: Tag[_GListStore] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GLoadableIcon = CStruct0
object _GLoadableIcon:
  given _tag: Tag[_GLoadableIcon] = Tag.materializeCStruct0Tag

/**
 * GLoadableIconIface: _iface: The parent interface. : Loads an icon. _async: Loads an icon asynchronously. _finish: Finishes an asynchronous icon load.

 * [bindgen] header: /usr/include/glib-2.0/gio/gloadableicon.h
*/
opaque type _GLoadableIconIface = CStruct4[GTypeInterface, CFuncPtr5[Ptr[GLoadableIcon], CInt, Ptr[CString], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GInputStream]], CFuncPtr5[Ptr[GLoadableIcon], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr4[Ptr[GLoadableIcon], Ptr[GAsyncResult], Ptr[CString], Ptr[Ptr[GError]], Ptr[GInputStream]]]
object _GLoadableIconIface:
  given _tag: Tag[_GLoadableIconIface] = Tag.materializeCStruct4Tag[GTypeInterface, CFuncPtr5[Ptr[GLoadableIcon], CInt, Ptr[CString], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GInputStream]], CFuncPtr5[Ptr[GLoadableIcon], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr4[Ptr[GLoadableIcon], Ptr[GAsyncResult], Ptr[CString], Ptr[Ptr[GError]], Ptr[GInputStream]]]
  def apply()(using Zone): Ptr[_GLoadableIconIface] = scala.scalanative.unsafe.alloc[_GLoadableIconIface](1)
  def apply(g_iface : GTypeInterface, load : CFuncPtr5[Ptr[GLoadableIcon], CInt, Ptr[CString], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GInputStream]], load_async : CFuncPtr5[Ptr[GLoadableIcon], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], load_finish : CFuncPtr4[Ptr[GLoadableIcon], Ptr[GAsyncResult], Ptr[CString], Ptr[Ptr[GError]], Ptr[GInputStream]])(using Zone): Ptr[_GLoadableIconIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).load = load
    (!____ptr).load_async = load_async
    (!____ptr).load_finish = load_finish
    ____ptr
  extension (struct: _GLoadableIconIface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def load : CFuncPtr5[Ptr[GLoadableIcon], CInt, Ptr[CString], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GInputStream]] = struct._2
    def load_=(value: CFuncPtr5[Ptr[GLoadableIcon], CInt, Ptr[CString], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GInputStream]]): Unit = !struct.at2 = value
    def load_async : CFuncPtr5[Ptr[GLoadableIcon], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._3
    def load_async_=(value: CFuncPtr5[Ptr[GLoadableIcon], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at3 = value
    def load_finish : CFuncPtr4[Ptr[GLoadableIcon], Ptr[GAsyncResult], Ptr[CString], Ptr[Ptr[GError]], Ptr[GInputStream]] = struct._4
    def load_finish_=(value: CFuncPtr4[Ptr[GLoadableIcon], Ptr[GAsyncResult], Ptr[CString], Ptr[Ptr[GError]], Ptr[GInputStream]]): Unit = !struct.at4 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
*/
opaque type _GLogField = CStruct3[Ptr[gchar], gconstpointer, gssize]
object _GLogField:
  given _tag: Tag[_GLogField] = Tag.materializeCStruct3Tag[Ptr[gchar], gconstpointer, gssize]
  def apply()(using Zone): Ptr[_GLogField] = scala.scalanative.unsafe.alloc[_GLogField](1)
  def apply(key : Ptr[gchar], value : gconstpointer, length : gssize)(using Zone): Ptr[_GLogField] = 
    val ____ptr = apply()
    (!____ptr).key = key
    (!____ptr).value = value
    (!____ptr).length = length
    ____ptr
  extension (struct: _GLogField)
    def key : Ptr[gchar] = struct._1
    def key_=(value: Ptr[gchar]): Unit = !struct.at1 = value
    def value : gconstpointer = struct._2
    def value_=(value: gconstpointer): Unit = !struct.at2 = value
    def length : gssize = struct._3
    def length_=(value: gssize): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
*/
opaque type _GMainContext = CStruct0
object _GMainContext:
  given _tag: Tag[_GMainContext] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
*/
opaque type _GMainLoop = CStruct0
object _GMainLoop:
  given _tag: Tag[_GMainLoop] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gmappedfile.h
*/
opaque type _GMappedFile = CStruct0
object _GMappedFile:
  given _tag: Tag[_GMappedFile] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
*/
opaque type _GMarkupParseContext = CStruct0
object _GMarkupParseContext:
  given _tag: Tag[_GMarkupParseContext] = Tag.materializeCStruct0Tag

/**
 * GMarkupParser: _element: Callback to invoke when the opening tag of an element is seen. The callback's _names and _values parameters are %NULL-terminated. _element: Callback to invoke when the closing tag of an element is seen. Note that this is also called for empty tags like `<empty/>`.

 * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
*/
opaque type _GMarkupParser = CStruct5[CFuncPtr6[Ptr[GMarkupParseContext], Ptr[gchar], Ptr[Ptr[gchar]], Ptr[Ptr[gchar]], gpointer, Ptr[Ptr[GError]], Unit], CFuncPtr4[Ptr[GMarkupParseContext], Ptr[gchar], gpointer, Ptr[Ptr[GError]], Unit], CFuncPtr5[Ptr[GMarkupParseContext], Ptr[gchar], gsize, gpointer, Ptr[Ptr[GError]], Unit], CFuncPtr5[Ptr[GMarkupParseContext], Ptr[gchar], gsize, gpointer, Ptr[Ptr[GError]], Unit], CFuncPtr3[Ptr[GMarkupParseContext], Ptr[GError], gpointer, Unit]]
object _GMarkupParser:
  given _tag: Tag[_GMarkupParser] = Tag.materializeCStruct5Tag[CFuncPtr6[Ptr[GMarkupParseContext], Ptr[gchar], Ptr[Ptr[gchar]], Ptr[Ptr[gchar]], gpointer, Ptr[Ptr[GError]], Unit], CFuncPtr4[Ptr[GMarkupParseContext], Ptr[gchar], gpointer, Ptr[Ptr[GError]], Unit], CFuncPtr5[Ptr[GMarkupParseContext], Ptr[gchar], gsize, gpointer, Ptr[Ptr[GError]], Unit], CFuncPtr5[Ptr[GMarkupParseContext], Ptr[gchar], gsize, gpointer, Ptr[Ptr[GError]], Unit], CFuncPtr3[Ptr[GMarkupParseContext], Ptr[GError], gpointer, Unit]]
  def apply()(using Zone): Ptr[_GMarkupParser] = scala.scalanative.unsafe.alloc[_GMarkupParser](1)
  def apply(start_element : CFuncPtr6[Ptr[GMarkupParseContext], Ptr[gchar], Ptr[Ptr[gchar]], Ptr[Ptr[gchar]], gpointer, Ptr[Ptr[GError]], Unit], end_element : CFuncPtr4[Ptr[GMarkupParseContext], Ptr[gchar], gpointer, Ptr[Ptr[GError]], Unit], text : CFuncPtr5[Ptr[GMarkupParseContext], Ptr[gchar], gsize, gpointer, Ptr[Ptr[GError]], Unit], passthrough : CFuncPtr5[Ptr[GMarkupParseContext], Ptr[gchar], gsize, gpointer, Ptr[Ptr[GError]], Unit], error : CFuncPtr3[Ptr[GMarkupParseContext], Ptr[GError], gpointer, Unit])(using Zone): Ptr[_GMarkupParser] = 
    val ____ptr = apply()
    (!____ptr).start_element = start_element
    (!____ptr).end_element = end_element
    (!____ptr).text = text
    (!____ptr).passthrough = passthrough
    (!____ptr).error = error
    ____ptr
  extension (struct: _GMarkupParser)
    def start_element : CFuncPtr6[Ptr[GMarkupParseContext], Ptr[gchar], Ptr[Ptr[gchar]], Ptr[Ptr[gchar]], gpointer, Ptr[Ptr[GError]], Unit] = struct._1
    def start_element_=(value: CFuncPtr6[Ptr[GMarkupParseContext], Ptr[gchar], Ptr[Ptr[gchar]], Ptr[Ptr[gchar]], gpointer, Ptr[Ptr[GError]], Unit]): Unit = !struct.at1 = value
    def end_element : CFuncPtr4[Ptr[GMarkupParseContext], Ptr[gchar], gpointer, Ptr[Ptr[GError]], Unit] = struct._2
    def end_element_=(value: CFuncPtr4[Ptr[GMarkupParseContext], Ptr[gchar], gpointer, Ptr[Ptr[GError]], Unit]): Unit = !struct.at2 = value
    def text : CFuncPtr5[Ptr[GMarkupParseContext], Ptr[gchar], gsize, gpointer, Ptr[Ptr[GError]], Unit] = struct._3
    def text_=(value: CFuncPtr5[Ptr[GMarkupParseContext], Ptr[gchar], gsize, gpointer, Ptr[Ptr[GError]], Unit]): Unit = !struct.at3 = value
    def passthrough : CFuncPtr5[Ptr[GMarkupParseContext], Ptr[gchar], gsize, gpointer, Ptr[Ptr[GError]], Unit] = struct._4
    def passthrough_=(value: CFuncPtr5[Ptr[GMarkupParseContext], Ptr[gchar], gsize, gpointer, Ptr[Ptr[GError]], Unit]): Unit = !struct.at4 = value
    def error : CFuncPtr3[Ptr[GMarkupParseContext], Ptr[GError], gpointer, Unit] = struct._5
    def error_=(value: CFuncPtr3[Ptr[GMarkupParseContext], Ptr[GError], gpointer, Unit]): Unit = !struct.at5 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
*/
opaque type _GMatchInfo = CStruct0
object _GMatchInfo:
  given _tag: Tag[_GMatchInfo] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
*/
opaque type _GMemChunk = CStruct0
object _GMemChunk:
  given _tag: Tag[_GMemChunk] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
*/
opaque type _GMemVTable = CStruct6[CFuncPtr1[gsize, gpointer], CFuncPtr2[gpointer, gsize, gpointer], CFuncPtr1[gpointer, Unit], CFuncPtr2[gsize, gsize, gpointer], CFuncPtr1[gsize, gpointer], CFuncPtr2[gpointer, gsize, gpointer]]
object _GMemVTable:
  given _tag: Tag[_GMemVTable] = Tag.materializeCStruct6Tag[CFuncPtr1[gsize, gpointer], CFuncPtr2[gpointer, gsize, gpointer], CFuncPtr1[gpointer, Unit], CFuncPtr2[gsize, gsize, gpointer], CFuncPtr1[gsize, gpointer], CFuncPtr2[gpointer, gsize, gpointer]]
  def apply()(using Zone): Ptr[_GMemVTable] = scala.scalanative.unsafe.alloc[_GMemVTable](1)
  def apply(malloc : CFuncPtr1[gsize, gpointer], realloc : CFuncPtr2[gpointer, gsize, gpointer], free : CFuncPtr1[gpointer, Unit], calloc : CFuncPtr2[gsize, gsize, gpointer], try_malloc : CFuncPtr1[gsize, gpointer], try_realloc : CFuncPtr2[gpointer, gsize, gpointer])(using Zone): Ptr[_GMemVTable] = 
    val ____ptr = apply()
    (!____ptr).malloc = malloc
    (!____ptr).realloc = realloc
    (!____ptr).free = free
    (!____ptr).calloc = calloc
    (!____ptr).try_malloc = try_malloc
    (!____ptr).try_realloc = try_realloc
    ____ptr
  extension (struct: _GMemVTable)
    def malloc : CFuncPtr1[gsize, gpointer] = struct._1
    def malloc_=(value: CFuncPtr1[gsize, gpointer]): Unit = !struct.at1 = value
    def realloc : CFuncPtr2[gpointer, gsize, gpointer] = struct._2
    def realloc_=(value: CFuncPtr2[gpointer, gsize, gpointer]): Unit = !struct.at2 = value
    def free : CFuncPtr1[gpointer, Unit] = struct._3
    def free_=(value: CFuncPtr1[gpointer, Unit]): Unit = !struct.at3 = value
    def calloc : CFuncPtr2[gsize, gsize, gpointer] = struct._4
    def calloc_=(value: CFuncPtr2[gsize, gsize, gpointer]): Unit = !struct.at4 = value
    def try_malloc : CFuncPtr1[gsize, gpointer] = struct._5
    def try_malloc_=(value: CFuncPtr1[gsize, gpointer]): Unit = !struct.at5 = value
    def try_realloc : CFuncPtr2[gpointer, gsize, gpointer] = struct._6
    def try_realloc_=(value: CFuncPtr2[gpointer, gsize, gpointer]): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryinputstream.h
*/
opaque type _GMemoryInputStream = CStruct2[GInputStream, Ptr[GMemoryInputStreamPrivate]]
object _GMemoryInputStream:
  given _tag: Tag[_GMemoryInputStream] = Tag.materializeCStruct2Tag[GInputStream, Ptr[GMemoryInputStreamPrivate]]
  def apply()(using Zone): Ptr[_GMemoryInputStream] = scala.scalanative.unsafe.alloc[_GMemoryInputStream](1)
  def apply(parent_instance : GInputStream, priv : Ptr[GMemoryInputStreamPrivate])(using Zone): Ptr[_GMemoryInputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GMemoryInputStream)
    def parent_instance : GInputStream = struct._1
    def parent_instance_=(value: GInputStream): Unit = !struct.at1 = value
    def priv : Ptr[GMemoryInputStreamPrivate] = struct._2
    def priv_=(value: Ptr[GMemoryInputStreamPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryinputstream.h
*/
opaque type _GMemoryInputStreamClass = CStruct6[GInputStreamClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GMemoryInputStreamClass:
  given _tag: Tag[_GMemoryInputStreamClass] = Tag.materializeCStruct6Tag[GInputStreamClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GMemoryInputStreamClass] = scala.scalanative.unsafe.alloc[_GMemoryInputStreamClass](1)
  def apply(parent_class : GInputStreamClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[_GMemoryInputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: _GMemoryInputStreamClass)
    def parent_class : GInputStreamClass = struct._1
    def parent_class_=(value: GInputStreamClass): Unit = !struct.at1 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._2
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at2 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._3
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at3 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._4
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at4 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._5
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at5 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._6
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryinputstream.h
*/
opaque type _GMemoryInputStreamPrivate = CStruct0
object _GMemoryInputStreamPrivate:
  given _tag: Tag[_GMemoryInputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmemorymonitor.h
*/
opaque type _GMemoryMonitor = CStruct0
object _GMemoryMonitor:
  given _tag: Tag[_GMemoryMonitor] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmemorymonitor.h
*/
opaque type _GMemoryMonitorInterface = CStruct2[GTypeInterface, CFuncPtr2[Ptr[GMemoryMonitor], GMemoryMonitorWarningLevel, Unit]]
object _GMemoryMonitorInterface:
  given _tag: Tag[_GMemoryMonitorInterface] = Tag.materializeCStruct2Tag[GTypeInterface, CFuncPtr2[Ptr[GMemoryMonitor], GMemoryMonitorWarningLevel, Unit]]
  def apply()(using Zone): Ptr[_GMemoryMonitorInterface] = scala.scalanative.unsafe.alloc[_GMemoryMonitorInterface](1)
  def apply(g_iface : GTypeInterface, low_memory_warning : CFuncPtr2[Ptr[GMemoryMonitor], GMemoryMonitorWarningLevel, Unit])(using Zone): Ptr[_GMemoryMonitorInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).low_memory_warning = low_memory_warning
    ____ptr
  extension (struct: _GMemoryMonitorInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def low_memory_warning : CFuncPtr2[Ptr[GMemoryMonitor], GMemoryMonitorWarningLevel, Unit] = struct._2
    def low_memory_warning_=(value: CFuncPtr2[Ptr[GMemoryMonitor], GMemoryMonitorWarningLevel, Unit]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryoutputstream.h
*/
opaque type _GMemoryOutputStream = CStruct2[GOutputStream, Ptr[GMemoryOutputStreamPrivate]]
object _GMemoryOutputStream:
  given _tag: Tag[_GMemoryOutputStream] = Tag.materializeCStruct2Tag[GOutputStream, Ptr[GMemoryOutputStreamPrivate]]
  def apply()(using Zone): Ptr[_GMemoryOutputStream] = scala.scalanative.unsafe.alloc[_GMemoryOutputStream](1)
  def apply(parent_instance : GOutputStream, priv : Ptr[GMemoryOutputStreamPrivate])(using Zone): Ptr[_GMemoryOutputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GMemoryOutputStream)
    def parent_instance : GOutputStream = struct._1
    def parent_instance_=(value: GOutputStream): Unit = !struct.at1 = value
    def priv : Ptr[GMemoryOutputStreamPrivate] = struct._2
    def priv_=(value: Ptr[GMemoryOutputStreamPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryoutputstream.h
*/
opaque type _GMemoryOutputStreamClass = CStruct6[GOutputStreamClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GMemoryOutputStreamClass:
  given _tag: Tag[_GMemoryOutputStreamClass] = Tag.materializeCStruct6Tag[GOutputStreamClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GMemoryOutputStreamClass] = scala.scalanative.unsafe.alloc[_GMemoryOutputStreamClass](1)
  def apply(parent_class : GOutputStreamClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[_GMemoryOutputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: _GMemoryOutputStreamClass)
    def parent_class : GOutputStreamClass = struct._1
    def parent_class_=(value: GOutputStreamClass): Unit = !struct.at1 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._2
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at2 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._3
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at3 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._4
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at4 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._5
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at5 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._6
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryoutputstream.h
*/
opaque type _GMemoryOutputStreamPrivate = CStruct0
object _GMemoryOutputStreamPrivate:
  given _tag: Tag[_GMemoryOutputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
*/
opaque type _GMenu = CStruct0
object _GMenu:
  given _tag: Tag[_GMenu] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
*/
opaque type _GMenuAttributeIter = CStruct2[GObject, Ptr[GMenuAttributeIterPrivate]]
object _GMenuAttributeIter:
  given _tag: Tag[_GMenuAttributeIter] = Tag.materializeCStruct2Tag[GObject, Ptr[GMenuAttributeIterPrivate]]
  def apply()(using Zone): Ptr[_GMenuAttributeIter] = scala.scalanative.unsafe.alloc[_GMenuAttributeIter](1)
  def apply(parent_instance : GObject, priv : Ptr[GMenuAttributeIterPrivate])(using Zone): Ptr[_GMenuAttributeIter] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GMenuAttributeIter)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GMenuAttributeIterPrivate] = struct._2
    def priv_=(value: Ptr[GMenuAttributeIterPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
*/
opaque type _GMenuAttributeIterClass = CStruct2[GObjectClass, CFuncPtr3[Ptr[GMenuAttributeIter], Ptr[Ptr[gchar]], Ptr[Ptr[GVariant]], gboolean]]
object _GMenuAttributeIterClass:
  given _tag: Tag[_GMenuAttributeIterClass] = Tag.materializeCStruct2Tag[GObjectClass, CFuncPtr3[Ptr[GMenuAttributeIter], Ptr[Ptr[gchar]], Ptr[Ptr[GVariant]], gboolean]]
  def apply()(using Zone): Ptr[_GMenuAttributeIterClass] = scala.scalanative.unsafe.alloc[_GMenuAttributeIterClass](1)
  def apply(parent_class : GObjectClass, get_next : CFuncPtr3[Ptr[GMenuAttributeIter], Ptr[Ptr[gchar]], Ptr[Ptr[GVariant]], gboolean])(using Zone): Ptr[_GMenuAttributeIterClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_next = get_next
    ____ptr
  extension (struct: _GMenuAttributeIterClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def get_next : CFuncPtr3[Ptr[GMenuAttributeIter], Ptr[Ptr[gchar]], Ptr[Ptr[GVariant]], gboolean] = struct._2
    def get_next_=(value: CFuncPtr3[Ptr[GMenuAttributeIter], Ptr[Ptr[gchar]], Ptr[Ptr[GVariant]], gboolean]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
*/
opaque type _GMenuAttributeIterPrivate = CStruct0
object _GMenuAttributeIterPrivate:
  given _tag: Tag[_GMenuAttributeIterPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
*/
opaque type _GMenuItem = CStruct0
object _GMenuItem:
  given _tag: Tag[_GMenuItem] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
*/
opaque type _GMenuLinkIter = CStruct2[GObject, Ptr[GMenuLinkIterPrivate]]
object _GMenuLinkIter:
  given _tag: Tag[_GMenuLinkIter] = Tag.materializeCStruct2Tag[GObject, Ptr[GMenuLinkIterPrivate]]
  def apply()(using Zone): Ptr[_GMenuLinkIter] = scala.scalanative.unsafe.alloc[_GMenuLinkIter](1)
  def apply(parent_instance : GObject, priv : Ptr[GMenuLinkIterPrivate])(using Zone): Ptr[_GMenuLinkIter] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GMenuLinkIter)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GMenuLinkIterPrivate] = struct._2
    def priv_=(value: Ptr[GMenuLinkIterPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
*/
opaque type _GMenuLinkIterClass = CStruct2[GObjectClass, CFuncPtr3[Ptr[GMenuLinkIter], Ptr[Ptr[gchar]], Ptr[Ptr[GMenuModel]], gboolean]]
object _GMenuLinkIterClass:
  given _tag: Tag[_GMenuLinkIterClass] = Tag.materializeCStruct2Tag[GObjectClass, CFuncPtr3[Ptr[GMenuLinkIter], Ptr[Ptr[gchar]], Ptr[Ptr[GMenuModel]], gboolean]]
  def apply()(using Zone): Ptr[_GMenuLinkIterClass] = scala.scalanative.unsafe.alloc[_GMenuLinkIterClass](1)
  def apply(parent_class : GObjectClass, get_next : CFuncPtr3[Ptr[GMenuLinkIter], Ptr[Ptr[gchar]], Ptr[Ptr[GMenuModel]], gboolean])(using Zone): Ptr[_GMenuLinkIterClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_next = get_next
    ____ptr
  extension (struct: _GMenuLinkIterClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def get_next : CFuncPtr3[Ptr[GMenuLinkIter], Ptr[Ptr[gchar]], Ptr[Ptr[GMenuModel]], gboolean] = struct._2
    def get_next_=(value: CFuncPtr3[Ptr[GMenuLinkIter], Ptr[Ptr[gchar]], Ptr[Ptr[GMenuModel]], gboolean]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
*/
opaque type _GMenuLinkIterPrivate = CStruct0
object _GMenuLinkIterPrivate:
  given _tag: Tag[_GMenuLinkIterPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
*/
opaque type _GMenuModel = CStruct2[GObject, Ptr[GMenuModelPrivate]]
object _GMenuModel:
  given _tag: Tag[_GMenuModel] = Tag.materializeCStruct2Tag[GObject, Ptr[GMenuModelPrivate]]
  def apply()(using Zone): Ptr[_GMenuModel] = scala.scalanative.unsafe.alloc[_GMenuModel](1)
  def apply(parent_instance : GObject, priv : Ptr[GMenuModelPrivate])(using Zone): Ptr[_GMenuModel] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GMenuModel)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GMenuModelPrivate] = struct._2
    def priv_=(value: Ptr[GMenuModelPrivate]): Unit = !struct.at2 = value

/**
 * GMenuModelClass::get_item_attributes: : the #GMenuModel to query _index: The #GMenuItem to query : (out) (element-type utf8 GLib.Variant): Attributes on the item

 * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
*/
opaque type _GMenuModelClass = CStruct9[GObjectClass, CFuncPtr1[Ptr[GMenuModel], gboolean], CFuncPtr1[Ptr[GMenuModel], gint], CFuncPtr3[Ptr[GMenuModel], gint, Ptr[Ptr[GHashTable]], Unit], CFuncPtr2[Ptr[GMenuModel], gint, Ptr[GMenuAttributeIter]], CFuncPtr4[Ptr[GMenuModel], gint, Ptr[gchar], Ptr[GVariantType], Ptr[GVariant]], CFuncPtr3[Ptr[GMenuModel], gint, Ptr[Ptr[GHashTable]], Unit], CFuncPtr2[Ptr[GMenuModel], gint, Ptr[GMenuLinkIter]], CFuncPtr3[Ptr[GMenuModel], gint, Ptr[gchar], Ptr[GMenuModel]]]
object _GMenuModelClass:
  given _tag: Tag[_GMenuModelClass] = Tag.materializeCStruct9Tag[GObjectClass, CFuncPtr1[Ptr[GMenuModel], gboolean], CFuncPtr1[Ptr[GMenuModel], gint], CFuncPtr3[Ptr[GMenuModel], gint, Ptr[Ptr[GHashTable]], Unit], CFuncPtr2[Ptr[GMenuModel], gint, Ptr[GMenuAttributeIter]], CFuncPtr4[Ptr[GMenuModel], gint, Ptr[gchar], Ptr[GVariantType], Ptr[GVariant]], CFuncPtr3[Ptr[GMenuModel], gint, Ptr[Ptr[GHashTable]], Unit], CFuncPtr2[Ptr[GMenuModel], gint, Ptr[GMenuLinkIter]], CFuncPtr3[Ptr[GMenuModel], gint, Ptr[gchar], Ptr[GMenuModel]]]
  def apply()(using Zone): Ptr[_GMenuModelClass] = scala.scalanative.unsafe.alloc[_GMenuModelClass](1)
  def apply(parent_class : GObjectClass, is_mutable : CFuncPtr1[Ptr[GMenuModel], gboolean], get_n_items : CFuncPtr1[Ptr[GMenuModel], gint], get_item_attributes : CFuncPtr3[Ptr[GMenuModel], gint, Ptr[Ptr[GHashTable]], Unit], iterate_item_attributes : CFuncPtr2[Ptr[GMenuModel], gint, Ptr[GMenuAttributeIter]], get_item_attribute_value : CFuncPtr4[Ptr[GMenuModel], gint, Ptr[gchar], Ptr[GVariantType], Ptr[GVariant]], get_item_links : CFuncPtr3[Ptr[GMenuModel], gint, Ptr[Ptr[GHashTable]], Unit], iterate_item_links : CFuncPtr2[Ptr[GMenuModel], gint, Ptr[GMenuLinkIter]], get_item_link : CFuncPtr3[Ptr[GMenuModel], gint, Ptr[gchar], Ptr[GMenuModel]])(using Zone): Ptr[_GMenuModelClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).is_mutable = is_mutable
    (!____ptr).get_n_items = get_n_items
    (!____ptr).get_item_attributes = get_item_attributes
    (!____ptr).iterate_item_attributes = iterate_item_attributes
    (!____ptr).get_item_attribute_value = get_item_attribute_value
    (!____ptr).get_item_links = get_item_links
    (!____ptr).iterate_item_links = iterate_item_links
    (!____ptr).get_item_link = get_item_link
    ____ptr
  extension (struct: _GMenuModelClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def is_mutable : CFuncPtr1[Ptr[GMenuModel], gboolean] = struct._2
    def is_mutable_=(value: CFuncPtr1[Ptr[GMenuModel], gboolean]): Unit = !struct.at2 = value
    def get_n_items : CFuncPtr1[Ptr[GMenuModel], gint] = struct._3
    def get_n_items_=(value: CFuncPtr1[Ptr[GMenuModel], gint]): Unit = !struct.at3 = value
    def get_item_attributes : CFuncPtr3[Ptr[GMenuModel], gint, Ptr[Ptr[GHashTable]], Unit] = struct._4
    def get_item_attributes_=(value: CFuncPtr3[Ptr[GMenuModel], gint, Ptr[Ptr[GHashTable]], Unit]): Unit = !struct.at4 = value
    def iterate_item_attributes : CFuncPtr2[Ptr[GMenuModel], gint, Ptr[GMenuAttributeIter]] = struct._5
    def iterate_item_attributes_=(value: CFuncPtr2[Ptr[GMenuModel], gint, Ptr[GMenuAttributeIter]]): Unit = !struct.at5 = value
    def get_item_attribute_value : CFuncPtr4[Ptr[GMenuModel], gint, Ptr[gchar], Ptr[GVariantType], Ptr[GVariant]] = struct._6
    def get_item_attribute_value_=(value: CFuncPtr4[Ptr[GMenuModel], gint, Ptr[gchar], Ptr[GVariantType], Ptr[GVariant]]): Unit = !struct.at6 = value
    def get_item_links : CFuncPtr3[Ptr[GMenuModel], gint, Ptr[Ptr[GHashTable]], Unit] = struct._7
    def get_item_links_=(value: CFuncPtr3[Ptr[GMenuModel], gint, Ptr[Ptr[GHashTable]], Unit]): Unit = !struct.at7 = value
    def iterate_item_links : CFuncPtr2[Ptr[GMenuModel], gint, Ptr[GMenuLinkIter]] = struct._8
    def iterate_item_links_=(value: CFuncPtr2[Ptr[GMenuModel], gint, Ptr[GMenuLinkIter]]): Unit = !struct.at8 = value
    def get_item_link : CFuncPtr3[Ptr[GMenuModel], gint, Ptr[gchar], Ptr[GMenuModel]] = struct._9
    def get_item_link_=(value: CFuncPtr3[Ptr[GMenuModel], gint, Ptr[gchar], Ptr[GMenuModel]]): Unit = !struct.at9 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
*/
opaque type _GMenuModelPrivate = CStruct0
object _GMenuModelPrivate:
  given _tag: Tag[_GMenuModelPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gmodule.h
*/
opaque type _GModule = CStruct0
object _GModule:
  given _tag: Tag[_GModule] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GMount = CStruct0
object _GMount:
  given _tag: Tag[_GMount] = Tag.materializeCStruct0Tag

/**
 * GMountIface: _iface: The parent interface. : Changed signal that is emitted when the mount's state has changed. : The unmounted signal that is emitted when the #GMount have been unmounted. If the recipient is holding references to the object they should release them so the object can be finalized.

 * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
*/
opaque type _GMountIface = CArray[CChar, Nat.Digit3[Nat._2, Nat._3, Nat._2]]
object _GMountIface:
  given _tag: Tag[_GMountIface] = Tag.CArray[CChar, Nat.Digit3[Nat._2, Nat._3, Nat._2]](Tag.Byte, Tag.Digit3[Nat._2, Nat._3, Nat._2](Tag.Nat2, Tag.Nat3, Tag.Nat2))
  def apply()(using Zone): Ptr[_GMountIface] = scala.scalanative.unsafe.alloc[_GMountIface](1)
  def apply(g_iface : GTypeInterface, changed : CFuncPtr1[Ptr[GMount], Unit], unmounted : CFuncPtr1[Ptr[GMount], Unit], get_root : CFuncPtr1[Ptr[GMount], Ptr[GFile]], get_name : CFuncPtr1[Ptr[GMount], CString], get_icon : CFuncPtr1[Ptr[GMount], Ptr[GIcon]], get_uuid : CFuncPtr1[Ptr[GMount], CString], get_volume : CFuncPtr1[Ptr[GMount], Ptr[GVolume]], get_drive : CFuncPtr1[Ptr[GMount], Ptr[GDrive]], can_unmount : CFuncPtr1[Ptr[GMount], gboolean], can_eject : CFuncPtr1[Ptr[GMount], gboolean], unmount : CFuncPtr5[Ptr[GMount], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], unmount_finish : CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], eject : CFuncPtr5[Ptr[GMount], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], eject_finish : CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], remount : CFuncPtr6[Ptr[GMount], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], remount_finish : CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], guess_content_type : CFuncPtr5[Ptr[GMount], gboolean, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], guess_content_type_finish : CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]], guess_content_type_sync : CFuncPtr4[Ptr[GMount], gboolean, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]], pre_unmount : CFuncPtr1[Ptr[GMount], Unit], unmount_with_operation : CFuncPtr6[Ptr[GMount], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], unmount_with_operation_finish : CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], eject_with_operation : CFuncPtr6[Ptr[GMount], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], eject_with_operation_finish : CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], get_default_location : CFuncPtr1[Ptr[GMount], Ptr[GFile]], get_sort_key : CFuncPtr1[Ptr[GMount], Ptr[gchar]], get_symbolic_icon : CFuncPtr1[Ptr[GMount], Ptr[GIcon]])(using Zone): Ptr[_GMountIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).changed = changed
    (!____ptr).unmounted = unmounted
    (!____ptr).get_root = get_root
    (!____ptr).get_name = get_name
    (!____ptr).get_icon = get_icon
    (!____ptr).get_uuid = get_uuid
    (!____ptr).get_volume = get_volume
    (!____ptr).get_drive = get_drive
    (!____ptr).can_unmount = can_unmount
    (!____ptr).can_eject = can_eject
    (!____ptr).unmount = unmount
    (!____ptr).unmount_finish = unmount_finish
    (!____ptr).eject = eject
    (!____ptr).eject_finish = eject_finish
    (!____ptr).remount = remount
    (!____ptr).remount_finish = remount_finish
    (!____ptr).guess_content_type = guess_content_type
    (!____ptr).guess_content_type_finish = guess_content_type_finish
    (!____ptr).guess_content_type_sync = guess_content_type_sync
    (!____ptr).pre_unmount = pre_unmount
    (!____ptr).unmount_with_operation = unmount_with_operation
    (!____ptr).unmount_with_operation_finish = unmount_with_operation_finish
    (!____ptr).eject_with_operation = eject_with_operation
    (!____ptr).eject_with_operation_finish = eject_with_operation_finish
    (!____ptr).get_default_location = get_default_location
    (!____ptr).get_sort_key = get_sort_key
    (!____ptr).get_symbolic_icon = get_symbolic_icon
    ____ptr
  extension (struct: _GMountIface)
    def g_iface: GTypeInterface = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]]
    def g_iface_=(value: GTypeInterface): Unit = !struct.at(0).asInstanceOf[Ptr[GTypeInterface]] = value
    def changed: CFuncPtr1[Ptr[GMount], Unit] = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Unit]]]
    def changed_=(value: CFuncPtr1[Ptr[GMount], Unit]): Unit = !struct.at(16).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Unit]]] = value
    def unmounted: CFuncPtr1[Ptr[GMount], Unit] = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Unit]]]
    def unmounted_=(value: CFuncPtr1[Ptr[GMount], Unit]): Unit = !struct.at(24).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Unit]]] = value
    def get_root: CFuncPtr1[Ptr[GMount], Ptr[GFile]] = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GFile]]]]
    def get_root_=(value: CFuncPtr1[Ptr[GMount], Ptr[GFile]]): Unit = !struct.at(32).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GFile]]]] = value
    def get_name: CFuncPtr1[Ptr[GMount], CString] = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], CString]]]
    def get_name_=(value: CFuncPtr1[Ptr[GMount], CString]): Unit = !struct.at(40).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], CString]]] = value
    def get_icon: CFuncPtr1[Ptr[GMount], Ptr[GIcon]] = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GIcon]]]]
    def get_icon_=(value: CFuncPtr1[Ptr[GMount], Ptr[GIcon]]): Unit = !struct.at(48).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GIcon]]]] = value
    def get_uuid: CFuncPtr1[Ptr[GMount], CString] = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], CString]]]
    def get_uuid_=(value: CFuncPtr1[Ptr[GMount], CString]): Unit = !struct.at(56).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], CString]]] = value
    def get_volume: CFuncPtr1[Ptr[GMount], Ptr[GVolume]] = !struct.at(64).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GVolume]]]]
    def get_volume_=(value: CFuncPtr1[Ptr[GMount], Ptr[GVolume]]): Unit = !struct.at(64).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GVolume]]]] = value
    def get_drive: CFuncPtr1[Ptr[GMount], Ptr[GDrive]] = !struct.at(72).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GDrive]]]]
    def get_drive_=(value: CFuncPtr1[Ptr[GMount], Ptr[GDrive]]): Unit = !struct.at(72).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GDrive]]]] = value
    def can_unmount: CFuncPtr1[Ptr[GMount], gboolean] = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], gboolean]]]
    def can_unmount_=(value: CFuncPtr1[Ptr[GMount], gboolean]): Unit = !struct.at(80).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], gboolean]]] = value
    def can_eject: CFuncPtr1[Ptr[GMount], gboolean] = !struct.at(88).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], gboolean]]]
    def can_eject_=(value: CFuncPtr1[Ptr[GMount], gboolean]): Unit = !struct.at(88).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], gboolean]]] = value
    def unmount: CFuncPtr5[Ptr[GMount], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(96).asInstanceOf[Ptr[CFuncPtr5[Ptr[GMount], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def unmount_=(value: CFuncPtr5[Ptr[GMount], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(96).asInstanceOf[Ptr[CFuncPtr5[Ptr[GMount], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def unmount_finish: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(104).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def unmount_finish_=(value: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(104).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def eject: CFuncPtr5[Ptr[GMount], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(112).asInstanceOf[Ptr[CFuncPtr5[Ptr[GMount], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def eject_=(value: CFuncPtr5[Ptr[GMount], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(112).asInstanceOf[Ptr[CFuncPtr5[Ptr[GMount], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def eject_finish: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(120).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def eject_finish_=(value: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(120).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def remount: CFuncPtr6[Ptr[GMount], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(128).asInstanceOf[Ptr[CFuncPtr6[Ptr[GMount], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def remount_=(value: CFuncPtr6[Ptr[GMount], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(128).asInstanceOf[Ptr[CFuncPtr6[Ptr[GMount], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def remount_finish: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def remount_finish_=(value: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def guess_content_type: CFuncPtr5[Ptr[GMount], gboolean, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr5[Ptr[GMount], gboolean, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def guess_content_type_=(value: CFuncPtr5[Ptr[GMount], gboolean, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr5[Ptr[GMount], gboolean, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def guess_content_type_finish: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]]]
    def guess_content_type_finish_=(value: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]]] = value
    def guess_content_type_sync: CFuncPtr4[Ptr[GMount], gboolean, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr4[Ptr[GMount], gboolean, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]]]
    def guess_content_type_sync_=(value: CFuncPtr4[Ptr[GMount], gboolean, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr4[Ptr[GMount], gboolean, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]]] = value
    def pre_unmount: CFuncPtr1[Ptr[GMount], Unit] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Unit]]]
    def pre_unmount_=(value: CFuncPtr1[Ptr[GMount], Unit]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Unit]]] = value
    def unmount_with_operation: CFuncPtr6[Ptr[GMount], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr6[Ptr[GMount], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def unmount_with_operation_=(value: CFuncPtr6[Ptr[GMount], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr6[Ptr[GMount], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def unmount_with_operation_finish: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def unmount_with_operation_finish_=(value: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def eject_with_operation: CFuncPtr6[Ptr[GMount], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr6[Ptr[GMount], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]]
    def eject_with_operation_=(value: CFuncPtr6[Ptr[GMount], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr6[Ptr[GMount], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]]] = value
    def eject_with_operation_finish: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]]
    def eject_with_operation_finish_=(value: CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr3[Ptr[GMount], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]] = value
    def get_default_location: CFuncPtr1[Ptr[GMount], Ptr[GFile]] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GFile]]]]
    def get_default_location_=(value: CFuncPtr1[Ptr[GMount], Ptr[GFile]]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GFile]]]] = value
    def get_sort_key: CFuncPtr1[Ptr[GMount], Ptr[gchar]] = !struct.at(216).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[gchar]]]]
    def get_sort_key_=(value: CFuncPtr1[Ptr[GMount], Ptr[gchar]]): Unit = !struct.at(216).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[gchar]]]] = value
    def get_symbolic_icon: CFuncPtr1[Ptr[GMount], Ptr[GIcon]] = !struct.at(224).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GIcon]]]]
    def get_symbolic_icon_=(value: CFuncPtr1[Ptr[GMount], Ptr[GIcon]]): Unit = !struct.at(224).asInstanceOf[Ptr[CFuncPtr1[Ptr[GMount], Ptr[GIcon]]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
*/
opaque type _GMountOperation = CStruct2[GObject, Ptr[GMountOperationPrivate]]
object _GMountOperation:
  given _tag: Tag[_GMountOperation] = Tag.materializeCStruct2Tag[GObject, Ptr[GMountOperationPrivate]]
  def apply()(using Zone): Ptr[_GMountOperation] = scala.scalanative.unsafe.alloc[_GMountOperation](1)
  def apply(parent_instance : GObject, priv : Ptr[GMountOperationPrivate])(using Zone): Ptr[_GMountOperation] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GMountOperation)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GMountOperationPrivate] = struct._2
    def priv_=(value: Ptr[GMountOperationPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
*/
opaque type _GMountOperationClass = CStruct16[GObjectClass, CFuncPtr5[Ptr[GMountOperation], CString, CString, CString, GAskPasswordFlags, Unit], CFuncPtr3[Ptr[GMountOperation], CString, Ptr[CString], Unit], CFuncPtr2[Ptr[GMountOperation], GMountOperationResult, Unit], CFuncPtr1[Ptr[GMountOperation], Unit], CFuncPtr4[Ptr[GMountOperation], Ptr[gchar], Ptr[GArray], Ptr[Ptr[gchar]], Unit], CFuncPtr4[Ptr[GMountOperation], Ptr[gchar], gint64, gint64, Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GMountOperationClass:
  given _tag: Tag[_GMountOperationClass] = Tag.materializeCStruct16Tag[GObjectClass, CFuncPtr5[Ptr[GMountOperation], CString, CString, CString, GAskPasswordFlags, Unit], CFuncPtr3[Ptr[GMountOperation], CString, Ptr[CString], Unit], CFuncPtr2[Ptr[GMountOperation], GMountOperationResult, Unit], CFuncPtr1[Ptr[GMountOperation], Unit], CFuncPtr4[Ptr[GMountOperation], Ptr[gchar], Ptr[GArray], Ptr[Ptr[gchar]], Unit], CFuncPtr4[Ptr[GMountOperation], Ptr[gchar], gint64, gint64, Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GMountOperationClass] = scala.scalanative.unsafe.alloc[_GMountOperationClass](1)
  def apply(parent_class : GObjectClass, ask_password : CFuncPtr5[Ptr[GMountOperation], CString, CString, CString, GAskPasswordFlags, Unit], ask_question : CFuncPtr3[Ptr[GMountOperation], CString, Ptr[CString], Unit], reply : CFuncPtr2[Ptr[GMountOperation], GMountOperationResult, Unit], aborted : CFuncPtr1[Ptr[GMountOperation], Unit], show_processes : CFuncPtr4[Ptr[GMountOperation], Ptr[gchar], Ptr[GArray], Ptr[Ptr[gchar]], Unit], show_unmount_progress : CFuncPtr4[Ptr[GMountOperation], Ptr[gchar], gint64, gint64, Unit], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit], _g_reserved7 : CFuncPtr0[Unit], _g_reserved8 : CFuncPtr0[Unit], _g_reserved9 : CFuncPtr0[Unit])(using Zone): Ptr[_GMountOperationClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).ask_password = ask_password
    (!____ptr).ask_question = ask_question
    (!____ptr).reply = reply
    (!____ptr).aborted = aborted
    (!____ptr).show_processes = show_processes
    (!____ptr).show_unmount_progress = show_unmount_progress
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    (!____ptr)._g_reserved7 = _g_reserved7
    (!____ptr)._g_reserved8 = _g_reserved8
    (!____ptr)._g_reserved9 = _g_reserved9
    ____ptr
  extension (struct: _GMountOperationClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def ask_password : CFuncPtr5[Ptr[GMountOperation], CString, CString, CString, GAskPasswordFlags, Unit] = struct._2
    def ask_password_=(value: CFuncPtr5[Ptr[GMountOperation], CString, CString, CString, GAskPasswordFlags, Unit]): Unit = !struct.at2 = value
    def ask_question : CFuncPtr3[Ptr[GMountOperation], CString, Ptr[CString], Unit] = struct._3
    def ask_question_=(value: CFuncPtr3[Ptr[GMountOperation], CString, Ptr[CString], Unit]): Unit = !struct.at3 = value
    def reply : CFuncPtr2[Ptr[GMountOperation], GMountOperationResult, Unit] = struct._4
    def reply_=(value: CFuncPtr2[Ptr[GMountOperation], GMountOperationResult, Unit]): Unit = !struct.at4 = value
    def aborted : CFuncPtr1[Ptr[GMountOperation], Unit] = struct._5
    def aborted_=(value: CFuncPtr1[Ptr[GMountOperation], Unit]): Unit = !struct.at5 = value
    def show_processes : CFuncPtr4[Ptr[GMountOperation], Ptr[gchar], Ptr[GArray], Ptr[Ptr[gchar]], Unit] = struct._6
    def show_processes_=(value: CFuncPtr4[Ptr[GMountOperation], Ptr[gchar], Ptr[GArray], Ptr[Ptr[gchar]], Unit]): Unit = !struct.at6 = value
    def show_unmount_progress : CFuncPtr4[Ptr[GMountOperation], Ptr[gchar], gint64, gint64, Unit] = struct._7
    def show_unmount_progress_=(value: CFuncPtr4[Ptr[GMountOperation], Ptr[gchar], gint64, gint64, Unit]): Unit = !struct.at7 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._8
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at8 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._9
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at9 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._10
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at10 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._11
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at11 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._12
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at12 = value
    def _g_reserved6 : CFuncPtr0[Unit] = struct._13
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at13 = value
    def _g_reserved7 : CFuncPtr0[Unit] = struct._14
    def _g_reserved7_=(value: CFuncPtr0[Unit]): Unit = !struct.at14 = value
    def _g_reserved8 : CFuncPtr0[Unit] = struct._15
    def _g_reserved8_=(value: CFuncPtr0[Unit]): Unit = !struct.at15 = value
    def _g_reserved9 : CFuncPtr0[Unit] = struct._16
    def _g_reserved9_=(value: CFuncPtr0[Unit]): Unit = !struct.at16 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
*/
opaque type _GMountOperationPrivate = CStruct0
object _GMountOperationPrivate:
  given _tag: Tag[_GMountOperationPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnativesocketaddress.h
*/
opaque type _GNativeSocketAddress = CStruct2[GSocketAddress, Ptr[GNativeSocketAddressPrivate]]
object _GNativeSocketAddress:
  given _tag: Tag[_GNativeSocketAddress] = Tag.materializeCStruct2Tag[GSocketAddress, Ptr[GNativeSocketAddressPrivate]]
  def apply()(using Zone): Ptr[_GNativeSocketAddress] = scala.scalanative.unsafe.alloc[_GNativeSocketAddress](1)
  def apply(parent_instance : GSocketAddress, priv : Ptr[GNativeSocketAddressPrivate])(using Zone): Ptr[_GNativeSocketAddress] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GNativeSocketAddress)
    def parent_instance : GSocketAddress = struct._1
    def parent_instance_=(value: GSocketAddress): Unit = !struct.at1 = value
    def priv : Ptr[GNativeSocketAddressPrivate] = struct._2
    def priv_=(value: Ptr[GNativeSocketAddressPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnativesocketaddress.h
*/
opaque type _GNativeSocketAddressClass = CStruct1[GSocketAddressClass]
object _GNativeSocketAddressClass:
  given _tag: Tag[_GNativeSocketAddressClass] = Tag.materializeCStruct1Tag[GSocketAddressClass]
  def apply()(using Zone): Ptr[_GNativeSocketAddressClass] = scala.scalanative.unsafe.alloc[_GNativeSocketAddressClass](1)
  def apply(parent_class : GSocketAddressClass)(using Zone): Ptr[_GNativeSocketAddressClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: _GNativeSocketAddressClass)
    def parent_class : GSocketAddressClass = struct._1
    def parent_class_=(value: GSocketAddressClass): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnativesocketaddress.h
*/
opaque type _GNativeSocketAddressPrivate = CStruct0
object _GNativeSocketAddressPrivate:
  given _tag: Tag[_GNativeSocketAddressPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnativevolumemonitor.h
*/
opaque type _GNativeVolumeMonitor = CStruct1[GVolumeMonitor]
object _GNativeVolumeMonitor:
  given _tag: Tag[_GNativeVolumeMonitor] = Tag.materializeCStruct1Tag[GVolumeMonitor]
  def apply()(using Zone): Ptr[_GNativeVolumeMonitor] = scala.scalanative.unsafe.alloc[_GNativeVolumeMonitor](1)
  def apply(parent_instance : GVolumeMonitor)(using Zone): Ptr[_GNativeVolumeMonitor] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _GNativeVolumeMonitor)
    def parent_instance : GVolumeMonitor = struct._1
    def parent_instance_=(value: GVolumeMonitor): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnativevolumemonitor.h
*/
opaque type _GNativeVolumeMonitorClass = CStruct2[GVolumeMonitorClass, CFuncPtr2[CString, Ptr[GCancellable], Ptr[GMount]]]
object _GNativeVolumeMonitorClass:
  given _tag: Tag[_GNativeVolumeMonitorClass] = Tag.materializeCStruct2Tag[GVolumeMonitorClass, CFuncPtr2[CString, Ptr[GCancellable], Ptr[GMount]]]
  def apply()(using Zone): Ptr[_GNativeVolumeMonitorClass] = scala.scalanative.unsafe.alloc[_GNativeVolumeMonitorClass](1)
  def apply(parent_class : GVolumeMonitorClass, get_mount_for_mount_path : CFuncPtr2[CString, Ptr[GCancellable], Ptr[GMount]])(using Zone): Ptr[_GNativeVolumeMonitorClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_mount_for_mount_path = get_mount_for_mount_path
    ____ptr
  extension (struct: _GNativeVolumeMonitorClass)
    def parent_class : GVolumeMonitorClass = struct._1
    def parent_class_=(value: GVolumeMonitorClass): Unit = !struct.at1 = value
    def get_mount_for_mount_path : CFuncPtr2[CString, Ptr[GCancellable], Ptr[GMount]] = struct._2
    def get_mount_for_mount_path_=(value: CFuncPtr2[CString, Ptr[GCancellable], Ptr[GMount]]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkaddress.h
*/
opaque type _GNetworkAddress = CStruct2[GObject, Ptr[GNetworkAddressPrivate]]
object _GNetworkAddress:
  given _tag: Tag[_GNetworkAddress] = Tag.materializeCStruct2Tag[GObject, Ptr[GNetworkAddressPrivate]]
  def apply()(using Zone): Ptr[_GNetworkAddress] = scala.scalanative.unsafe.alloc[_GNetworkAddress](1)
  def apply(parent_instance : GObject, priv : Ptr[GNetworkAddressPrivate])(using Zone): Ptr[_GNetworkAddress] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GNetworkAddress)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GNetworkAddressPrivate] = struct._2
    def priv_=(value: Ptr[GNetworkAddressPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkaddress.h
*/
opaque type _GNetworkAddressClass = CStruct1[GObjectClass]
object _GNetworkAddressClass:
  given _tag: Tag[_GNetworkAddressClass] = Tag.materializeCStruct1Tag[GObjectClass]
  def apply()(using Zone): Ptr[_GNetworkAddressClass] = scala.scalanative.unsafe.alloc[_GNetworkAddressClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[_GNetworkAddressClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: _GNetworkAddressClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkaddress.h
*/
opaque type _GNetworkAddressPrivate = CStruct0
object _GNetworkAddressPrivate:
  given _tag: Tag[_GNetworkAddressPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GNetworkMonitor = CStruct0
object _GNetworkMonitor:
  given _tag: Tag[_GNetworkMonitor] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkmonitor.h
*/
opaque type _GNetworkMonitorInterface = CStruct5[GTypeInterface, CFuncPtr2[Ptr[GNetworkMonitor], gboolean, Unit], CFuncPtr4[Ptr[GNetworkMonitor], Ptr[GSocketConnectable], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr5[Ptr[GNetworkMonitor], Ptr[GSocketConnectable], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GNetworkMonitor], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]
object _GNetworkMonitorInterface:
  given _tag: Tag[_GNetworkMonitorInterface] = Tag.materializeCStruct5Tag[GTypeInterface, CFuncPtr2[Ptr[GNetworkMonitor], gboolean, Unit], CFuncPtr4[Ptr[GNetworkMonitor], Ptr[GSocketConnectable], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr5[Ptr[GNetworkMonitor], Ptr[GSocketConnectable], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GNetworkMonitor], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]]
  def apply()(using Zone): Ptr[_GNetworkMonitorInterface] = scala.scalanative.unsafe.alloc[_GNetworkMonitorInterface](1)
  def apply(g_iface : GTypeInterface, network_changed : CFuncPtr2[Ptr[GNetworkMonitor], gboolean, Unit], can_reach : CFuncPtr4[Ptr[GNetworkMonitor], Ptr[GSocketConnectable], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], can_reach_async : CFuncPtr5[Ptr[GNetworkMonitor], Ptr[GSocketConnectable], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], can_reach_finish : CFuncPtr3[Ptr[GNetworkMonitor], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean])(using Zone): Ptr[_GNetworkMonitorInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).network_changed = network_changed
    (!____ptr).can_reach = can_reach
    (!____ptr).can_reach_async = can_reach_async
    (!____ptr).can_reach_finish = can_reach_finish
    ____ptr
  extension (struct: _GNetworkMonitorInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def network_changed : CFuncPtr2[Ptr[GNetworkMonitor], gboolean, Unit] = struct._2
    def network_changed_=(value: CFuncPtr2[Ptr[GNetworkMonitor], gboolean, Unit]): Unit = !struct.at2 = value
    def can_reach : CFuncPtr4[Ptr[GNetworkMonitor], Ptr[GSocketConnectable], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._3
    def can_reach_=(value: CFuncPtr4[Ptr[GNetworkMonitor], Ptr[GSocketConnectable], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at3 = value
    def can_reach_async : CFuncPtr5[Ptr[GNetworkMonitor], Ptr[GSocketConnectable], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._4
    def can_reach_async_=(value: CFuncPtr5[Ptr[GNetworkMonitor], Ptr[GSocketConnectable], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at4 = value
    def can_reach_finish : CFuncPtr3[Ptr[GNetworkMonitor], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = struct._5
    def can_reach_finish_=(value: CFuncPtr3[Ptr[GNetworkMonitor], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at5 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkservice.h
*/
opaque type _GNetworkService = CStruct2[GObject, Ptr[GNetworkServicePrivate]]
object _GNetworkService:
  given _tag: Tag[_GNetworkService] = Tag.materializeCStruct2Tag[GObject, Ptr[GNetworkServicePrivate]]
  def apply()(using Zone): Ptr[_GNetworkService] = scala.scalanative.unsafe.alloc[_GNetworkService](1)
  def apply(parent_instance : GObject, priv : Ptr[GNetworkServicePrivate])(using Zone): Ptr[_GNetworkService] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GNetworkService)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GNetworkServicePrivate] = struct._2
    def priv_=(value: Ptr[GNetworkServicePrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkservice.h
*/
opaque type _GNetworkServiceClass = CStruct1[GObjectClass]
object _GNetworkServiceClass:
  given _tag: Tag[_GNetworkServiceClass] = Tag.materializeCStruct1Tag[GObjectClass]
  def apply()(using Zone): Ptr[_GNetworkServiceClass] = scala.scalanative.unsafe.alloc[_GNetworkServiceClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[_GNetworkServiceClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: _GNetworkServiceClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkservice.h
*/
opaque type _GNetworkServicePrivate = CStruct0
object _GNetworkServicePrivate:
  given _tag: Tag[_GNetworkServicePrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
*/
opaque type _GNode = CStruct5[gpointer, Ptr[Byte], Ptr[Byte], Ptr[Byte], Ptr[Byte]]
object _GNode:
  given _tag: Tag[_GNode] = Tag.materializeCStruct5Tag[gpointer, Ptr[Byte], Ptr[Byte], Ptr[Byte], Ptr[Byte]]
  def apply()(using Zone): Ptr[_GNode] = scala.scalanative.unsafe.alloc[_GNode](1)
  def apply(data : gpointer, next : Ptr[GNode], prev : Ptr[GNode], parent : Ptr[GNode], children : Ptr[GNode])(using Zone): Ptr[_GNode] = 
    val ____ptr = apply()
    (!____ptr).data = data
    (!____ptr).next = next
    (!____ptr).prev = prev
    (!____ptr).parent = parent
    (!____ptr).children = children
    ____ptr
  extension (struct: _GNode)
    def data : gpointer = struct._1
    def data_=(value: gpointer): Unit = !struct.at1 = value
    def next : Ptr[GNode] = struct._2.asInstanceOf[Ptr[GNode]]
    def next_=(value: Ptr[GNode]): Unit = !struct.at2 = value.asInstanceOf[Ptr[Byte]]
    def prev : Ptr[GNode] = struct._3.asInstanceOf[Ptr[GNode]]
    def prev_=(value: Ptr[GNode]): Unit = !struct.at3 = value.asInstanceOf[Ptr[Byte]]
    def parent : Ptr[GNode] = struct._4.asInstanceOf[Ptr[GNode]]
    def parent_=(value: Ptr[GNode]): Unit = !struct.at4 = value.asInstanceOf[Ptr[Byte]]
    def children : Ptr[GNode] = struct._5.asInstanceOf[Ptr[GNode]]
    def children_=(value: Ptr[GNode]): Unit = !struct.at5 = value.asInstanceOf[Ptr[Byte]]

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GNotification = CStruct0
object _GNotification:
  given _tag: Tag[_GNotification] = Tag.materializeCStruct0Tag

/**
 * GObject:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
*/
opaque type _GObject = CStruct3[GTypeInstance, guint, Ptr[GData]]
object _GObject:
  given _tag: Tag[_GObject] = Tag.materializeCStruct3Tag[GTypeInstance, guint, Ptr[GData]]
  def apply()(using Zone): Ptr[_GObject] = scala.scalanative.unsafe.alloc[_GObject](1)
  def apply(g_type_instance : GTypeInstance, ref_count : guint, qdata : Ptr[GData])(using Zone): Ptr[_GObject] = 
    val ____ptr = apply()
    (!____ptr).g_type_instance = g_type_instance
    (!____ptr).ref_count = ref_count
    (!____ptr).qdata = qdata
    ____ptr
  extension (struct: _GObject)
    def g_type_instance : GTypeInstance = struct._1
    def g_type_instance_=(value: GTypeInstance): Unit = !struct.at1 = value
    def ref_count : guint = struct._2
    def ref_count_=(value: guint): Unit = !struct.at2 = value
    def qdata : Ptr[GData] = struct._3
    def qdata_=(value: Ptr[GData]): Unit = !struct.at3 = value

/**
 * GObjectClass: _type_class: the parent class : the function is called by g_object_new () to complete the object initialization after all the construction properties are set. The first thing a implementation must do is chain up to the of the parent class. Overriding should be rarely needed, e.g. to handle construct properties, or to implement singletons.

 * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
*/
opaque type _GObjectClass = CStruct12[GTypeClass, Ptr[Byte], CFuncPtr3[GType, guint, Ptr[GObjectConstructParam], Ptr[GObject]], CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit], CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit], CFuncPtr1[Ptr[GObject], Unit], CFuncPtr1[Ptr[GObject], Unit], CFuncPtr3[Ptr[GObject], guint, Ptr[Ptr[GParamSpec]], Unit], CFuncPtr2[Ptr[GObject], Ptr[GParamSpec], Unit], CFuncPtr1[Ptr[GObject], Unit], gsize, CArray[gpointer, Nat._6]]
object _GObjectClass:
  given _tag: Tag[_GObjectClass] = Tag.materializeCStruct12Tag[GTypeClass, Ptr[Byte], CFuncPtr3[GType, guint, Ptr[GObjectConstructParam], Ptr[GObject]], CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit], CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit], CFuncPtr1[Ptr[GObject], Unit], CFuncPtr1[Ptr[GObject], Unit], CFuncPtr3[Ptr[GObject], guint, Ptr[Ptr[GParamSpec]], Unit], CFuncPtr2[Ptr[GObject], Ptr[GParamSpec], Unit], CFuncPtr1[Ptr[GObject], Unit], gsize, CArray[gpointer, Nat._6]]
  def apply()(using Zone): Ptr[_GObjectClass] = scala.scalanative.unsafe.alloc[_GObjectClass](1)
  def apply(g_type_class : GTypeClass, construct_properties : Ptr[GSList], constructor : CFuncPtr3[GType, guint, Ptr[GObjectConstructParam], Ptr[GObject]], set_property : CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit], get_property : CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit], dispose : CFuncPtr1[Ptr[GObject], Unit], finalize : CFuncPtr1[Ptr[GObject], Unit], dispatch_properties_changed : CFuncPtr3[Ptr[GObject], guint, Ptr[Ptr[GParamSpec]], Unit], _notify : CFuncPtr2[Ptr[GObject], Ptr[GParamSpec], Unit], constructed : CFuncPtr1[Ptr[GObject], Unit], flags : gsize, pdummy : CArray[gpointer, Nat._6])(using Zone): Ptr[_GObjectClass] = 
    val ____ptr = apply()
    (!____ptr).g_type_class = g_type_class
    (!____ptr).construct_properties = construct_properties
    (!____ptr).constructor = constructor
    (!____ptr).set_property = set_property
    (!____ptr).get_property = get_property
    (!____ptr).dispose = dispose
    (!____ptr).finalize = finalize
    (!____ptr).dispatch_properties_changed = dispatch_properties_changed
    (!____ptr)._notify = _notify
    (!____ptr).constructed = constructed
    (!____ptr).flags = flags
    (!____ptr).pdummy = pdummy
    ____ptr
  extension (struct: _GObjectClass)
    def g_type_class : GTypeClass = struct._1
    def g_type_class_=(value: GTypeClass): Unit = !struct.at1 = value
    def construct_properties : Ptr[GSList] = struct._2.asInstanceOf[Ptr[GSList]]
    def construct_properties_=(value: Ptr[GSList]): Unit = !struct.at2 = value.asInstanceOf[Ptr[Byte]]
    def constructor : CFuncPtr3[GType, guint, Ptr[GObjectConstructParam], Ptr[GObject]] = struct._3
    def constructor_=(value: CFuncPtr3[GType, guint, Ptr[GObjectConstructParam], Ptr[GObject]]): Unit = !struct.at3 = value
    def set_property : CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit] = struct._4
    def set_property_=(value: CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit]): Unit = !struct.at4 = value
    def get_property : CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit] = struct._5
    def get_property_=(value: CFuncPtr4[Ptr[GObject], guint, Ptr[GValue], Ptr[GParamSpec], Unit]): Unit = !struct.at5 = value
    def dispose : CFuncPtr1[Ptr[GObject], Unit] = struct._6
    def dispose_=(value: CFuncPtr1[Ptr[GObject], Unit]): Unit = !struct.at6 = value
    def finalize : CFuncPtr1[Ptr[GObject], Unit] = struct._7
    def finalize_=(value: CFuncPtr1[Ptr[GObject], Unit]): Unit = !struct.at7 = value
    def dispatch_properties_changed : CFuncPtr3[Ptr[GObject], guint, Ptr[Ptr[GParamSpec]], Unit] = struct._8
    def dispatch_properties_changed_=(value: CFuncPtr3[Ptr[GObject], guint, Ptr[Ptr[GParamSpec]], Unit]): Unit = !struct.at8 = value
    def _notify : CFuncPtr2[Ptr[GObject], Ptr[GParamSpec], Unit] = struct._9
    def _notify_=(value: CFuncPtr2[Ptr[GObject], Ptr[GParamSpec], Unit]): Unit = !struct.at9 = value
    def constructed : CFuncPtr1[Ptr[GObject], Unit] = struct._10
    def constructed_=(value: CFuncPtr1[Ptr[GObject], Unit]): Unit = !struct.at10 = value
    def flags : gsize = struct._11
    def flags_=(value: gsize): Unit = !struct.at11 = value
    def pdummy : CArray[gpointer, Nat._6] = struct._12
    def pdummy_=(value: CArray[gpointer, Nat._6]): Unit = !struct.at12 = value

/**
 * GObjectConstructParam: : the #GParamSpec of the construct parameter : the value to set the parameter to

 * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
*/
opaque type _GObjectConstructParam = CStruct2[Ptr[GParamSpec], Ptr[GValue]]
object _GObjectConstructParam:
  given _tag: Tag[_GObjectConstructParam] = Tag.materializeCStruct2Tag[Ptr[GParamSpec], Ptr[GValue]]
  def apply()(using Zone): Ptr[_GObjectConstructParam] = scala.scalanative.unsafe.alloc[_GObjectConstructParam](1)
  def apply(pspec : Ptr[GParamSpec], value : Ptr[GValue])(using Zone): Ptr[_GObjectConstructParam] = 
    val ____ptr = apply()
    (!____ptr).pspec = pspec
    (!____ptr).value = value
    ____ptr
  extension (struct: _GObjectConstructParam)
    def pspec : Ptr[GParamSpec] = struct._1
    def pspec_=(value: Ptr[GParamSpec]): Unit = !struct.at1 = value
    def value : Ptr[GValue] = struct._2
    def value_=(value: Ptr[GValue]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
*/
opaque type _GOnce = CStruct2[GOnceStatus, gpointer]
object _GOnce:
  given _tag: Tag[_GOnce] = Tag.materializeCStruct2Tag[GOnceStatus, gpointer]
  def apply()(using Zone): Ptr[_GOnce] = scala.scalanative.unsafe.alloc[_GOnce](1)
  def apply(status : GOnceStatus, retval : gpointer)(using Zone): Ptr[_GOnce] = 
    val ____ptr = apply()
    (!____ptr).status = status
    (!____ptr).retval = retval
    ____ptr
  extension (struct: _GOnce)
    def status : GOnceStatus = struct._1
    def status_=(value: GOnceStatus): Unit = !struct.at1 = value
    def retval : gpointer = struct._2
    def retval_=(value: gpointer): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
*/
opaque type _GOptionContext = CStruct0
object _GOptionContext:
  given _tag: Tag[_GOptionContext] = Tag.materializeCStruct0Tag

/**
 * _name must be a printable ASCII character different from '-', or zero if the option has no short name. : Flags from #GOptionFlags

 * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
*/
opaque type _GOptionEntry = CStruct7[Ptr[gchar], gchar, gint, GOptionArg, gpointer, Ptr[gchar], Ptr[gchar]]
object _GOptionEntry:
  given _tag: Tag[_GOptionEntry] = Tag.materializeCStruct7Tag[Ptr[gchar], gchar, gint, GOptionArg, gpointer, Ptr[gchar], Ptr[gchar]]
  def apply()(using Zone): Ptr[_GOptionEntry] = scala.scalanative.unsafe.alloc[_GOptionEntry](1)
  def apply(long_name : Ptr[gchar], short_name : gchar, flags : gint, arg : GOptionArg, arg_data : gpointer, description : Ptr[gchar], arg_description : Ptr[gchar])(using Zone): Ptr[_GOptionEntry] = 
    val ____ptr = apply()
    (!____ptr).long_name = long_name
    (!____ptr).short_name = short_name
    (!____ptr).flags = flags
    (!____ptr).arg = arg
    (!____ptr).arg_data = arg_data
    (!____ptr).description = description
    (!____ptr).arg_description = arg_description
    ____ptr
  extension (struct: _GOptionEntry)
    def long_name : Ptr[gchar] = struct._1
    def long_name_=(value: Ptr[gchar]): Unit = !struct.at1 = value
    def short_name : gchar = struct._2
    def short_name_=(value: gchar): Unit = !struct.at2 = value
    def flags : gint = struct._3
    def flags_=(value: gint): Unit = !struct.at3 = value
    def arg : GOptionArg = struct._4
    def arg_=(value: GOptionArg): Unit = !struct.at4 = value
    def arg_data : gpointer = struct._5
    def arg_data_=(value: gpointer): Unit = !struct.at5 = value
    def description : Ptr[gchar] = struct._6
    def description_=(value: Ptr[gchar]): Unit = !struct.at6 = value
    def arg_description : Ptr[gchar] = struct._7
    def arg_description_=(value: Ptr[gchar]): Unit = !struct.at7 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
*/
opaque type _GOptionGroup = CStruct0
object _GOptionGroup:
  given _tag: Tag[_GOptionGroup] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GOutputMessage = CStruct6[Ptr[GSocketAddress], Ptr[GOutputVector], guint, guint, Ptr[Ptr[GSocketControlMessage]], guint]
object _GOutputMessage:
  given _tag: Tag[_GOutputMessage] = Tag.materializeCStruct6Tag[Ptr[GSocketAddress], Ptr[GOutputVector], guint, guint, Ptr[Ptr[GSocketControlMessage]], guint]
  def apply()(using Zone): Ptr[_GOutputMessage] = scala.scalanative.unsafe.alloc[_GOutputMessage](1)
  def apply(address : Ptr[GSocketAddress], vectors : Ptr[GOutputVector], num_vectors : guint, bytes_sent : guint, control_messages : Ptr[Ptr[GSocketControlMessage]], num_control_messages : guint)(using Zone): Ptr[_GOutputMessage] = 
    val ____ptr = apply()
    (!____ptr).address = address
    (!____ptr).vectors = vectors
    (!____ptr).num_vectors = num_vectors
    (!____ptr).bytes_sent = bytes_sent
    (!____ptr).control_messages = control_messages
    (!____ptr).num_control_messages = num_control_messages
    ____ptr
  extension (struct: _GOutputMessage)
    def address : Ptr[GSocketAddress] = struct._1
    def address_=(value: Ptr[GSocketAddress]): Unit = !struct.at1 = value
    def vectors : Ptr[GOutputVector] = struct._2
    def vectors_=(value: Ptr[GOutputVector]): Unit = !struct.at2 = value
    def num_vectors : guint = struct._3
    def num_vectors_=(value: guint): Unit = !struct.at3 = value
    def bytes_sent : guint = struct._4
    def bytes_sent_=(value: guint): Unit = !struct.at4 = value
    def control_messages : Ptr[Ptr[GSocketControlMessage]] = struct._5
    def control_messages_=(value: Ptr[Ptr[GSocketControlMessage]]): Unit = !struct.at5 = value
    def num_control_messages : guint = struct._6
    def num_control_messages_=(value: guint): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
*/
opaque type _GOutputStream = CStruct2[GObject, Ptr[GOutputStreamPrivate]]
object _GOutputStream:
  given _tag: Tag[_GOutputStream] = Tag.materializeCStruct2Tag[GObject, Ptr[GOutputStreamPrivate]]
  def apply()(using Zone): Ptr[_GOutputStream] = scala.scalanative.unsafe.alloc[_GOutputStream](1)
  def apply(parent_instance : GObject, priv : Ptr[GOutputStreamPrivate])(using Zone): Ptr[_GOutputStream] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GOutputStream)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GOutputStreamPrivate] = struct._2
    def priv_=(value: Ptr[GOutputStreamPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
*/
opaque type _GOutputStreamClass = CStruct21[GObjectClass, CFuncPtr5[Ptr[GOutputStream], Ptr[Byte], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize], CFuncPtr5[Ptr[GOutputStream], Ptr[GInputStream], GOutputStreamSpliceFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gssize], CFuncPtr3[Ptr[GOutputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr3[Ptr[GOutputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr7[Ptr[GOutputStream], Ptr[Byte], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize], CFuncPtr7[Ptr[GOutputStream], Ptr[GInputStream], GOutputStreamSpliceFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize], CFuncPtr5[Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr5[Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr6[Ptr[GOutputStream], Ptr[GOutputVector], gsize, Ptr[gsize], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr7[Ptr[GOutputStream], Ptr[GOutputVector], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr4[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[gsize], Ptr[Ptr[GError]], gboolean], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GOutputStreamClass:
  given _tag: Tag[_GOutputStreamClass] = Tag.materializeCStruct21Tag[GObjectClass, CFuncPtr5[Ptr[GOutputStream], Ptr[Byte], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize], CFuncPtr5[Ptr[GOutputStream], Ptr[GInputStream], GOutputStreamSpliceFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gssize], CFuncPtr3[Ptr[GOutputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr3[Ptr[GOutputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr7[Ptr[GOutputStream], Ptr[Byte], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize], CFuncPtr7[Ptr[GOutputStream], Ptr[GInputStream], GOutputStreamSpliceFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize], CFuncPtr5[Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr5[Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr6[Ptr[GOutputStream], Ptr[GOutputVector], gsize, Ptr[gsize], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr7[Ptr[GOutputStream], Ptr[GOutputVector], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr4[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[gsize], Ptr[Ptr[GError]], gboolean], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GOutputStreamClass] = scala.scalanative.unsafe.alloc[_GOutputStreamClass](1)
  def apply(parent_class : GObjectClass, write_fn : CFuncPtr5[Ptr[GOutputStream], Ptr[Byte], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize], splice : CFuncPtr5[Ptr[GOutputStream], Ptr[GInputStream], GOutputStreamSpliceFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gssize], flush : CFuncPtr3[Ptr[GOutputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], close_fn : CFuncPtr3[Ptr[GOutputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], write_async : CFuncPtr7[Ptr[GOutputStream], Ptr[Byte], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], write_finish : CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize], splice_async : CFuncPtr7[Ptr[GOutputStream], Ptr[GInputStream], GOutputStreamSpliceFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], splice_finish : CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize], flush_async : CFuncPtr5[Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], flush_finish : CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], close_async : CFuncPtr5[Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], close_finish : CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], writev_fn : CFuncPtr6[Ptr[GOutputStream], Ptr[GOutputVector], gsize, Ptr[gsize], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], writev_async : CFuncPtr7[Ptr[GOutputStream], Ptr[GOutputVector], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], writev_finish : CFuncPtr4[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[gsize], Ptr[Ptr[GError]], gboolean], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit], _g_reserved7 : CFuncPtr0[Unit], _g_reserved8 : CFuncPtr0[Unit])(using Zone): Ptr[_GOutputStreamClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).write_fn = write_fn
    (!____ptr).splice = splice
    (!____ptr).flush = flush
    (!____ptr).close_fn = close_fn
    (!____ptr).write_async = write_async
    (!____ptr).write_finish = write_finish
    (!____ptr).splice_async = splice_async
    (!____ptr).splice_finish = splice_finish
    (!____ptr).flush_async = flush_async
    (!____ptr).flush_finish = flush_finish
    (!____ptr).close_async = close_async
    (!____ptr).close_finish = close_finish
    (!____ptr).writev_fn = writev_fn
    (!____ptr).writev_async = writev_async
    (!____ptr).writev_finish = writev_finish
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    (!____ptr)._g_reserved7 = _g_reserved7
    (!____ptr)._g_reserved8 = _g_reserved8
    ____ptr
  extension (struct: _GOutputStreamClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def write_fn : CFuncPtr5[Ptr[GOutputStream], Ptr[Byte], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize] = struct._2
    def write_fn_=(value: CFuncPtr5[Ptr[GOutputStream], Ptr[Byte], gsize, Ptr[GCancellable], Ptr[Ptr[GError]], gssize]): Unit = !struct.at2 = value
    def splice : CFuncPtr5[Ptr[GOutputStream], Ptr[GInputStream], GOutputStreamSpliceFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gssize] = struct._3
    def splice_=(value: CFuncPtr5[Ptr[GOutputStream], Ptr[GInputStream], GOutputStreamSpliceFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gssize]): Unit = !struct.at3 = value
    def flush : CFuncPtr3[Ptr[GOutputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._4
    def flush_=(value: CFuncPtr3[Ptr[GOutputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at4 = value
    def close_fn : CFuncPtr3[Ptr[GOutputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._5
    def close_fn_=(value: CFuncPtr3[Ptr[GOutputStream], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at5 = value
    def write_async : CFuncPtr7[Ptr[GOutputStream], Ptr[Byte], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._6
    def write_async_=(value: CFuncPtr7[Ptr[GOutputStream], Ptr[Byte], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at6 = value
    def write_finish : CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize] = struct._7
    def write_finish_=(value: CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize]): Unit = !struct.at7 = value
    def splice_async : CFuncPtr7[Ptr[GOutputStream], Ptr[GInputStream], GOutputStreamSpliceFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._8
    def splice_async_=(value: CFuncPtr7[Ptr[GOutputStream], Ptr[GInputStream], GOutputStreamSpliceFlags, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at8 = value
    def splice_finish : CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize] = struct._9
    def splice_finish_=(value: CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gssize]): Unit = !struct.at9 = value
    def flush_async : CFuncPtr5[Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._10
    def flush_async_=(value: CFuncPtr5[Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at10 = value
    def flush_finish : CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = struct._11
    def flush_finish_=(value: CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at11 = value
    def close_async : CFuncPtr5[Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._12
    def close_async_=(value: CFuncPtr5[Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at12 = value
    def close_finish : CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = struct._13
    def close_finish_=(value: CFuncPtr3[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at13 = value
    def writev_fn : CFuncPtr6[Ptr[GOutputStream], Ptr[GOutputVector], gsize, Ptr[gsize], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._14
    def writev_fn_=(value: CFuncPtr6[Ptr[GOutputStream], Ptr[GOutputVector], gsize, Ptr[gsize], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at14 = value
    def writev_async : CFuncPtr7[Ptr[GOutputStream], Ptr[GOutputVector], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._15
    def writev_async_=(value: CFuncPtr7[Ptr[GOutputStream], Ptr[GOutputVector], gsize, CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at15 = value
    def writev_finish : CFuncPtr4[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[gsize], Ptr[Ptr[GError]], gboolean] = struct._16
    def writev_finish_=(value: CFuncPtr4[Ptr[GOutputStream], Ptr[GAsyncResult], Ptr[gsize], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at16 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._17
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at17 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._18
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at18 = value
    def _g_reserved6 : CFuncPtr0[Unit] = struct._19
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at19 = value
    def _g_reserved7 : CFuncPtr0[Unit] = struct._20
    def _g_reserved7_=(value: CFuncPtr0[Unit]): Unit = !struct.at20 = value
    def _g_reserved8 : CFuncPtr0[Unit] = struct._21
    def _g_reserved8_=(value: CFuncPtr0[Unit]): Unit = !struct.at21 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
*/
opaque type _GOutputStreamPrivate = CStruct0
object _GOutputStreamPrivate:
  given _tag: Tag[_GOutputStreamPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GOutputVector = CStruct2[gconstpointer, gsize]
object _GOutputVector:
  given _tag: Tag[_GOutputVector] = Tag.materializeCStruct2Tag[gconstpointer, gsize]
  def apply()(using Zone): Ptr[_GOutputVector] = scala.scalanative.unsafe.alloc[_GOutputVector](1)
  def apply(buffer : gconstpointer, size : gsize)(using Zone): Ptr[_GOutputVector] = 
    val ____ptr = apply()
    (!____ptr).buffer = buffer
    (!____ptr).size = size
    ____ptr
  extension (struct: _GOutputVector)
    def buffer : gconstpointer = struct._1
    def buffer_=(value: gconstpointer): Unit = !struct.at1 = value
    def size : gsize = struct._2
    def size_=(value: gsize): Unit = !struct.at2 = value

/**
 * GParamSpec: (ref-func g_param_spec_ref_sink) (unref-func g_param_spec_unref) (set-value-func g_value_set_param) (get-value-func g_value_get_param) _type_instance: private #GTypeInstance portion : #GParamFlags flags for this parameter _type: the #GValue type for this parameter _type: #GType type that uses (introduces) this parameter

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
*/
opaque type _GParamSpec = CStruct10[GTypeInstance, Ptr[gchar], GParamFlags, GType, GType, Ptr[gchar], Ptr[gchar], Ptr[GData], guint, guint]
object _GParamSpec:
  given _tag: Tag[_GParamSpec] = Tag.materializeCStruct10Tag[GTypeInstance, Ptr[gchar], GParamFlags, GType, GType, Ptr[gchar], Ptr[gchar], Ptr[GData], guint, guint]
  def apply()(using Zone): Ptr[_GParamSpec] = scala.scalanative.unsafe.alloc[_GParamSpec](1)
  def apply(g_type_instance : GTypeInstance, name : Ptr[gchar], flags : GParamFlags, value_type : GType, owner_type : GType, _nick : Ptr[gchar], _blurb : Ptr[gchar], qdata : Ptr[GData], ref_count : guint, param_id : guint)(using Zone): Ptr[_GParamSpec] = 
    val ____ptr = apply()
    (!____ptr).g_type_instance = g_type_instance
    (!____ptr).name = name
    (!____ptr).flags = flags
    (!____ptr).value_type = value_type
    (!____ptr).owner_type = owner_type
    (!____ptr)._nick = _nick
    (!____ptr)._blurb = _blurb
    (!____ptr).qdata = qdata
    (!____ptr).ref_count = ref_count
    (!____ptr).param_id = param_id
    ____ptr
  extension (struct: _GParamSpec)
    def g_type_instance : GTypeInstance = struct._1
    def g_type_instance_=(value: GTypeInstance): Unit = !struct.at1 = value
    def name : Ptr[gchar] = struct._2
    def name_=(value: Ptr[gchar]): Unit = !struct.at2 = value
    def flags : GParamFlags = struct._3
    def flags_=(value: GParamFlags): Unit = !struct.at3 = value
    def value_type : GType = struct._4
    def value_type_=(value: GType): Unit = !struct.at4 = value
    def owner_type : GType = struct._5
    def owner_type_=(value: GType): Unit = !struct.at5 = value
    def _nick : Ptr[gchar] = struct._6
    def _nick_=(value: Ptr[gchar]): Unit = !struct.at6 = value
    def _blurb : Ptr[gchar] = struct._7
    def _blurb_=(value: Ptr[gchar]): Unit = !struct.at7 = value
    def qdata : Ptr[GData] = struct._8
    def qdata_=(value: Ptr[GData]): Unit = !struct.at8 = value
    def ref_count : guint = struct._9
    def ref_count_=(value: guint): Unit = !struct.at9 = value
    def param_id : guint = struct._10
    def param_id_=(value: guint): Unit = !struct.at10 = value

/**
 * GParamSpecBoolean: _instance: private #GParamSpec portion _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecBoolean = CStruct2[GParamSpec, gboolean]
object _GParamSpecBoolean:
  given _tag: Tag[_GParamSpecBoolean] = Tag.materializeCStruct2Tag[GParamSpec, gboolean]
  def apply()(using Zone): Ptr[_GParamSpecBoolean] = scala.scalanative.unsafe.alloc[_GParamSpecBoolean](1)
  def apply(parent_instance : GParamSpec, default_value : gboolean)(using Zone): Ptr[_GParamSpecBoolean] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: _GParamSpecBoolean)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value
    def default_value : gboolean = struct._2
    def default_value_=(value: gboolean): Unit = !struct.at2 = value

/**
 * GParamSpecBoxed: _instance: private #GParamSpec portion

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecBoxed = CStruct1[GParamSpec]
object _GParamSpecBoxed:
  given _tag: Tag[_GParamSpecBoxed] = Tag.materializeCStruct1Tag[GParamSpec]
  def apply()(using Zone): Ptr[_GParamSpecBoxed] = scala.scalanative.unsafe.alloc[_GParamSpecBoxed](1)
  def apply(parent_instance : GParamSpec)(using Zone): Ptr[_GParamSpecBoxed] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _GParamSpecBoxed)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value

/**
 * GParamSpecChar: _instance: private #GParamSpec portion : minimum value for the property specified : maximum value for the property specified _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecChar = CStruct4[GParamSpec, gint8, gint8, gint8]
object _GParamSpecChar:
  given _tag: Tag[_GParamSpecChar] = Tag.materializeCStruct4Tag[GParamSpec, gint8, gint8, gint8]
  def apply()(using Zone): Ptr[_GParamSpecChar] = scala.scalanative.unsafe.alloc[_GParamSpecChar](1)
  def apply(parent_instance : GParamSpec, minimum : gint8, maximum : gint8, default_value : gint8)(using Zone): Ptr[_GParamSpecChar] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: _GParamSpecChar)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value
    def minimum : gint8 = struct._2
    def minimum_=(value: gint8): Unit = !struct.at2 = value
    def maximum : gint8 = struct._3
    def maximum_=(value: gint8): Unit = !struct.at3 = value
    def default_value : gint8 = struct._4
    def default_value_=(value: gint8): Unit = !struct.at4 = value

/**
 * GParamSpecClass: _type_class: the parent class _type: the #GValue type for this parameter : The instance finalization function (optional), should chain up to the finalize method of the parent class. _set_default: Resets a to the default value for this type (recommended, the default is g_value_reset()), see g_param_value_set_default(). _validate: Ensures that the contents of comply with the specifications set out by this type (optional), see g_param_value_validate(). _cmp: Compares with according to this type (recommended, the default is memcmp()), see g_param_values_cmp().

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
*/
opaque type _GParamSpecClass = CStruct7[GTypeClass, GType, CFuncPtr1[Ptr[GParamSpec], Unit], CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], Unit], CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], gboolean], CFuncPtr3[Ptr[GParamSpec], Ptr[GValue], Ptr[GValue], gint], CArray[gpointer, Nat._4]]
object _GParamSpecClass:
  given _tag: Tag[_GParamSpecClass] = Tag.materializeCStruct7Tag[GTypeClass, GType, CFuncPtr1[Ptr[GParamSpec], Unit], CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], Unit], CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], gboolean], CFuncPtr3[Ptr[GParamSpec], Ptr[GValue], Ptr[GValue], gint], CArray[gpointer, Nat._4]]
  def apply()(using Zone): Ptr[_GParamSpecClass] = scala.scalanative.unsafe.alloc[_GParamSpecClass](1)
  def apply(g_type_class : GTypeClass, value_type : GType, finalize : CFuncPtr1[Ptr[GParamSpec], Unit], value_set_default : CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], Unit], value_validate : CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], gboolean], values_cmp : CFuncPtr3[Ptr[GParamSpec], Ptr[GValue], Ptr[GValue], gint], dummy : CArray[gpointer, Nat._4])(using Zone): Ptr[_GParamSpecClass] = 
    val ____ptr = apply()
    (!____ptr).g_type_class = g_type_class
    (!____ptr).value_type = value_type
    (!____ptr).finalize = finalize
    (!____ptr).value_set_default = value_set_default
    (!____ptr).value_validate = value_validate
    (!____ptr).values_cmp = values_cmp
    (!____ptr).dummy = dummy
    ____ptr
  extension (struct: _GParamSpecClass)
    def g_type_class : GTypeClass = struct._1
    def g_type_class_=(value: GTypeClass): Unit = !struct.at1 = value
    def value_type : GType = struct._2
    def value_type_=(value: GType): Unit = !struct.at2 = value
    def finalize : CFuncPtr1[Ptr[GParamSpec], Unit] = struct._3
    def finalize_=(value: CFuncPtr1[Ptr[GParamSpec], Unit]): Unit = !struct.at3 = value
    def value_set_default : CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], Unit] = struct._4
    def value_set_default_=(value: CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], Unit]): Unit = !struct.at4 = value
    def value_validate : CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], gboolean] = struct._5
    def value_validate_=(value: CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], gboolean]): Unit = !struct.at5 = value
    def values_cmp : CFuncPtr3[Ptr[GParamSpec], Ptr[GValue], Ptr[GValue], gint] = struct._6
    def values_cmp_=(value: CFuncPtr3[Ptr[GParamSpec], Ptr[GValue], Ptr[GValue], gint]): Unit = !struct.at6 = value
    def dummy : CArray[gpointer, Nat._4] = struct._7
    def dummy_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at7 = value

/**
 * GParamSpecDouble: _instance: private #GParamSpec portion : minimum value for the property specified : maximum value for the property specified _value: default value for the property specified : values closer than will be considered identical by g_param_values_cmp(); the default value is 1e-90.

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecDouble = CStruct5[GParamSpec, gdouble, gdouble, gdouble, gdouble]
object _GParamSpecDouble:
  given _tag: Tag[_GParamSpecDouble] = Tag.materializeCStruct5Tag[GParamSpec, gdouble, gdouble, gdouble, gdouble]
  def apply()(using Zone): Ptr[_GParamSpecDouble] = scala.scalanative.unsafe.alloc[_GParamSpecDouble](1)
  def apply(parent_instance : GParamSpec, minimum : gdouble, maximum : gdouble, default_value : gdouble, epsilon : gdouble)(using Zone): Ptr[_GParamSpecDouble] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).default_value = default_value
    (!____ptr).epsilon = epsilon
    ____ptr
  extension (struct: _GParamSpecDouble)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value
    def minimum : gdouble = struct._2
    def minimum_=(value: gdouble): Unit = !struct.at2 = value
    def maximum : gdouble = struct._3
    def maximum_=(value: gdouble): Unit = !struct.at3 = value
    def default_value : gdouble = struct._4
    def default_value_=(value: gdouble): Unit = !struct.at4 = value
    def epsilon : gdouble = struct._5
    def epsilon_=(value: gdouble): Unit = !struct.at5 = value

/**
 * GParamSpecEnum: _instance: private #GParamSpec portion _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecEnum = CStruct3[GParamSpec, Ptr[GEnumClass], gint]
object _GParamSpecEnum:
  given _tag: Tag[_GParamSpecEnum] = Tag.materializeCStruct3Tag[GParamSpec, Ptr[GEnumClass], gint]
  def apply()(using Zone): Ptr[_GParamSpecEnum] = scala.scalanative.unsafe.alloc[_GParamSpecEnum](1)
  def apply(parent_instance : GParamSpec, enum_class : Ptr[GEnumClass], default_value : gint)(using Zone): Ptr[_GParamSpecEnum] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).enum_class = enum_class
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: _GParamSpecEnum)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value
    def enum_class : Ptr[GEnumClass] = struct._2
    def enum_class_=(value: Ptr[GEnumClass]): Unit = !struct.at2 = value
    def default_value : gint = struct._3
    def default_value_=(value: gint): Unit = !struct.at3 = value

/**
 * GParamSpecFlags: _instance: private #GParamSpec portion _class: the #GFlagsClass for the flags _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecFlags = CStruct3[GParamSpec, Ptr[GFlagsClass], guint]
object _GParamSpecFlags:
  given _tag: Tag[_GParamSpecFlags] = Tag.materializeCStruct3Tag[GParamSpec, Ptr[GFlagsClass], guint]
  def apply()(using Zone): Ptr[_GParamSpecFlags] = scala.scalanative.unsafe.alloc[_GParamSpecFlags](1)
  def apply(parent_instance : GParamSpec, flags_class : Ptr[GFlagsClass], default_value : guint)(using Zone): Ptr[_GParamSpecFlags] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).flags_class = flags_class
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: _GParamSpecFlags)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value
    def flags_class : Ptr[GFlagsClass] = struct._2
    def flags_class_=(value: Ptr[GFlagsClass]): Unit = !struct.at2 = value
    def default_value : guint = struct._3
    def default_value_=(value: guint): Unit = !struct.at3 = value

/**
 * GParamSpecFloat: _instance: private #GParamSpec portion : minimum value for the property specified : maximum value for the property specified _value: default value for the property specified : values closer than will be considered identical by g_param_values_cmp(); the default value is 1e-30.

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecFloat = CStruct5[GParamSpec, gfloat, gfloat, gfloat, gfloat]
object _GParamSpecFloat:
  given _tag: Tag[_GParamSpecFloat] = Tag.materializeCStruct5Tag[GParamSpec, gfloat, gfloat, gfloat, gfloat]
  def apply()(using Zone): Ptr[_GParamSpecFloat] = scala.scalanative.unsafe.alloc[_GParamSpecFloat](1)
  def apply(parent_instance : GParamSpec, minimum : gfloat, maximum : gfloat, default_value : gfloat, epsilon : gfloat)(using Zone): Ptr[_GParamSpecFloat] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).default_value = default_value
    (!____ptr).epsilon = epsilon
    ____ptr
  extension (struct: _GParamSpecFloat)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value
    def minimum : gfloat = struct._2
    def minimum_=(value: gfloat): Unit = !struct.at2 = value
    def maximum : gfloat = struct._3
    def maximum_=(value: gfloat): Unit = !struct.at3 = value
    def default_value : gfloat = struct._4
    def default_value_=(value: gfloat): Unit = !struct.at4 = value
    def epsilon : gfloat = struct._5
    def epsilon_=(value: gfloat): Unit = !struct.at5 = value

/**
 * GParamSpecGType: _instance: private #GParamSpec portion

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecGType = CStruct2[GParamSpec, GType]
object _GParamSpecGType:
  given _tag: Tag[_GParamSpecGType] = Tag.materializeCStruct2Tag[GParamSpec, GType]
  def apply()(using Zone): Ptr[_GParamSpecGType] = scala.scalanative.unsafe.alloc[_GParamSpecGType](1)
  def apply(parent_instance : GParamSpec, is_a_type : GType)(using Zone): Ptr[_GParamSpecGType] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).is_a_type = is_a_type
    ____ptr
  extension (struct: _GParamSpecGType)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value
    def is_a_type : GType = struct._2
    def is_a_type_=(value: GType): Unit = !struct.at2 = value

/**
 * GParamSpecInt: _instance: private #GParamSpec portion : minimum value for the property specified : maximum value for the property specified _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecInt = CStruct4[GParamSpec, gint, gint, gint]
object _GParamSpecInt:
  given _tag: Tag[_GParamSpecInt] = Tag.materializeCStruct4Tag[GParamSpec, gint, gint, gint]
  def apply()(using Zone): Ptr[_GParamSpecInt] = scala.scalanative.unsafe.alloc[_GParamSpecInt](1)
  def apply(parent_instance : GParamSpec, minimum : gint, maximum : gint, default_value : gint)(using Zone): Ptr[_GParamSpecInt] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: _GParamSpecInt)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value
    def minimum : gint = struct._2
    def minimum_=(value: gint): Unit = !struct.at2 = value
    def maximum : gint = struct._3
    def maximum_=(value: gint): Unit = !struct.at3 = value
    def default_value : gint = struct._4
    def default_value_=(value: gint): Unit = !struct.at4 = value

/**
 * GParamSpecInt64: _instance: private #GParamSpec portion : minimum value for the property specified : maximum value for the property specified _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecInt64 = CStruct4[GParamSpec, gint64, gint64, gint64]
object _GParamSpecInt64:
  given _tag: Tag[_GParamSpecInt64] = Tag.materializeCStruct4Tag[GParamSpec, gint64, gint64, gint64]
  def apply()(using Zone): Ptr[_GParamSpecInt64] = scala.scalanative.unsafe.alloc[_GParamSpecInt64](1)
  def apply(parent_instance : GParamSpec, minimum : gint64, maximum : gint64, default_value : gint64)(using Zone): Ptr[_GParamSpecInt64] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: _GParamSpecInt64)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value
    def minimum : gint64 = struct._2
    def minimum_=(value: gint64): Unit = !struct.at2 = value
    def maximum : gint64 = struct._3
    def maximum_=(value: gint64): Unit = !struct.at3 = value
    def default_value : gint64 = struct._4
    def default_value_=(value: gint64): Unit = !struct.at4 = value

/**
 * GParamSpecLong: _instance: private #GParamSpec portion : minimum value for the property specified : maximum value for the property specified _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecLong = CStruct4[GParamSpec, glong, glong, glong]
object _GParamSpecLong:
  given _tag: Tag[_GParamSpecLong] = Tag.materializeCStruct4Tag[GParamSpec, glong, glong, glong]
  def apply()(using Zone): Ptr[_GParamSpecLong] = scala.scalanative.unsafe.alloc[_GParamSpecLong](1)
  def apply(parent_instance : GParamSpec, minimum : glong, maximum : glong, default_value : glong)(using Zone): Ptr[_GParamSpecLong] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: _GParamSpecLong)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value
    def minimum : glong = struct._2
    def minimum_=(value: glong): Unit = !struct.at2 = value
    def maximum : glong = struct._3
    def maximum_=(value: glong): Unit = !struct.at3 = value
    def default_value : glong = struct._4
    def default_value_=(value: glong): Unit = !struct.at4 = value

/**
 * GParamSpecObject: _instance: private #GParamSpec portion

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecObject = CStruct1[GParamSpec]
object _GParamSpecObject:
  given _tag: Tag[_GParamSpecObject] = Tag.materializeCStruct1Tag[GParamSpec]
  def apply()(using Zone): Ptr[_GParamSpecObject] = scala.scalanative.unsafe.alloc[_GParamSpecObject](1)
  def apply(parent_instance : GParamSpec)(using Zone): Ptr[_GParamSpecObject] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _GParamSpecObject)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value

/**
 * GParamSpecOverride:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecOverride = CStruct2[GParamSpec, Ptr[GParamSpec]]
object _GParamSpecOverride:
  given _tag: Tag[_GParamSpecOverride] = Tag.materializeCStruct2Tag[GParamSpec, Ptr[GParamSpec]]
  def apply()(using Zone): Ptr[_GParamSpecOverride] = scala.scalanative.unsafe.alloc[_GParamSpecOverride](1)
  def apply(parent_instance : GParamSpec, overridden : Ptr[GParamSpec])(using Zone): Ptr[_GParamSpecOverride] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).overridden = overridden
    ____ptr
  extension (struct: _GParamSpecOverride)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value
    def overridden : Ptr[GParamSpec] = struct._2
    def overridden_=(value: Ptr[GParamSpec]): Unit = !struct.at2 = value

/**
 * GParamSpecParam: _instance: private #GParamSpec portion

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecParam = CStruct1[GParamSpec]
object _GParamSpecParam:
  given _tag: Tag[_GParamSpecParam] = Tag.materializeCStruct1Tag[GParamSpec]
  def apply()(using Zone): Ptr[_GParamSpecParam] = scala.scalanative.unsafe.alloc[_GParamSpecParam](1)
  def apply(parent_instance : GParamSpec)(using Zone): Ptr[_GParamSpecParam] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _GParamSpecParam)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value

/**
 * GParamSpecPointer: _instance: private #GParamSpec portion

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecPointer = CStruct1[GParamSpec]
object _GParamSpecPointer:
  given _tag: Tag[_GParamSpecPointer] = Tag.materializeCStruct1Tag[GParamSpec]
  def apply()(using Zone): Ptr[_GParamSpecPointer] = scala.scalanative.unsafe.alloc[_GParamSpecPointer](1)
  def apply(parent_instance : GParamSpec)(using Zone): Ptr[_GParamSpecPointer] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _GParamSpecPointer)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
*/
opaque type _GParamSpecPool = CStruct0
object _GParamSpecPool:
  given _tag: Tag[_GParamSpecPool] = Tag.materializeCStruct0Tag

/**
 * GParamSpecString: _instance: private #GParamSpec portion _value: default value for the property specified _first: a string containing the allowed values for the first byte _nth: a string containing the allowed values for the subsequent bytes : the replacement byte for bytes which don't match _first or _nth. _fold_if_empty: replace empty string by %NULL _non_null: replace %NULL strings by an empty string

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecString = CStruct7[GParamSpec, Ptr[gchar], Ptr[gchar], Ptr[gchar], gchar, guint, guint]
object _GParamSpecString:
  given _tag: Tag[_GParamSpecString] = Tag.materializeCStruct7Tag[GParamSpec, Ptr[gchar], Ptr[gchar], Ptr[gchar], gchar, guint, guint]
  def apply()(using Zone): Ptr[_GParamSpecString] = scala.scalanative.unsafe.alloc[_GParamSpecString](1)
  def apply(parent_instance : GParamSpec, default_value : Ptr[gchar], cset_first : Ptr[gchar], cset_nth : Ptr[gchar], substitutor : gchar, null_fold_if_empty : guint, ensure_non_null : guint)(using Zone): Ptr[_GParamSpecString] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).default_value = default_value
    (!____ptr).cset_first = cset_first
    (!____ptr).cset_nth = cset_nth
    (!____ptr).substitutor = substitutor
    (!____ptr).null_fold_if_empty = null_fold_if_empty
    (!____ptr).ensure_non_null = ensure_non_null
    ____ptr
  extension (struct: _GParamSpecString)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value
    def default_value : Ptr[gchar] = struct._2
    def default_value_=(value: Ptr[gchar]): Unit = !struct.at2 = value
    def cset_first : Ptr[gchar] = struct._3
    def cset_first_=(value: Ptr[gchar]): Unit = !struct.at3 = value
    def cset_nth : Ptr[gchar] = struct._4
    def cset_nth_=(value: Ptr[gchar]): Unit = !struct.at4 = value
    def substitutor : gchar = struct._5
    def substitutor_=(value: gchar): Unit = !struct.at5 = value
    def null_fold_if_empty : guint = struct._6
    def null_fold_if_empty_=(value: guint): Unit = !struct.at6 = value
    def ensure_non_null : guint = struct._7
    def ensure_non_null_=(value: guint): Unit = !struct.at7 = value

/**
 * GParamSpecTypeInfo: _size: Size of the instance (object) structure. _preallocs: Prior to GLib 2.10, it specified the number of pre-allocated (cached) instances to reserve memory for (0 indicates no caching). Since GLib 2.10, it is ignored, since instances are allocated with the [slice allocator][glib-Memory-Slices] now. _init: Location of the instance initialization function (optional). _type: The #GType of values conforming to this #GParamSpec : The instance finalization function (optional). _set_default: Resets a to the default value for (recommended, the default is g_value_reset()), see g_param_value_set_default(). _validate: Ensures that the contents of comply with the specifications set out by (optional), see g_param_value_validate(). _cmp: Compares with according to (recommended, the default is memcmp()), see g_param_values_cmp().

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
*/
opaque type _GParamSpecTypeInfo = CStruct8[guint16, guint16, CFuncPtr1[Ptr[GParamSpec], Unit], GType, CFuncPtr1[Ptr[GParamSpec], Unit], CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], Unit], CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], gboolean], CFuncPtr3[Ptr[GParamSpec], Ptr[GValue], Ptr[GValue], gint]]
object _GParamSpecTypeInfo:
  given _tag: Tag[_GParamSpecTypeInfo] = Tag.materializeCStruct8Tag[guint16, guint16, CFuncPtr1[Ptr[GParamSpec], Unit], GType, CFuncPtr1[Ptr[GParamSpec], Unit], CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], Unit], CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], gboolean], CFuncPtr3[Ptr[GParamSpec], Ptr[GValue], Ptr[GValue], gint]]
  def apply()(using Zone): Ptr[_GParamSpecTypeInfo] = scala.scalanative.unsafe.alloc[_GParamSpecTypeInfo](1)
  def apply(instance_size : guint16, n_preallocs : guint16, instance_init : CFuncPtr1[Ptr[GParamSpec], Unit], value_type : GType, finalize : CFuncPtr1[Ptr[GParamSpec], Unit], value_set_default : CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], Unit], value_validate : CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], gboolean], values_cmp : CFuncPtr3[Ptr[GParamSpec], Ptr[GValue], Ptr[GValue], gint])(using Zone): Ptr[_GParamSpecTypeInfo] = 
    val ____ptr = apply()
    (!____ptr).instance_size = instance_size
    (!____ptr).n_preallocs = n_preallocs
    (!____ptr).instance_init = instance_init
    (!____ptr).value_type = value_type
    (!____ptr).finalize = finalize
    (!____ptr).value_set_default = value_set_default
    (!____ptr).value_validate = value_validate
    (!____ptr).values_cmp = values_cmp
    ____ptr
  extension (struct: _GParamSpecTypeInfo)
    def instance_size : guint16 = struct._1
    def instance_size_=(value: guint16): Unit = !struct.at1 = value
    def n_preallocs : guint16 = struct._2
    def n_preallocs_=(value: guint16): Unit = !struct.at2 = value
    def instance_init : CFuncPtr1[Ptr[GParamSpec], Unit] = struct._3
    def instance_init_=(value: CFuncPtr1[Ptr[GParamSpec], Unit]): Unit = !struct.at3 = value
    def value_type : GType = struct._4
    def value_type_=(value: GType): Unit = !struct.at4 = value
    def finalize : CFuncPtr1[Ptr[GParamSpec], Unit] = struct._5
    def finalize_=(value: CFuncPtr1[Ptr[GParamSpec], Unit]): Unit = !struct.at5 = value
    def value_set_default : CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], Unit] = struct._6
    def value_set_default_=(value: CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], Unit]): Unit = !struct.at6 = value
    def value_validate : CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], gboolean] = struct._7
    def value_validate_=(value: CFuncPtr2[Ptr[GParamSpec], Ptr[GValue], gboolean]): Unit = !struct.at7 = value
    def values_cmp : CFuncPtr3[Ptr[GParamSpec], Ptr[GValue], Ptr[GValue], gint] = struct._8
    def values_cmp_=(value: CFuncPtr3[Ptr[GParamSpec], Ptr[GValue], Ptr[GValue], gint]): Unit = !struct.at8 = value

/**
 * GParamSpecUChar: _instance: private #GParamSpec portion : minimum value for the property specified : maximum value for the property specified _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecUChar = CStruct4[GParamSpec, guint8, guint8, guint8]
object _GParamSpecUChar:
  given _tag: Tag[_GParamSpecUChar] = Tag.materializeCStruct4Tag[GParamSpec, guint8, guint8, guint8]
  def apply()(using Zone): Ptr[_GParamSpecUChar] = scala.scalanative.unsafe.alloc[_GParamSpecUChar](1)
  def apply(parent_instance : GParamSpec, minimum : guint8, maximum : guint8, default_value : guint8)(using Zone): Ptr[_GParamSpecUChar] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: _GParamSpecUChar)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value
    def minimum : guint8 = struct._2
    def minimum_=(value: guint8): Unit = !struct.at2 = value
    def maximum : guint8 = struct._3
    def maximum_=(value: guint8): Unit = !struct.at3 = value
    def default_value : guint8 = struct._4
    def default_value_=(value: guint8): Unit = !struct.at4 = value

/**
 * GParamSpecUInt: _instance: private #GParamSpec portion : minimum value for the property specified : maximum value for the property specified _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecUInt = CStruct4[GParamSpec, guint, guint, guint]
object _GParamSpecUInt:
  given _tag: Tag[_GParamSpecUInt] = Tag.materializeCStruct4Tag[GParamSpec, guint, guint, guint]
  def apply()(using Zone): Ptr[_GParamSpecUInt] = scala.scalanative.unsafe.alloc[_GParamSpecUInt](1)
  def apply(parent_instance : GParamSpec, minimum : guint, maximum : guint, default_value : guint)(using Zone): Ptr[_GParamSpecUInt] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: _GParamSpecUInt)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value
    def minimum : guint = struct._2
    def minimum_=(value: guint): Unit = !struct.at2 = value
    def maximum : guint = struct._3
    def maximum_=(value: guint): Unit = !struct.at3 = value
    def default_value : guint = struct._4
    def default_value_=(value: guint): Unit = !struct.at4 = value

/**
 * GParamSpecUInt64: _instance: private #GParamSpec portion : minimum value for the property specified : maximum value for the property specified _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecUInt64 = CStruct4[GParamSpec, guint64, guint64, guint64]
object _GParamSpecUInt64:
  given _tag: Tag[_GParamSpecUInt64] = Tag.materializeCStruct4Tag[GParamSpec, guint64, guint64, guint64]
  def apply()(using Zone): Ptr[_GParamSpecUInt64] = scala.scalanative.unsafe.alloc[_GParamSpecUInt64](1)
  def apply(parent_instance : GParamSpec, minimum : guint64, maximum : guint64, default_value : guint64)(using Zone): Ptr[_GParamSpecUInt64] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: _GParamSpecUInt64)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value
    def minimum : guint64 = struct._2
    def minimum_=(value: guint64): Unit = !struct.at2 = value
    def maximum : guint64 = struct._3
    def maximum_=(value: guint64): Unit = !struct.at3 = value
    def default_value : guint64 = struct._4
    def default_value_=(value: guint64): Unit = !struct.at4 = value

/**
 * GParamSpecULong: _instance: private #GParamSpec portion : minimum value for the property specified : maximum value for the property specified _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecULong = CStruct4[GParamSpec, gulong, gulong, gulong]
object _GParamSpecULong:
  given _tag: Tag[_GParamSpecULong] = Tag.materializeCStruct4Tag[GParamSpec, gulong, gulong, gulong]
  def apply()(using Zone): Ptr[_GParamSpecULong] = scala.scalanative.unsafe.alloc[_GParamSpecULong](1)
  def apply(parent_instance : GParamSpec, minimum : gulong, maximum : gulong, default_value : gulong)(using Zone): Ptr[_GParamSpecULong] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).minimum = minimum
    (!____ptr).maximum = maximum
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: _GParamSpecULong)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value
    def minimum : gulong = struct._2
    def minimum_=(value: gulong): Unit = !struct.at2 = value
    def maximum : gulong = struct._3
    def maximum_=(value: gulong): Unit = !struct.at3 = value
    def default_value : gulong = struct._4
    def default_value_=(value: gulong): Unit = !struct.at4 = value

/**
 * GParamSpecUnichar: _instance: private #GParamSpec portion _value: default value for the property specified

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecUnichar = CStruct2[GParamSpec, gunichar]
object _GParamSpecUnichar:
  given _tag: Tag[_GParamSpecUnichar] = Tag.materializeCStruct2Tag[GParamSpec, gunichar]
  def apply()(using Zone): Ptr[_GParamSpecUnichar] = scala.scalanative.unsafe.alloc[_GParamSpecUnichar](1)
  def apply(parent_instance : GParamSpec, default_value : gunichar)(using Zone): Ptr[_GParamSpecUnichar] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).default_value = default_value
    ____ptr
  extension (struct: _GParamSpecUnichar)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value
    def default_value : gunichar = struct._2
    def default_value_=(value: gunichar): Unit = !struct.at2 = value

/**
 * GParamSpecValueArray: _instance: private #GParamSpec portion _spec: a #GParamSpec describing the elements contained in arrays of this property, may be %NULL _n_elements: if greater than 0, arrays of this property will always have this many elements

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecValueArray = CStruct3[GParamSpec, Ptr[GParamSpec], guint]
object _GParamSpecValueArray:
  given _tag: Tag[_GParamSpecValueArray] = Tag.materializeCStruct3Tag[GParamSpec, Ptr[GParamSpec], guint]
  def apply()(using Zone): Ptr[_GParamSpecValueArray] = scala.scalanative.unsafe.alloc[_GParamSpecValueArray](1)
  def apply(parent_instance : GParamSpec, element_spec : Ptr[GParamSpec], fixed_n_elements : guint)(using Zone): Ptr[_GParamSpecValueArray] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).element_spec = element_spec
    (!____ptr).fixed_n_elements = fixed_n_elements
    ____ptr
  extension (struct: _GParamSpecValueArray)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value
    def element_spec : Ptr[GParamSpec] = struct._2
    def element_spec_=(value: Ptr[GParamSpec]): Unit = !struct.at2 = value
    def fixed_n_elements : guint = struct._3
    def fixed_n_elements_=(value: guint): Unit = !struct.at3 = value

/**
 * GParamSpecVariant: _instance: private #GParamSpec portion : a #GVariantType, or %NULL _value: a #GVariant, or %NULL

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
*/
opaque type _GParamSpecVariant = CStruct4[GParamSpec, Ptr[GVariantType], Ptr[GVariant], CArray[gpointer, Nat._4]]
object _GParamSpecVariant:
  given _tag: Tag[_GParamSpecVariant] = Tag.materializeCStruct4Tag[GParamSpec, Ptr[GVariantType], Ptr[GVariant], CArray[gpointer, Nat._4]]
  def apply()(using Zone): Ptr[_GParamSpecVariant] = scala.scalanative.unsafe.alloc[_GParamSpecVariant](1)
  def apply(parent_instance : GParamSpec, `type` : Ptr[GVariantType], default_value : Ptr[GVariant], padding : CArray[gpointer, Nat._4])(using Zone): Ptr[_GParamSpecVariant] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).`type` = `type`
    (!____ptr).default_value = default_value
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GParamSpecVariant)
    def parent_instance : GParamSpec = struct._1
    def parent_instance_=(value: GParamSpec): Unit = !struct.at1 = value
    def `type` : Ptr[GVariantType] = struct._2
    def type_=(value: Ptr[GVariantType]): Unit = !struct.at2 = value
    def default_value : Ptr[GVariant] = struct._3
    def default_value_=(value: Ptr[GVariant]): Unit = !struct.at3 = value
    def padding : CArray[gpointer, Nat._4] = struct._4
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at4 = value

/**
 * GParameter: : the parameter value

 * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
*/
opaque type _GParameter = CStruct2[Ptr[gchar], GValue]
object _GParameter:
  given _tag: Tag[_GParameter] = Tag.materializeCStruct2Tag[Ptr[gchar], GValue]
  def apply()(using Zone): Ptr[_GParameter] = scala.scalanative.unsafe.alloc[_GParameter](1)
  def apply(name : Ptr[gchar], value : GValue)(using Zone): Ptr[_GParameter] = 
    val ____ptr = apply()
    (!____ptr).name = name
    (!____ptr).value = value
    ____ptr
  extension (struct: _GParameter)
    def name : Ptr[gchar] = struct._1
    def name_=(value: Ptr[gchar]): Unit = !struct.at1 = value
    def value : GValue = struct._2
    def value_=(value: GValue): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gpattern.h
*/
opaque type _GPatternSpec = CStruct0
object _GPatternSpec:
  given _tag: Tag[_GPatternSpec] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gpermission.h
*/
opaque type _GPermission = CStruct2[GObject, Ptr[GPermissionPrivate]]
object _GPermission:
  given _tag: Tag[_GPermission] = Tag.materializeCStruct2Tag[GObject, Ptr[GPermissionPrivate]]
  def apply()(using Zone): Ptr[_GPermission] = scala.scalanative.unsafe.alloc[_GPermission](1)
  def apply(parent_instance : GObject, priv : Ptr[GPermissionPrivate])(using Zone): Ptr[_GPermission] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GPermission)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GPermissionPrivate] = struct._2
    def priv_=(value: Ptr[GPermissionPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gpermission.h
*/
opaque type _GPermissionClass = CStruct8[GObjectClass, CFuncPtr3[Ptr[GPermission], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr4[Ptr[GPermission], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GPermission], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr3[Ptr[GPermission], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr4[Ptr[GPermission], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GPermission], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CArray[gpointer, Nat.Digit2[Nat._1, Nat._6]]]
object _GPermissionClass:
  given _tag: Tag[_GPermissionClass] = Tag.materializeCStruct8Tag[GObjectClass, CFuncPtr3[Ptr[GPermission], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr4[Ptr[GPermission], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GPermission], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr3[Ptr[GPermission], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr4[Ptr[GPermission], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GPermission], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CArray[gpointer, Nat.Digit2[Nat._1, Nat._6]]]
  def apply()(using Zone): Ptr[_GPermissionClass] = scala.scalanative.unsafe.alloc[_GPermissionClass](1)
  def apply(parent_class : GObjectClass, acquire : CFuncPtr3[Ptr[GPermission], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], acquire_async : CFuncPtr4[Ptr[GPermission], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], acquire_finish : CFuncPtr3[Ptr[GPermission], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], release : CFuncPtr3[Ptr[GPermission], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], release_async : CFuncPtr4[Ptr[GPermission], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], release_finish : CFuncPtr3[Ptr[GPermission], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], reserved : CArray[gpointer, Nat.Digit2[Nat._1, Nat._6]])(using Zone): Ptr[_GPermissionClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).acquire = acquire
    (!____ptr).acquire_async = acquire_async
    (!____ptr).acquire_finish = acquire_finish
    (!____ptr).release = release
    (!____ptr).release_async = release_async
    (!____ptr).release_finish = release_finish
    (!____ptr).reserved = reserved
    ____ptr
  extension (struct: _GPermissionClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def acquire : CFuncPtr3[Ptr[GPermission], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._2
    def acquire_=(value: CFuncPtr3[Ptr[GPermission], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at2 = value
    def acquire_async : CFuncPtr4[Ptr[GPermission], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._3
    def acquire_async_=(value: CFuncPtr4[Ptr[GPermission], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at3 = value
    def acquire_finish : CFuncPtr3[Ptr[GPermission], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = struct._4
    def acquire_finish_=(value: CFuncPtr3[Ptr[GPermission], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at4 = value
    def release : CFuncPtr3[Ptr[GPermission], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._5
    def release_=(value: CFuncPtr3[Ptr[GPermission], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at5 = value
    def release_async : CFuncPtr4[Ptr[GPermission], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._6
    def release_async_=(value: CFuncPtr4[Ptr[GPermission], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at6 = value
    def release_finish : CFuncPtr3[Ptr[GPermission], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = struct._7
    def release_finish_=(value: CFuncPtr3[Ptr[GPermission], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at7 = value
    def reserved : CArray[gpointer, Nat.Digit2[Nat._1, Nat._6]] = struct._8
    def reserved_=(value: CArray[gpointer, Nat.Digit2[Nat._1, Nat._6]]): Unit = !struct.at8 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gpermission.h
*/
opaque type _GPermissionPrivate = CStruct0
object _GPermissionPrivate:
  given _tag: Tag[_GPermissionPrivate] = Tag.materializeCStruct0Tag

/**
 * GPollFD: : the file descriptor to poll (or a HANDLE on Win32) : a bitwise combination from #GIOCondition, specifying which events should be polled for. Typically for reading from a file descriptor you would use %G_IO_IN | %G_IO_HUP | %G_IO_ERR, and for writing you would use %G_IO_OUT | %G_IO_ERR. : a bitwise combination of flags from #GIOCondition, returned from the poll() function to indicate which events occurred.

 * [bindgen] header: /usr/include/glib-2.0/glib/gpoll.h
*/
opaque type _GPollFD = CStruct3[gint, gushort, gushort]
object _GPollFD:
  given _tag: Tag[_GPollFD] = Tag.materializeCStruct3Tag[gint, gushort, gushort]
  def apply()(using Zone): Ptr[_GPollFD] = scala.scalanative.unsafe.alloc[_GPollFD](1)
  def apply(fd : gint, events : gushort, revents : gushort)(using Zone): Ptr[_GPollFD] = 
    val ____ptr = apply()
    (!____ptr).fd = fd
    (!____ptr).events = events
    (!____ptr).revents = revents
    ____ptr
  extension (struct: _GPollFD)
    def fd : gint = struct._1
    def fd_=(value: gint): Unit = !struct.at1 = value
    def events : gushort = struct._2
    def events_=(value: gushort): Unit = !struct.at2 = value
    def revents : gushort = struct._3
    def revents_=(value: gushort): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GPollableInputStream = CStruct0
object _GPollableInputStream:
  given _tag: Tag[_GPollableInputStream] = Tag.materializeCStruct0Tag

/**
 * GPollableInputStreamInterface: _iface: The parent interface. _poll: Checks if the #GPollableInputStream instance is actually pollable _source: Creates a #GSource to poll the stream _nonblocking: Does a non-blocking read or returns %G_IO_ERROR_WOULD_BLOCK

 * [bindgen] header: /usr/include/glib-2.0/gio/gpollableinputstream.h
*/
opaque type _GPollableInputStreamInterface = CStruct5[GTypeInterface, CFuncPtr1[Ptr[GPollableInputStream], gboolean], CFuncPtr1[Ptr[GPollableInputStream], gboolean], CFuncPtr2[Ptr[GPollableInputStream], Ptr[GCancellable], Ptr[Byte]], CFuncPtr4[Ptr[GPollableInputStream], Ptr[Byte], gsize, Ptr[Ptr[GError]], gssize]]
object _GPollableInputStreamInterface:
  given _tag: Tag[_GPollableInputStreamInterface] = Tag.materializeCStruct5Tag[GTypeInterface, CFuncPtr1[Ptr[GPollableInputStream], gboolean], CFuncPtr1[Ptr[GPollableInputStream], gboolean], CFuncPtr2[Ptr[GPollableInputStream], Ptr[GCancellable], Ptr[Byte]], CFuncPtr4[Ptr[GPollableInputStream], Ptr[Byte], gsize, Ptr[Ptr[GError]], gssize]]
  def apply()(using Zone): Ptr[_GPollableInputStreamInterface] = scala.scalanative.unsafe.alloc[_GPollableInputStreamInterface](1)
  def apply(g_iface : GTypeInterface, can_poll : CFuncPtr1[Ptr[GPollableInputStream], gboolean], is_readable : CFuncPtr1[Ptr[GPollableInputStream], gboolean], create_source : CFuncPtr2[Ptr[GPollableInputStream], Ptr[GCancellable], Ptr[GSource]], read_nonblocking : CFuncPtr4[Ptr[GPollableInputStream], Ptr[Byte], gsize, Ptr[Ptr[GError]], gssize])(using Zone): Ptr[_GPollableInputStreamInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).can_poll = can_poll
    (!____ptr).is_readable = is_readable
    (!____ptr).create_source = create_source
    (!____ptr).read_nonblocking = read_nonblocking
    ____ptr
  extension (struct: _GPollableInputStreamInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def can_poll : CFuncPtr1[Ptr[GPollableInputStream], gboolean] = struct._2
    def can_poll_=(value: CFuncPtr1[Ptr[GPollableInputStream], gboolean]): Unit = !struct.at2 = value
    def is_readable : CFuncPtr1[Ptr[GPollableInputStream], gboolean] = struct._3
    def is_readable_=(value: CFuncPtr1[Ptr[GPollableInputStream], gboolean]): Unit = !struct.at3 = value
    def create_source : CFuncPtr2[Ptr[GPollableInputStream], Ptr[GCancellable], Ptr[GSource]] = struct._4.asInstanceOf[CFuncPtr2[Ptr[GPollableInputStream], Ptr[GCancellable], Ptr[GSource]]]
    def create_source_=(value: CFuncPtr2[Ptr[GPollableInputStream], Ptr[GCancellable], Ptr[GSource]]): Unit = !struct.at4 = value.asInstanceOf[CFuncPtr2[Ptr[GPollableInputStream], Ptr[GCancellable], Ptr[Byte]]]
    def read_nonblocking : CFuncPtr4[Ptr[GPollableInputStream], Ptr[Byte], gsize, Ptr[Ptr[GError]], gssize] = struct._5
    def read_nonblocking_=(value: CFuncPtr4[Ptr[GPollableInputStream], Ptr[Byte], gsize, Ptr[Ptr[GError]], gssize]): Unit = !struct.at5 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GPollableOutputStream = CStruct0
object _GPollableOutputStream:
  given _tag: Tag[_GPollableOutputStream] = Tag.materializeCStruct0Tag

/**
 * GPollableOutputStreamInterface: _iface: The parent interface. _poll: Checks if the #GPollableOutputStream instance is actually pollable _source: Creates a #GSource to poll the stream _nonblocking: Does a non-blocking write or returns %G_IO_ERROR_WOULD_BLOCK _nonblocking: Does a vectored non-blocking write, or returns %G_POLLABLE_RETURN_WOULD_BLOCK

 * [bindgen] header: /usr/include/glib-2.0/gio/gpollableoutputstream.h
*/
opaque type _GPollableOutputStreamInterface = CStruct6[GTypeInterface, CFuncPtr1[Ptr[GPollableOutputStream], gboolean], CFuncPtr1[Ptr[GPollableOutputStream], gboolean], CFuncPtr2[Ptr[GPollableOutputStream], Ptr[GCancellable], Ptr[Byte]], CFuncPtr4[Ptr[GPollableOutputStream], Ptr[Byte], gsize, Ptr[Ptr[GError]], gssize], CFuncPtr5[Ptr[GPollableOutputStream], Ptr[GOutputVector], gsize, Ptr[gsize], Ptr[Ptr[GError]], GPollableReturn]]
object _GPollableOutputStreamInterface:
  given _tag: Tag[_GPollableOutputStreamInterface] = Tag.materializeCStruct6Tag[GTypeInterface, CFuncPtr1[Ptr[GPollableOutputStream], gboolean], CFuncPtr1[Ptr[GPollableOutputStream], gboolean], CFuncPtr2[Ptr[GPollableOutputStream], Ptr[GCancellable], Ptr[Byte]], CFuncPtr4[Ptr[GPollableOutputStream], Ptr[Byte], gsize, Ptr[Ptr[GError]], gssize], CFuncPtr5[Ptr[GPollableOutputStream], Ptr[GOutputVector], gsize, Ptr[gsize], Ptr[Ptr[GError]], GPollableReturn]]
  def apply()(using Zone): Ptr[_GPollableOutputStreamInterface] = scala.scalanative.unsafe.alloc[_GPollableOutputStreamInterface](1)
  def apply(g_iface : GTypeInterface, can_poll : CFuncPtr1[Ptr[GPollableOutputStream], gboolean], is_writable : CFuncPtr1[Ptr[GPollableOutputStream], gboolean], create_source : CFuncPtr2[Ptr[GPollableOutputStream], Ptr[GCancellable], Ptr[GSource]], write_nonblocking : CFuncPtr4[Ptr[GPollableOutputStream], Ptr[Byte], gsize, Ptr[Ptr[GError]], gssize], writev_nonblocking : CFuncPtr5[Ptr[GPollableOutputStream], Ptr[GOutputVector], gsize, Ptr[gsize], Ptr[Ptr[GError]], GPollableReturn])(using Zone): Ptr[_GPollableOutputStreamInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).can_poll = can_poll
    (!____ptr).is_writable = is_writable
    (!____ptr).create_source = create_source
    (!____ptr).write_nonblocking = write_nonblocking
    (!____ptr).writev_nonblocking = writev_nonblocking
    ____ptr
  extension (struct: _GPollableOutputStreamInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def can_poll : CFuncPtr1[Ptr[GPollableOutputStream], gboolean] = struct._2
    def can_poll_=(value: CFuncPtr1[Ptr[GPollableOutputStream], gboolean]): Unit = !struct.at2 = value
    def is_writable : CFuncPtr1[Ptr[GPollableOutputStream], gboolean] = struct._3
    def is_writable_=(value: CFuncPtr1[Ptr[GPollableOutputStream], gboolean]): Unit = !struct.at3 = value
    def create_source : CFuncPtr2[Ptr[GPollableOutputStream], Ptr[GCancellable], Ptr[GSource]] = struct._4.asInstanceOf[CFuncPtr2[Ptr[GPollableOutputStream], Ptr[GCancellable], Ptr[GSource]]]
    def create_source_=(value: CFuncPtr2[Ptr[GPollableOutputStream], Ptr[GCancellable], Ptr[GSource]]): Unit = !struct.at4 = value.asInstanceOf[CFuncPtr2[Ptr[GPollableOutputStream], Ptr[GCancellable], Ptr[Byte]]]
    def write_nonblocking : CFuncPtr4[Ptr[GPollableOutputStream], Ptr[Byte], gsize, Ptr[Ptr[GError]], gssize] = struct._5
    def write_nonblocking_=(value: CFuncPtr4[Ptr[GPollableOutputStream], Ptr[Byte], gsize, Ptr[Ptr[GError]], gssize]): Unit = !struct.at5 = value
    def writev_nonblocking : CFuncPtr5[Ptr[GPollableOutputStream], Ptr[GOutputVector], gsize, Ptr[gsize], Ptr[Ptr[GError]], GPollableReturn] = struct._6
    def writev_nonblocking_=(value: CFuncPtr5[Ptr[GPollableOutputStream], Ptr[GOutputVector], gsize, Ptr[gsize], Ptr[Ptr[GError]], GPollableReturn]): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gpowerprofilemonitor.h
*/
opaque type _GPowerProfileMonitor = CStruct0
object _GPowerProfileMonitor:
  given _tag: Tag[_GPowerProfileMonitor] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gpowerprofilemonitor.h
*/
opaque type _GPowerProfileMonitorInterface = CStruct1[GTypeInterface]
object _GPowerProfileMonitorInterface:
  given _tag: Tag[_GPowerProfileMonitorInterface] = Tag.materializeCStruct1Tag[GTypeInterface]
  def apply()(using Zone): Ptr[_GPowerProfileMonitorInterface] = scala.scalanative.unsafe.alloc[_GPowerProfileMonitorInterface](1)
  def apply(g_iface : GTypeInterface)(using Zone): Ptr[_GPowerProfileMonitorInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    ____ptr
  extension (struct: _GPowerProfileMonitorInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
*/
opaque type _GPrivate = CStruct3[gpointer, GDestroyNotify, CArray[gpointer, Nat._2]]
object _GPrivate:
  given _tag: Tag[_GPrivate] = Tag.materializeCStruct3Tag[gpointer, GDestroyNotify, CArray[gpointer, Nat._2]]
  def apply()(using Zone): Ptr[_GPrivate] = scala.scalanative.unsafe.alloc[_GPrivate](1)
  def apply(p : gpointer, _notify : GDestroyNotify, future : CArray[gpointer, Nat._2])(using Zone): Ptr[_GPrivate] = 
    val ____ptr = apply()
    (!____ptr).p = p
    (!____ptr)._notify = _notify
    (!____ptr).future = future
    ____ptr
  extension (struct: _GPrivate)
    def p : gpointer = struct._1
    def p_=(value: gpointer): Unit = !struct.at1 = value
    def _notify : GDestroyNotify = struct._2
    def _notify_=(value: GDestroyNotify): Unit = !struct.at2 = value
    def future : CArray[gpointer, Nat._2] = struct._3
    def future_=(value: CArray[gpointer, Nat._2]): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GPropertyAction = CStruct0
object _GPropertyAction:
  given _tag: Tag[_GPropertyAction] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GProxy = CStruct0
object _GProxy:
  given _tag: Tag[_GProxy] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddress.h
*/
opaque type _GProxyAddress = CStruct2[GInetSocketAddress, Ptr[GProxyAddressPrivate]]
object _GProxyAddress:
  given _tag: Tag[_GProxyAddress] = Tag.materializeCStruct2Tag[GInetSocketAddress, Ptr[GProxyAddressPrivate]]
  def apply()(using Zone): Ptr[_GProxyAddress] = scala.scalanative.unsafe.alloc[_GProxyAddress](1)
  def apply(parent_instance : GInetSocketAddress, priv : Ptr[GProxyAddressPrivate])(using Zone): Ptr[_GProxyAddress] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GProxyAddress)
    def parent_instance : GInetSocketAddress = struct._1
    def parent_instance_=(value: GInetSocketAddress): Unit = !struct.at1 = value
    def priv : Ptr[GProxyAddressPrivate] = struct._2
    def priv_=(value: Ptr[GProxyAddressPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddress.h
*/
opaque type _GProxyAddressClass = CStruct1[GInetSocketAddressClass]
object _GProxyAddressClass:
  given _tag: Tag[_GProxyAddressClass] = Tag.materializeCStruct1Tag[GInetSocketAddressClass]
  def apply()(using Zone): Ptr[_GProxyAddressClass] = scala.scalanative.unsafe.alloc[_GProxyAddressClass](1)
  def apply(parent_class : GInetSocketAddressClass)(using Zone): Ptr[_GProxyAddressClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: _GProxyAddressClass)
    def parent_class : GInetSocketAddressClass = struct._1
    def parent_class_=(value: GInetSocketAddressClass): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddressenumerator.h
*/
opaque type _GProxyAddressEnumerator = CStruct2[GSocketAddressEnumerator, Ptr[GProxyAddressEnumeratorPrivate]]
object _GProxyAddressEnumerator:
  given _tag: Tag[_GProxyAddressEnumerator] = Tag.materializeCStruct2Tag[GSocketAddressEnumerator, Ptr[GProxyAddressEnumeratorPrivate]]
  def apply()(using Zone): Ptr[_GProxyAddressEnumerator] = scala.scalanative.unsafe.alloc[_GProxyAddressEnumerator](1)
  def apply(parent_instance : GSocketAddressEnumerator, priv : Ptr[GProxyAddressEnumeratorPrivate])(using Zone): Ptr[_GProxyAddressEnumerator] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GProxyAddressEnumerator)
    def parent_instance : GSocketAddressEnumerator = struct._1
    def parent_instance_=(value: GSocketAddressEnumerator): Unit = !struct.at1 = value
    def priv : Ptr[GProxyAddressEnumeratorPrivate] = struct._2
    def priv_=(value: Ptr[GProxyAddressEnumeratorPrivate]): Unit = !struct.at2 = value

/**
 * GProxyAddressEnumeratorClass:

 * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddressenumerator.h
*/
opaque type _GProxyAddressEnumeratorClass = CStruct8[GSocketAddressEnumeratorClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GProxyAddressEnumeratorClass:
  given _tag: Tag[_GProxyAddressEnumeratorClass] = Tag.materializeCStruct8Tag[GSocketAddressEnumeratorClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GProxyAddressEnumeratorClass] = scala.scalanative.unsafe.alloc[_GProxyAddressEnumeratorClass](1)
  def apply(parent_class : GSocketAddressEnumeratorClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit], _g_reserved7 : CFuncPtr0[Unit])(using Zone): Ptr[_GProxyAddressEnumeratorClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    (!____ptr)._g_reserved7 = _g_reserved7
    ____ptr
  extension (struct: _GProxyAddressEnumeratorClass)
    def parent_class : GSocketAddressEnumeratorClass = struct._1
    def parent_class_=(value: GSocketAddressEnumeratorClass): Unit = !struct.at1 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._2
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at2 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._3
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at3 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._4
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at4 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._5
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at5 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._6
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at6 = value
    def _g_reserved6 : CFuncPtr0[Unit] = struct._7
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at7 = value
    def _g_reserved7 : CFuncPtr0[Unit] = struct._8
    def _g_reserved7_=(value: CFuncPtr0[Unit]): Unit = !struct.at8 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddressenumerator.h
*/
opaque type _GProxyAddressEnumeratorPrivate = CStruct0
object _GProxyAddressEnumeratorPrivate:
  given _tag: Tag[_GProxyAddressEnumeratorPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddress.h
*/
opaque type _GProxyAddressPrivate = CStruct0
object _GProxyAddressPrivate:
  given _tag: Tag[_GProxyAddressPrivate] = Tag.materializeCStruct0Tag

/**
 * GProxyInterface: _iface: The parent interface. : Connect to proxy server and wrap (if required) the #connection to handle payload. _async: Same as connect() but asynchronous. _finish: Returns the result of connect_async() _hostname: Returns whether the proxy supports hostname lookups.

 * [bindgen] header: /usr/include/glib-2.0/gio/gproxy.h
*/
opaque type _GProxyInterface = CStruct5[GTypeInterface, CFuncPtr5[Ptr[GProxy], Ptr[GIOStream], Ptr[GProxyAddress], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GIOStream]], CFuncPtr6[Ptr[GProxy], Ptr[GIOStream], Ptr[GProxyAddress], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GProxy], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GIOStream]], CFuncPtr1[Ptr[GProxy], gboolean]]
object _GProxyInterface:
  given _tag: Tag[_GProxyInterface] = Tag.materializeCStruct5Tag[GTypeInterface, CFuncPtr5[Ptr[GProxy], Ptr[GIOStream], Ptr[GProxyAddress], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GIOStream]], CFuncPtr6[Ptr[GProxy], Ptr[GIOStream], Ptr[GProxyAddress], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GProxy], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GIOStream]], CFuncPtr1[Ptr[GProxy], gboolean]]
  def apply()(using Zone): Ptr[_GProxyInterface] = scala.scalanative.unsafe.alloc[_GProxyInterface](1)
  def apply(g_iface : GTypeInterface, connect : CFuncPtr5[Ptr[GProxy], Ptr[GIOStream], Ptr[GProxyAddress], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GIOStream]], connect_async : CFuncPtr6[Ptr[GProxy], Ptr[GIOStream], Ptr[GProxyAddress], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], connect_finish : CFuncPtr3[Ptr[GProxy], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GIOStream]], supports_hostname : CFuncPtr1[Ptr[GProxy], gboolean])(using Zone): Ptr[_GProxyInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).connect = connect
    (!____ptr).connect_async = connect_async
    (!____ptr).connect_finish = connect_finish
    (!____ptr).supports_hostname = supports_hostname
    ____ptr
  extension (struct: _GProxyInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def connect : CFuncPtr5[Ptr[GProxy], Ptr[GIOStream], Ptr[GProxyAddress], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GIOStream]] = struct._2
    def connect_=(value: CFuncPtr5[Ptr[GProxy], Ptr[GIOStream], Ptr[GProxyAddress], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GIOStream]]): Unit = !struct.at2 = value
    def connect_async : CFuncPtr6[Ptr[GProxy], Ptr[GIOStream], Ptr[GProxyAddress], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._3
    def connect_async_=(value: CFuncPtr6[Ptr[GProxy], Ptr[GIOStream], Ptr[GProxyAddress], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at3 = value
    def connect_finish : CFuncPtr3[Ptr[GProxy], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GIOStream]] = struct._4
    def connect_finish_=(value: CFuncPtr3[Ptr[GProxy], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GIOStream]]): Unit = !struct.at4 = value
    def supports_hostname : CFuncPtr1[Ptr[GProxy], gboolean] = struct._5
    def supports_hostname_=(value: CFuncPtr1[Ptr[GProxy], gboolean]): Unit = !struct.at5 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GProxyResolver = CStruct0
object _GProxyResolver:
  given _tag: Tag[_GProxyResolver] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gproxyresolver.h
*/
opaque type _GProxyResolverInterface = CStruct5[GTypeInterface, CFuncPtr1[Ptr[GProxyResolver], gboolean], CFuncPtr4[Ptr[GProxyResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]], CFuncPtr5[Ptr[GProxyResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GProxyResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]]
object _GProxyResolverInterface:
  given _tag: Tag[_GProxyResolverInterface] = Tag.materializeCStruct5Tag[GTypeInterface, CFuncPtr1[Ptr[GProxyResolver], gboolean], CFuncPtr4[Ptr[GProxyResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]], CFuncPtr5[Ptr[GProxyResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GProxyResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]]
  def apply()(using Zone): Ptr[_GProxyResolverInterface] = scala.scalanative.unsafe.alloc[_GProxyResolverInterface](1)
  def apply(g_iface : GTypeInterface, is_supported : CFuncPtr1[Ptr[GProxyResolver], gboolean], lookup : CFuncPtr4[Ptr[GProxyResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]], lookup_async : CFuncPtr5[Ptr[GProxyResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], lookup_finish : CFuncPtr3[Ptr[GProxyResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]])(using Zone): Ptr[_GProxyResolverInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).is_supported = is_supported
    (!____ptr).lookup = lookup
    (!____ptr).lookup_async = lookup_async
    (!____ptr).lookup_finish = lookup_finish
    ____ptr
  extension (struct: _GProxyResolverInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def is_supported : CFuncPtr1[Ptr[GProxyResolver], gboolean] = struct._2
    def is_supported_=(value: CFuncPtr1[Ptr[GProxyResolver], gboolean]): Unit = !struct.at2 = value
    def lookup : CFuncPtr4[Ptr[GProxyResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]] = struct._3
    def lookup_=(value: CFuncPtr4[Ptr[GProxyResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]): Unit = !struct.at3 = value
    def lookup_async : CFuncPtr5[Ptr[GProxyResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._4
    def lookup_async_=(value: CFuncPtr5[Ptr[GProxyResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at4 = value
    def lookup_finish : CFuncPtr3[Ptr[GProxyResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]] = struct._5
    def lookup_finish_=(value: CFuncPtr3[Ptr[GProxyResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Ptr[gchar]]]): Unit = !struct.at5 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
*/
opaque type _GPtrArray = CStruct2[Ptr[gpointer], guint]
object _GPtrArray:
  given _tag: Tag[_GPtrArray] = Tag.materializeCStruct2Tag[Ptr[gpointer], guint]
  def apply()(using Zone): Ptr[_GPtrArray] = scala.scalanative.unsafe.alloc[_GPtrArray](1)
  def apply(pdata : Ptr[gpointer], len : guint)(using Zone): Ptr[_GPtrArray] = 
    val ____ptr = apply()
    (!____ptr).pdata = pdata
    (!____ptr).len = len
    ____ptr
  extension (struct: _GPtrArray)
    def pdata : Ptr[gpointer] = struct._1
    def pdata_=(value: Ptr[gpointer]): Unit = !struct.at1 = value
    def len : guint = struct._2
    def len_=(value: guint): Unit = !struct.at2 = value

/**
 * GQueue: : a pointer to the first element of the queue : a pointer to the last element of the queue : the number of elements in the queue

 * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
*/
opaque type _GQueue = CStruct3[Ptr[Byte], Ptr[Byte], guint]
object _GQueue:
  given _tag: Tag[_GQueue] = Tag.materializeCStruct3Tag[Ptr[Byte], Ptr[Byte], guint]
  def apply()(using Zone): Ptr[_GQueue] = scala.scalanative.unsafe.alloc[_GQueue](1)
  def apply(head : Ptr[GList], tail : Ptr[GList], length : guint)(using Zone): Ptr[_GQueue] = 
    val ____ptr = apply()
    (!____ptr).head = head
    (!____ptr).tail = tail
    (!____ptr).length = length
    ____ptr
  extension (struct: _GQueue)
    def head : Ptr[GList] = struct._1.asInstanceOf[Ptr[GList]]
    def head_=(value: Ptr[GList]): Unit = !struct.at1 = value.asInstanceOf[Ptr[Byte]]
    def tail : Ptr[GList] = struct._2.asInstanceOf[Ptr[GList]]
    def tail_=(value: Ptr[GList]): Unit = !struct.at2 = value.asInstanceOf[Ptr[Byte]]
    def length : guint = struct._3
    def length_=(value: guint): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
*/
opaque type _GRWLock = CStruct2[gpointer, CArray[guint, Nat._2]]
object _GRWLock:
  given _tag: Tag[_GRWLock] = Tag.materializeCStruct2Tag[gpointer, CArray[guint, Nat._2]]
  def apply()(using Zone): Ptr[_GRWLock] = scala.scalanative.unsafe.alloc[_GRWLock](1)
  def apply(p : gpointer, i : CArray[guint, Nat._2])(using Zone): Ptr[_GRWLock] = 
    val ____ptr = apply()
    (!____ptr).p = p
    (!____ptr).i = i
    ____ptr
  extension (struct: _GRWLock)
    def p : gpointer = struct._1
    def p_=(value: gpointer): Unit = !struct.at1 = value
    def i : CArray[guint, Nat._2] = struct._2
    def i_=(value: CArray[guint, Nat._2]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/grand.h
*/
opaque type _GRand = CStruct0
object _GRand:
  given _tag: Tag[_GRand] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
*/
opaque type _GRecMutex = CStruct2[gpointer, CArray[guint, Nat._2]]
object _GRecMutex:
  given _tag: Tag[_GRecMutex] = Tag.materializeCStruct2Tag[gpointer, CArray[guint, Nat._2]]
  def apply()(using Zone): Ptr[_GRecMutex] = scala.scalanative.unsafe.alloc[_GRecMutex](1)
  def apply(p : gpointer, i : CArray[guint, Nat._2])(using Zone): Ptr[_GRecMutex] = 
    val ____ptr = apply()
    (!____ptr).p = p
    (!____ptr).i = i
    ____ptr
  extension (struct: _GRecMutex)
    def p : gpointer = struct._1
    def p_=(value: gpointer): Unit = !struct.at1 = value
    def i : CArray[guint, Nat._2] = struct._2
    def i_=(value: CArray[guint, Nat._2]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
*/
opaque type _GRegex = CStruct0
object _GRegex:
  given _tag: Tag[_GRegex] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/grel.h
*/
opaque type _GRelation = CStruct0
object _GRelation:
  given _tag: Tag[_GRelation] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GRemoteActionGroup = CStruct0
object _GRemoteActionGroup:
  given _tag: Tag[_GRemoteActionGroup] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gremoteactiongroup.h
*/
opaque type _GRemoteActionGroupInterface = CStruct3[GTypeInterface, CFuncPtr4[Ptr[GRemoteActionGroup], Ptr[gchar], Ptr[GVariant], Ptr[GVariant], Unit], CFuncPtr4[Ptr[GRemoteActionGroup], Ptr[gchar], Ptr[GVariant], Ptr[GVariant], Unit]]
object _GRemoteActionGroupInterface:
  given _tag: Tag[_GRemoteActionGroupInterface] = Tag.materializeCStruct3Tag[GTypeInterface, CFuncPtr4[Ptr[GRemoteActionGroup], Ptr[gchar], Ptr[GVariant], Ptr[GVariant], Unit], CFuncPtr4[Ptr[GRemoteActionGroup], Ptr[gchar], Ptr[GVariant], Ptr[GVariant], Unit]]
  def apply()(using Zone): Ptr[_GRemoteActionGroupInterface] = scala.scalanative.unsafe.alloc[_GRemoteActionGroupInterface](1)
  def apply(g_iface : GTypeInterface, activate_action_full : CFuncPtr4[Ptr[GRemoteActionGroup], Ptr[gchar], Ptr[GVariant], Ptr[GVariant], Unit], change_action_state_full : CFuncPtr4[Ptr[GRemoteActionGroup], Ptr[gchar], Ptr[GVariant], Ptr[GVariant], Unit])(using Zone): Ptr[_GRemoteActionGroupInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).activate_action_full = activate_action_full
    (!____ptr).change_action_state_full = change_action_state_full
    ____ptr
  extension (struct: _GRemoteActionGroupInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def activate_action_full : CFuncPtr4[Ptr[GRemoteActionGroup], Ptr[gchar], Ptr[GVariant], Ptr[GVariant], Unit] = struct._2
    def activate_action_full_=(value: CFuncPtr4[Ptr[GRemoteActionGroup], Ptr[gchar], Ptr[GVariant], Ptr[GVariant], Unit]): Unit = !struct.at2 = value
    def change_action_state_full : CFuncPtr4[Ptr[GRemoteActionGroup], Ptr[gchar], Ptr[GVariant], Ptr[GVariant], Unit] = struct._3
    def change_action_state_full_=(value: CFuncPtr4[Ptr[GRemoteActionGroup], Ptr[gchar], Ptr[GVariant], Ptr[GVariant], Unit]): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
*/
opaque type _GResolver = CStruct2[GObject, Ptr[GResolverPrivate]]
object _GResolver:
  given _tag: Tag[_GResolver] = Tag.materializeCStruct2Tag[GObject, Ptr[GResolverPrivate]]
  def apply()(using Zone): Ptr[_GResolver] = scala.scalanative.unsafe.alloc[_GResolver](1)
  def apply(parent_instance : GObject, priv : Ptr[GResolverPrivate])(using Zone): Ptr[_GResolver] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GResolver)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GResolverPrivate] = struct._2
    def priv_=(value: Ptr[GResolverPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
*/
opaque type _GResolverClass = CStruct17[GObjectClass, CFuncPtr1[Ptr[GResolver], Unit], CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Byte]], CFuncPtr5[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Byte]], CFuncPtr4[Ptr[GResolver], Ptr[GInetAddress], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[gchar]], CFuncPtr5[Ptr[GResolver], Ptr[GInetAddress], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[gchar]], CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Byte]], CFuncPtr5[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Byte]], CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Byte]], CFuncPtr6[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Byte]], CFuncPtr6[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Byte]], CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Byte]]]
object _GResolverClass:
  given _tag: Tag[_GResolverClass] = Tag.materializeCStruct17Tag[GObjectClass, CFuncPtr1[Ptr[GResolver], Unit], CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Byte]], CFuncPtr5[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Byte]], CFuncPtr4[Ptr[GResolver], Ptr[GInetAddress], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[gchar]], CFuncPtr5[Ptr[GResolver], Ptr[GInetAddress], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[gchar]], CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Byte]], CFuncPtr5[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Byte]], CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Byte]], CFuncPtr6[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Byte]], CFuncPtr6[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Byte]], CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Byte]]]
  def apply()(using Zone): Ptr[_GResolverClass] = scala.scalanative.unsafe.alloc[_GResolverClass](1)
  def apply(parent_class : GObjectClass, reload : CFuncPtr1[Ptr[GResolver], Unit], lookup_by_name : CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]], lookup_by_name_async : CFuncPtr5[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], lookup_by_name_finish : CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]], lookup_by_address : CFuncPtr4[Ptr[GResolver], Ptr[GInetAddress], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[gchar]], lookup_by_address_async : CFuncPtr5[Ptr[GResolver], Ptr[GInetAddress], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], lookup_by_address_finish : CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[gchar]], lookup_service : CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]], lookup_service_async : CFuncPtr5[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], lookup_service_finish : CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]], lookup_records : CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]], lookup_records_async : CFuncPtr6[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], lookup_records_finish : CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]], lookup_by_name_with_flags_async : CFuncPtr6[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], lookup_by_name_with_flags_finish : CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]], lookup_by_name_with_flags : CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]])(using Zone): Ptr[_GResolverClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).reload = reload
    (!____ptr).lookup_by_name = lookup_by_name
    (!____ptr).lookup_by_name_async = lookup_by_name_async
    (!____ptr).lookup_by_name_finish = lookup_by_name_finish
    (!____ptr).lookup_by_address = lookup_by_address
    (!____ptr).lookup_by_address_async = lookup_by_address_async
    (!____ptr).lookup_by_address_finish = lookup_by_address_finish
    (!____ptr).lookup_service = lookup_service
    (!____ptr).lookup_service_async = lookup_service_async
    (!____ptr).lookup_service_finish = lookup_service_finish
    (!____ptr).lookup_records = lookup_records
    (!____ptr).lookup_records_async = lookup_records_async
    (!____ptr).lookup_records_finish = lookup_records_finish
    (!____ptr).lookup_by_name_with_flags_async = lookup_by_name_with_flags_async
    (!____ptr).lookup_by_name_with_flags_finish = lookup_by_name_with_flags_finish
    (!____ptr).lookup_by_name_with_flags = lookup_by_name_with_flags
    ____ptr
  extension (struct: _GResolverClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def reload : CFuncPtr1[Ptr[GResolver], Unit] = struct._2
    def reload_=(value: CFuncPtr1[Ptr[GResolver], Unit]): Unit = !struct.at2 = value
    def lookup_by_name : CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]] = struct._3.asInstanceOf[CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]]
    def lookup_by_name_=(value: CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at3 = value.asInstanceOf[CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Byte]]]
    def lookup_by_name_async : CFuncPtr5[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._4
    def lookup_by_name_async_=(value: CFuncPtr5[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at4 = value
    def lookup_by_name_finish : CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]] = struct._5.asInstanceOf[CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]]
    def lookup_by_name_finish_=(value: CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at5 = value.asInstanceOf[CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Byte]]]
    def lookup_by_address : CFuncPtr4[Ptr[GResolver], Ptr[GInetAddress], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[gchar]] = struct._6
    def lookup_by_address_=(value: CFuncPtr4[Ptr[GResolver], Ptr[GInetAddress], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[gchar]]): Unit = !struct.at6 = value
    def lookup_by_address_async : CFuncPtr5[Ptr[GResolver], Ptr[GInetAddress], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._7
    def lookup_by_address_async_=(value: CFuncPtr5[Ptr[GResolver], Ptr[GInetAddress], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at7 = value
    def lookup_by_address_finish : CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[gchar]] = struct._8
    def lookup_by_address_finish_=(value: CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[gchar]]): Unit = !struct.at8 = value
    def lookup_service : CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]] = struct._9.asInstanceOf[CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]]
    def lookup_service_=(value: CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at9 = value.asInstanceOf[CFuncPtr4[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Byte]]]
    def lookup_service_async : CFuncPtr5[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._10
    def lookup_service_async_=(value: CFuncPtr5[Ptr[GResolver], Ptr[gchar], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at10 = value
    def lookup_service_finish : CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]] = struct._11.asInstanceOf[CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]]
    def lookup_service_finish_=(value: CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at11 = value.asInstanceOf[CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Byte]]]
    def lookup_records : CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]] = struct._12.asInstanceOf[CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]]
    def lookup_records_=(value: CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at12 = value.asInstanceOf[CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Byte]]]
    def lookup_records_async : CFuncPtr6[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._13
    def lookup_records_async_=(value: CFuncPtr6[Ptr[GResolver], Ptr[gchar], GResolverRecordType, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at13 = value
    def lookup_records_finish : CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]] = struct._14.asInstanceOf[CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]]
    def lookup_records_finish_=(value: CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at14 = value.asInstanceOf[CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Byte]]]
    def lookup_by_name_with_flags_async : CFuncPtr6[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._15
    def lookup_by_name_with_flags_async_=(value: CFuncPtr6[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at15 = value
    def lookup_by_name_with_flags_finish : CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]] = struct._16.asInstanceOf[CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]]
    def lookup_by_name_with_flags_finish_=(value: CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at16 = value.asInstanceOf[CFuncPtr3[Ptr[GResolver], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Byte]]]
    def lookup_by_name_with_flags : CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]] = struct._17.asInstanceOf[CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]]
    def lookup_by_name_with_flags_=(value: CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at17 = value.asInstanceOf[CFuncPtr5[Ptr[GResolver], Ptr[gchar], GResolverNameLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Byte]]]

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
*/
opaque type _GResolverPrivate = CStruct0
object _GResolverPrivate:
  given _tag: Tag[_GResolverPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GResource = CStruct0
object _GResource:
  given _tag: Tag[_GResource] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
*/
opaque type _GSList = CStruct2[gpointer, Ptr[Byte]]
object _GSList:
  given _tag: Tag[_GSList] = Tag.materializeCStruct2Tag[gpointer, Ptr[Byte]]
  def apply()(using Zone): Ptr[_GSList] = scala.scalanative.unsafe.alloc[_GSList](1)
  def apply(data : gpointer, next : Ptr[GSList])(using Zone): Ptr[_GSList] = 
    val ____ptr = apply()
    (!____ptr).data = data
    (!____ptr).next = next
    ____ptr
  extension (struct: _GSList)
    def data : gpointer = struct._1
    def data_=(value: gpointer): Unit = !struct.at1 = value
    def next : Ptr[GSList] = struct._2.asInstanceOf[Ptr[GSList]]
    def next_=(value: Ptr[GSList]): Unit = !struct.at2 = value.asInstanceOf[Ptr[Byte]]

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
*/
opaque type _GScanner = CStruct21[gpointer, guint, guint, Ptr[gchar], Ptr[GData], Ptr[GScannerConfig], GTokenType, GTokenValue, guint, guint, GTokenType, GTokenValue, guint, guint, Ptr[GHashTable], gint, Ptr[gchar], Ptr[gchar], Ptr[gchar], guint, Ptr[Byte]]
object _GScanner:
  given _tag: Tag[_GScanner] = Tag.materializeCStruct21Tag[gpointer, guint, guint, Ptr[gchar], Ptr[GData], Ptr[GScannerConfig], GTokenType, GTokenValue, guint, guint, GTokenType, GTokenValue, guint, guint, Ptr[GHashTable], gint, Ptr[gchar], Ptr[gchar], Ptr[gchar], guint, Ptr[Byte]]
  def apply()(using Zone): Ptr[_GScanner] = scala.scalanative.unsafe.alloc[_GScanner](1)
  def apply(user_data : gpointer, max_parse_errors : guint, parse_errors : guint, input_name : Ptr[gchar], qdata : Ptr[GData], config : Ptr[GScannerConfig], token : GTokenType, value : GTokenValue, line : guint, position : guint, next_token : GTokenType, next_value : GTokenValue, next_line : guint, next_position : guint, symbol_table : Ptr[GHashTable], input_fd : gint, text : Ptr[gchar], text_end : Ptr[gchar], buffer : Ptr[gchar], scope_id : guint, msg_handler : GScannerMsgFunc)(using Zone): Ptr[_GScanner] = 
    val ____ptr = apply()
    (!____ptr).user_data = user_data
    (!____ptr).max_parse_errors = max_parse_errors
    (!____ptr).parse_errors = parse_errors
    (!____ptr).input_name = input_name
    (!____ptr).qdata = qdata
    (!____ptr).config = config
    (!____ptr).token = token
    (!____ptr).value = value
    (!____ptr).line = line
    (!____ptr).position = position
    (!____ptr).next_token = next_token
    (!____ptr).next_value = next_value
    (!____ptr).next_line = next_line
    (!____ptr).next_position = next_position
    (!____ptr).symbol_table = symbol_table
    (!____ptr).input_fd = input_fd
    (!____ptr).text = text
    (!____ptr).text_end = text_end
    (!____ptr).buffer = buffer
    (!____ptr).scope_id = scope_id
    (!____ptr).msg_handler = msg_handler
    ____ptr
  extension (struct: _GScanner)
    def user_data : gpointer = struct._1
    def user_data_=(value: gpointer): Unit = !struct.at1 = value
    def max_parse_errors : guint = struct._2
    def max_parse_errors_=(value: guint): Unit = !struct.at2 = value
    def parse_errors : guint = struct._3
    def parse_errors_=(value: guint): Unit = !struct.at3 = value
    def input_name : Ptr[gchar] = struct._4
    def input_name_=(value: Ptr[gchar]): Unit = !struct.at4 = value
    def qdata : Ptr[GData] = struct._5
    def qdata_=(value: Ptr[GData]): Unit = !struct.at5 = value
    def config : Ptr[GScannerConfig] = struct._6
    def config_=(value: Ptr[GScannerConfig]): Unit = !struct.at6 = value
    def token : GTokenType = struct._7
    def token_=(value: GTokenType): Unit = !struct.at7 = value
    def value : GTokenValue = struct._8
    def value_=(value: GTokenValue): Unit = !struct.at8 = value
    def line : guint = struct._9
    def line_=(value: guint): Unit = !struct.at9 = value
    def position : guint = struct._10
    def position_=(value: guint): Unit = !struct.at10 = value
    def next_token : GTokenType = struct._11
    def next_token_=(value: GTokenType): Unit = !struct.at11 = value
    def next_value : GTokenValue = struct._12
    def next_value_=(value: GTokenValue): Unit = !struct.at12 = value
    def next_line : guint = struct._13
    def next_line_=(value: guint): Unit = !struct.at13 = value
    def next_position : guint = struct._14
    def next_position_=(value: guint): Unit = !struct.at14 = value
    def symbol_table : Ptr[GHashTable] = struct._15
    def symbol_table_=(value: Ptr[GHashTable]): Unit = !struct.at15 = value
    def input_fd : gint = struct._16
    def input_fd_=(value: gint): Unit = !struct.at16 = value
    def text : Ptr[gchar] = struct._17
    def text_=(value: Ptr[gchar]): Unit = !struct.at17 = value
    def text_end : Ptr[gchar] = struct._18
    def text_end_=(value: Ptr[gchar]): Unit = !struct.at18 = value
    def buffer : Ptr[gchar] = struct._19
    def buffer_=(value: Ptr[gchar]): Unit = !struct.at19 = value
    def scope_id : guint = struct._20
    def scope_id_=(value: guint): Unit = !struct.at20 = value
    def msg_handler : GScannerMsgFunc = struct._21.asInstanceOf[GScannerMsgFunc]
    def msg_handler_=(value: GScannerMsgFunc): Unit = !struct.at21 = value.asInstanceOf[Ptr[Byte]]

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
*/
opaque type _GScannerConfig = CArray[CChar, Nat.Digit3[Nat._1, Nat._2, Nat._8]]
object _GScannerConfig:
  given _tag: Tag[_GScannerConfig] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._2, Nat._8]](Tag.Byte, Tag.Digit3[Nat._1, Nat._2, Nat._8](Tag.Nat1, Tag.Nat2, Tag.Nat8))
  def apply()(using Zone): Ptr[_GScannerConfig] = scala.scalanative.unsafe.alloc[_GScannerConfig](1)
  def apply(cset_skip_characters : Ptr[gchar], cset_identifier_first : Ptr[gchar], cset_identifier_nth : Ptr[gchar], cpair_comment_single : Ptr[gchar], case_sensitive : guint, skip_comment_multi : guint, skip_comment_single : guint, scan_comment_multi : guint, scan_identifier : guint, scan_identifier_1char : guint, scan_identifier_NULL : guint, scan_symbols : guint, scan_binary : guint, scan_octal : guint, scan_float : guint, scan_hex : guint, scan_hex_dollar : guint, scan_string_sq : guint, scan_string_dq : guint, numbers_2_int : guint, int_2_float : guint, identifier_2_string : guint, char_2_token : guint, symbol_2_token : guint, scope_0_fallback : guint, store_int64 : guint, padding_dummy : guint)(using Zone): Ptr[_GScannerConfig] = 
    val ____ptr = apply()
    (!____ptr).cset_skip_characters = cset_skip_characters
    (!____ptr).cset_identifier_first = cset_identifier_first
    (!____ptr).cset_identifier_nth = cset_identifier_nth
    (!____ptr).cpair_comment_single = cpair_comment_single
    (!____ptr).case_sensitive = case_sensitive
    (!____ptr).skip_comment_multi = skip_comment_multi
    (!____ptr).skip_comment_single = skip_comment_single
    (!____ptr).scan_comment_multi = scan_comment_multi
    (!____ptr).scan_identifier = scan_identifier
    (!____ptr).scan_identifier_1char = scan_identifier_1char
    (!____ptr).scan_identifier_NULL = scan_identifier_NULL
    (!____ptr).scan_symbols = scan_symbols
    (!____ptr).scan_binary = scan_binary
    (!____ptr).scan_octal = scan_octal
    (!____ptr).scan_float = scan_float
    (!____ptr).scan_hex = scan_hex
    (!____ptr).scan_hex_dollar = scan_hex_dollar
    (!____ptr).scan_string_sq = scan_string_sq
    (!____ptr).scan_string_dq = scan_string_dq
    (!____ptr).numbers_2_int = numbers_2_int
    (!____ptr).int_2_float = int_2_float
    (!____ptr).identifier_2_string = identifier_2_string
    (!____ptr).char_2_token = char_2_token
    (!____ptr).symbol_2_token = symbol_2_token
    (!____ptr).scope_0_fallback = scope_0_fallback
    (!____ptr).store_int64 = store_int64
    (!____ptr).padding_dummy = padding_dummy
    ____ptr
  extension (struct: _GScannerConfig)
    def cset_skip_characters: Ptr[gchar] = !struct.at(0).asInstanceOf[Ptr[Ptr[gchar]]]
    def cset_skip_characters_=(value: Ptr[gchar]): Unit = !struct.at(0).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def cset_identifier_first: Ptr[gchar] = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]]
    def cset_identifier_first_=(value: Ptr[gchar]): Unit = !struct.at(8).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def cset_identifier_nth: Ptr[gchar] = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]]
    def cset_identifier_nth_=(value: Ptr[gchar]): Unit = !struct.at(16).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def cpair_comment_single: Ptr[gchar] = !struct.at(24).asInstanceOf[Ptr[Ptr[gchar]]]
    def cpair_comment_single_=(value: Ptr[gchar]): Unit = !struct.at(24).asInstanceOf[Ptr[Ptr[gchar]]] = value
    def case_sensitive: guint = !struct.at(32).asInstanceOf[Ptr[guint]]
    def case_sensitive_=(value: guint): Unit = !struct.at(32).asInstanceOf[Ptr[guint]] = value
    def skip_comment_multi: guint = !struct.at(36).asInstanceOf[Ptr[guint]]
    def skip_comment_multi_=(value: guint): Unit = !struct.at(36).asInstanceOf[Ptr[guint]] = value
    def skip_comment_single: guint = !struct.at(40).asInstanceOf[Ptr[guint]]
    def skip_comment_single_=(value: guint): Unit = !struct.at(40).asInstanceOf[Ptr[guint]] = value
    def scan_comment_multi: guint = !struct.at(44).asInstanceOf[Ptr[guint]]
    def scan_comment_multi_=(value: guint): Unit = !struct.at(44).asInstanceOf[Ptr[guint]] = value
    def scan_identifier: guint = !struct.at(48).asInstanceOf[Ptr[guint]]
    def scan_identifier_=(value: guint): Unit = !struct.at(48).asInstanceOf[Ptr[guint]] = value
    def scan_identifier_1char: guint = !struct.at(52).asInstanceOf[Ptr[guint]]
    def scan_identifier_1char_=(value: guint): Unit = !struct.at(52).asInstanceOf[Ptr[guint]] = value
    def scan_identifier_NULL: guint = !struct.at(56).asInstanceOf[Ptr[guint]]
    def scan_identifier_NULL_=(value: guint): Unit = !struct.at(56).asInstanceOf[Ptr[guint]] = value
    def scan_symbols: guint = !struct.at(60).asInstanceOf[Ptr[guint]]
    def scan_symbols_=(value: guint): Unit = !struct.at(60).asInstanceOf[Ptr[guint]] = value
    def scan_binary: guint = !struct.at(64).asInstanceOf[Ptr[guint]]
    def scan_binary_=(value: guint): Unit = !struct.at(64).asInstanceOf[Ptr[guint]] = value
    def scan_octal: guint = !struct.at(68).asInstanceOf[Ptr[guint]]
    def scan_octal_=(value: guint): Unit = !struct.at(68).asInstanceOf[Ptr[guint]] = value
    def scan_float: guint = !struct.at(72).asInstanceOf[Ptr[guint]]
    def scan_float_=(value: guint): Unit = !struct.at(72).asInstanceOf[Ptr[guint]] = value
    def scan_hex: guint = !struct.at(76).asInstanceOf[Ptr[guint]]
    def scan_hex_=(value: guint): Unit = !struct.at(76).asInstanceOf[Ptr[guint]] = value
    def scan_hex_dollar: guint = !struct.at(80).asInstanceOf[Ptr[guint]]
    def scan_hex_dollar_=(value: guint): Unit = !struct.at(80).asInstanceOf[Ptr[guint]] = value
    def scan_string_sq: guint = !struct.at(84).asInstanceOf[Ptr[guint]]
    def scan_string_sq_=(value: guint): Unit = !struct.at(84).asInstanceOf[Ptr[guint]] = value
    def scan_string_dq: guint = !struct.at(88).asInstanceOf[Ptr[guint]]
    def scan_string_dq_=(value: guint): Unit = !struct.at(88).asInstanceOf[Ptr[guint]] = value
    def numbers_2_int: guint = !struct.at(92).asInstanceOf[Ptr[guint]]
    def numbers_2_int_=(value: guint): Unit = !struct.at(92).asInstanceOf[Ptr[guint]] = value
    def int_2_float: guint = !struct.at(96).asInstanceOf[Ptr[guint]]
    def int_2_float_=(value: guint): Unit = !struct.at(96).asInstanceOf[Ptr[guint]] = value
    def identifier_2_string: guint = !struct.at(100).asInstanceOf[Ptr[guint]]
    def identifier_2_string_=(value: guint): Unit = !struct.at(100).asInstanceOf[Ptr[guint]] = value
    def char_2_token: guint = !struct.at(104).asInstanceOf[Ptr[guint]]
    def char_2_token_=(value: guint): Unit = !struct.at(104).asInstanceOf[Ptr[guint]] = value
    def symbol_2_token: guint = !struct.at(108).asInstanceOf[Ptr[guint]]
    def symbol_2_token_=(value: guint): Unit = !struct.at(108).asInstanceOf[Ptr[guint]] = value
    def scope_0_fallback: guint = !struct.at(112).asInstanceOf[Ptr[guint]]
    def scope_0_fallback_=(value: guint): Unit = !struct.at(112).asInstanceOf[Ptr[guint]] = value
    def store_int64: guint = !struct.at(116).asInstanceOf[Ptr[guint]]
    def store_int64_=(value: guint): Unit = !struct.at(116).asInstanceOf[Ptr[guint]] = value
    def padding_dummy: guint = !struct.at(120).asInstanceOf[Ptr[guint]]
    def padding_dummy_=(value: guint): Unit = !struct.at(120).asInstanceOf[Ptr[guint]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GSeekable = CStruct0
object _GSeekable:
  given _tag: Tag[_GSeekable] = Tag.materializeCStruct0Tag

/**
 * GSeekableIface: _iface: The parent interface. : Tells the current location within a stream. _seek: Checks if seeking is supported by the stream.

 * [bindgen] header: /usr/include/glib-2.0/gio/gseekable.h
*/
opaque type _GSeekableIface = CStruct6[GTypeInterface, CFuncPtr1[Ptr[GSeekable], goffset], CFuncPtr1[Ptr[GSeekable], gboolean], CFuncPtr5[Ptr[GSeekable], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr1[Ptr[GSeekable], gboolean], CFuncPtr4[Ptr[GSeekable], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]
object _GSeekableIface:
  given _tag: Tag[_GSeekableIface] = Tag.materializeCStruct6Tag[GTypeInterface, CFuncPtr1[Ptr[GSeekable], goffset], CFuncPtr1[Ptr[GSeekable], gboolean], CFuncPtr5[Ptr[GSeekable], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr1[Ptr[GSeekable], gboolean], CFuncPtr4[Ptr[GSeekable], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]]
  def apply()(using Zone): Ptr[_GSeekableIface] = scala.scalanative.unsafe.alloc[_GSeekableIface](1)
  def apply(g_iface : GTypeInterface, tell : CFuncPtr1[Ptr[GSeekable], goffset], can_seek : CFuncPtr1[Ptr[GSeekable], gboolean], seek : CFuncPtr5[Ptr[GSeekable], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], can_truncate : CFuncPtr1[Ptr[GSeekable], gboolean], truncate_fn : CFuncPtr4[Ptr[GSeekable], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean])(using Zone): Ptr[_GSeekableIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).tell = tell
    (!____ptr).can_seek = can_seek
    (!____ptr).seek = seek
    (!____ptr).can_truncate = can_truncate
    (!____ptr).truncate_fn = truncate_fn
    ____ptr
  extension (struct: _GSeekableIface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def tell : CFuncPtr1[Ptr[GSeekable], goffset] = struct._2
    def tell_=(value: CFuncPtr1[Ptr[GSeekable], goffset]): Unit = !struct.at2 = value
    def can_seek : CFuncPtr1[Ptr[GSeekable], gboolean] = struct._3
    def can_seek_=(value: CFuncPtr1[Ptr[GSeekable], gboolean]): Unit = !struct.at3 = value
    def seek : CFuncPtr5[Ptr[GSeekable], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._4
    def seek_=(value: CFuncPtr5[Ptr[GSeekable], goffset, GSeekType, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at4 = value
    def can_truncate : CFuncPtr1[Ptr[GSeekable], gboolean] = struct._5
    def can_truncate_=(value: CFuncPtr1[Ptr[GSeekable], gboolean]): Unit = !struct.at5 = value
    def truncate_fn : CFuncPtr4[Ptr[GSeekable], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._6
    def truncate_fn_=(value: CFuncPtr4[Ptr[GSeekable], goffset, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
*/
opaque type _GSequence = CStruct0
object _GSequence:
  given _tag: Tag[_GSequence] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
*/
opaque type _GSequenceNode = CStruct0
object _GSequenceNode:
  given _tag: Tag[_GSequenceNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
*/
opaque type _GSettings = CStruct2[GObject, Ptr[GSettingsPrivate]]
object _GSettings:
  given _tag: Tag[_GSettings] = Tag.materializeCStruct2Tag[GObject, Ptr[GSettingsPrivate]]
  def apply()(using Zone): Ptr[_GSettings] = scala.scalanative.unsafe.alloc[_GSettings](1)
  def apply(parent_instance : GObject, priv : Ptr[GSettingsPrivate])(using Zone): Ptr[_GSettings] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GSettings)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GSettingsPrivate] = struct._2
    def priv_=(value: Ptr[GSettingsPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GSettingsBackend = CStruct0
object _GSettingsBackend:
  given _tag: Tag[_GSettingsBackend] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
*/
opaque type _GSettingsClass = CStruct6[GObjectClass, CFuncPtr2[Ptr[GSettings], Ptr[gchar], Unit], CFuncPtr2[Ptr[GSettings], Ptr[gchar], Unit], CFuncPtr2[Ptr[GSettings], GQuark, gboolean], CFuncPtr3[Ptr[GSettings], Ptr[GQuark], gint, gboolean], CArray[gpointer, Nat.Digit2[Nat._2, Nat._0]]]
object _GSettingsClass:
  given _tag: Tag[_GSettingsClass] = Tag.materializeCStruct6Tag[GObjectClass, CFuncPtr2[Ptr[GSettings], Ptr[gchar], Unit], CFuncPtr2[Ptr[GSettings], Ptr[gchar], Unit], CFuncPtr2[Ptr[GSettings], GQuark, gboolean], CFuncPtr3[Ptr[GSettings], Ptr[GQuark], gint, gboolean], CArray[gpointer, Nat.Digit2[Nat._2, Nat._0]]]
  def apply()(using Zone): Ptr[_GSettingsClass] = scala.scalanative.unsafe.alloc[_GSettingsClass](1)
  def apply(parent_class : GObjectClass, writable_changed : CFuncPtr2[Ptr[GSettings], Ptr[gchar], Unit], changed : CFuncPtr2[Ptr[GSettings], Ptr[gchar], Unit], writable_change_event : CFuncPtr2[Ptr[GSettings], GQuark, gboolean], change_event : CFuncPtr3[Ptr[GSettings], Ptr[GQuark], gint, gboolean], padding : CArray[gpointer, Nat.Digit2[Nat._2, Nat._0]])(using Zone): Ptr[_GSettingsClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).writable_changed = writable_changed
    (!____ptr).changed = changed
    (!____ptr).writable_change_event = writable_change_event
    (!____ptr).change_event = change_event
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GSettingsClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def writable_changed : CFuncPtr2[Ptr[GSettings], Ptr[gchar], Unit] = struct._2
    def writable_changed_=(value: CFuncPtr2[Ptr[GSettings], Ptr[gchar], Unit]): Unit = !struct.at2 = value
    def changed : CFuncPtr2[Ptr[GSettings], Ptr[gchar], Unit] = struct._3
    def changed_=(value: CFuncPtr2[Ptr[GSettings], Ptr[gchar], Unit]): Unit = !struct.at3 = value
    def writable_change_event : CFuncPtr2[Ptr[GSettings], GQuark, gboolean] = struct._4
    def writable_change_event_=(value: CFuncPtr2[Ptr[GSettings], GQuark, gboolean]): Unit = !struct.at4 = value
    def change_event : CFuncPtr3[Ptr[GSettings], Ptr[GQuark], gint, gboolean] = struct._5
    def change_event_=(value: CFuncPtr3[Ptr[GSettings], Ptr[GQuark], gint, gboolean]): Unit = !struct.at5 = value
    def padding : CArray[gpointer, Nat.Digit2[Nat._2, Nat._0]] = struct._6
    def padding_=(value: CArray[gpointer, Nat.Digit2[Nat._2, Nat._0]]): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
*/
opaque type _GSettingsPrivate = CStruct0
object _GSettingsPrivate:
  given _tag: Tag[_GSettingsPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
*/
opaque type _GSettingsSchema = CStruct0
object _GSettingsSchema:
  given _tag: Tag[_GSettingsSchema] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
*/
opaque type _GSettingsSchemaKey = CStruct0
object _GSettingsSchemaKey:
  given _tag: Tag[_GSettingsSchemaKey] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
*/
opaque type _GSettingsSchemaSource = CStruct0
object _GSettingsSchemaSource:
  given _tag: Tag[_GSettingsSchemaSource] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gobject/gsignalgroup.h
*/
opaque type _GSignalGroup = CStruct0
object _GSignalGroup:
  given _tag: Tag[_GSignalGroup] = Tag.materializeCStruct0Tag

/**
 * GSignalInvocationHint: _id: The signal id of the signal invoking the callback

 * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
*/
opaque type _GSignalInvocationHint = CStruct3[guint, GQuark, GSignalFlags]
object _GSignalInvocationHint:
  given _tag: Tag[_GSignalInvocationHint] = Tag.materializeCStruct3Tag[guint, GQuark, GSignalFlags]
  def apply()(using Zone): Ptr[_GSignalInvocationHint] = scala.scalanative.unsafe.alloc[_GSignalInvocationHint](1)
  def apply(signal_id : guint, detail : GQuark, run_type : GSignalFlags)(using Zone): Ptr[_GSignalInvocationHint] = 
    val ____ptr = apply()
    (!____ptr).signal_id = signal_id
    (!____ptr).detail = detail
    (!____ptr).run_type = run_type
    ____ptr
  extension (struct: _GSignalInvocationHint)
    def signal_id : guint = struct._1
    def signal_id_=(value: guint): Unit = !struct.at1 = value
    def detail : GQuark = struct._2
    def detail_=(value: GQuark): Unit = !struct.at2 = value
    def run_type : GSignalFlags = struct._3
    def run_type_=(value: GSignalFlags): Unit = !struct.at3 = value

/**
 * GSignalQuery: _id: The signal id of the signal being queried, or 0 if the signal to be queried was unknown. _name: The signal name. : The interface/instance type that this signal can be emitted for. _flags: The signal flags as passed in to g_signal_new().

 * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
*/
opaque type _GSignalQuery = CStruct7[guint, Ptr[gchar], GType, GSignalFlags, GType, guint, Ptr[GType]]
object _GSignalQuery:
  given _tag: Tag[_GSignalQuery] = Tag.materializeCStruct7Tag[guint, Ptr[gchar], GType, GSignalFlags, GType, guint, Ptr[GType]]
  def apply()(using Zone): Ptr[_GSignalQuery] = scala.scalanative.unsafe.alloc[_GSignalQuery](1)
  def apply(signal_id : guint, signal_name : Ptr[gchar], itype : GType, signal_flags : GSignalFlags, return_type : GType, n_params : guint, param_types : Ptr[GType])(using Zone): Ptr[_GSignalQuery] = 
    val ____ptr = apply()
    (!____ptr).signal_id = signal_id
    (!____ptr).signal_name = signal_name
    (!____ptr).itype = itype
    (!____ptr).signal_flags = signal_flags
    (!____ptr).return_type = return_type
    (!____ptr).n_params = n_params
    (!____ptr).param_types = param_types
    ____ptr
  extension (struct: _GSignalQuery)
    def signal_id : guint = struct._1
    def signal_id_=(value: guint): Unit = !struct.at1 = value
    def signal_name : Ptr[gchar] = struct._2
    def signal_name_=(value: Ptr[gchar]): Unit = !struct.at2 = value
    def itype : GType = struct._3
    def itype_=(value: GType): Unit = !struct.at3 = value
    def signal_flags : GSignalFlags = struct._4
    def signal_flags_=(value: GSignalFlags): Unit = !struct.at4 = value
    def return_type : GType = struct._5
    def return_type_=(value: GType): Unit = !struct.at5 = value
    def n_params : guint = struct._6
    def n_params_=(value: guint): Unit = !struct.at6 = value
    def param_types : Ptr[GType] = struct._7
    def param_types_=(value: Ptr[GType]): Unit = !struct.at7 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GSimpleAction = CStruct0
object _GSimpleAction:
  given _tag: Tag[_GSimpleAction] = Tag.materializeCStruct0Tag

/**
 * GSimpleActionGroup:

 * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleactiongroup.h
*/
opaque type _GSimpleActionGroup = CStruct2[GObject, Ptr[GSimpleActionGroupPrivate]]
object _GSimpleActionGroup:
  given _tag: Tag[_GSimpleActionGroup] = Tag.materializeCStruct2Tag[GObject, Ptr[GSimpleActionGroupPrivate]]
  def apply()(using Zone): Ptr[_GSimpleActionGroup] = scala.scalanative.unsafe.alloc[_GSimpleActionGroup](1)
  def apply(parent_instance : GObject, priv : Ptr[GSimpleActionGroupPrivate])(using Zone): Ptr[_GSimpleActionGroup] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GSimpleActionGroup)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GSimpleActionGroupPrivate] = struct._2
    def priv_=(value: Ptr[GSimpleActionGroupPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleactiongroup.h
*/
opaque type _GSimpleActionGroupClass = CStruct2[GObjectClass, CArray[gpointer, Nat.Digit2[Nat._1, Nat._2]]]
object _GSimpleActionGroupClass:
  given _tag: Tag[_GSimpleActionGroupClass] = Tag.materializeCStruct2Tag[GObjectClass, CArray[gpointer, Nat.Digit2[Nat._1, Nat._2]]]
  def apply()(using Zone): Ptr[_GSimpleActionGroupClass] = scala.scalanative.unsafe.alloc[_GSimpleActionGroupClass](1)
  def apply(parent_class : GObjectClass, padding : CArray[gpointer, Nat.Digit2[Nat._1, Nat._2]])(using Zone): Ptr[_GSimpleActionGroupClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GSimpleActionGroupClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def padding : CArray[gpointer, Nat.Digit2[Nat._1, Nat._2]] = struct._2
    def padding_=(value: CArray[gpointer, Nat.Digit2[Nat._1, Nat._2]]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleactiongroup.h
*/
opaque type _GSimpleActionGroupPrivate = CStruct0
object _GSimpleActionGroupPrivate:
  given _tag: Tag[_GSimpleActionGroupPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GSimpleAsyncResult = CStruct0
object _GSimpleAsyncResult:
  given _tag: Tag[_GSimpleAsyncResult] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
*/
opaque type _GSimpleAsyncResultClass = CStruct0
object _GSimpleAsyncResultClass:
  given _tag: Tag[_GSimpleAsyncResultClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GSimpleIOStream = CStruct0
object _GSimpleIOStream:
  given _tag: Tag[_GSimpleIOStream] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GSimplePermission = CStruct0
object _GSimplePermission:
  given _tag: Tag[_GSimplePermission] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleproxyresolver.h
*/
opaque type _GSimpleProxyResolver = CStruct2[GObject, Ptr[GSimpleProxyResolverPrivate]]
object _GSimpleProxyResolver:
  given _tag: Tag[_GSimpleProxyResolver] = Tag.materializeCStruct2Tag[GObject, Ptr[GSimpleProxyResolverPrivate]]
  def apply()(using Zone): Ptr[_GSimpleProxyResolver] = scala.scalanative.unsafe.alloc[_GSimpleProxyResolver](1)
  def apply(parent_instance : GObject, priv : Ptr[GSimpleProxyResolverPrivate])(using Zone): Ptr[_GSimpleProxyResolver] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GSimpleProxyResolver)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GSimpleProxyResolverPrivate] = struct._2
    def priv_=(value: Ptr[GSimpleProxyResolverPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleproxyresolver.h
*/
opaque type _GSimpleProxyResolverClass = CStruct6[GObjectClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GSimpleProxyResolverClass:
  given _tag: Tag[_GSimpleProxyResolverClass] = Tag.materializeCStruct6Tag[GObjectClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GSimpleProxyResolverClass] = scala.scalanative.unsafe.alloc[_GSimpleProxyResolverClass](1)
  def apply(parent_class : GObjectClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[_GSimpleProxyResolverClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: _GSimpleProxyResolverClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._2
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at2 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._3
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at3 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._4
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at4 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._5
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at5 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._6
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleproxyresolver.h
*/
opaque type _GSimpleProxyResolverPrivate = CStruct0
object _GSimpleProxyResolverPrivate:
  given _tag: Tag[_GSimpleProxyResolverPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
*/
opaque type _GSocket = CStruct2[GObject, Ptr[GSocketPrivate]]
object _GSocket:
  given _tag: Tag[_GSocket] = Tag.materializeCStruct2Tag[GObject, Ptr[GSocketPrivate]]
  def apply()(using Zone): Ptr[_GSocket] = scala.scalanative.unsafe.alloc[_GSocket](1)
  def apply(parent_instance : GObject, priv : Ptr[GSocketPrivate])(using Zone): Ptr[_GSocket] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GSocket)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GSocketPrivate] = struct._2
    def priv_=(value: Ptr[GSocketPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketaddress.h
*/
opaque type _GSocketAddress = CStruct1[GObject]
object _GSocketAddress:
  given _tag: Tag[_GSocketAddress] = Tag.materializeCStruct1Tag[GObject]
  def apply()(using Zone): Ptr[_GSocketAddress] = scala.scalanative.unsafe.alloc[_GSocketAddress](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[_GSocketAddress] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _GSocketAddress)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketaddress.h
*/
opaque type _GSocketAddressClass = CStruct4[GObjectClass, CFuncPtr1[Ptr[GSocketAddress], GSocketFamily], CFuncPtr1[Ptr[GSocketAddress], gssize], CFuncPtr4[Ptr[GSocketAddress], gpointer, gsize, Ptr[Ptr[GError]], gboolean]]
object _GSocketAddressClass:
  given _tag: Tag[_GSocketAddressClass] = Tag.materializeCStruct4Tag[GObjectClass, CFuncPtr1[Ptr[GSocketAddress], GSocketFamily], CFuncPtr1[Ptr[GSocketAddress], gssize], CFuncPtr4[Ptr[GSocketAddress], gpointer, gsize, Ptr[Ptr[GError]], gboolean]]
  def apply()(using Zone): Ptr[_GSocketAddressClass] = scala.scalanative.unsafe.alloc[_GSocketAddressClass](1)
  def apply(parent_class : GObjectClass, get_family : CFuncPtr1[Ptr[GSocketAddress], GSocketFamily], get_native_size : CFuncPtr1[Ptr[GSocketAddress], gssize], to_native : CFuncPtr4[Ptr[GSocketAddress], gpointer, gsize, Ptr[Ptr[GError]], gboolean])(using Zone): Ptr[_GSocketAddressClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_family = get_family
    (!____ptr).get_native_size = get_native_size
    (!____ptr).to_native = to_native
    ____ptr
  extension (struct: _GSocketAddressClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def get_family : CFuncPtr1[Ptr[GSocketAddress], GSocketFamily] = struct._2
    def get_family_=(value: CFuncPtr1[Ptr[GSocketAddress], GSocketFamily]): Unit = !struct.at2 = value
    def get_native_size : CFuncPtr1[Ptr[GSocketAddress], gssize] = struct._3
    def get_native_size_=(value: CFuncPtr1[Ptr[GSocketAddress], gssize]): Unit = !struct.at3 = value
    def to_native : CFuncPtr4[Ptr[GSocketAddress], gpointer, gsize, Ptr[Ptr[GError]], gboolean] = struct._4
    def to_native_=(value: CFuncPtr4[Ptr[GSocketAddress], gpointer, gsize, Ptr[Ptr[GError]], gboolean]): Unit = !struct.at4 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketaddressenumerator.h
*/
opaque type _GSocketAddressEnumerator = CStruct1[GObject]
object _GSocketAddressEnumerator:
  given _tag: Tag[_GSocketAddressEnumerator] = Tag.materializeCStruct1Tag[GObject]
  def apply()(using Zone): Ptr[_GSocketAddressEnumerator] = scala.scalanative.unsafe.alloc[_GSocketAddressEnumerator](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[_GSocketAddressEnumerator] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _GSocketAddressEnumerator)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value

/**
 * GSocketAddressEnumeratorClass: : Virtual method for g_socket_address_enumerator_next(). _async: Virtual method for g_socket_address_enumerator_next_async(). _finish: Virtual method for g_socket_address_enumerator_next_finish().

 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketaddressenumerator.h
*/
opaque type _GSocketAddressEnumeratorClass = CStruct4[GObjectClass, CFuncPtr3[Ptr[GSocketAddressEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GSocketAddress]], CFuncPtr4[Ptr[GSocketAddressEnumerator], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GSocketAddressEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GSocketAddress]]]
object _GSocketAddressEnumeratorClass:
  given _tag: Tag[_GSocketAddressEnumeratorClass] = Tag.materializeCStruct4Tag[GObjectClass, CFuncPtr3[Ptr[GSocketAddressEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GSocketAddress]], CFuncPtr4[Ptr[GSocketAddressEnumerator], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GSocketAddressEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GSocketAddress]]]
  def apply()(using Zone): Ptr[_GSocketAddressEnumeratorClass] = scala.scalanative.unsafe.alloc[_GSocketAddressEnumeratorClass](1)
  def apply(parent_class : GObjectClass, next : CFuncPtr3[Ptr[GSocketAddressEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GSocketAddress]], next_async : CFuncPtr4[Ptr[GSocketAddressEnumerator], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], next_finish : CFuncPtr3[Ptr[GSocketAddressEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GSocketAddress]])(using Zone): Ptr[_GSocketAddressEnumeratorClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).next = next
    (!____ptr).next_async = next_async
    (!____ptr).next_finish = next_finish
    ____ptr
  extension (struct: _GSocketAddressEnumeratorClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def next : CFuncPtr3[Ptr[GSocketAddressEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GSocketAddress]] = struct._2
    def next_=(value: CFuncPtr3[Ptr[GSocketAddressEnumerator], Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GSocketAddress]]): Unit = !struct.at2 = value
    def next_async : CFuncPtr4[Ptr[GSocketAddressEnumerator], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._3
    def next_async_=(value: CFuncPtr4[Ptr[GSocketAddressEnumerator], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at3 = value
    def next_finish : CFuncPtr3[Ptr[GSocketAddressEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GSocketAddress]] = struct._4
    def next_finish_=(value: CFuncPtr3[Ptr[GSocketAddressEnumerator], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GSocketAddress]]): Unit = !struct.at4 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
*/
opaque type _GSocketClass = CStruct11[GObjectClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GSocketClass:
  given _tag: Tag[_GSocketClass] = Tag.materializeCStruct11Tag[GObjectClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GSocketClass] = scala.scalanative.unsafe.alloc[_GSocketClass](1)
  def apply(parent_class : GObjectClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit], _g_reserved7 : CFuncPtr0[Unit], _g_reserved8 : CFuncPtr0[Unit], _g_reserved9 : CFuncPtr0[Unit], _g_reserved10 : CFuncPtr0[Unit])(using Zone): Ptr[_GSocketClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    (!____ptr)._g_reserved7 = _g_reserved7
    (!____ptr)._g_reserved8 = _g_reserved8
    (!____ptr)._g_reserved9 = _g_reserved9
    (!____ptr)._g_reserved10 = _g_reserved10
    ____ptr
  extension (struct: _GSocketClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._2
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at2 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._3
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at3 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._4
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at4 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._5
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at5 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._6
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at6 = value
    def _g_reserved6 : CFuncPtr0[Unit] = struct._7
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at7 = value
    def _g_reserved7 : CFuncPtr0[Unit] = struct._8
    def _g_reserved7_=(value: CFuncPtr0[Unit]): Unit = !struct.at8 = value
    def _g_reserved8 : CFuncPtr0[Unit] = struct._9
    def _g_reserved8_=(value: CFuncPtr0[Unit]): Unit = !struct.at9 = value
    def _g_reserved9 : CFuncPtr0[Unit] = struct._10
    def _g_reserved9_=(value: CFuncPtr0[Unit]): Unit = !struct.at10 = value
    def _g_reserved10 : CFuncPtr0[Unit] = struct._11
    def _g_reserved10_=(value: CFuncPtr0[Unit]): Unit = !struct.at11 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
*/
opaque type _GSocketClient = CStruct2[GObject, Ptr[GSocketClientPrivate]]
object _GSocketClient:
  given _tag: Tag[_GSocketClient] = Tag.materializeCStruct2Tag[GObject, Ptr[GSocketClientPrivate]]
  def apply()(using Zone): Ptr[_GSocketClient] = scala.scalanative.unsafe.alloc[_GSocketClient](1)
  def apply(parent_instance : GObject, priv : Ptr[GSocketClientPrivate])(using Zone): Ptr[_GSocketClient] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GSocketClient)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GSocketClientPrivate] = struct._2
    def priv_=(value: Ptr[GSocketClientPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
*/
opaque type _GSocketClientClass = CStruct6[GObjectClass, CFuncPtr4[Ptr[GSocketClient], GSocketClientEvent, Ptr[GSocketConnectable], Ptr[GIOStream], Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GSocketClientClass:
  given _tag: Tag[_GSocketClientClass] = Tag.materializeCStruct6Tag[GObjectClass, CFuncPtr4[Ptr[GSocketClient], GSocketClientEvent, Ptr[GSocketConnectable], Ptr[GIOStream], Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GSocketClientClass] = scala.scalanative.unsafe.alloc[_GSocketClientClass](1)
  def apply(parent_class : GObjectClass, event : CFuncPtr4[Ptr[GSocketClient], GSocketClientEvent, Ptr[GSocketConnectable], Ptr[GIOStream], Unit], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit])(using Zone): Ptr[_GSocketClientClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).event = event
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    ____ptr
  extension (struct: _GSocketClientClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def event : CFuncPtr4[Ptr[GSocketClient], GSocketClientEvent, Ptr[GSocketConnectable], Ptr[GIOStream], Unit] = struct._2
    def event_=(value: CFuncPtr4[Ptr[GSocketClient], GSocketClientEvent, Ptr[GSocketConnectable], Ptr[GIOStream], Unit]): Unit = !struct.at2 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._3
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at3 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._4
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at4 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._5
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at5 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._6
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
*/
opaque type _GSocketClientPrivate = CStruct0
object _GSocketClientPrivate:
  given _tag: Tag[_GSocketClientPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GSocketConnectable = CStruct0
object _GSocketConnectable:
  given _tag: Tag[_GSocketConnectable] = Tag.materializeCStruct0Tag

/**
 * GSocketConnectableIface: _iface: The parent interface. : Creates a #GSocketAddressEnumerator _enumerate: Creates a #GProxyAddressEnumerator _string: Format the connectable’s address as a string for debugging. Implementing this is optional. (Since: 2.48)

 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnectable.h
*/
opaque type _GSocketConnectableIface = CStruct4[GTypeInterface, CFuncPtr1[Ptr[GSocketConnectable], Ptr[GSocketAddressEnumerator]], CFuncPtr1[Ptr[GSocketConnectable], Ptr[GSocketAddressEnumerator]], CFuncPtr1[Ptr[GSocketConnectable], Ptr[gchar]]]
object _GSocketConnectableIface:
  given _tag: Tag[_GSocketConnectableIface] = Tag.materializeCStruct4Tag[GTypeInterface, CFuncPtr1[Ptr[GSocketConnectable], Ptr[GSocketAddressEnumerator]], CFuncPtr1[Ptr[GSocketConnectable], Ptr[GSocketAddressEnumerator]], CFuncPtr1[Ptr[GSocketConnectable], Ptr[gchar]]]
  def apply()(using Zone): Ptr[_GSocketConnectableIface] = scala.scalanative.unsafe.alloc[_GSocketConnectableIface](1)
  def apply(g_iface : GTypeInterface, enumerate : CFuncPtr1[Ptr[GSocketConnectable], Ptr[GSocketAddressEnumerator]], proxy_enumerate : CFuncPtr1[Ptr[GSocketConnectable], Ptr[GSocketAddressEnumerator]], to_string : CFuncPtr1[Ptr[GSocketConnectable], Ptr[gchar]])(using Zone): Ptr[_GSocketConnectableIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).enumerate = enumerate
    (!____ptr).proxy_enumerate = proxy_enumerate
    (!____ptr).to_string = to_string
    ____ptr
  extension (struct: _GSocketConnectableIface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def enumerate : CFuncPtr1[Ptr[GSocketConnectable], Ptr[GSocketAddressEnumerator]] = struct._2
    def enumerate_=(value: CFuncPtr1[Ptr[GSocketConnectable], Ptr[GSocketAddressEnumerator]]): Unit = !struct.at2 = value
    def proxy_enumerate : CFuncPtr1[Ptr[GSocketConnectable], Ptr[GSocketAddressEnumerator]] = struct._3
    def proxy_enumerate_=(value: CFuncPtr1[Ptr[GSocketConnectable], Ptr[GSocketAddressEnumerator]]): Unit = !struct.at3 = value
    def to_string : CFuncPtr1[Ptr[GSocketConnectable], Ptr[gchar]] = struct._4
    def to_string_=(value: CFuncPtr1[Ptr[GSocketConnectable], Ptr[gchar]]): Unit = !struct.at4 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnection.h
*/
opaque type _GSocketConnection = CStruct2[GIOStream, Ptr[GSocketConnectionPrivate]]
object _GSocketConnection:
  given _tag: Tag[_GSocketConnection] = Tag.materializeCStruct2Tag[GIOStream, Ptr[GSocketConnectionPrivate]]
  def apply()(using Zone): Ptr[_GSocketConnection] = scala.scalanative.unsafe.alloc[_GSocketConnection](1)
  def apply(parent_instance : GIOStream, priv : Ptr[GSocketConnectionPrivate])(using Zone): Ptr[_GSocketConnection] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GSocketConnection)
    def parent_instance : GIOStream = struct._1
    def parent_instance_=(value: GIOStream): Unit = !struct.at1 = value
    def priv : Ptr[GSocketConnectionPrivate] = struct._2
    def priv_=(value: Ptr[GSocketConnectionPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnection.h
*/
opaque type _GSocketConnectionClass = CStruct7[GIOStreamClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GSocketConnectionClass:
  given _tag: Tag[_GSocketConnectionClass] = Tag.materializeCStruct7Tag[GIOStreamClass, CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GSocketConnectionClass] = scala.scalanative.unsafe.alloc[_GSocketConnectionClass](1)
  def apply(parent_class : GIOStreamClass, _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit])(using Zone): Ptr[_GSocketConnectionClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    ____ptr
  extension (struct: _GSocketConnectionClass)
    def parent_class : GIOStreamClass = struct._1
    def parent_class_=(value: GIOStreamClass): Unit = !struct.at1 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._2
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at2 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._3
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at3 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._4
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at4 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._5
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at5 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._6
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at6 = value
    def _g_reserved6 : CFuncPtr0[Unit] = struct._7
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at7 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnection.h
*/
opaque type _GSocketConnectionPrivate = CStruct0
object _GSocketConnectionPrivate:
  given _tag: Tag[_GSocketConnectionPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketcontrolmessage.h
*/
opaque type _GSocketControlMessage = CStruct2[GObject, Ptr[GSocketControlMessagePrivate]]
object _GSocketControlMessage:
  given _tag: Tag[_GSocketControlMessage] = Tag.materializeCStruct2Tag[GObject, Ptr[GSocketControlMessagePrivate]]
  def apply()(using Zone): Ptr[_GSocketControlMessage] = scala.scalanative.unsafe.alloc[_GSocketControlMessage](1)
  def apply(parent_instance : GObject, priv : Ptr[GSocketControlMessagePrivate])(using Zone): Ptr[_GSocketControlMessage] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GSocketControlMessage)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GSocketControlMessagePrivate] = struct._2
    def priv_=(value: Ptr[GSocketControlMessagePrivate]): Unit = !struct.at2 = value

/**
 * GSocketControlMessageClass: _size: gets the size of the message. _level: gets the protocol of the message. _type: gets the protocol specific type of the message. : Writes out the message data. : Tries to deserialize a message.

 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketcontrolmessage.h
*/
opaque type _GSocketControlMessageClass = CStruct11[GObjectClass, CFuncPtr1[Ptr[GSocketControlMessage], gsize], CFuncPtr1[Ptr[GSocketControlMessage], CInt], CFuncPtr1[Ptr[GSocketControlMessage], CInt], CFuncPtr2[Ptr[GSocketControlMessage], gpointer, Unit], CFuncPtr4[CInt, CInt, gsize, gpointer, Ptr[GSocketControlMessage]], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GSocketControlMessageClass:
  given _tag: Tag[_GSocketControlMessageClass] = Tag.materializeCStruct11Tag[GObjectClass, CFuncPtr1[Ptr[GSocketControlMessage], gsize], CFuncPtr1[Ptr[GSocketControlMessage], CInt], CFuncPtr1[Ptr[GSocketControlMessage], CInt], CFuncPtr2[Ptr[GSocketControlMessage], gpointer, Unit], CFuncPtr4[CInt, CInt, gsize, gpointer, Ptr[GSocketControlMessage]], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GSocketControlMessageClass] = scala.scalanative.unsafe.alloc[_GSocketControlMessageClass](1)
  def apply(parent_class : GObjectClass, get_size : CFuncPtr1[Ptr[GSocketControlMessage], gsize], get_level : CFuncPtr1[Ptr[GSocketControlMessage], CInt], get_type : CFuncPtr1[Ptr[GSocketControlMessage], CInt], serialize : CFuncPtr2[Ptr[GSocketControlMessage], gpointer, Unit], deserialize : CFuncPtr4[CInt, CInt, gsize, gpointer, Ptr[GSocketControlMessage]], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[_GSocketControlMessageClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_size = get_size
    (!____ptr).get_level = get_level
    (!____ptr).get_type = get_type
    (!____ptr).serialize = serialize
    (!____ptr).deserialize = deserialize
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: _GSocketControlMessageClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def get_size : CFuncPtr1[Ptr[GSocketControlMessage], gsize] = struct._2
    def get_size_=(value: CFuncPtr1[Ptr[GSocketControlMessage], gsize]): Unit = !struct.at2 = value
    def get_level : CFuncPtr1[Ptr[GSocketControlMessage], CInt] = struct._3
    def get_level_=(value: CFuncPtr1[Ptr[GSocketControlMessage], CInt]): Unit = !struct.at3 = value
    def get_type : CFuncPtr1[Ptr[GSocketControlMessage], CInt] = struct._4
    def get_type_=(value: CFuncPtr1[Ptr[GSocketControlMessage], CInt]): Unit = !struct.at4 = value
    def serialize : CFuncPtr2[Ptr[GSocketControlMessage], gpointer, Unit] = struct._5
    def serialize_=(value: CFuncPtr2[Ptr[GSocketControlMessage], gpointer, Unit]): Unit = !struct.at5 = value
    def deserialize : CFuncPtr4[CInt, CInt, gsize, gpointer, Ptr[GSocketControlMessage]] = struct._6
    def deserialize_=(value: CFuncPtr4[CInt, CInt, gsize, gpointer, Ptr[GSocketControlMessage]]): Unit = !struct.at6 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._7
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at7 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._8
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at8 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._9
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at9 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._10
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at10 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._11
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at11 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketcontrolmessage.h
*/
opaque type _GSocketControlMessagePrivate = CStruct0
object _GSocketControlMessagePrivate:
  given _tag: Tag[_GSocketControlMessagePrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketlistener.h
*/
opaque type _GSocketListener = CStruct2[GObject, Ptr[GSocketListenerPrivate]]
object _GSocketListener:
  given _tag: Tag[_GSocketListener] = Tag.materializeCStruct2Tag[GObject, Ptr[GSocketListenerPrivate]]
  def apply()(using Zone): Ptr[_GSocketListener] = scala.scalanative.unsafe.alloc[_GSocketListener](1)
  def apply(parent_instance : GObject, priv : Ptr[GSocketListenerPrivate])(using Zone): Ptr[_GSocketListener] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GSocketListener)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GSocketListenerPrivate] = struct._2
    def priv_=(value: Ptr[GSocketListenerPrivate]): Unit = !struct.at2 = value

/**
 * GSocketListenerClass: : virtual method called when the set of socket listened to changes

 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketlistener.h
*/
opaque type _GSocketListenerClass = CStruct8[GObjectClass, CFuncPtr1[Ptr[GSocketListener], Unit], CFuncPtr3[Ptr[GSocketListener], GSocketListenerEvent, Ptr[GSocket], Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GSocketListenerClass:
  given _tag: Tag[_GSocketListenerClass] = Tag.materializeCStruct8Tag[GObjectClass, CFuncPtr1[Ptr[GSocketListener], Unit], CFuncPtr3[Ptr[GSocketListener], GSocketListenerEvent, Ptr[GSocket], Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GSocketListenerClass] = scala.scalanative.unsafe.alloc[_GSocketListenerClass](1)
  def apply(parent_class : GObjectClass, changed : CFuncPtr1[Ptr[GSocketListener], Unit], event : CFuncPtr3[Ptr[GSocketListener], GSocketListenerEvent, Ptr[GSocket], Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit])(using Zone): Ptr[_GSocketListenerClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).changed = changed
    (!____ptr).event = event
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    ____ptr
  extension (struct: _GSocketListenerClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def changed : CFuncPtr1[Ptr[GSocketListener], Unit] = struct._2
    def changed_=(value: CFuncPtr1[Ptr[GSocketListener], Unit]): Unit = !struct.at2 = value
    def event : CFuncPtr3[Ptr[GSocketListener], GSocketListenerEvent, Ptr[GSocket], Unit] = struct._3
    def event_=(value: CFuncPtr3[Ptr[GSocketListener], GSocketListenerEvent, Ptr[GSocket], Unit]): Unit = !struct.at3 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._4
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at4 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._5
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at5 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._6
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at6 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._7
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at7 = value
    def _g_reserved6 : CFuncPtr0[Unit] = struct._8
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at8 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketlistener.h
*/
opaque type _GSocketListenerPrivate = CStruct0
object _GSocketListenerPrivate:
  given _tag: Tag[_GSocketListenerPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
*/
opaque type _GSocketPrivate = CStruct0
object _GSocketPrivate:
  given _tag: Tag[_GSocketPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketservice.h
*/
opaque type _GSocketService = CStruct2[GSocketListener, Ptr[GSocketServicePrivate]]
object _GSocketService:
  given _tag: Tag[_GSocketService] = Tag.materializeCStruct2Tag[GSocketListener, Ptr[GSocketServicePrivate]]
  def apply()(using Zone): Ptr[_GSocketService] = scala.scalanative.unsafe.alloc[_GSocketService](1)
  def apply(parent_instance : GSocketListener, priv : Ptr[GSocketServicePrivate])(using Zone): Ptr[_GSocketService] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GSocketService)
    def parent_instance : GSocketListener = struct._1
    def parent_instance_=(value: GSocketListener): Unit = !struct.at1 = value
    def priv : Ptr[GSocketServicePrivate] = struct._2
    def priv_=(value: Ptr[GSocketServicePrivate]): Unit = !struct.at2 = value

/**
 * GSocketServiceClass: : signal emitted when new connections are accepted

 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketservice.h
*/
opaque type _GSocketServiceClass = CStruct8[GSocketListenerClass, CFuncPtr3[Ptr[GSocketService], Ptr[GSocketConnection], Ptr[GObject], gboolean], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GSocketServiceClass:
  given _tag: Tag[_GSocketServiceClass] = Tag.materializeCStruct8Tag[GSocketListenerClass, CFuncPtr3[Ptr[GSocketService], Ptr[GSocketConnection], Ptr[GObject], gboolean], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GSocketServiceClass] = scala.scalanative.unsafe.alloc[_GSocketServiceClass](1)
  def apply(parent_class : GSocketListenerClass, incoming : CFuncPtr3[Ptr[GSocketService], Ptr[GSocketConnection], Ptr[GObject], gboolean], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit])(using Zone): Ptr[_GSocketServiceClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).incoming = incoming
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    ____ptr
  extension (struct: _GSocketServiceClass)
    def parent_class : GSocketListenerClass = struct._1
    def parent_class_=(value: GSocketListenerClass): Unit = !struct.at1 = value
    def incoming : CFuncPtr3[Ptr[GSocketService], Ptr[GSocketConnection], Ptr[GObject], gboolean] = struct._2
    def incoming_=(value: CFuncPtr3[Ptr[GSocketService], Ptr[GSocketConnection], Ptr[GObject], gboolean]): Unit = !struct.at2 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._3
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at3 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._4
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at4 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._5
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at5 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._6
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at6 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._7
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at7 = value
    def _g_reserved6 : CFuncPtr0[Unit] = struct._8
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at8 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gsocketservice.h
*/
opaque type _GSocketServicePrivate = CStruct0
object _GSocketServicePrivate:
  given _tag: Tag[_GSocketServicePrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
*/
opaque type _GSource = CStruct13[gpointer, Ptr[Byte], Ptr[Byte], guint, Ptr[GMainContext], gint, guint, guint, Ptr[Byte], Ptr[Byte], Ptr[Byte], CString, Ptr[GSourcePrivate]]
object _GSource:
  given _tag: Tag[_GSource] = Tag.materializeCStruct13Tag[gpointer, Ptr[Byte], Ptr[Byte], guint, Ptr[GMainContext], gint, guint, guint, Ptr[Byte], Ptr[Byte], Ptr[Byte], CString, Ptr[GSourcePrivate]]
  def apply()(using Zone): Ptr[_GSource] = scala.scalanative.unsafe.alloc[_GSource](1)
  def apply(callback_data : gpointer, callback_funcs : Ptr[GSourceCallbackFuncs], source_funcs : Ptr[GSourceFuncs], ref_count : guint, context : Ptr[GMainContext], priority : gint, flags : guint, source_id : guint, poll_fds : Ptr[GSList], prev : Ptr[GSource], next : Ptr[GSource], name : CString, priv : Ptr[GSourcePrivate])(using Zone): Ptr[_GSource] = 
    val ____ptr = apply()
    (!____ptr).callback_data = callback_data
    (!____ptr).callback_funcs = callback_funcs
    (!____ptr).source_funcs = source_funcs
    (!____ptr).ref_count = ref_count
    (!____ptr).context = context
    (!____ptr).priority = priority
    (!____ptr).flags = flags
    (!____ptr).source_id = source_id
    (!____ptr).poll_fds = poll_fds
    (!____ptr).prev = prev
    (!____ptr).next = next
    (!____ptr).name = name
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GSource)
    def callback_data : gpointer = struct._1
    def callback_data_=(value: gpointer): Unit = !struct.at1 = value
    def callback_funcs : Ptr[GSourceCallbackFuncs] = struct._2.asInstanceOf[Ptr[GSourceCallbackFuncs]]
    def callback_funcs_=(value: Ptr[GSourceCallbackFuncs]): Unit = !struct.at2 = value.asInstanceOf[Ptr[Byte]]
    def source_funcs : Ptr[GSourceFuncs] = struct._3.asInstanceOf[Ptr[GSourceFuncs]]
    def source_funcs_=(value: Ptr[GSourceFuncs]): Unit = !struct.at3 = value.asInstanceOf[Ptr[Byte]]
    def ref_count : guint = struct._4
    def ref_count_=(value: guint): Unit = !struct.at4 = value
    def context : Ptr[GMainContext] = struct._5
    def context_=(value: Ptr[GMainContext]): Unit = !struct.at5 = value
    def priority : gint = struct._6
    def priority_=(value: gint): Unit = !struct.at6 = value
    def flags : guint = struct._7
    def flags_=(value: guint): Unit = !struct.at7 = value
    def source_id : guint = struct._8
    def source_id_=(value: guint): Unit = !struct.at8 = value
    def poll_fds : Ptr[GSList] = struct._9.asInstanceOf[Ptr[GSList]]
    def poll_fds_=(value: Ptr[GSList]): Unit = !struct.at9 = value.asInstanceOf[Ptr[Byte]]
    def prev : Ptr[GSource] = struct._10.asInstanceOf[Ptr[GSource]]
    def prev_=(value: Ptr[GSource]): Unit = !struct.at10 = value.asInstanceOf[Ptr[Byte]]
    def next : Ptr[GSource] = struct._11.asInstanceOf[Ptr[GSource]]
    def next_=(value: Ptr[GSource]): Unit = !struct.at11 = value.asInstanceOf[Ptr[Byte]]
    def name : CString = struct._12
    def name_=(value: CString): Unit = !struct.at12 = value
    def priv : Ptr[GSourcePrivate] = struct._13
    def priv_=(value: Ptr[GSourcePrivate]): Unit = !struct.at13 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
*/
opaque type _GSourceCallbackFuncs = CStruct3[CFuncPtr1[gpointer, Unit], CFuncPtr1[gpointer, Unit], CFuncPtr4[gpointer, Ptr[Byte], Ptr[GSourceFunc], Ptr[gpointer], Unit]]
object _GSourceCallbackFuncs:
  given _tag: Tag[_GSourceCallbackFuncs] = Tag.materializeCStruct3Tag[CFuncPtr1[gpointer, Unit], CFuncPtr1[gpointer, Unit], CFuncPtr4[gpointer, Ptr[Byte], Ptr[GSourceFunc], Ptr[gpointer], Unit]]
  def apply()(using Zone): Ptr[_GSourceCallbackFuncs] = scala.scalanative.unsafe.alloc[_GSourceCallbackFuncs](1)
  def apply(ref : CFuncPtr1[gpointer, Unit], unref : CFuncPtr1[gpointer, Unit], get : CFuncPtr4[gpointer, Ptr[GSource], Ptr[GSourceFunc], Ptr[gpointer], Unit])(using Zone): Ptr[_GSourceCallbackFuncs] = 
    val ____ptr = apply()
    (!____ptr).ref = ref
    (!____ptr).unref = unref
    (!____ptr).get = get
    ____ptr
  extension (struct: _GSourceCallbackFuncs)
    def ref : CFuncPtr1[gpointer, Unit] = struct._1
    def ref_=(value: CFuncPtr1[gpointer, Unit]): Unit = !struct.at1 = value
    def unref : CFuncPtr1[gpointer, Unit] = struct._2
    def unref_=(value: CFuncPtr1[gpointer, Unit]): Unit = !struct.at2 = value
    def get : CFuncPtr4[gpointer, Ptr[GSource], Ptr[GSourceFunc], Ptr[gpointer], Unit] = struct._3.asInstanceOf[CFuncPtr4[gpointer, Ptr[GSource], Ptr[GSourceFunc], Ptr[gpointer], Unit]]
    def get_=(value: CFuncPtr4[gpointer, Ptr[GSource], Ptr[GSourceFunc], Ptr[gpointer], Unit]): Unit = !struct.at3 = value.asInstanceOf[CFuncPtr4[gpointer, Ptr[Byte], Ptr[GSourceFunc], Ptr[gpointer], Unit]]

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
*/
opaque type _GSourceFuncs = CStruct6[CFuncPtr2[Ptr[Byte], Ptr[gint], gboolean], CFuncPtr1[Ptr[Byte], gboolean], CFuncPtr3[Ptr[Byte], GSourceFunc, gpointer, gboolean], CFuncPtr1[Ptr[Byte], Unit], GSourceFunc, GSourceDummyMarshal]
object _GSourceFuncs:
  given _tag: Tag[_GSourceFuncs] = Tag.materializeCStruct6Tag[CFuncPtr2[Ptr[Byte], Ptr[gint], gboolean], CFuncPtr1[Ptr[Byte], gboolean], CFuncPtr3[Ptr[Byte], GSourceFunc, gpointer, gboolean], CFuncPtr1[Ptr[Byte], Unit], GSourceFunc, GSourceDummyMarshal]
  def apply()(using Zone): Ptr[_GSourceFuncs] = scala.scalanative.unsafe.alloc[_GSourceFuncs](1)
  def apply(prepare : CFuncPtr2[Ptr[GSource], Ptr[gint], gboolean], check : CFuncPtr1[Ptr[GSource], gboolean], dispatch : CFuncPtr3[Ptr[GSource], GSourceFunc, gpointer, gboolean], finalize : CFuncPtr1[Ptr[GSource], Unit], closure_callback : GSourceFunc, closure_marshal : GSourceDummyMarshal)(using Zone): Ptr[_GSourceFuncs] = 
    val ____ptr = apply()
    (!____ptr).prepare = prepare
    (!____ptr).check = check
    (!____ptr).dispatch = dispatch
    (!____ptr).finalize = finalize
    (!____ptr).closure_callback = closure_callback
    (!____ptr).closure_marshal = closure_marshal
    ____ptr
  extension (struct: _GSourceFuncs)
    def prepare : CFuncPtr2[Ptr[GSource], Ptr[gint], gboolean] = struct._1.asInstanceOf[CFuncPtr2[Ptr[GSource], Ptr[gint], gboolean]]
    def prepare_=(value: CFuncPtr2[Ptr[GSource], Ptr[gint], gboolean]): Unit = !struct.at1 = value.asInstanceOf[CFuncPtr2[Ptr[Byte], Ptr[gint], gboolean]]
    def check : CFuncPtr1[Ptr[GSource], gboolean] = struct._2.asInstanceOf[CFuncPtr1[Ptr[GSource], gboolean]]
    def check_=(value: CFuncPtr1[Ptr[GSource], gboolean]): Unit = !struct.at2 = value.asInstanceOf[CFuncPtr1[Ptr[Byte], gboolean]]
    def dispatch : CFuncPtr3[Ptr[GSource], GSourceFunc, gpointer, gboolean] = struct._3.asInstanceOf[CFuncPtr3[Ptr[GSource], GSourceFunc, gpointer, gboolean]]
    def dispatch_=(value: CFuncPtr3[Ptr[GSource], GSourceFunc, gpointer, gboolean]): Unit = !struct.at3 = value.asInstanceOf[CFuncPtr3[Ptr[Byte], GSourceFunc, gpointer, gboolean]]
    def finalize : CFuncPtr1[Ptr[GSource], Unit] = struct._4.asInstanceOf[CFuncPtr1[Ptr[GSource], Unit]]
    def finalize_=(value: CFuncPtr1[Ptr[GSource], Unit]): Unit = !struct.at4 = value.asInstanceOf[CFuncPtr1[Ptr[Byte], Unit]]
    def closure_callback : GSourceFunc = struct._5
    def closure_callback_=(value: GSourceFunc): Unit = !struct.at5 = value
    def closure_marshal : GSourceDummyMarshal = struct._6
    def closure_marshal_=(value: GSourceDummyMarshal): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
*/
opaque type _GSourcePrivate = CStruct0
object _GSourcePrivate:
  given _tag: Tag[_GSourcePrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GSrvTarget = CStruct0
object _GSrvTarget:
  given _tag: Tag[_GSrvTarget] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
*/
opaque type _GStaticPrivate = CStruct1[guint]
object _GStaticPrivate:
  given _tag: Tag[_GStaticPrivate] = Tag.materializeCStruct1Tag[guint]
  def apply()(using Zone): Ptr[_GStaticPrivate] = scala.scalanative.unsafe.alloc[_GStaticPrivate](1)
  def apply(index : guint)(using Zone): Ptr[_GStaticPrivate] = 
    val ____ptr = apply()
    (!____ptr).index = index
    ____ptr
  extension (struct: _GStaticPrivate)
    def index : guint = struct._1
    def index_=(value: guint): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
*/
opaque type _GStaticRWLock = CStruct7[GStaticMutex, Ptr[GCond], Ptr[GCond], guint, gboolean, guint, guint]
object _GStaticRWLock:
  given _tag: Tag[_GStaticRWLock] = Tag.materializeCStruct7Tag[GStaticMutex, Ptr[GCond], Ptr[GCond], guint, gboolean, guint, guint]
  def apply()(using Zone): Ptr[_GStaticRWLock] = scala.scalanative.unsafe.alloc[_GStaticRWLock](1)
  def apply(mutex : GStaticMutex, read_cond : Ptr[GCond], write_cond : Ptr[GCond], read_counter : guint, have_writer : gboolean, want_to_read : guint, want_to_write : guint)(using Zone): Ptr[_GStaticRWLock] = 
    val ____ptr = apply()
    (!____ptr).mutex = mutex
    (!____ptr).read_cond = read_cond
    (!____ptr).write_cond = write_cond
    (!____ptr).read_counter = read_counter
    (!____ptr).have_writer = have_writer
    (!____ptr).want_to_read = want_to_read
    (!____ptr).want_to_write = want_to_write
    ____ptr
  extension (struct: _GStaticRWLock)
    def mutex : GStaticMutex = struct._1
    def mutex_=(value: GStaticMutex): Unit = !struct.at1 = value
    def read_cond : Ptr[GCond] = struct._2
    def read_cond_=(value: Ptr[GCond]): Unit = !struct.at2 = value
    def write_cond : Ptr[GCond] = struct._3
    def write_cond_=(value: Ptr[GCond]): Unit = !struct.at3 = value
    def read_counter : guint = struct._4
    def read_counter_=(value: guint): Unit = !struct.at4 = value
    def have_writer : gboolean = struct._5
    def have_writer_=(value: gboolean): Unit = !struct.at5 = value
    def want_to_read : guint = struct._6
    def want_to_read_=(value: guint): Unit = !struct.at6 = value
    def want_to_write : guint = struct._7
    def want_to_write_=(value: guint): Unit = !struct.at7 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
*/
opaque type _GStaticRecMutex = CStruct3[GStaticMutex, guint, _GStaticRecMutex.Union0]
object _GStaticRecMutex:
  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  opaque type Union0 = CArray[Byte, Nat._8]
  object Union0:
    given _tag: Tag[Union0] = Tag.CArray[CChar, Nat._8](Tag.Byte, Tag.Nat8)
    def apply()(using Zone): Ptr[Union0] = 
      val ___ptr = alloc[Union0](1)
      ___ptr
    @scala.annotation.targetName("apply_owner")
    def apply(owner: pthread_t)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[pthread_t]].update(0, owner)
      ___ptr
    @scala.annotation.targetName("apply_dummy")
    def apply(dummy: gdouble)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[gdouble]].update(0, dummy)
      ___ptr
    extension (struct: Union0)
      def owner : pthread_t = !struct.at(0).asInstanceOf[Ptr[pthread_t]]
      def owner_=(value: pthread_t): Unit = !struct.at(0).asInstanceOf[Ptr[pthread_t]] = value
      def dummy : gdouble = !struct.at(0).asInstanceOf[Ptr[gdouble]]
      def dummy_=(value: gdouble): Unit = !struct.at(0).asInstanceOf[Ptr[gdouble]] = value
  given _tag: Tag[_GStaticRecMutex] = Tag.materializeCStruct3Tag[GStaticMutex, guint, _GStaticRecMutex.Union0]
  def apply()(using Zone): Ptr[_GStaticRecMutex] = scala.scalanative.unsafe.alloc[_GStaticRecMutex](1)
  def apply(mutex : GStaticMutex, depth : guint, unused : _GStaticRecMutex.Union0)(using Zone): Ptr[_GStaticRecMutex] = 
    val ____ptr = apply()
    (!____ptr).mutex = mutex
    (!____ptr).depth = depth
    (!____ptr).unused = unused
    ____ptr
  extension (struct: _GStaticRecMutex)
    def mutex : GStaticMutex = struct._1
    def mutex_=(value: GStaticMutex): Unit = !struct.at1 = value
    def depth : guint = struct._2
    def depth_=(value: guint): Unit = !struct.at2 = value
    def unused : _GStaticRecMutex.Union0 = struct._3
    def unused_=(value: _GStaticRecMutex.Union0): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
*/
opaque type _GStaticResource = CStruct5[Ptr[guint8], gsize, Ptr[GResource], Ptr[Byte], gpointer]
object _GStaticResource:
  given _tag: Tag[_GStaticResource] = Tag.materializeCStruct5Tag[Ptr[guint8], gsize, Ptr[GResource], Ptr[Byte], gpointer]
  def apply()(using Zone): Ptr[_GStaticResource] = scala.scalanative.unsafe.alloc[_GStaticResource](1)
  def apply(data : Ptr[guint8], data_len : gsize, resource : Ptr[GResource], next : Ptr[GStaticResource], padding : gpointer)(using Zone): Ptr[_GStaticResource] = 
    val ____ptr = apply()
    (!____ptr).data = data
    (!____ptr).data_len = data_len
    (!____ptr).resource = resource
    (!____ptr).next = next
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GStaticResource)
    def data : Ptr[guint8] = struct._1
    def data_=(value: Ptr[guint8]): Unit = !struct.at1 = value
    def data_len : gsize = struct._2
    def data_len_=(value: gsize): Unit = !struct.at2 = value
    def resource : Ptr[GResource] = struct._3
    def resource_=(value: Ptr[GResource]): Unit = !struct.at3 = value
    def next : Ptr[GStaticResource] = struct._4.asInstanceOf[Ptr[GStaticResource]]
    def next_=(value: Ptr[GStaticResource]): Unit = !struct.at4 = value.asInstanceOf[Ptr[Byte]]
    def padding : gpointer = struct._5
    def padding_=(value: gpointer): Unit = !struct.at5 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
*/
opaque type _GString = CStruct3[Ptr[gchar], gsize, gsize]
object _GString:
  given _tag: Tag[_GString] = Tag.materializeCStruct3Tag[Ptr[gchar], gsize, gsize]
  def apply()(using Zone): Ptr[_GString] = scala.scalanative.unsafe.alloc[_GString](1)
  def apply(str : Ptr[gchar], len : gsize, allocated_len : gsize)(using Zone): Ptr[_GString] = 
    val ____ptr = apply()
    (!____ptr).str = str
    (!____ptr).len = len
    (!____ptr).allocated_len = allocated_len
    ____ptr
  extension (struct: _GString)
    def str : Ptr[gchar] = struct._1
    def str_=(value: Ptr[gchar]): Unit = !struct.at1 = value
    def len : gsize = struct._2
    def len_=(value: gsize): Unit = !struct.at2 = value
    def allocated_len : gsize = struct._3
    def allocated_len_=(value: gsize): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gstringchunk.h
*/
opaque type _GStringChunk = CStruct0
object _GStringChunk:
  given _tag: Tag[_GStringChunk] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gstrvbuilder.h
*/
opaque type _GStrvBuilder = CStruct0
object _GStrvBuilder:
  given _tag: Tag[_GStrvBuilder] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GSubprocess = CStruct0
object _GSubprocess:
  given _tag: Tag[_GSubprocess] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GSubprocessLauncher = CStruct0
object _GSubprocessLauncher:
  given _tag: Tag[_GSubprocessLauncher] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GTask = CStruct0
object _GTask:
  given _tag: Tag[_GTask] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
*/
opaque type _GTaskClass = CStruct0
object _GTaskClass:
  given _tag: Tag[_GTaskClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtcpconnection.h
*/
opaque type _GTcpConnection = CStruct2[GSocketConnection, Ptr[GTcpConnectionPrivate]]
object _GTcpConnection:
  given _tag: Tag[_GTcpConnection] = Tag.materializeCStruct2Tag[GSocketConnection, Ptr[GTcpConnectionPrivate]]
  def apply()(using Zone): Ptr[_GTcpConnection] = scala.scalanative.unsafe.alloc[_GTcpConnection](1)
  def apply(parent_instance : GSocketConnection, priv : Ptr[GTcpConnectionPrivate])(using Zone): Ptr[_GTcpConnection] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GTcpConnection)
    def parent_instance : GSocketConnection = struct._1
    def parent_instance_=(value: GSocketConnection): Unit = !struct.at1 = value
    def priv : Ptr[GTcpConnectionPrivate] = struct._2
    def priv_=(value: Ptr[GTcpConnectionPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtcpconnection.h
*/
opaque type _GTcpConnectionClass = CStruct1[GSocketConnectionClass]
object _GTcpConnectionClass:
  given _tag: Tag[_GTcpConnectionClass] = Tag.materializeCStruct1Tag[GSocketConnectionClass]
  def apply()(using Zone): Ptr[_GTcpConnectionClass] = scala.scalanative.unsafe.alloc[_GTcpConnectionClass](1)
  def apply(parent_class : GSocketConnectionClass)(using Zone): Ptr[_GTcpConnectionClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: _GTcpConnectionClass)
    def parent_class : GSocketConnectionClass = struct._1
    def parent_class_=(value: GSocketConnectionClass): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtcpconnection.h
*/
opaque type _GTcpConnectionPrivate = CStruct0
object _GTcpConnectionPrivate:
  given _tag: Tag[_GTcpConnectionPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtcpwrapperconnection.h
*/
opaque type _GTcpWrapperConnection = CStruct2[GTcpConnection, Ptr[GTcpWrapperConnectionPrivate]]
object _GTcpWrapperConnection:
  given _tag: Tag[_GTcpWrapperConnection] = Tag.materializeCStruct2Tag[GTcpConnection, Ptr[GTcpWrapperConnectionPrivate]]
  def apply()(using Zone): Ptr[_GTcpWrapperConnection] = scala.scalanative.unsafe.alloc[_GTcpWrapperConnection](1)
  def apply(parent_instance : GTcpConnection, priv : Ptr[GTcpWrapperConnectionPrivate])(using Zone): Ptr[_GTcpWrapperConnection] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GTcpWrapperConnection)
    def parent_instance : GTcpConnection = struct._1
    def parent_instance_=(value: GTcpConnection): Unit = !struct.at1 = value
    def priv : Ptr[GTcpWrapperConnectionPrivate] = struct._2
    def priv_=(value: Ptr[GTcpWrapperConnectionPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtcpwrapperconnection.h
*/
opaque type _GTcpWrapperConnectionClass = CStruct1[GTcpConnectionClass]
object _GTcpWrapperConnectionClass:
  given _tag: Tag[_GTcpWrapperConnectionClass] = Tag.materializeCStruct1Tag[GTcpConnectionClass]
  def apply()(using Zone): Ptr[_GTcpWrapperConnectionClass] = scala.scalanative.unsafe.alloc[_GTcpWrapperConnectionClass](1)
  def apply(parent_class : GTcpConnectionClass)(using Zone): Ptr[_GTcpWrapperConnectionClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: _GTcpWrapperConnectionClass)
    def parent_class : GTcpConnectionClass = struct._1
    def parent_class_=(value: GTcpConnectionClass): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtcpwrapperconnection.h
*/
opaque type _GTcpWrapperConnectionPrivate = CStruct0
object _GTcpWrapperConnectionPrivate:
  given _tag: Tag[_GTcpWrapperConnectionPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GTestDBus = CStruct0
object _GTestDBus:
  given _tag: Tag[_GTestDBus] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GThemedIcon = CStruct0
object _GThemedIcon:
  given _tag: Tag[_GThemedIcon] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gthemedicon.h
*/
opaque type _GThemedIconClass = CStruct0
object _GThemedIconClass:
  given _tag: Tag[_GThemedIconClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
*/
opaque type _GThread = CStruct4[GThreadFunc, gpointer, gboolean, GThreadPriority]
object _GThread:
  given _tag: Tag[_GThread] = Tag.materializeCStruct4Tag[GThreadFunc, gpointer, gboolean, GThreadPriority]
  def apply()(using Zone): Ptr[_GThread] = scala.scalanative.unsafe.alloc[_GThread](1)
  def apply(func : GThreadFunc, data : gpointer, joinable : gboolean, priority : GThreadPriority)(using Zone): Ptr[_GThread] = 
    val ____ptr = apply()
    (!____ptr).func = func
    (!____ptr).data = data
    (!____ptr).joinable = joinable
    (!____ptr).priority = priority
    ____ptr
  extension (struct: _GThread)
    def func : GThreadFunc = struct._1
    def func_=(value: GThreadFunc): Unit = !struct.at1 = value
    def data : gpointer = struct._2
    def data_=(value: gpointer): Unit = !struct.at2 = value
    def joinable : gboolean = struct._3
    def joinable_=(value: gboolean): Unit = !struct.at3 = value
    def priority : GThreadPriority = struct._4
    def priority_=(value: GThreadPriority): Unit = !struct.at4 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
*/
opaque type _GThreadFunctions = CStruct21[CFuncPtr0[Ptr[GMutex]], CFuncPtr1[Ptr[GMutex], Unit], CFuncPtr1[Ptr[GMutex], gboolean], CFuncPtr1[Ptr[GMutex], Unit], CFuncPtr1[Ptr[GMutex], Unit], CFuncPtr0[Ptr[GCond]], CFuncPtr1[Ptr[GCond], Unit], CFuncPtr1[Ptr[GCond], Unit], CFuncPtr2[Ptr[GCond], Ptr[GMutex], Unit], CFuncPtr3[Ptr[GCond], Ptr[GMutex], Ptr[GTimeVal], gboolean], CFuncPtr1[Ptr[GCond], Unit], CFuncPtr1[GDestroyNotify, Ptr[GPrivate]], CFuncPtr1[Ptr[GPrivate], gpointer], CFuncPtr2[Ptr[GPrivate], gpointer, Unit], CFuncPtr8[GThreadFunc, gpointer, gulong, gboolean, gboolean, GThreadPriority, gpointer, Ptr[Ptr[GError]], Unit], CFuncPtr0[Unit], CFuncPtr1[gpointer, Unit], CFuncPtr0[Unit], CFuncPtr2[gpointer, GThreadPriority, Unit], CFuncPtr1[gpointer, Unit], CFuncPtr2[gpointer, gpointer, gboolean]]
object _GThreadFunctions:
  given _tag: Tag[_GThreadFunctions] = Tag.materializeCStruct21Tag[CFuncPtr0[Ptr[GMutex]], CFuncPtr1[Ptr[GMutex], Unit], CFuncPtr1[Ptr[GMutex], gboolean], CFuncPtr1[Ptr[GMutex], Unit], CFuncPtr1[Ptr[GMutex], Unit], CFuncPtr0[Ptr[GCond]], CFuncPtr1[Ptr[GCond], Unit], CFuncPtr1[Ptr[GCond], Unit], CFuncPtr2[Ptr[GCond], Ptr[GMutex], Unit], CFuncPtr3[Ptr[GCond], Ptr[GMutex], Ptr[GTimeVal], gboolean], CFuncPtr1[Ptr[GCond], Unit], CFuncPtr1[GDestroyNotify, Ptr[GPrivate]], CFuncPtr1[Ptr[GPrivate], gpointer], CFuncPtr2[Ptr[GPrivate], gpointer, Unit], CFuncPtr8[GThreadFunc, gpointer, gulong, gboolean, gboolean, GThreadPriority, gpointer, Ptr[Ptr[GError]], Unit], CFuncPtr0[Unit], CFuncPtr1[gpointer, Unit], CFuncPtr0[Unit], CFuncPtr2[gpointer, GThreadPriority, Unit], CFuncPtr1[gpointer, Unit], CFuncPtr2[gpointer, gpointer, gboolean]]
  def apply()(using Zone): Ptr[_GThreadFunctions] = scala.scalanative.unsafe.alloc[_GThreadFunctions](1)
  def apply(mutex_new : CFuncPtr0[Ptr[GMutex]], mutex_lock : CFuncPtr1[Ptr[GMutex], Unit], mutex_trylock : CFuncPtr1[Ptr[GMutex], gboolean], mutex_unlock : CFuncPtr1[Ptr[GMutex], Unit], mutex_free : CFuncPtr1[Ptr[GMutex], Unit], cond_new : CFuncPtr0[Ptr[GCond]], cond_signal : CFuncPtr1[Ptr[GCond], Unit], cond_broadcast : CFuncPtr1[Ptr[GCond], Unit], cond_wait : CFuncPtr2[Ptr[GCond], Ptr[GMutex], Unit], cond_timed_wait : CFuncPtr3[Ptr[GCond], Ptr[GMutex], Ptr[GTimeVal], gboolean], cond_free : CFuncPtr1[Ptr[GCond], Unit], private_new : CFuncPtr1[GDestroyNotify, Ptr[GPrivate]], private_get : CFuncPtr1[Ptr[GPrivate], gpointer], private_set : CFuncPtr2[Ptr[GPrivate], gpointer, Unit], thread_create : CFuncPtr8[GThreadFunc, gpointer, gulong, gboolean, gboolean, GThreadPriority, gpointer, Ptr[Ptr[GError]], Unit], thread_yield : CFuncPtr0[Unit], thread_join : CFuncPtr1[gpointer, Unit], thread_exit : CFuncPtr0[Unit], thread_set_priority : CFuncPtr2[gpointer, GThreadPriority, Unit], thread_self : CFuncPtr1[gpointer, Unit], thread_equal : CFuncPtr2[gpointer, gpointer, gboolean])(using Zone): Ptr[_GThreadFunctions] = 
    val ____ptr = apply()
    (!____ptr).mutex_new = mutex_new
    (!____ptr).mutex_lock = mutex_lock
    (!____ptr).mutex_trylock = mutex_trylock
    (!____ptr).mutex_unlock = mutex_unlock
    (!____ptr).mutex_free = mutex_free
    (!____ptr).cond_new = cond_new
    (!____ptr).cond_signal = cond_signal
    (!____ptr).cond_broadcast = cond_broadcast
    (!____ptr).cond_wait = cond_wait
    (!____ptr).cond_timed_wait = cond_timed_wait
    (!____ptr).cond_free = cond_free
    (!____ptr).private_new = private_new
    (!____ptr).private_get = private_get
    (!____ptr).private_set = private_set
    (!____ptr).thread_create = thread_create
    (!____ptr).thread_yield = thread_yield
    (!____ptr).thread_join = thread_join
    (!____ptr).thread_exit = thread_exit
    (!____ptr).thread_set_priority = thread_set_priority
    (!____ptr).thread_self = thread_self
    (!____ptr).thread_equal = thread_equal
    ____ptr
  extension (struct: _GThreadFunctions)
    def mutex_new : CFuncPtr0[Ptr[GMutex]] = struct._1
    def mutex_new_=(value: CFuncPtr0[Ptr[GMutex]]): Unit = !struct.at1 = value
    def mutex_lock : CFuncPtr1[Ptr[GMutex], Unit] = struct._2
    def mutex_lock_=(value: CFuncPtr1[Ptr[GMutex], Unit]): Unit = !struct.at2 = value
    def mutex_trylock : CFuncPtr1[Ptr[GMutex], gboolean] = struct._3
    def mutex_trylock_=(value: CFuncPtr1[Ptr[GMutex], gboolean]): Unit = !struct.at3 = value
    def mutex_unlock : CFuncPtr1[Ptr[GMutex], Unit] = struct._4
    def mutex_unlock_=(value: CFuncPtr1[Ptr[GMutex], Unit]): Unit = !struct.at4 = value
    def mutex_free : CFuncPtr1[Ptr[GMutex], Unit] = struct._5
    def mutex_free_=(value: CFuncPtr1[Ptr[GMutex], Unit]): Unit = !struct.at5 = value
    def cond_new : CFuncPtr0[Ptr[GCond]] = struct._6
    def cond_new_=(value: CFuncPtr0[Ptr[GCond]]): Unit = !struct.at6 = value
    def cond_signal : CFuncPtr1[Ptr[GCond], Unit] = struct._7
    def cond_signal_=(value: CFuncPtr1[Ptr[GCond], Unit]): Unit = !struct.at7 = value
    def cond_broadcast : CFuncPtr1[Ptr[GCond], Unit] = struct._8
    def cond_broadcast_=(value: CFuncPtr1[Ptr[GCond], Unit]): Unit = !struct.at8 = value
    def cond_wait : CFuncPtr2[Ptr[GCond], Ptr[GMutex], Unit] = struct._9
    def cond_wait_=(value: CFuncPtr2[Ptr[GCond], Ptr[GMutex], Unit]): Unit = !struct.at9 = value
    def cond_timed_wait : CFuncPtr3[Ptr[GCond], Ptr[GMutex], Ptr[GTimeVal], gboolean] = struct._10
    def cond_timed_wait_=(value: CFuncPtr3[Ptr[GCond], Ptr[GMutex], Ptr[GTimeVal], gboolean]): Unit = !struct.at10 = value
    def cond_free : CFuncPtr1[Ptr[GCond], Unit] = struct._11
    def cond_free_=(value: CFuncPtr1[Ptr[GCond], Unit]): Unit = !struct.at11 = value
    def private_new : CFuncPtr1[GDestroyNotify, Ptr[GPrivate]] = struct._12
    def private_new_=(value: CFuncPtr1[GDestroyNotify, Ptr[GPrivate]]): Unit = !struct.at12 = value
    def private_get : CFuncPtr1[Ptr[GPrivate], gpointer] = struct._13
    def private_get_=(value: CFuncPtr1[Ptr[GPrivate], gpointer]): Unit = !struct.at13 = value
    def private_set : CFuncPtr2[Ptr[GPrivate], gpointer, Unit] = struct._14
    def private_set_=(value: CFuncPtr2[Ptr[GPrivate], gpointer, Unit]): Unit = !struct.at14 = value
    def thread_create : CFuncPtr8[GThreadFunc, gpointer, gulong, gboolean, gboolean, GThreadPriority, gpointer, Ptr[Ptr[GError]], Unit] = struct._15
    def thread_create_=(value: CFuncPtr8[GThreadFunc, gpointer, gulong, gboolean, gboolean, GThreadPriority, gpointer, Ptr[Ptr[GError]], Unit]): Unit = !struct.at15 = value
    def thread_yield : CFuncPtr0[Unit] = struct._16
    def thread_yield_=(value: CFuncPtr0[Unit]): Unit = !struct.at16 = value
    def thread_join : CFuncPtr1[gpointer, Unit] = struct._17
    def thread_join_=(value: CFuncPtr1[gpointer, Unit]): Unit = !struct.at17 = value
    def thread_exit : CFuncPtr0[Unit] = struct._18
    def thread_exit_=(value: CFuncPtr0[Unit]): Unit = !struct.at18 = value
    def thread_set_priority : CFuncPtr2[gpointer, GThreadPriority, Unit] = struct._19
    def thread_set_priority_=(value: CFuncPtr2[gpointer, GThreadPriority, Unit]): Unit = !struct.at19 = value
    def thread_self : CFuncPtr1[gpointer, Unit] = struct._20
    def thread_self_=(value: CFuncPtr1[gpointer, Unit]): Unit = !struct.at20 = value
    def thread_equal : CFuncPtr2[gpointer, gpointer, gboolean] = struct._21
    def thread_equal_=(value: CFuncPtr2[gpointer, gpointer, gboolean]): Unit = !struct.at21 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gthreadpool.h
*/
opaque type _GThreadPool = CStruct3[GFunc, gpointer, gboolean]
object _GThreadPool:
  given _tag: Tag[_GThreadPool] = Tag.materializeCStruct3Tag[GFunc, gpointer, gboolean]
  def apply()(using Zone): Ptr[_GThreadPool] = scala.scalanative.unsafe.alloc[_GThreadPool](1)
  def apply(func : GFunc, user_data : gpointer, exclusive : gboolean)(using Zone): Ptr[_GThreadPool] = 
    val ____ptr = apply()
    (!____ptr).func = func
    (!____ptr).user_data = user_data
    (!____ptr).exclusive = exclusive
    ____ptr
  extension (struct: _GThreadPool)
    def func : GFunc = struct._1
    def func_=(value: GFunc): Unit = !struct.at1 = value
    def user_data : gpointer = struct._2
    def user_data_=(value: gpointer): Unit = !struct.at2 = value
    def exclusive : gboolean = struct._3
    def exclusive_=(value: gboolean): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gthreadedsocketservice.h
*/
opaque type _GThreadedSocketService = CStruct2[GSocketService, Ptr[GThreadedSocketServicePrivate]]
object _GThreadedSocketService:
  given _tag: Tag[_GThreadedSocketService] = Tag.materializeCStruct2Tag[GSocketService, Ptr[GThreadedSocketServicePrivate]]
  def apply()(using Zone): Ptr[_GThreadedSocketService] = scala.scalanative.unsafe.alloc[_GThreadedSocketService](1)
  def apply(parent_instance : GSocketService, priv : Ptr[GThreadedSocketServicePrivate])(using Zone): Ptr[_GThreadedSocketService] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GThreadedSocketService)
    def parent_instance : GSocketService = struct._1
    def parent_instance_=(value: GSocketService): Unit = !struct.at1 = value
    def priv : Ptr[GThreadedSocketServicePrivate] = struct._2
    def priv_=(value: Ptr[GThreadedSocketServicePrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gthreadedsocketservice.h
*/
opaque type _GThreadedSocketServiceClass = CStruct7[GSocketServiceClass, CFuncPtr3[Ptr[GThreadedSocketService], Ptr[GSocketConnection], Ptr[GObject], gboolean], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GThreadedSocketServiceClass:
  given _tag: Tag[_GThreadedSocketServiceClass] = Tag.materializeCStruct7Tag[GSocketServiceClass, CFuncPtr3[Ptr[GThreadedSocketService], Ptr[GSocketConnection], Ptr[GObject], gboolean], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GThreadedSocketServiceClass] = scala.scalanative.unsafe.alloc[_GThreadedSocketServiceClass](1)
  def apply(parent_class : GSocketServiceClass, run : CFuncPtr3[Ptr[GThreadedSocketService], Ptr[GSocketConnection], Ptr[GObject], gboolean], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit])(using Zone): Ptr[_GThreadedSocketServiceClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).run = run
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    ____ptr
  extension (struct: _GThreadedSocketServiceClass)
    def parent_class : GSocketServiceClass = struct._1
    def parent_class_=(value: GSocketServiceClass): Unit = !struct.at1 = value
    def run : CFuncPtr3[Ptr[GThreadedSocketService], Ptr[GSocketConnection], Ptr[GObject], gboolean] = struct._2
    def run_=(value: CFuncPtr3[Ptr[GThreadedSocketService], Ptr[GSocketConnection], Ptr[GObject], gboolean]): Unit = !struct.at2 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._3
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at3 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._4
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at4 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._5
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at5 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._6
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at6 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._7
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at7 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gthreadedsocketservice.h
*/
opaque type _GThreadedSocketServicePrivate = CStruct0
object _GThreadedSocketServicePrivate:
  given _tag: Tag[_GThreadedSocketServicePrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gtypes.h
*/
opaque type _GTimeVal = CStruct2[glong, glong]
object _GTimeVal:
  given _tag: Tag[_GTimeVal] = Tag.materializeCStruct2Tag[glong, glong]
  def apply()(using Zone): Ptr[_GTimeVal] = scala.scalanative.unsafe.alloc[_GTimeVal](1)
  def apply(tv_sec : glong, tv_usec : glong)(using Zone): Ptr[_GTimeVal] = 
    val ____ptr = apply()
    (!____ptr).tv_sec = tv_sec
    (!____ptr).tv_usec = tv_usec
    ____ptr
  extension (struct: _GTimeVal)
    def tv_sec : glong = struct._1
    def tv_sec_=(value: glong): Unit = !struct.at1 = value
    def tv_usec : glong = struct._2
    def tv_usec_=(value: glong): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gtimezone.h
*/
opaque type _GTimeZone = CStruct0
object _GTimeZone:
  given _tag: Tag[_GTimeZone] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gtimer.h
*/
opaque type _GTimer = CStruct0
object _GTimer:
  given _tag: Tag[_GTimer] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsbackend.h
*/
opaque type _GTlsBackend = CStruct0
object _GTlsBackend:
  given _tag: Tag[_GTlsBackend] = Tag.materializeCStruct0Tag

/**
 * GTlsBackendInterface: _iface: The parent interface. _tls: returns whether the backend supports TLS. _dtls: returns whether the backend supports DTLS _default_database: returns a default #GTlsDatabase instance. _certificate_type: returns the #GTlsCertificate implementation type _client_connection_type: returns the #GTlsClientConnection implementation type _server_connection_type: returns the #GTlsServerConnection implementation type _file_database_type: returns the #GTlsFileDatabase implementation type. _dtls_client_connection_type: returns the #GDtlsClientConnection implementation type _dtls_server_connection_type: returns the #GDtlsServerConnection implementation type

 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsbackend.h
*/
opaque type _GTlsBackendInterface = CStruct10[GTypeInterface, CFuncPtr1[Ptr[GTlsBackend], gboolean], CFuncPtr0[GType], CFuncPtr0[GType], CFuncPtr0[GType], CFuncPtr0[GType], CFuncPtr1[Ptr[GTlsBackend], Ptr[GTlsDatabase]], CFuncPtr1[Ptr[GTlsBackend], gboolean], CFuncPtr0[GType], CFuncPtr0[GType]]
object _GTlsBackendInterface:
  given _tag: Tag[_GTlsBackendInterface] = Tag.materializeCStruct10Tag[GTypeInterface, CFuncPtr1[Ptr[GTlsBackend], gboolean], CFuncPtr0[GType], CFuncPtr0[GType], CFuncPtr0[GType], CFuncPtr0[GType], CFuncPtr1[Ptr[GTlsBackend], Ptr[GTlsDatabase]], CFuncPtr1[Ptr[GTlsBackend], gboolean], CFuncPtr0[GType], CFuncPtr0[GType]]
  def apply()(using Zone): Ptr[_GTlsBackendInterface] = scala.scalanative.unsafe.alloc[_GTlsBackendInterface](1)
  def apply(g_iface : GTypeInterface, supports_tls : CFuncPtr1[Ptr[GTlsBackend], gboolean], get_certificate_type : CFuncPtr0[GType], get_client_connection_type : CFuncPtr0[GType], get_server_connection_type : CFuncPtr0[GType], get_file_database_type : CFuncPtr0[GType], get_default_database : CFuncPtr1[Ptr[GTlsBackend], Ptr[GTlsDatabase]], supports_dtls : CFuncPtr1[Ptr[GTlsBackend], gboolean], get_dtls_client_connection_type : CFuncPtr0[GType], get_dtls_server_connection_type : CFuncPtr0[GType])(using Zone): Ptr[_GTlsBackendInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).supports_tls = supports_tls
    (!____ptr).get_certificate_type = get_certificate_type
    (!____ptr).get_client_connection_type = get_client_connection_type
    (!____ptr).get_server_connection_type = get_server_connection_type
    (!____ptr).get_file_database_type = get_file_database_type
    (!____ptr).get_default_database = get_default_database
    (!____ptr).supports_dtls = supports_dtls
    (!____ptr).get_dtls_client_connection_type = get_dtls_client_connection_type
    (!____ptr).get_dtls_server_connection_type = get_dtls_server_connection_type
    ____ptr
  extension (struct: _GTlsBackendInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def supports_tls : CFuncPtr1[Ptr[GTlsBackend], gboolean] = struct._2
    def supports_tls_=(value: CFuncPtr1[Ptr[GTlsBackend], gboolean]): Unit = !struct.at2 = value
    def get_certificate_type : CFuncPtr0[GType] = struct._3
    def get_certificate_type_=(value: CFuncPtr0[GType]): Unit = !struct.at3 = value
    def get_client_connection_type : CFuncPtr0[GType] = struct._4
    def get_client_connection_type_=(value: CFuncPtr0[GType]): Unit = !struct.at4 = value
    def get_server_connection_type : CFuncPtr0[GType] = struct._5
    def get_server_connection_type_=(value: CFuncPtr0[GType]): Unit = !struct.at5 = value
    def get_file_database_type : CFuncPtr0[GType] = struct._6
    def get_file_database_type_=(value: CFuncPtr0[GType]): Unit = !struct.at6 = value
    def get_default_database : CFuncPtr1[Ptr[GTlsBackend], Ptr[GTlsDatabase]] = struct._7
    def get_default_database_=(value: CFuncPtr1[Ptr[GTlsBackend], Ptr[GTlsDatabase]]): Unit = !struct.at7 = value
    def supports_dtls : CFuncPtr1[Ptr[GTlsBackend], gboolean] = struct._8
    def supports_dtls_=(value: CFuncPtr1[Ptr[GTlsBackend], gboolean]): Unit = !struct.at8 = value
    def get_dtls_client_connection_type : CFuncPtr0[GType] = struct._9
    def get_dtls_client_connection_type_=(value: CFuncPtr0[GType]): Unit = !struct.at9 = value
    def get_dtls_server_connection_type : CFuncPtr0[GType] = struct._10
    def get_dtls_server_connection_type_=(value: CFuncPtr0[GType]): Unit = !struct.at10 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
*/
opaque type _GTlsCertificate = CStruct2[GObject, Ptr[GTlsCertificatePrivate]]
object _GTlsCertificate:
  given _tag: Tag[_GTlsCertificate] = Tag.materializeCStruct2Tag[GObject, Ptr[GTlsCertificatePrivate]]
  def apply()(using Zone): Ptr[_GTlsCertificate] = scala.scalanative.unsafe.alloc[_GTlsCertificate](1)
  def apply(parent_instance : GObject, priv : Ptr[GTlsCertificatePrivate])(using Zone): Ptr[_GTlsCertificate] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GTlsCertificate)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GTlsCertificatePrivate] = struct._2
    def priv_=(value: Ptr[GTlsCertificatePrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
*/
opaque type _GTlsCertificateClass = CStruct3[GObjectClass, CFuncPtr3[Ptr[GTlsCertificate], Ptr[GSocketConnectable], Ptr[GTlsCertificate], GTlsCertificateFlags], CArray[gpointer, Nat._8]]
object _GTlsCertificateClass:
  given _tag: Tag[_GTlsCertificateClass] = Tag.materializeCStruct3Tag[GObjectClass, CFuncPtr3[Ptr[GTlsCertificate], Ptr[GSocketConnectable], Ptr[GTlsCertificate], GTlsCertificateFlags], CArray[gpointer, Nat._8]]
  def apply()(using Zone): Ptr[_GTlsCertificateClass] = scala.scalanative.unsafe.alloc[_GTlsCertificateClass](1)
  def apply(parent_class : GObjectClass, verify : CFuncPtr3[Ptr[GTlsCertificate], Ptr[GSocketConnectable], Ptr[GTlsCertificate], GTlsCertificateFlags], padding : CArray[gpointer, Nat._8])(using Zone): Ptr[_GTlsCertificateClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).verify = verify
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GTlsCertificateClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def verify : CFuncPtr3[Ptr[GTlsCertificate], Ptr[GSocketConnectable], Ptr[GTlsCertificate], GTlsCertificateFlags] = struct._2
    def verify_=(value: CFuncPtr3[Ptr[GTlsCertificate], Ptr[GSocketConnectable], Ptr[GTlsCertificate], GTlsCertificateFlags]): Unit = !struct.at2 = value
    def padding : CArray[gpointer, Nat._8] = struct._3
    def padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
*/
opaque type _GTlsCertificatePrivate = CStruct0
object _GTlsCertificatePrivate:
  given _tag: Tag[_GTlsCertificatePrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GTlsClientConnection = CStruct0
object _GTlsClientConnection:
  given _tag: Tag[_GTlsClientConnection] = Tag.materializeCStruct0Tag

/**
 * GTlsClientConnectionInterface: _iface: The parent interface. _session_state: Copies session state from one #GTlsClientConnection to another.

 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsclientconnection.h
*/
opaque type _GTlsClientConnectionInterface = CStruct2[GTypeInterface, CFuncPtr2[Ptr[GTlsClientConnection], Ptr[GTlsClientConnection], Unit]]
object _GTlsClientConnectionInterface:
  given _tag: Tag[_GTlsClientConnectionInterface] = Tag.materializeCStruct2Tag[GTypeInterface, CFuncPtr2[Ptr[GTlsClientConnection], Ptr[GTlsClientConnection], Unit]]
  def apply()(using Zone): Ptr[_GTlsClientConnectionInterface] = scala.scalanative.unsafe.alloc[_GTlsClientConnectionInterface](1)
  def apply(g_iface : GTypeInterface, copy_session_state : CFuncPtr2[Ptr[GTlsClientConnection], Ptr[GTlsClientConnection], Unit])(using Zone): Ptr[_GTlsClientConnectionInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).copy_session_state = copy_session_state
    ____ptr
  extension (struct: _GTlsClientConnectionInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def copy_session_state : CFuncPtr2[Ptr[GTlsClientConnection], Ptr[GTlsClientConnection], Unit] = struct._2
    def copy_session_state_=(value: CFuncPtr2[Ptr[GTlsClientConnection], Ptr[GTlsClientConnection], Unit]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
*/
opaque type _GTlsConnection = CStruct2[GIOStream, Ptr[GTlsConnectionPrivate]]
object _GTlsConnection:
  given _tag: Tag[_GTlsConnection] = Tag.materializeCStruct2Tag[GIOStream, Ptr[GTlsConnectionPrivate]]
  def apply()(using Zone): Ptr[_GTlsConnection] = scala.scalanative.unsafe.alloc[_GTlsConnection](1)
  def apply(parent_instance : GIOStream, priv : Ptr[GTlsConnectionPrivate])(using Zone): Ptr[_GTlsConnection] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GTlsConnection)
    def parent_instance : GIOStream = struct._1
    def parent_instance_=(value: GIOStream): Unit = !struct.at1 = value
    def priv : Ptr[GTlsConnectionPrivate] = struct._2
    def priv_=(value: Ptr[GTlsConnectionPrivate]): Unit = !struct.at2 = value

/**
 * GTlsConnectionClass: _class: The parent class. _certificate: Check whether to accept a certificate. : Perform a handshake operation. _async: Start an asynchronous handshake operation. _finish: Finish an asynchronous handshake operation. _binding_data: Retrieve TLS channel binding data (Since: 2.66) _negotiated_protocol: Get ALPN-negotiated protocol (Since: 2.70)

 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
*/
opaque type _GTlsConnectionClass = CStruct8[GIOStreamClass, CFuncPtr3[Ptr[GTlsConnection], Ptr[GTlsCertificate], GTlsCertificateFlags, gboolean], CFuncPtr3[Ptr[GTlsConnection], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr5[Ptr[GTlsConnection], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GTlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr4[Ptr[GTlsConnection], GTlsChannelBindingType, Ptr[GByteArray], Ptr[Ptr[GError]], gboolean], CFuncPtr1[Ptr[GTlsConnection], Ptr[gchar]], CArray[gpointer, Nat._6]]
object _GTlsConnectionClass:
  given _tag: Tag[_GTlsConnectionClass] = Tag.materializeCStruct8Tag[GIOStreamClass, CFuncPtr3[Ptr[GTlsConnection], Ptr[GTlsCertificate], GTlsCertificateFlags, gboolean], CFuncPtr3[Ptr[GTlsConnection], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr5[Ptr[GTlsConnection], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GTlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr4[Ptr[GTlsConnection], GTlsChannelBindingType, Ptr[GByteArray], Ptr[Ptr[GError]], gboolean], CFuncPtr1[Ptr[GTlsConnection], Ptr[gchar]], CArray[gpointer, Nat._6]]
  def apply()(using Zone): Ptr[_GTlsConnectionClass] = scala.scalanative.unsafe.alloc[_GTlsConnectionClass](1)
  def apply(parent_class : GIOStreamClass, accept_certificate : CFuncPtr3[Ptr[GTlsConnection], Ptr[GTlsCertificate], GTlsCertificateFlags, gboolean], handshake : CFuncPtr3[Ptr[GTlsConnection], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], handshake_async : CFuncPtr5[Ptr[GTlsConnection], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], handshake_finish : CFuncPtr3[Ptr[GTlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], get_binding_data : CFuncPtr4[Ptr[GTlsConnection], GTlsChannelBindingType, Ptr[GByteArray], Ptr[Ptr[GError]], gboolean], get_negotiated_protocol : CFuncPtr1[Ptr[GTlsConnection], Ptr[gchar]], padding : CArray[gpointer, Nat._6])(using Zone): Ptr[_GTlsConnectionClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).accept_certificate = accept_certificate
    (!____ptr).handshake = handshake
    (!____ptr).handshake_async = handshake_async
    (!____ptr).handshake_finish = handshake_finish
    (!____ptr).get_binding_data = get_binding_data
    (!____ptr).get_negotiated_protocol = get_negotiated_protocol
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GTlsConnectionClass)
    def parent_class : GIOStreamClass = struct._1
    def parent_class_=(value: GIOStreamClass): Unit = !struct.at1 = value
    def accept_certificate : CFuncPtr3[Ptr[GTlsConnection], Ptr[GTlsCertificate], GTlsCertificateFlags, gboolean] = struct._2
    def accept_certificate_=(value: CFuncPtr3[Ptr[GTlsConnection], Ptr[GTlsCertificate], GTlsCertificateFlags, gboolean]): Unit = !struct.at2 = value
    def handshake : CFuncPtr3[Ptr[GTlsConnection], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._3
    def handshake_=(value: CFuncPtr3[Ptr[GTlsConnection], Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at3 = value
    def handshake_async : CFuncPtr5[Ptr[GTlsConnection], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._4
    def handshake_async_=(value: CFuncPtr5[Ptr[GTlsConnection], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at4 = value
    def handshake_finish : CFuncPtr3[Ptr[GTlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = struct._5
    def handshake_finish_=(value: CFuncPtr3[Ptr[GTlsConnection], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at5 = value
    def get_binding_data : CFuncPtr4[Ptr[GTlsConnection], GTlsChannelBindingType, Ptr[GByteArray], Ptr[Ptr[GError]], gboolean] = struct._6
    def get_binding_data_=(value: CFuncPtr4[Ptr[GTlsConnection], GTlsChannelBindingType, Ptr[GByteArray], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at6 = value
    def get_negotiated_protocol : CFuncPtr1[Ptr[GTlsConnection], Ptr[gchar]] = struct._7
    def get_negotiated_protocol_=(value: CFuncPtr1[Ptr[GTlsConnection], Ptr[gchar]]): Unit = !struct.at7 = value
    def padding : CArray[gpointer, Nat._6] = struct._8
    def padding_=(value: CArray[gpointer, Nat._6]): Unit = !struct.at8 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
*/
opaque type _GTlsConnectionPrivate = CStruct0
object _GTlsConnectionPrivate:
  given _tag: Tag[_GTlsConnectionPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsdatabase.h
*/
opaque type _GTlsDatabase = CStruct2[GObject, Ptr[GTlsDatabasePrivate]]
object _GTlsDatabase:
  given _tag: Tag[_GTlsDatabase] = Tag.materializeCStruct2Tag[GObject, Ptr[GTlsDatabasePrivate]]
  def apply()(using Zone): Ptr[_GTlsDatabase] = scala.scalanative.unsafe.alloc[_GTlsDatabase](1)
  def apply(parent_instance : GObject, priv : Ptr[GTlsDatabasePrivate])(using Zone): Ptr[_GTlsDatabase] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GTlsDatabase)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GTlsDatabasePrivate] = struct._2
    def priv_=(value: Ptr[GTlsDatabasePrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsdatabase.h
*/
opaque type _GTlsDatabaseClass = CStruct15[GObjectClass, CFuncPtr8[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar], Ptr[GSocketConnectable], Ptr[GTlsInteraction], GTlsDatabaseVerifyFlags, Ptr[GCancellable], Ptr[Ptr[GError]], GTlsCertificateFlags], CFuncPtr9[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar], Ptr[GSocketConnectable], Ptr[GTlsInteraction], GTlsDatabaseVerifyFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsCertificateFlags], CFuncPtr2[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar]], CFuncPtr6[Ptr[GTlsDatabase], Ptr[gchar], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GTlsCertificate]], CFuncPtr7[Ptr[GTlsDatabase], Ptr[gchar], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GTlsCertificate]], CFuncPtr6[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GTlsCertificate]], CFuncPtr7[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GTlsCertificate]], CFuncPtr6[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Byte]], CFuncPtr7[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Byte]], CArray[gpointer, Nat.Digit2[Nat._1, Nat._6]]]
object _GTlsDatabaseClass:
  given _tag: Tag[_GTlsDatabaseClass] = Tag.materializeCStruct15Tag[GObjectClass, CFuncPtr8[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar], Ptr[GSocketConnectable], Ptr[GTlsInteraction], GTlsDatabaseVerifyFlags, Ptr[GCancellable], Ptr[Ptr[GError]], GTlsCertificateFlags], CFuncPtr9[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar], Ptr[GSocketConnectable], Ptr[GTlsInteraction], GTlsDatabaseVerifyFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsCertificateFlags], CFuncPtr2[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar]], CFuncPtr6[Ptr[GTlsDatabase], Ptr[gchar], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GTlsCertificate]], CFuncPtr7[Ptr[GTlsDatabase], Ptr[gchar], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GTlsCertificate]], CFuncPtr6[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GTlsCertificate]], CFuncPtr7[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GTlsCertificate]], CFuncPtr6[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Byte]], CFuncPtr7[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Byte]], CArray[gpointer, Nat.Digit2[Nat._1, Nat._6]]]
  def apply()(using Zone): Ptr[_GTlsDatabaseClass] = scala.scalanative.unsafe.alloc[_GTlsDatabaseClass](1)
  def apply(parent_class : GObjectClass, verify_chain : CFuncPtr8[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar], Ptr[GSocketConnectable], Ptr[GTlsInteraction], GTlsDatabaseVerifyFlags, Ptr[GCancellable], Ptr[Ptr[GError]], GTlsCertificateFlags], verify_chain_async : CFuncPtr9[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar], Ptr[GSocketConnectable], Ptr[GTlsInteraction], GTlsDatabaseVerifyFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], verify_chain_finish : CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsCertificateFlags], create_certificate_handle : CFuncPtr2[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar]], lookup_certificate_for_handle : CFuncPtr6[Ptr[GTlsDatabase], Ptr[gchar], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GTlsCertificate]], lookup_certificate_for_handle_async : CFuncPtr7[Ptr[GTlsDatabase], Ptr[gchar], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], lookup_certificate_for_handle_finish : CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GTlsCertificate]], lookup_certificate_issuer : CFuncPtr6[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GTlsCertificate]], lookup_certificate_issuer_async : CFuncPtr7[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], lookup_certificate_issuer_finish : CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GTlsCertificate]], lookup_certificates_issued_by : CFuncPtr6[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]], lookup_certificates_issued_by_async : CFuncPtr7[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], lookup_certificates_issued_by_finish : CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]], padding : CArray[gpointer, Nat.Digit2[Nat._1, Nat._6]])(using Zone): Ptr[_GTlsDatabaseClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).verify_chain = verify_chain
    (!____ptr).verify_chain_async = verify_chain_async
    (!____ptr).verify_chain_finish = verify_chain_finish
    (!____ptr).create_certificate_handle = create_certificate_handle
    (!____ptr).lookup_certificate_for_handle = lookup_certificate_for_handle
    (!____ptr).lookup_certificate_for_handle_async = lookup_certificate_for_handle_async
    (!____ptr).lookup_certificate_for_handle_finish = lookup_certificate_for_handle_finish
    (!____ptr).lookup_certificate_issuer = lookup_certificate_issuer
    (!____ptr).lookup_certificate_issuer_async = lookup_certificate_issuer_async
    (!____ptr).lookup_certificate_issuer_finish = lookup_certificate_issuer_finish
    (!____ptr).lookup_certificates_issued_by = lookup_certificates_issued_by
    (!____ptr).lookup_certificates_issued_by_async = lookup_certificates_issued_by_async
    (!____ptr).lookup_certificates_issued_by_finish = lookup_certificates_issued_by_finish
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GTlsDatabaseClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def verify_chain : CFuncPtr8[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar], Ptr[GSocketConnectable], Ptr[GTlsInteraction], GTlsDatabaseVerifyFlags, Ptr[GCancellable], Ptr[Ptr[GError]], GTlsCertificateFlags] = struct._2
    def verify_chain_=(value: CFuncPtr8[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar], Ptr[GSocketConnectable], Ptr[GTlsInteraction], GTlsDatabaseVerifyFlags, Ptr[GCancellable], Ptr[Ptr[GError]], GTlsCertificateFlags]): Unit = !struct.at2 = value
    def verify_chain_async : CFuncPtr9[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar], Ptr[GSocketConnectable], Ptr[GTlsInteraction], GTlsDatabaseVerifyFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._3
    def verify_chain_async_=(value: CFuncPtr9[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar], Ptr[GSocketConnectable], Ptr[GTlsInteraction], GTlsDatabaseVerifyFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at3 = value
    def verify_chain_finish : CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsCertificateFlags] = struct._4
    def verify_chain_finish_=(value: CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsCertificateFlags]): Unit = !struct.at4 = value
    def create_certificate_handle : CFuncPtr2[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar]] = struct._5
    def create_certificate_handle_=(value: CFuncPtr2[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[gchar]]): Unit = !struct.at5 = value
    def lookup_certificate_for_handle : CFuncPtr6[Ptr[GTlsDatabase], Ptr[gchar], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GTlsCertificate]] = struct._6
    def lookup_certificate_for_handle_=(value: CFuncPtr6[Ptr[GTlsDatabase], Ptr[gchar], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GTlsCertificate]]): Unit = !struct.at6 = value
    def lookup_certificate_for_handle_async : CFuncPtr7[Ptr[GTlsDatabase], Ptr[gchar], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._7
    def lookup_certificate_for_handle_async_=(value: CFuncPtr7[Ptr[GTlsDatabase], Ptr[gchar], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at7 = value
    def lookup_certificate_for_handle_finish : CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GTlsCertificate]] = struct._8
    def lookup_certificate_for_handle_finish_=(value: CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GTlsCertificate]]): Unit = !struct.at8 = value
    def lookup_certificate_issuer : CFuncPtr6[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GTlsCertificate]] = struct._9
    def lookup_certificate_issuer_=(value: CFuncPtr6[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GTlsCertificate]]): Unit = !struct.at9 = value
    def lookup_certificate_issuer_async : CFuncPtr7[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._10
    def lookup_certificate_issuer_async_=(value: CFuncPtr7[Ptr[GTlsDatabase], Ptr[GTlsCertificate], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at10 = value
    def lookup_certificate_issuer_finish : CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GTlsCertificate]] = struct._11
    def lookup_certificate_issuer_finish_=(value: CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GTlsCertificate]]): Unit = !struct.at11 = value
    def lookup_certificates_issued_by : CFuncPtr6[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]] = struct._12.asInstanceOf[CFuncPtr6[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]]
    def lookup_certificates_issued_by_=(value: CFuncPtr6[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at12 = value.asInstanceOf[CFuncPtr6[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], Ptr[Ptr[GError]], Ptr[Byte]]]
    def lookup_certificates_issued_by_async : CFuncPtr7[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._13
    def lookup_certificates_issued_by_async_=(value: CFuncPtr7[Ptr[GTlsDatabase], Ptr[GByteArray], Ptr[GTlsInteraction], GTlsDatabaseLookupFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at13 = value
    def lookup_certificates_issued_by_finish : CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]] = struct._14.asInstanceOf[CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]]
    def lookup_certificates_issued_by_finish_=(value: CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[GList]]): Unit = !struct.at14 = value.asInstanceOf[CFuncPtr3[Ptr[GTlsDatabase], Ptr[GAsyncResult], Ptr[Ptr[GError]], Ptr[Byte]]]
    def padding : CArray[gpointer, Nat.Digit2[Nat._1, Nat._6]] = struct._15
    def padding_=(value: CArray[gpointer, Nat.Digit2[Nat._1, Nat._6]]): Unit = !struct.at15 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsdatabase.h
*/
opaque type _GTlsDatabasePrivate = CStruct0
object _GTlsDatabasePrivate:
  given _tag: Tag[_GTlsDatabasePrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GTlsFileDatabase = CStruct0
object _GTlsFileDatabase:
  given _tag: Tag[_GTlsFileDatabase] = Tag.materializeCStruct0Tag

/**
 * GTlsFileDatabaseInterface: _iface: The parent interface.

 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsfiledatabase.h
*/
opaque type _GTlsFileDatabaseInterface = CStruct2[GTypeInterface, CArray[gpointer, Nat._8]]
object _GTlsFileDatabaseInterface:
  given _tag: Tag[_GTlsFileDatabaseInterface] = Tag.materializeCStruct2Tag[GTypeInterface, CArray[gpointer, Nat._8]]
  def apply()(using Zone): Ptr[_GTlsFileDatabaseInterface] = scala.scalanative.unsafe.alloc[_GTlsFileDatabaseInterface](1)
  def apply(g_iface : GTypeInterface, padding : CArray[gpointer, Nat._8])(using Zone): Ptr[_GTlsFileDatabaseInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GTlsFileDatabaseInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def padding : CArray[gpointer, Nat._8] = struct._2
    def padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsinteraction.h
*/
opaque type _GTlsInteraction = CStruct2[GObject, Ptr[GTlsInteractionPrivate]]
object _GTlsInteraction:
  given _tag: Tag[_GTlsInteraction] = Tag.materializeCStruct2Tag[GObject, Ptr[GTlsInteractionPrivate]]
  def apply()(using Zone): Ptr[_GTlsInteraction] = scala.scalanative.unsafe.alloc[_GTlsInteraction](1)
  def apply(parent_instance : GObject, priv : Ptr[GTlsInteractionPrivate])(using Zone): Ptr[_GTlsInteraction] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GTlsInteraction)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GTlsInteractionPrivate] = struct._2
    def priv_=(value: Ptr[GTlsInteractionPrivate]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsinteraction.h
*/
opaque type _GTlsInteractionClass = CStruct8[GObjectClass, CFuncPtr4[Ptr[GTlsInteraction], Ptr[GTlsPassword], Ptr[GCancellable], Ptr[Ptr[GError]], GTlsInteractionResult], CFuncPtr5[Ptr[GTlsInteraction], Ptr[GTlsPassword], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GTlsInteraction], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsInteractionResult], CFuncPtr5[Ptr[GTlsInteraction], Ptr[GTlsConnection], GTlsCertificateRequestFlags, Ptr[GCancellable], Ptr[Ptr[GError]], GTlsInteractionResult], CFuncPtr6[Ptr[GTlsInteraction], Ptr[GTlsConnection], GTlsCertificateRequestFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GTlsInteraction], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsInteractionResult], CArray[gpointer, Nat.Digit2[Nat._2, Nat._1]]]
object _GTlsInteractionClass:
  given _tag: Tag[_GTlsInteractionClass] = Tag.materializeCStruct8Tag[GObjectClass, CFuncPtr4[Ptr[GTlsInteraction], Ptr[GTlsPassword], Ptr[GCancellable], Ptr[Ptr[GError]], GTlsInteractionResult], CFuncPtr5[Ptr[GTlsInteraction], Ptr[GTlsPassword], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GTlsInteraction], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsInteractionResult], CFuncPtr5[Ptr[GTlsInteraction], Ptr[GTlsConnection], GTlsCertificateRequestFlags, Ptr[GCancellable], Ptr[Ptr[GError]], GTlsInteractionResult], CFuncPtr6[Ptr[GTlsInteraction], Ptr[GTlsConnection], GTlsCertificateRequestFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GTlsInteraction], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsInteractionResult], CArray[gpointer, Nat.Digit2[Nat._2, Nat._1]]]
  def apply()(using Zone): Ptr[_GTlsInteractionClass] = scala.scalanative.unsafe.alloc[_GTlsInteractionClass](1)
  def apply(parent_class : GObjectClass, ask_password : CFuncPtr4[Ptr[GTlsInteraction], Ptr[GTlsPassword], Ptr[GCancellable], Ptr[Ptr[GError]], GTlsInteractionResult], ask_password_async : CFuncPtr5[Ptr[GTlsInteraction], Ptr[GTlsPassword], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], ask_password_finish : CFuncPtr3[Ptr[GTlsInteraction], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsInteractionResult], request_certificate : CFuncPtr5[Ptr[GTlsInteraction], Ptr[GTlsConnection], GTlsCertificateRequestFlags, Ptr[GCancellable], Ptr[Ptr[GError]], GTlsInteractionResult], request_certificate_async : CFuncPtr6[Ptr[GTlsInteraction], Ptr[GTlsConnection], GTlsCertificateRequestFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], request_certificate_finish : CFuncPtr3[Ptr[GTlsInteraction], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsInteractionResult], padding : CArray[gpointer, Nat.Digit2[Nat._2, Nat._1]])(using Zone): Ptr[_GTlsInteractionClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).ask_password = ask_password
    (!____ptr).ask_password_async = ask_password_async
    (!____ptr).ask_password_finish = ask_password_finish
    (!____ptr).request_certificate = request_certificate
    (!____ptr).request_certificate_async = request_certificate_async
    (!____ptr).request_certificate_finish = request_certificate_finish
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GTlsInteractionClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def ask_password : CFuncPtr4[Ptr[GTlsInteraction], Ptr[GTlsPassword], Ptr[GCancellable], Ptr[Ptr[GError]], GTlsInteractionResult] = struct._2
    def ask_password_=(value: CFuncPtr4[Ptr[GTlsInteraction], Ptr[GTlsPassword], Ptr[GCancellable], Ptr[Ptr[GError]], GTlsInteractionResult]): Unit = !struct.at2 = value
    def ask_password_async : CFuncPtr5[Ptr[GTlsInteraction], Ptr[GTlsPassword], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._3
    def ask_password_async_=(value: CFuncPtr5[Ptr[GTlsInteraction], Ptr[GTlsPassword], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at3 = value
    def ask_password_finish : CFuncPtr3[Ptr[GTlsInteraction], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsInteractionResult] = struct._4
    def ask_password_finish_=(value: CFuncPtr3[Ptr[GTlsInteraction], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsInteractionResult]): Unit = !struct.at4 = value
    def request_certificate : CFuncPtr5[Ptr[GTlsInteraction], Ptr[GTlsConnection], GTlsCertificateRequestFlags, Ptr[GCancellable], Ptr[Ptr[GError]], GTlsInteractionResult] = struct._5
    def request_certificate_=(value: CFuncPtr5[Ptr[GTlsInteraction], Ptr[GTlsConnection], GTlsCertificateRequestFlags, Ptr[GCancellable], Ptr[Ptr[GError]], GTlsInteractionResult]): Unit = !struct.at5 = value
    def request_certificate_async : CFuncPtr6[Ptr[GTlsInteraction], Ptr[GTlsConnection], GTlsCertificateRequestFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._6
    def request_certificate_async_=(value: CFuncPtr6[Ptr[GTlsInteraction], Ptr[GTlsConnection], GTlsCertificateRequestFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at6 = value
    def request_certificate_finish : CFuncPtr3[Ptr[GTlsInteraction], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsInteractionResult] = struct._7
    def request_certificate_finish_=(value: CFuncPtr3[Ptr[GTlsInteraction], Ptr[GAsyncResult], Ptr[Ptr[GError]], GTlsInteractionResult]): Unit = !struct.at7 = value
    def padding : CArray[gpointer, Nat.Digit2[Nat._2, Nat._1]] = struct._8
    def padding_=(value: CArray[gpointer, Nat.Digit2[Nat._2, Nat._1]]): Unit = !struct.at8 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsinteraction.h
*/
opaque type _GTlsInteractionPrivate = CStruct0
object _GTlsInteractionPrivate:
  given _tag: Tag[_GTlsInteractionPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlspassword.h
*/
opaque type _GTlsPassword = CStruct2[GObject, Ptr[GTlsPasswordPrivate]]
object _GTlsPassword:
  given _tag: Tag[_GTlsPassword] = Tag.materializeCStruct2Tag[GObject, Ptr[GTlsPasswordPrivate]]
  def apply()(using Zone): Ptr[_GTlsPassword] = scala.scalanative.unsafe.alloc[_GTlsPassword](1)
  def apply(parent_instance : GObject, priv : Ptr[GTlsPasswordPrivate])(using Zone): Ptr[_GTlsPassword] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GTlsPassword)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : Ptr[GTlsPasswordPrivate] = struct._2
    def priv_=(value: Ptr[GTlsPasswordPrivate]): Unit = !struct.at2 = value

/**
 * GTlsPasswordClass: _value: virtual method for g_tls_password_get_value()

 * [bindgen] header: /usr/include/glib-2.0/gio/gtlspassword.h
*/
opaque type _GTlsPasswordClass = CStruct5[GObjectClass, CFuncPtr2[Ptr[GTlsPassword], Ptr[gsize], Ptr[guchar]], CFuncPtr4[Ptr[GTlsPassword], Ptr[guchar], gssize, GDestroyNotify, Unit], CFuncPtr1[Ptr[GTlsPassword], Ptr[gchar]], CArray[gpointer, Nat._4]]
object _GTlsPasswordClass:
  given _tag: Tag[_GTlsPasswordClass] = Tag.materializeCStruct5Tag[GObjectClass, CFuncPtr2[Ptr[GTlsPassword], Ptr[gsize], Ptr[guchar]], CFuncPtr4[Ptr[GTlsPassword], Ptr[guchar], gssize, GDestroyNotify, Unit], CFuncPtr1[Ptr[GTlsPassword], Ptr[gchar]], CArray[gpointer, Nat._4]]
  def apply()(using Zone): Ptr[_GTlsPasswordClass] = scala.scalanative.unsafe.alloc[_GTlsPasswordClass](1)
  def apply(parent_class : GObjectClass, get_value : CFuncPtr2[Ptr[GTlsPassword], Ptr[gsize], Ptr[guchar]], set_value : CFuncPtr4[Ptr[GTlsPassword], Ptr[guchar], gssize, GDestroyNotify, Unit], get_default_warning : CFuncPtr1[Ptr[GTlsPassword], Ptr[gchar]], padding : CArray[gpointer, Nat._4])(using Zone): Ptr[_GTlsPasswordClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_value = get_value
    (!____ptr).set_value = set_value
    (!____ptr).get_default_warning = get_default_warning
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GTlsPasswordClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def get_value : CFuncPtr2[Ptr[GTlsPassword], Ptr[gsize], Ptr[guchar]] = struct._2
    def get_value_=(value: CFuncPtr2[Ptr[GTlsPassword], Ptr[gsize], Ptr[guchar]]): Unit = !struct.at2 = value
    def set_value : CFuncPtr4[Ptr[GTlsPassword], Ptr[guchar], gssize, GDestroyNotify, Unit] = struct._3
    def set_value_=(value: CFuncPtr4[Ptr[GTlsPassword], Ptr[guchar], gssize, GDestroyNotify, Unit]): Unit = !struct.at3 = value
    def get_default_warning : CFuncPtr1[Ptr[GTlsPassword], Ptr[gchar]] = struct._4
    def get_default_warning_=(value: CFuncPtr1[Ptr[GTlsPassword], Ptr[gchar]]): Unit = !struct.at4 = value
    def padding : CArray[gpointer, Nat._4] = struct._5
    def padding_=(value: CArray[gpointer, Nat._4]): Unit = !struct.at5 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gtlspassword.h
*/
opaque type _GTlsPasswordPrivate = CStruct0
object _GTlsPasswordPrivate:
  given _tag: Tag[_GTlsPasswordPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GTlsServerConnection = CStruct0
object _GTlsServerConnection:
  given _tag: Tag[_GTlsServerConnection] = Tag.materializeCStruct0Tag

/**
 * GTlsServerConnectionInterface: _iface: The parent interface.

 * [bindgen] header: /usr/include/glib-2.0/gio/gtlsserverconnection.h
*/
opaque type _GTlsServerConnectionInterface = CStruct1[GTypeInterface]
object _GTlsServerConnectionInterface:
  given _tag: Tag[_GTlsServerConnectionInterface] = Tag.materializeCStruct1Tag[GTypeInterface]
  def apply()(using Zone): Ptr[_GTlsServerConnectionInterface] = scala.scalanative.unsafe.alloc[_GTlsServerConnectionInterface](1)
  def apply(g_iface : GTypeInterface)(using Zone): Ptr[_GTlsServerConnectionInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    ____ptr
  extension (struct: _GTlsServerConnectionInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gtrashstack.h
*/
opaque type _GTrashStack = CStruct1[Ptr[Byte]]
object _GTrashStack:
  given _tag: Tag[_GTrashStack] = Tag.materializeCStruct1Tag[Ptr[Byte]]
  def apply()(using Zone): Ptr[_GTrashStack] = scala.scalanative.unsafe.alloc[_GTrashStack](1)
  def apply(next : Ptr[GTrashStack])(using Zone): Ptr[_GTrashStack] = 
    val ____ptr = apply()
    (!____ptr).next = next
    ____ptr
  extension (struct: _GTrashStack)
    def next : Ptr[GTrashStack] = struct._1.asInstanceOf[Ptr[GTrashStack]]
    def next_=(value: Ptr[GTrashStack]): Unit = !struct.at1 = value.asInstanceOf[Ptr[Byte]]

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
*/
opaque type _GTree = CStruct0
object _GTree:
  given _tag: Tag[_GTree] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
*/
opaque type _GTreeNode = CStruct0
object _GTreeNode:
  given _tag: Tag[_GTreeNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/grel.h
*/
opaque type _GTuples = CStruct1[guint]
object _GTuples:
  given _tag: Tag[_GTuples] = Tag.materializeCStruct1Tag[guint]
  def apply()(using Zone): Ptr[_GTuples] = scala.scalanative.unsafe.alloc[_GTuples](1)
  def apply(len : guint)(using Zone): Ptr[_GTuples] = 
    val ____ptr = apply()
    (!____ptr).len = len
    ____ptr
  extension (struct: _GTuples)
    def len : guint = struct._1
    def len_=(value: guint): Unit = !struct.at1 = value

/**
 * GTypeClass:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
*/
opaque type _GTypeClass = CStruct1[GType]
object _GTypeClass:
  given _tag: Tag[_GTypeClass] = Tag.materializeCStruct1Tag[GType]
  def apply()(using Zone): Ptr[_GTypeClass] = scala.scalanative.unsafe.alloc[_GTypeClass](1)
  def apply(g_type : GType)(using Zone): Ptr[_GTypeClass] = 
    val ____ptr = apply()
    (!____ptr).g_type = g_type
    ____ptr
  extension (struct: _GTypeClass)
    def g_type : GType = struct._1
    def g_type_=(value: GType): Unit = !struct.at1 = value

/**
 * GTypeFundamentalInfo: _flags: #GTypeFundamentalFlags describing the characteristics of the fundamental type

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
*/
opaque type _GTypeFundamentalInfo = CStruct1[GTypeFundamentalFlags]
object _GTypeFundamentalInfo:
  given _tag: Tag[_GTypeFundamentalInfo] = Tag.materializeCStruct1Tag[GTypeFundamentalFlags]
  def apply()(using Zone): Ptr[_GTypeFundamentalInfo] = scala.scalanative.unsafe.alloc[_GTypeFundamentalInfo](1)
  def apply(type_flags : GTypeFundamentalFlags)(using Zone): Ptr[_GTypeFundamentalInfo] = 
    val ____ptr = apply()
    (!____ptr).type_flags = type_flags
    ____ptr
  extension (struct: _GTypeFundamentalInfo)
    def type_flags : GTypeFundamentalFlags = struct._1
    def type_flags_=(value: GTypeFundamentalFlags): Unit = !struct.at1 = value

/**
 * GTypeInfo: _init: Location of the base initialization function (optional) _finalize: Location of the base finalization function (optional) classed and instantiatable types. Location of the default vtable inititalization function for interface types. (optional) This function is used both to fill in virtual functions in the class or default vtable, and to do type-specific setup such as registering signals and object properties. classed and instantiatable types. Location of the default vtable finalization function for interface types. (optional) _size: Size of the instance (object) structure (required for instantiatable types only) _preallocs: Prior to GLib 2.10, it specified the number of pre-allocated (cached) instances to reserve memory for (0 indicates no caching). Since GLib 2.10, it is ignored, since instances are allocated with the [slice allocator][glib-Memory-Slices] now. _init: Location of the instance initialization function (optional, for instantiatable types only) _table: A #GTypeValueTable function table for generic handling of GValues of this type (usually only useful for fundamental types)

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
*/
opaque type _GTypeInfo = CStruct10[guint16, GBaseInitFunc, GBaseFinalizeFunc, GClassInitFunc, GClassFinalizeFunc, gconstpointer, guint16, guint16, GInstanceInitFunc, Ptr[GTypeValueTable]]
object _GTypeInfo:
  given _tag: Tag[_GTypeInfo] = Tag.materializeCStruct10Tag[guint16, GBaseInitFunc, GBaseFinalizeFunc, GClassInitFunc, GClassFinalizeFunc, gconstpointer, guint16, guint16, GInstanceInitFunc, Ptr[GTypeValueTable]]
  def apply()(using Zone): Ptr[_GTypeInfo] = scala.scalanative.unsafe.alloc[_GTypeInfo](1)
  def apply(class_size : guint16, base_init : GBaseInitFunc, base_finalize : GBaseFinalizeFunc, class_init : GClassInitFunc, class_finalize : GClassFinalizeFunc, class_data : gconstpointer, instance_size : guint16, n_preallocs : guint16, instance_init : GInstanceInitFunc, value_table : Ptr[GTypeValueTable])(using Zone): Ptr[_GTypeInfo] = 
    val ____ptr = apply()
    (!____ptr).class_size = class_size
    (!____ptr).base_init = base_init
    (!____ptr).base_finalize = base_finalize
    (!____ptr).class_init = class_init
    (!____ptr).class_finalize = class_finalize
    (!____ptr).class_data = class_data
    (!____ptr).instance_size = instance_size
    (!____ptr).n_preallocs = n_preallocs
    (!____ptr).instance_init = instance_init
    (!____ptr).value_table = value_table
    ____ptr
  extension (struct: _GTypeInfo)
    def class_size : guint16 = struct._1
    def class_size_=(value: guint16): Unit = !struct.at1 = value
    def base_init : GBaseInitFunc = struct._2
    def base_init_=(value: GBaseInitFunc): Unit = !struct.at2 = value
    def base_finalize : GBaseFinalizeFunc = struct._3
    def base_finalize_=(value: GBaseFinalizeFunc): Unit = !struct.at3 = value
    def class_init : GClassInitFunc = struct._4
    def class_init_=(value: GClassInitFunc): Unit = !struct.at4 = value
    def class_finalize : GClassFinalizeFunc = struct._5
    def class_finalize_=(value: GClassFinalizeFunc): Unit = !struct.at5 = value
    def class_data : gconstpointer = struct._6
    def class_data_=(value: gconstpointer): Unit = !struct.at6 = value
    def instance_size : guint16 = struct._7
    def instance_size_=(value: guint16): Unit = !struct.at7 = value
    def n_preallocs : guint16 = struct._8
    def n_preallocs_=(value: guint16): Unit = !struct.at8 = value
    def instance_init : GInstanceInitFunc = struct._9
    def instance_init_=(value: GInstanceInitFunc): Unit = !struct.at9 = value
    def value_table : Ptr[GTypeValueTable] = struct._10
    def value_table_=(value: Ptr[GTypeValueTable]): Unit = !struct.at10 = value

/**
 * GTypeInstance:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
*/
opaque type _GTypeInstance = CStruct1[Ptr[GTypeClass]]
object _GTypeInstance:
  given _tag: Tag[_GTypeInstance] = Tag.materializeCStruct1Tag[Ptr[GTypeClass]]
  def apply()(using Zone): Ptr[_GTypeInstance] = scala.scalanative.unsafe.alloc[_GTypeInstance](1)
  def apply(g_class : Ptr[GTypeClass])(using Zone): Ptr[_GTypeInstance] = 
    val ____ptr = apply()
    (!____ptr).g_class = g_class
    ____ptr
  extension (struct: _GTypeInstance)
    def g_class : Ptr[GTypeClass] = struct._1
    def g_class_=(value: Ptr[GTypeClass]): Unit = !struct.at1 = value

/**
 * GTypeInterface:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
*/
opaque type _GTypeInterface = CStruct2[GType, GType]
object _GTypeInterface:
  given _tag: Tag[_GTypeInterface] = Tag.materializeCStruct2Tag[GType, GType]
  def apply()(using Zone): Ptr[_GTypeInterface] = scala.scalanative.unsafe.alloc[_GTypeInterface](1)
  def apply(g_type : GType, g_instance_type : GType)(using Zone): Ptr[_GTypeInterface] = 
    val ____ptr = apply()
    (!____ptr).g_type = g_type
    (!____ptr).g_instance_type = g_instance_type
    ____ptr
  extension (struct: _GTypeInterface)
    def g_type : GType = struct._1
    def g_type_=(value: GType): Unit = !struct.at1 = value
    def g_instance_type : GType = struct._2
    def g_instance_type_=(value: GType): Unit = !struct.at2 = value

/**
 * GTypeModule:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtypemodule.h
*/
opaque type _GTypeModule = CStruct5[GObject, guint, Ptr[Byte], Ptr[Byte], Ptr[gchar]]
object _GTypeModule:
  given _tag: Tag[_GTypeModule] = Tag.materializeCStruct5Tag[GObject, guint, Ptr[Byte], Ptr[Byte], Ptr[gchar]]
  def apply()(using Zone): Ptr[_GTypeModule] = scala.scalanative.unsafe.alloc[_GTypeModule](1)
  def apply(parent_instance : GObject, use_count : guint, type_infos : Ptr[GSList], interface_infos : Ptr[GSList], name : Ptr[gchar])(using Zone): Ptr[_GTypeModule] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).use_count = use_count
    (!____ptr).type_infos = type_infos
    (!____ptr).interface_infos = interface_infos
    (!____ptr).name = name
    ____ptr
  extension (struct: _GTypeModule)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def use_count : guint = struct._2
    def use_count_=(value: guint): Unit = !struct.at2 = value
    def type_infos : Ptr[GSList] = struct._3.asInstanceOf[Ptr[GSList]]
    def type_infos_=(value: Ptr[GSList]): Unit = !struct.at3 = value.asInstanceOf[Ptr[Byte]]
    def interface_infos : Ptr[GSList] = struct._4.asInstanceOf[Ptr[GSList]]
    def interface_infos_=(value: Ptr[GSList]): Unit = !struct.at4 = value.asInstanceOf[Ptr[Byte]]
    def name : Ptr[gchar] = struct._5
    def name_=(value: Ptr[gchar]): Unit = !struct.at5 = value

/**
 * GTypeModuleClass: _class: the parent class : loads the module and registers one or more types using g_type_module_register_type(). : unloads the module

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtypemodule.h
*/
opaque type _GTypeModuleClass = CStruct7[GObjectClass, CFuncPtr1[Ptr[Byte], gboolean], CFuncPtr1[Ptr[Byte], Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GTypeModuleClass:
  given _tag: Tag[_GTypeModuleClass] = Tag.materializeCStruct7Tag[GObjectClass, CFuncPtr1[Ptr[Byte], gboolean], CFuncPtr1[Ptr[Byte], Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GTypeModuleClass] = scala.scalanative.unsafe.alloc[_GTypeModuleClass](1)
  def apply(parent_class : GObjectClass, load : CFuncPtr1[Ptr[GTypeModule], gboolean], unload : CFuncPtr1[Ptr[GTypeModule], Unit], reserved1 : CFuncPtr0[Unit], reserved2 : CFuncPtr0[Unit], reserved3 : CFuncPtr0[Unit], reserved4 : CFuncPtr0[Unit])(using Zone): Ptr[_GTypeModuleClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).load = load
    (!____ptr).unload = unload
    (!____ptr).reserved1 = reserved1
    (!____ptr).reserved2 = reserved2
    (!____ptr).reserved3 = reserved3
    (!____ptr).reserved4 = reserved4
    ____ptr
  extension (struct: _GTypeModuleClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def load : CFuncPtr1[Ptr[GTypeModule], gboolean] = struct._2.asInstanceOf[CFuncPtr1[Ptr[GTypeModule], gboolean]]
    def load_=(value: CFuncPtr1[Ptr[GTypeModule], gboolean]): Unit = !struct.at2 = value.asInstanceOf[CFuncPtr1[Ptr[Byte], gboolean]]
    def unload : CFuncPtr1[Ptr[GTypeModule], Unit] = struct._3.asInstanceOf[CFuncPtr1[Ptr[GTypeModule], Unit]]
    def unload_=(value: CFuncPtr1[Ptr[GTypeModule], Unit]): Unit = !struct.at3 = value.asInstanceOf[CFuncPtr1[Ptr[Byte], Unit]]
    def reserved1 : CFuncPtr0[Unit] = struct._4
    def reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at4 = value
    def reserved2 : CFuncPtr0[Unit] = struct._5
    def reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at5 = value
    def reserved3 : CFuncPtr0[Unit] = struct._6
    def reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at6 = value
    def reserved4 : CFuncPtr0[Unit] = struct._7
    def reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at7 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
*/
opaque type _GTypePlugin = CStruct0
object _GTypePlugin:
  given _tag: Tag[_GTypePlugin] = Tag.materializeCStruct0Tag

/**
 * GTypePlugin:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtypeplugin.h
*/
opaque type _GTypePluginClass = CStruct5[GTypeInterface, GTypePluginUse, GTypePluginUnuse, GTypePluginCompleteTypeInfo, GTypePluginCompleteInterfaceInfo]
object _GTypePluginClass:
  given _tag: Tag[_GTypePluginClass] = Tag.materializeCStruct5Tag[GTypeInterface, GTypePluginUse, GTypePluginUnuse, GTypePluginCompleteTypeInfo, GTypePluginCompleteInterfaceInfo]
  def apply()(using Zone): Ptr[_GTypePluginClass] = scala.scalanative.unsafe.alloc[_GTypePluginClass](1)
  def apply(base_iface : GTypeInterface, use_plugin : GTypePluginUse, unuse_plugin : GTypePluginUnuse, complete_type_info : GTypePluginCompleteTypeInfo, complete_interface_info : GTypePluginCompleteInterfaceInfo)(using Zone): Ptr[_GTypePluginClass] = 
    val ____ptr = apply()
    (!____ptr).base_iface = base_iface
    (!____ptr).use_plugin = use_plugin
    (!____ptr).unuse_plugin = unuse_plugin
    (!____ptr).complete_type_info = complete_type_info
    (!____ptr).complete_interface_info = complete_interface_info
    ____ptr
  extension (struct: _GTypePluginClass)
    def base_iface : GTypeInterface = struct._1
    def base_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def use_plugin : GTypePluginUse = struct._2
    def use_plugin_=(value: GTypePluginUse): Unit = !struct.at2 = value
    def unuse_plugin : GTypePluginUnuse = struct._3
    def unuse_plugin_=(value: GTypePluginUnuse): Unit = !struct.at3 = value
    def complete_type_info : GTypePluginCompleteTypeInfo = struct._4
    def complete_type_info_=(value: GTypePluginCompleteTypeInfo): Unit = !struct.at4 = value
    def complete_interface_info : GTypePluginCompleteInterfaceInfo = struct._5
    def complete_interface_info_=(value: GTypePluginCompleteInterfaceInfo): Unit = !struct.at5 = value

/**
 * GTypeQuery: : the #GType value of the type _name: the name of the type _size: the size of the instance structure

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
*/
opaque type _GTypeQuery = CStruct4[GType, Ptr[gchar], guint, guint]
object _GTypeQuery:
  given _tag: Tag[_GTypeQuery] = Tag.materializeCStruct4Tag[GType, Ptr[gchar], guint, guint]
  def apply()(using Zone): Ptr[_GTypeQuery] = scala.scalanative.unsafe.alloc[_GTypeQuery](1)
  def apply(`type` : GType, type_name : Ptr[gchar], class_size : guint, instance_size : guint)(using Zone): Ptr[_GTypeQuery] = 
    val ____ptr = apply()
    (!____ptr).`type` = `type`
    (!____ptr).type_name = type_name
    (!____ptr).class_size = class_size
    (!____ptr).instance_size = instance_size
    ____ptr
  extension (struct: _GTypeQuery)
    def `type` : GType = struct._1
    def type_=(value: GType): Unit = !struct.at1 = value
    def type_name : Ptr[gchar] = struct._2
    def type_name_=(value: Ptr[gchar]): Unit = !struct.at2 = value
    def class_size : guint = struct._3
    def class_size_=(value: guint): Unit = !struct.at3 = value
    def instance_size : guint = struct._4
    def instance_size_=(value: guint): Unit = !struct.at4 = value

/**
 * GTypeValueTable: _init: Default initialize contents by poking values directly into the value->data array. The data array of the #GValue passed into this function was zero-filled with `memset()`, so no care has to be taken to free any old contents. E.g. for the implementation of a string value that may never be %NULL, the implementation might look like: |[<!-- language="C" --> value->data[0].v_pointer = g_strdup (""); ]| _free: Free any old contents that might be left in the data array of the passed in . No resources may remain allocated through the #GValue contents after this function returns. E.g. for our above string type: |[<!-- language="C" --> // only free strings without a specific flag for static storage if (!(value->data[1].v_uint & G_VALUE_NOCOPY_CONTENTS)) g_free (value->data[0].v_pointer); ]| _copy:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
*/
opaque type _GTypeValueTable = CStruct8[CFuncPtr1[Ptr[GValue], Unit], CFuncPtr1[Ptr[GValue], Unit], CFuncPtr2[Ptr[GValue], Ptr[GValue], Unit], CFuncPtr1[Ptr[GValue], gpointer], Ptr[gchar], CFuncPtr4[Ptr[GValue], guint, Ptr[GTypeCValue], guint, Ptr[gchar]], Ptr[gchar], CFuncPtr4[Ptr[GValue], guint, Ptr[GTypeCValue], guint, Ptr[gchar]]]
object _GTypeValueTable:
  given _tag: Tag[_GTypeValueTable] = Tag.materializeCStruct8Tag[CFuncPtr1[Ptr[GValue], Unit], CFuncPtr1[Ptr[GValue], Unit], CFuncPtr2[Ptr[GValue], Ptr[GValue], Unit], CFuncPtr1[Ptr[GValue], gpointer], Ptr[gchar], CFuncPtr4[Ptr[GValue], guint, Ptr[GTypeCValue], guint, Ptr[gchar]], Ptr[gchar], CFuncPtr4[Ptr[GValue], guint, Ptr[GTypeCValue], guint, Ptr[gchar]]]
  def apply()(using Zone): Ptr[_GTypeValueTable] = scala.scalanative.unsafe.alloc[_GTypeValueTable](1)
  def apply(value_init : CFuncPtr1[Ptr[GValue], Unit], value_free : CFuncPtr1[Ptr[GValue], Unit], value_copy : CFuncPtr2[Ptr[GValue], Ptr[GValue], Unit], value_peek_pointer : CFuncPtr1[Ptr[GValue], gpointer], collect_format : Ptr[gchar], collect_value : CFuncPtr4[Ptr[GValue], guint, Ptr[GTypeCValue], guint, Ptr[gchar]], lcopy_format : Ptr[gchar], lcopy_value : CFuncPtr4[Ptr[GValue], guint, Ptr[GTypeCValue], guint, Ptr[gchar]])(using Zone): Ptr[_GTypeValueTable] = 
    val ____ptr = apply()
    (!____ptr).value_init = value_init
    (!____ptr).value_free = value_free
    (!____ptr).value_copy = value_copy
    (!____ptr).value_peek_pointer = value_peek_pointer
    (!____ptr).collect_format = collect_format
    (!____ptr).collect_value = collect_value
    (!____ptr).lcopy_format = lcopy_format
    (!____ptr).lcopy_value = lcopy_value
    ____ptr
  extension (struct: _GTypeValueTable)
    def value_init : CFuncPtr1[Ptr[GValue], Unit] = struct._1
    def value_init_=(value: CFuncPtr1[Ptr[GValue], Unit]): Unit = !struct.at1 = value
    def value_free : CFuncPtr1[Ptr[GValue], Unit] = struct._2
    def value_free_=(value: CFuncPtr1[Ptr[GValue], Unit]): Unit = !struct.at2 = value
    def value_copy : CFuncPtr2[Ptr[GValue], Ptr[GValue], Unit] = struct._3
    def value_copy_=(value: CFuncPtr2[Ptr[GValue], Ptr[GValue], Unit]): Unit = !struct.at3 = value
    def value_peek_pointer : CFuncPtr1[Ptr[GValue], gpointer] = struct._4
    def value_peek_pointer_=(value: CFuncPtr1[Ptr[GValue], gpointer]): Unit = !struct.at4 = value
    def collect_format : Ptr[gchar] = struct._5
    def collect_format_=(value: Ptr[gchar]): Unit = !struct.at5 = value
    def collect_value : CFuncPtr4[Ptr[GValue], guint, Ptr[GTypeCValue], guint, Ptr[gchar]] = struct._6
    def collect_value_=(value: CFuncPtr4[Ptr[GValue], guint, Ptr[GTypeCValue], guint, Ptr[gchar]]): Unit = !struct.at6 = value
    def lcopy_format : Ptr[gchar] = struct._7
    def lcopy_format_=(value: Ptr[gchar]): Unit = !struct.at7 = value
    def lcopy_value : CFuncPtr4[Ptr[GValue], guint, Ptr[GTypeCValue], guint, Ptr[gchar]] = struct._8
    def lcopy_value_=(value: CFuncPtr4[Ptr[GValue], guint, Ptr[GTypeCValue], guint, Ptr[gchar]]): Unit = !struct.at8 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GUnixCredentialsMessage = CStruct0
object _GUnixCredentialsMessage:
  given _tag: Tag[_GUnixCredentialsMessage] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GUnixFDList = CStruct0
object _GUnixFDList:
  given _tag: Tag[_GUnixFDList] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
*/
opaque type _GUri = CStruct0
object _GUri:
  given _tag: Tag[_GUri] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
*/
opaque type _GUriParamsIter = CStruct4[gint, gpointer, gpointer, CArray[guint8, Nat.Digit3[Nat._2, Nat._5, Nat._6]]]
object _GUriParamsIter:
  given _tag: Tag[_GUriParamsIter] = Tag.materializeCStruct4Tag[gint, gpointer, gpointer, CArray[guint8, Nat.Digit3[Nat._2, Nat._5, Nat._6]]]
  def apply()(using Zone): Ptr[_GUriParamsIter] = scala.scalanative.unsafe.alloc[_GUriParamsIter](1)
  def apply(dummy0 : gint, dummy1 : gpointer, dummy2 : gpointer, dummy3 : CArray[guint8, Nat.Digit3[Nat._2, Nat._5, Nat._6]])(using Zone): Ptr[_GUriParamsIter] = 
    val ____ptr = apply()
    (!____ptr).dummy0 = dummy0
    (!____ptr).dummy1 = dummy1
    (!____ptr).dummy2 = dummy2
    (!____ptr).dummy3 = dummy3
    ____ptr
  extension (struct: _GUriParamsIter)
    def dummy0 : gint = struct._1
    def dummy0_=(value: gint): Unit = !struct.at1 = value
    def dummy1 : gpointer = struct._2
    def dummy1_=(value: gpointer): Unit = !struct.at2 = value
    def dummy2 : gpointer = struct._3
    def dummy2_=(value: gpointer): Unit = !struct.at3 = value
    def dummy3 : CArray[guint8, Nat.Digit3[Nat._2, Nat._5, Nat._6]] = struct._4
    def dummy3_=(value: CArray[guint8, Nat.Digit3[Nat._2, Nat._5, Nat._6]]): Unit = !struct.at4 = value

/**
 * GValue:

 * [bindgen] header: /usr/include/glib-2.0/gobject/gvalue.h
*/
opaque type _GValue = CStruct2[GType, CArray[_GValue.Union0, Nat._2]]
object _GValue:
  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvalue.h
  */
  opaque type Union0 = CArray[Byte, Nat._8]
  object Union0:
    given _tag: Tag[Union0] = Tag.CArray[CChar, Nat._8](Tag.Byte, Tag.Nat8)
    def apply()(using Zone): Ptr[Union0] = 
      val ___ptr = alloc[Union0](1)
      ___ptr
    @scala.annotation.targetName("apply_v_int")
    def apply(v_int: gint)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[gint]].update(0, v_int)
      ___ptr
    @scala.annotation.targetName("apply_v_uint")
    def apply(v_uint: guint)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[guint]].update(0, v_uint)
      ___ptr
    @scala.annotation.targetName("apply_v_long")
    def apply(v_long: glong)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[glong]].update(0, v_long)
      ___ptr
    @scala.annotation.targetName("apply_v_ulong")
    def apply(v_ulong: gulong)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[gulong]].update(0, v_ulong)
      ___ptr
    @scala.annotation.targetName("apply_v_int64")
    def apply(v_int64: gint64)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[gint64]].update(0, v_int64)
      ___ptr
    @scala.annotation.targetName("apply_v_uint64")
    def apply(v_uint64: guint64)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[guint64]].update(0, v_uint64)
      ___ptr
    @scala.annotation.targetName("apply_v_float")
    def apply(v_float: gfloat)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[gfloat]].update(0, v_float)
      ___ptr
    @scala.annotation.targetName("apply_v_double")
    def apply(v_double: gdouble)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[gdouble]].update(0, v_double)
      ___ptr
    @scala.annotation.targetName("apply_v_pointer")
    def apply(v_pointer: gpointer)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[gpointer]].update(0, v_pointer)
      ___ptr
    extension (struct: Union0)
      def v_int : gint = !struct.at(0).asInstanceOf[Ptr[gint]]
      def v_int_=(value: gint): Unit = !struct.at(0).asInstanceOf[Ptr[gint]] = value
      def v_uint : guint = !struct.at(0).asInstanceOf[Ptr[guint]]
      def v_uint_=(value: guint): Unit = !struct.at(0).asInstanceOf[Ptr[guint]] = value
      def v_long : glong = !struct.at(0).asInstanceOf[Ptr[glong]]
      def v_long_=(value: glong): Unit = !struct.at(0).asInstanceOf[Ptr[glong]] = value
      def v_ulong : gulong = !struct.at(0).asInstanceOf[Ptr[gulong]]
      def v_ulong_=(value: gulong): Unit = !struct.at(0).asInstanceOf[Ptr[gulong]] = value
      def v_int64 : gint64 = !struct.at(0).asInstanceOf[Ptr[gint64]]
      def v_int64_=(value: gint64): Unit = !struct.at(0).asInstanceOf[Ptr[gint64]] = value
      def v_uint64 : guint64 = !struct.at(0).asInstanceOf[Ptr[guint64]]
      def v_uint64_=(value: guint64): Unit = !struct.at(0).asInstanceOf[Ptr[guint64]] = value
      def v_float : gfloat = !struct.at(0).asInstanceOf[Ptr[gfloat]]
      def v_float_=(value: gfloat): Unit = !struct.at(0).asInstanceOf[Ptr[gfloat]] = value
      def v_double : gdouble = !struct.at(0).asInstanceOf[Ptr[gdouble]]
      def v_double_=(value: gdouble): Unit = !struct.at(0).asInstanceOf[Ptr[gdouble]] = value
      def v_pointer : gpointer = !struct.at(0).asInstanceOf[Ptr[gpointer]]
      def v_pointer_=(value: gpointer): Unit = !struct.at(0).asInstanceOf[Ptr[gpointer]] = value
  given _tag: Tag[_GValue] = Tag.materializeCStruct2Tag[GType, CArray[_GValue.Union0, Nat._2]]
  def apply()(using Zone): Ptr[_GValue] = scala.scalanative.unsafe.alloc[_GValue](1)
  def apply(g_type : GType, data : CArray[_GValue.Union0, Nat._2])(using Zone): Ptr[_GValue] = 
    val ____ptr = apply()
    (!____ptr).g_type = g_type
    (!____ptr).data = data
    ____ptr
  extension (struct: _GValue)
    def g_type : GType = struct._1
    def g_type_=(value: GType): Unit = !struct.at1 = value
    def data : CArray[_GValue.Union0, Nat._2] = struct._2
    def data_=(value: CArray[_GValue.Union0, Nat._2]): Unit = !struct.at2 = value

/**
 * GValueArray: _values: number of values contained in the array : array of values

 * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluearray.h
*/
opaque type _GValueArray = CStruct3[guint, Ptr[GValue], guint]
object _GValueArray:
  given _tag: Tag[_GValueArray] = Tag.materializeCStruct3Tag[guint, Ptr[GValue], guint]
  def apply()(using Zone): Ptr[_GValueArray] = scala.scalanative.unsafe.alloc[_GValueArray](1)
  def apply(n_values : guint, values : Ptr[GValue], n_prealloced : guint)(using Zone): Ptr[_GValueArray] = 
    val ____ptr = apply()
    (!____ptr).n_values = n_values
    (!____ptr).values = values
    (!____ptr).n_prealloced = n_prealloced
    ____ptr
  extension (struct: _GValueArray)
    def n_values : guint = struct._1
    def n_values_=(value: guint): Unit = !struct.at1 = value
    def values : Ptr[GValue] = struct._2
    def values_=(value: Ptr[GValue]): Unit = !struct.at2 = value
    def n_prealloced : guint = struct._3
    def n_prealloced_=(value: guint): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
*/
opaque type _GVariant = CStruct0
object _GVariant:
  given _tag: Tag[_GVariant] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
*/
opaque type _GVariantBuilder = CStruct1[_GVariantBuilder.Union0]
object _GVariantBuilder:
  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  opaque type Union0 = CArray[Byte, Nat.Digit3[Nat._1, Nat._2, Nat._8]]
  object Union0:
    /**
     * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
    */
    opaque type Struct0 = CStruct3[gsize, Ptr[GVariantType], CArray[gsize, Nat.Digit2[Nat._1, Nat._4]]]
    object Struct0:
      given _tag: Tag[Struct0] = Tag.materializeCStruct3Tag[gsize, Ptr[GVariantType], CArray[gsize, Nat.Digit2[Nat._1, Nat._4]]]
      def apply()(using Zone): Ptr[Struct0] = scala.scalanative.unsafe.alloc[Struct0](1)
      def apply(partial_magic : gsize, `type` : Ptr[GVariantType], y : CArray[gsize, Nat.Digit2[Nat._1, Nat._4]])(using Zone): Ptr[Struct0] = 
        val ____ptr = apply()
        (!____ptr).partial_magic = partial_magic
        (!____ptr).`type` = `type`
        (!____ptr).y = y
        ____ptr
      extension (struct: Struct0)
        def partial_magic : gsize = struct._1
        def partial_magic_=(value: gsize): Unit = !struct.at1 = value
        def `type` : Ptr[GVariantType] = struct._2
        def type_=(value: Ptr[GVariantType]): Unit = !struct.at2 = value
        def y : CArray[gsize, Nat.Digit2[Nat._1, Nat._4]] = struct._3
        def y_=(value: CArray[gsize, Nat.Digit2[Nat._1, Nat._4]]): Unit = !struct.at3 = value
    given _tag: Tag[Union0] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._2, Nat._8]](Tag.Byte, Tag.Digit3[Nat._1, Nat._2, Nat._8](Tag.Nat1, Tag.Nat2, Tag.Nat8))
    def apply()(using Zone): Ptr[Union0] = 
      val ___ptr = alloc[Union0](1)
      ___ptr
    @scala.annotation.targetName("apply_s")
    def apply(s: _GVariantBuilder.Union0.Struct0)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[_GVariantBuilder.Union0.Struct0]].update(0, s)
      ___ptr
    @scala.annotation.targetName("apply_x")
    def apply(x: CArray[gsize, Nat.Digit2[Nat._1, Nat._6]])(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]]].update(0, x)
      ___ptr
    extension (struct: Union0)
      def s : _GVariantBuilder.Union0.Struct0 = !struct.at(0).asInstanceOf[Ptr[_GVariantBuilder.Union0.Struct0]]
      def s_=(value: _GVariantBuilder.Union0.Struct0): Unit = !struct.at(0).asInstanceOf[Ptr[_GVariantBuilder.Union0.Struct0]] = value
      def x : CArray[gsize, Nat.Digit2[Nat._1, Nat._6]] = !struct.at(0).asInstanceOf[Ptr[CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]]]
      def x_=(value: CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]): Unit = !struct.at(0).asInstanceOf[Ptr[CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]]] = value
  given _tag: Tag[_GVariantBuilder] = Tag.materializeCStruct1Tag[_GVariantBuilder.Union0]
  def apply()(using Zone): Ptr[_GVariantBuilder] = scala.scalanative.unsafe.alloc[_GVariantBuilder](1)
  def apply(u : _GVariantBuilder.Union0)(using Zone): Ptr[_GVariantBuilder] = 
    val ____ptr = apply()
    (!____ptr).u = u
    ____ptr
  extension (struct: _GVariantBuilder)
    def u : _GVariantBuilder.Union0 = struct._1
    def u_=(value: _GVariantBuilder.Union0): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
*/
opaque type _GVariantDict = CStruct1[_GVariantDict.Union0]
object _GVariantDict:
  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  opaque type Union0 = CArray[Byte, Nat.Digit3[Nat._1, Nat._2, Nat._8]]
  object Union0:
    /**
     * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
    */
    opaque type Struct0 = CStruct3[Ptr[GVariant], gsize, CArray[gsize, Nat.Digit2[Nat._1, Nat._4]]]
    object Struct0:
      given _tag: Tag[Struct0] = Tag.materializeCStruct3Tag[Ptr[GVariant], gsize, CArray[gsize, Nat.Digit2[Nat._1, Nat._4]]]
      def apply()(using Zone): Ptr[Struct0] = scala.scalanative.unsafe.alloc[Struct0](1)
      def apply(asv : Ptr[GVariant], partial_magic : gsize, y : CArray[gsize, Nat.Digit2[Nat._1, Nat._4]])(using Zone): Ptr[Struct0] = 
        val ____ptr = apply()
        (!____ptr).asv = asv
        (!____ptr).partial_magic = partial_magic
        (!____ptr).y = y
        ____ptr
      extension (struct: Struct0)
        def asv : Ptr[GVariant] = struct._1
        def asv_=(value: Ptr[GVariant]): Unit = !struct.at1 = value
        def partial_magic : gsize = struct._2
        def partial_magic_=(value: gsize): Unit = !struct.at2 = value
        def y : CArray[gsize, Nat.Digit2[Nat._1, Nat._4]] = struct._3
        def y_=(value: CArray[gsize, Nat.Digit2[Nat._1, Nat._4]]): Unit = !struct.at3 = value
    given _tag: Tag[Union0] = Tag.CArray[CChar, Nat.Digit3[Nat._1, Nat._2, Nat._8]](Tag.Byte, Tag.Digit3[Nat._1, Nat._2, Nat._8](Tag.Nat1, Tag.Nat2, Tag.Nat8))
    def apply()(using Zone): Ptr[Union0] = 
      val ___ptr = alloc[Union0](1)
      ___ptr
    @scala.annotation.targetName("apply_s")
    def apply(s: _GVariantDict.Union0.Struct0)(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[_GVariantDict.Union0.Struct0]].update(0, s)
      ___ptr
    @scala.annotation.targetName("apply_x")
    def apply(x: CArray[gsize, Nat.Digit2[Nat._1, Nat._6]])(using Zone): Ptr[Union0] =
      val ___ptr = alloc[Union0](1)
      val un = !___ptr
      un.at(0).asInstanceOf[Ptr[CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]]].update(0, x)
      ___ptr
    extension (struct: Union0)
      def s : _GVariantDict.Union0.Struct0 = !struct.at(0).asInstanceOf[Ptr[_GVariantDict.Union0.Struct0]]
      def s_=(value: _GVariantDict.Union0.Struct0): Unit = !struct.at(0).asInstanceOf[Ptr[_GVariantDict.Union0.Struct0]] = value
      def x : CArray[gsize, Nat.Digit2[Nat._1, Nat._6]] = !struct.at(0).asInstanceOf[Ptr[CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]]]
      def x_=(value: CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]): Unit = !struct.at(0).asInstanceOf[Ptr[CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]]] = value
  given _tag: Tag[_GVariantDict] = Tag.materializeCStruct1Tag[_GVariantDict.Union0]
  def apply()(using Zone): Ptr[_GVariantDict] = scala.scalanative.unsafe.alloc[_GVariantDict](1)
  def apply(u : _GVariantDict.Union0)(using Zone): Ptr[_GVariantDict] = 
    val ____ptr = apply()
    (!____ptr).u = u
    ____ptr
  extension (struct: _GVariantDict)
    def u : _GVariantDict.Union0 = struct._1
    def u_=(value: _GVariantDict.Union0): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
*/
opaque type _GVariantIter = CStruct1[CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]]
object _GVariantIter:
  given _tag: Tag[_GVariantIter] = Tag.materializeCStruct1Tag[CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]]
  def apply()(using Zone): Ptr[_GVariantIter] = scala.scalanative.unsafe.alloc[_GVariantIter](1)
  def apply(x : CArray[gsize, Nat.Digit2[Nat._1, Nat._6]])(using Zone): Ptr[_GVariantIter] = 
    val ____ptr = apply()
    (!____ptr).x = x
    ____ptr
  extension (struct: _GVariantIter)
    def x : CArray[gsize, Nat.Digit2[Nat._1, Nat._6]] = struct._1
    def x_=(value: CArray[gsize, Nat.Digit2[Nat._1, Nat._6]]): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
*/
opaque type _GVariantType = CStruct0
object _GVariantType:
  given _tag: Tag[_GVariantType] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gvfs.h
*/
opaque type _GVfs = CStruct1[GObject]
object _GVfs:
  given _tag: Tag[_GVfs] = Tag.materializeCStruct1Tag[GObject]
  def apply()(using Zone): Ptr[_GVfs] = scala.scalanative.unsafe.alloc[_GVfs](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[_GVfs] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _GVfs)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gvfs.h
*/
opaque type _GVfsClass = CStruct18[GObjectClass, CFuncPtr1[Ptr[GVfs], gboolean], CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]], CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]], CFuncPtr1[Ptr[GVfs], Ptr[Ptr[gchar]]], CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]], CFuncPtr8[Ptr[GVfs], CString, guint64, Ptr[GFileAttributeMatcher], Ptr[GFileInfo], Ptr[GCancellable], Ptr[gpointer], Ptr[GDestroyNotify], Unit], CFuncPtr2[Ptr[GVfs], Ptr[GFileAttributeInfoList], Unit], CFuncPtr6[Ptr[GVfs], CString, Ptr[GFileInfo], GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr2[Ptr[GVfs], CString, Unit], CFuncPtr3[Ptr[GVfs], CString, CString, Unit], CFuncPtr2[Ptr[GVfs], Ptr[GVariant], Ptr[GIcon]], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _GVfsClass:
  given _tag: Tag[_GVfsClass] = Tag.materializeCStruct18Tag[GObjectClass, CFuncPtr1[Ptr[GVfs], gboolean], CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]], CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]], CFuncPtr1[Ptr[GVfs], Ptr[Ptr[gchar]]], CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]], CFuncPtr8[Ptr[GVfs], CString, guint64, Ptr[GFileAttributeMatcher], Ptr[GFileInfo], Ptr[GCancellable], Ptr[gpointer], Ptr[GDestroyNotify], Unit], CFuncPtr2[Ptr[GVfs], Ptr[GFileAttributeInfoList], Unit], CFuncPtr6[Ptr[GVfs], CString, Ptr[GFileInfo], GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], CFuncPtr2[Ptr[GVfs], CString, Unit], CFuncPtr3[Ptr[GVfs], CString, CString, Unit], CFuncPtr2[Ptr[GVfs], Ptr[GVariant], Ptr[GIcon]], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_GVfsClass] = scala.scalanative.unsafe.alloc[_GVfsClass](1)
  def apply(parent_class : GObjectClass, is_active : CFuncPtr1[Ptr[GVfs], gboolean], get_file_for_path : CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]], get_file_for_uri : CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]], get_supported_uri_schemes : CFuncPtr1[Ptr[GVfs], Ptr[Ptr[gchar]]], parse_name : CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]], local_file_add_info : CFuncPtr8[Ptr[GVfs], CString, guint64, Ptr[GFileAttributeMatcher], Ptr[GFileInfo], Ptr[GCancellable], Ptr[gpointer], Ptr[GDestroyNotify], Unit], add_writable_namespaces : CFuncPtr2[Ptr[GVfs], Ptr[GFileAttributeInfoList], Unit], local_file_set_attributes : CFuncPtr6[Ptr[GVfs], CString, Ptr[GFileInfo], GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean], local_file_removed : CFuncPtr2[Ptr[GVfs], CString, Unit], local_file_moved : CFuncPtr3[Ptr[GVfs], CString, CString, Unit], deserialize_icon : CFuncPtr2[Ptr[GVfs], Ptr[GVariant], Ptr[GIcon]], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit])(using Zone): Ptr[_GVfsClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).is_active = is_active
    (!____ptr).get_file_for_path = get_file_for_path
    (!____ptr).get_file_for_uri = get_file_for_uri
    (!____ptr).get_supported_uri_schemes = get_supported_uri_schemes
    (!____ptr).parse_name = parse_name
    (!____ptr).local_file_add_info = local_file_add_info
    (!____ptr).add_writable_namespaces = add_writable_namespaces
    (!____ptr).local_file_set_attributes = local_file_set_attributes
    (!____ptr).local_file_removed = local_file_removed
    (!____ptr).local_file_moved = local_file_moved
    (!____ptr).deserialize_icon = deserialize_icon
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    ____ptr
  extension (struct: _GVfsClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def is_active : CFuncPtr1[Ptr[GVfs], gboolean] = struct._2
    def is_active_=(value: CFuncPtr1[Ptr[GVfs], gboolean]): Unit = !struct.at2 = value
    def get_file_for_path : CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]] = struct._3
    def get_file_for_path_=(value: CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]]): Unit = !struct.at3 = value
    def get_file_for_uri : CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]] = struct._4
    def get_file_for_uri_=(value: CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]]): Unit = !struct.at4 = value
    def get_supported_uri_schemes : CFuncPtr1[Ptr[GVfs], Ptr[Ptr[gchar]]] = struct._5
    def get_supported_uri_schemes_=(value: CFuncPtr1[Ptr[GVfs], Ptr[Ptr[gchar]]]): Unit = !struct.at5 = value
    def parse_name : CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]] = struct._6
    def parse_name_=(value: CFuncPtr2[Ptr[GVfs], CString, Ptr[GFile]]): Unit = !struct.at6 = value
    def local_file_add_info : CFuncPtr8[Ptr[GVfs], CString, guint64, Ptr[GFileAttributeMatcher], Ptr[GFileInfo], Ptr[GCancellable], Ptr[gpointer], Ptr[GDestroyNotify], Unit] = struct._7
    def local_file_add_info_=(value: CFuncPtr8[Ptr[GVfs], CString, guint64, Ptr[GFileAttributeMatcher], Ptr[GFileInfo], Ptr[GCancellable], Ptr[gpointer], Ptr[GDestroyNotify], Unit]): Unit = !struct.at7 = value
    def add_writable_namespaces : CFuncPtr2[Ptr[GVfs], Ptr[GFileAttributeInfoList], Unit] = struct._8
    def add_writable_namespaces_=(value: CFuncPtr2[Ptr[GVfs], Ptr[GFileAttributeInfoList], Unit]): Unit = !struct.at8 = value
    def local_file_set_attributes : CFuncPtr6[Ptr[GVfs], CString, Ptr[GFileInfo], GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean] = struct._9
    def local_file_set_attributes_=(value: CFuncPtr6[Ptr[GVfs], CString, Ptr[GFileInfo], GFileQueryInfoFlags, Ptr[GCancellable], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at9 = value
    def local_file_removed : CFuncPtr2[Ptr[GVfs], CString, Unit] = struct._10
    def local_file_removed_=(value: CFuncPtr2[Ptr[GVfs], CString, Unit]): Unit = !struct.at10 = value
    def local_file_moved : CFuncPtr3[Ptr[GVfs], CString, CString, Unit] = struct._11
    def local_file_moved_=(value: CFuncPtr3[Ptr[GVfs], CString, CString, Unit]): Unit = !struct.at11 = value
    def deserialize_icon : CFuncPtr2[Ptr[GVfs], Ptr[GVariant], Ptr[GIcon]] = struct._12
    def deserialize_icon_=(value: CFuncPtr2[Ptr[GVfs], Ptr[GVariant], Ptr[GIcon]]): Unit = !struct.at12 = value
    def _g_reserved1 : CFuncPtr0[Unit] = struct._13
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at13 = value
    def _g_reserved2 : CFuncPtr0[Unit] = struct._14
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at14 = value
    def _g_reserved3 : CFuncPtr0[Unit] = struct._15
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at15 = value
    def _g_reserved4 : CFuncPtr0[Unit] = struct._16
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at16 = value
    def _g_reserved5 : CFuncPtr0[Unit] = struct._17
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at17 = value
    def _g_reserved6 : CFuncPtr0[Unit] = struct._18
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at18 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GVolume = CStruct0
object _GVolume:
  given _tag: Tag[_GVolume] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
*/
opaque type _GVolumeIface = CStruct22[GTypeInterface, CFuncPtr1[Ptr[GVolume], Unit], CFuncPtr1[Ptr[GVolume], Unit], CFuncPtr1[Ptr[GVolume], CString], CFuncPtr1[Ptr[GVolume], Ptr[GIcon]], CFuncPtr1[Ptr[GVolume], CString], CFuncPtr1[Ptr[GVolume], Ptr[GDrive]], CFuncPtr1[Ptr[GVolume], Ptr[GMount]], CFuncPtr1[Ptr[GVolume], gboolean], CFuncPtr1[Ptr[GVolume], gboolean], CFuncPtr6[Ptr[GVolume], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr5[Ptr[GVolume], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr2[Ptr[GVolume], CString, CString], CFuncPtr1[Ptr[GVolume], Ptr[CString]], CFuncPtr1[Ptr[GVolume], gboolean], CFuncPtr1[Ptr[GVolume], Ptr[GFile]], CFuncPtr6[Ptr[GVolume], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr1[Ptr[GVolume], Ptr[gchar]], CFuncPtr1[Ptr[GVolume], Ptr[GIcon]]]
object _GVolumeIface:
  given _tag: Tag[_GVolumeIface] = Tag.materializeCStruct22Tag[GTypeInterface, CFuncPtr1[Ptr[GVolume], Unit], CFuncPtr1[Ptr[GVolume], Unit], CFuncPtr1[Ptr[GVolume], CString], CFuncPtr1[Ptr[GVolume], Ptr[GIcon]], CFuncPtr1[Ptr[GVolume], CString], CFuncPtr1[Ptr[GVolume], Ptr[GDrive]], CFuncPtr1[Ptr[GVolume], Ptr[GMount]], CFuncPtr1[Ptr[GVolume], gboolean], CFuncPtr1[Ptr[GVolume], gboolean], CFuncPtr6[Ptr[GVolume], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr5[Ptr[GVolume], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr2[Ptr[GVolume], CString, CString], CFuncPtr1[Ptr[GVolume], Ptr[CString]], CFuncPtr1[Ptr[GVolume], gboolean], CFuncPtr1[Ptr[GVolume], Ptr[GFile]], CFuncPtr6[Ptr[GVolume], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr1[Ptr[GVolume], Ptr[gchar]], CFuncPtr1[Ptr[GVolume], Ptr[GIcon]]]
  def apply()(using Zone): Ptr[_GVolumeIface] = scala.scalanative.unsafe.alloc[_GVolumeIface](1)
  def apply(g_iface : GTypeInterface, changed : CFuncPtr1[Ptr[GVolume], Unit], removed : CFuncPtr1[Ptr[GVolume], Unit], get_name : CFuncPtr1[Ptr[GVolume], CString], get_icon : CFuncPtr1[Ptr[GVolume], Ptr[GIcon]], get_uuid : CFuncPtr1[Ptr[GVolume], CString], get_drive : CFuncPtr1[Ptr[GVolume], Ptr[GDrive]], get_mount : CFuncPtr1[Ptr[GVolume], Ptr[GMount]], can_mount : CFuncPtr1[Ptr[GVolume], gboolean], can_eject : CFuncPtr1[Ptr[GVolume], gboolean], mount_fn : CFuncPtr6[Ptr[GVolume], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], mount_finish : CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], eject : CFuncPtr5[Ptr[GVolume], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], eject_finish : CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], get_identifier : CFuncPtr2[Ptr[GVolume], CString, CString], enumerate_identifiers : CFuncPtr1[Ptr[GVolume], Ptr[CString]], should_automount : CFuncPtr1[Ptr[GVolume], gboolean], get_activation_root : CFuncPtr1[Ptr[GVolume], Ptr[GFile]], eject_with_operation : CFuncPtr6[Ptr[GVolume], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], eject_with_operation_finish : CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], get_sort_key : CFuncPtr1[Ptr[GVolume], Ptr[gchar]], get_symbolic_icon : CFuncPtr1[Ptr[GVolume], Ptr[GIcon]])(using Zone): Ptr[_GVolumeIface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).changed = changed
    (!____ptr).removed = removed
    (!____ptr).get_name = get_name
    (!____ptr).get_icon = get_icon
    (!____ptr).get_uuid = get_uuid
    (!____ptr).get_drive = get_drive
    (!____ptr).get_mount = get_mount
    (!____ptr).can_mount = can_mount
    (!____ptr).can_eject = can_eject
    (!____ptr).mount_fn = mount_fn
    (!____ptr).mount_finish = mount_finish
    (!____ptr).eject = eject
    (!____ptr).eject_finish = eject_finish
    (!____ptr).get_identifier = get_identifier
    (!____ptr).enumerate_identifiers = enumerate_identifiers
    (!____ptr).should_automount = should_automount
    (!____ptr).get_activation_root = get_activation_root
    (!____ptr).eject_with_operation = eject_with_operation
    (!____ptr).eject_with_operation_finish = eject_with_operation_finish
    (!____ptr).get_sort_key = get_sort_key
    (!____ptr).get_symbolic_icon = get_symbolic_icon
    ____ptr
  extension (struct: _GVolumeIface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def changed : CFuncPtr1[Ptr[GVolume], Unit] = struct._2
    def changed_=(value: CFuncPtr1[Ptr[GVolume], Unit]): Unit = !struct.at2 = value
    def removed : CFuncPtr1[Ptr[GVolume], Unit] = struct._3
    def removed_=(value: CFuncPtr1[Ptr[GVolume], Unit]): Unit = !struct.at3 = value
    def get_name : CFuncPtr1[Ptr[GVolume], CString] = struct._4
    def get_name_=(value: CFuncPtr1[Ptr[GVolume], CString]): Unit = !struct.at4 = value
    def get_icon : CFuncPtr1[Ptr[GVolume], Ptr[GIcon]] = struct._5
    def get_icon_=(value: CFuncPtr1[Ptr[GVolume], Ptr[GIcon]]): Unit = !struct.at5 = value
    def get_uuid : CFuncPtr1[Ptr[GVolume], CString] = struct._6
    def get_uuid_=(value: CFuncPtr1[Ptr[GVolume], CString]): Unit = !struct.at6 = value
    def get_drive : CFuncPtr1[Ptr[GVolume], Ptr[GDrive]] = struct._7
    def get_drive_=(value: CFuncPtr1[Ptr[GVolume], Ptr[GDrive]]): Unit = !struct.at7 = value
    def get_mount : CFuncPtr1[Ptr[GVolume], Ptr[GMount]] = struct._8
    def get_mount_=(value: CFuncPtr1[Ptr[GVolume], Ptr[GMount]]): Unit = !struct.at8 = value
    def can_mount : CFuncPtr1[Ptr[GVolume], gboolean] = struct._9
    def can_mount_=(value: CFuncPtr1[Ptr[GVolume], gboolean]): Unit = !struct.at9 = value
    def can_eject : CFuncPtr1[Ptr[GVolume], gboolean] = struct._10
    def can_eject_=(value: CFuncPtr1[Ptr[GVolume], gboolean]): Unit = !struct.at10 = value
    def mount_fn : CFuncPtr6[Ptr[GVolume], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._11
    def mount_fn_=(value: CFuncPtr6[Ptr[GVolume], GMountMountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at11 = value
    def mount_finish : CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = struct._12
    def mount_finish_=(value: CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at12 = value
    def eject : CFuncPtr5[Ptr[GVolume], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._13
    def eject_=(value: CFuncPtr5[Ptr[GVolume], GMountUnmountFlags, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at13 = value
    def eject_finish : CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = struct._14
    def eject_finish_=(value: CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at14 = value
    def get_identifier : CFuncPtr2[Ptr[GVolume], CString, CString] = struct._15
    def get_identifier_=(value: CFuncPtr2[Ptr[GVolume], CString, CString]): Unit = !struct.at15 = value
    def enumerate_identifiers : CFuncPtr1[Ptr[GVolume], Ptr[CString]] = struct._16
    def enumerate_identifiers_=(value: CFuncPtr1[Ptr[GVolume], Ptr[CString]]): Unit = !struct.at16 = value
    def should_automount : CFuncPtr1[Ptr[GVolume], gboolean] = struct._17
    def should_automount_=(value: CFuncPtr1[Ptr[GVolume], gboolean]): Unit = !struct.at17 = value
    def get_activation_root : CFuncPtr1[Ptr[GVolume], Ptr[GFile]] = struct._18
    def get_activation_root_=(value: CFuncPtr1[Ptr[GVolume], Ptr[GFile]]): Unit = !struct.at18 = value
    def eject_with_operation : CFuncPtr6[Ptr[GVolume], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._19
    def eject_with_operation_=(value: CFuncPtr6[Ptr[GVolume], GMountUnmountFlags, Ptr[GMountOperation], Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at19 = value
    def eject_with_operation_finish : CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = struct._20
    def eject_with_operation_finish_=(value: CFuncPtr3[Ptr[GVolume], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at20 = value
    def get_sort_key : CFuncPtr1[Ptr[GVolume], Ptr[gchar]] = struct._21
    def get_sort_key_=(value: CFuncPtr1[Ptr[GVolume], Ptr[gchar]]): Unit = !struct.at21 = value
    def get_symbolic_icon : CFuncPtr1[Ptr[GVolume], Ptr[GIcon]] = struct._22
    def get_symbolic_icon_=(value: CFuncPtr1[Ptr[GVolume], Ptr[GIcon]]): Unit = !struct.at22 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gvolumemonitor.h
*/
opaque type _GVolumeMonitor = CStruct2[GObject, gpointer]
object _GVolumeMonitor:
  given _tag: Tag[_GVolumeMonitor] = Tag.materializeCStruct2Tag[GObject, gpointer]
  def apply()(using Zone): Ptr[_GVolumeMonitor] = scala.scalanative.unsafe.alloc[_GVolumeMonitor](1)
  def apply(parent_instance : GObject, priv : gpointer)(using Zone): Ptr[_GVolumeMonitor] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GVolumeMonitor)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : gpointer = struct._2
    def priv_=(value: gpointer): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gvolumemonitor.h
*/
opaque type _GVolumeMonitorClass = CArray[CChar, Nat.Digit3[Nat._3, Nat._3, Nat._6]]
object _GVolumeMonitorClass:
  given _tag: Tag[_GVolumeMonitorClass] = Tag.CArray[CChar, Nat.Digit3[Nat._3, Nat._3, Nat._6]](Tag.Byte, Tag.Digit3[Nat._3, Nat._3, Nat._6](Tag.Nat3, Tag.Nat3, Tag.Nat6))
  def apply()(using Zone): Ptr[_GVolumeMonitorClass] = scala.scalanative.unsafe.alloc[_GVolumeMonitorClass](1)
  def apply(parent_class : GObjectClass, volume_added : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit], volume_removed : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit], volume_changed : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit], mount_added : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit], mount_removed : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit], mount_pre_unmount : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit], mount_changed : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit], drive_connected : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit], drive_disconnected : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit], drive_changed : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit], is_supported : CFuncPtr0[gboolean], get_connected_drives : CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]], get_volumes : CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]], get_mounts : CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]], get_volume_for_uuid : CFuncPtr2[Ptr[GVolumeMonitor], CString, Ptr[GVolume]], get_mount_for_uuid : CFuncPtr2[Ptr[GVolumeMonitor], CString, Ptr[GMount]], adopt_orphan_mount : CFuncPtr2[Ptr[GMount], Ptr[GVolumeMonitor], Ptr[GVolume]], drive_eject_button : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit], drive_stop_button : CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit], _g_reserved1 : CFuncPtr0[Unit], _g_reserved2 : CFuncPtr0[Unit], _g_reserved3 : CFuncPtr0[Unit], _g_reserved4 : CFuncPtr0[Unit], _g_reserved5 : CFuncPtr0[Unit], _g_reserved6 : CFuncPtr0[Unit])(using Zone): Ptr[_GVolumeMonitorClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).volume_added = volume_added
    (!____ptr).volume_removed = volume_removed
    (!____ptr).volume_changed = volume_changed
    (!____ptr).mount_added = mount_added
    (!____ptr).mount_removed = mount_removed
    (!____ptr).mount_pre_unmount = mount_pre_unmount
    (!____ptr).mount_changed = mount_changed
    (!____ptr).drive_connected = drive_connected
    (!____ptr).drive_disconnected = drive_disconnected
    (!____ptr).drive_changed = drive_changed
    (!____ptr).is_supported = is_supported
    (!____ptr).get_connected_drives = get_connected_drives
    (!____ptr).get_volumes = get_volumes
    (!____ptr).get_mounts = get_mounts
    (!____ptr).get_volume_for_uuid = get_volume_for_uuid
    (!____ptr).get_mount_for_uuid = get_mount_for_uuid
    (!____ptr).adopt_orphan_mount = adopt_orphan_mount
    (!____ptr).drive_eject_button = drive_eject_button
    (!____ptr).drive_stop_button = drive_stop_button
    (!____ptr)._g_reserved1 = _g_reserved1
    (!____ptr)._g_reserved2 = _g_reserved2
    (!____ptr)._g_reserved3 = _g_reserved3
    (!____ptr)._g_reserved4 = _g_reserved4
    (!____ptr)._g_reserved5 = _g_reserved5
    (!____ptr)._g_reserved6 = _g_reserved6
    ____ptr
  extension (struct: _GVolumeMonitorClass)
    def parent_class: GObjectClass = !struct.at(0).asInstanceOf[Ptr[GObjectClass]]
    def parent_class_=(value: GObjectClass): Unit = !struct.at(0).asInstanceOf[Ptr[GObjectClass]] = value
    def volume_added: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit] = !struct.at(136).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit]]]
    def volume_added_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit]): Unit = !struct.at(136).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit]]] = value
    def volume_removed: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit] = !struct.at(144).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit]]]
    def volume_removed_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit]): Unit = !struct.at(144).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit]]] = value
    def volume_changed: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit] = !struct.at(152).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit]]]
    def volume_changed_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit]): Unit = !struct.at(152).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GVolume], Unit]]] = value
    def mount_added: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit] = !struct.at(160).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]]]
    def mount_added_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]): Unit = !struct.at(160).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]]] = value
    def mount_removed: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit] = !struct.at(168).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]]]
    def mount_removed_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]): Unit = !struct.at(168).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]]] = value
    def mount_pre_unmount: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit] = !struct.at(176).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]]]
    def mount_pre_unmount_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]): Unit = !struct.at(176).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]]] = value
    def mount_changed: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit] = !struct.at(184).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]]]
    def mount_changed_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]): Unit = !struct.at(184).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GMount], Unit]]] = value
    def drive_connected: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit] = !struct.at(192).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]]]
    def drive_connected_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]): Unit = !struct.at(192).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]]] = value
    def drive_disconnected: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit] = !struct.at(200).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]]]
    def drive_disconnected_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]): Unit = !struct.at(200).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]]] = value
    def drive_changed: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit] = !struct.at(208).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]]]
    def drive_changed_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]): Unit = !struct.at(208).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]]] = value
    def is_supported: CFuncPtr0[gboolean] = !struct.at(216).asInstanceOf[Ptr[CFuncPtr0[gboolean]]]
    def is_supported_=(value: CFuncPtr0[gboolean]): Unit = !struct.at(216).asInstanceOf[Ptr[CFuncPtr0[gboolean]]] = value
    def get_connected_drives: CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]] = !struct.at(224).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]]]]
    def get_connected_drives_=(value: CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]]): Unit = !struct.at(224).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]]]] = value
    def get_volumes: CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]] = !struct.at(232).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]]]]
    def get_volumes_=(value: CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]]): Unit = !struct.at(232).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]]]] = value
    def get_mounts: CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]] = !struct.at(240).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]]]]
    def get_mounts_=(value: CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]]): Unit = !struct.at(240).asInstanceOf[Ptr[CFuncPtr1[Ptr[GVolumeMonitor], Ptr[GList]]]] = value
    def get_volume_for_uuid: CFuncPtr2[Ptr[GVolumeMonitor], CString, Ptr[GVolume]] = !struct.at(248).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], CString, Ptr[GVolume]]]]
    def get_volume_for_uuid_=(value: CFuncPtr2[Ptr[GVolumeMonitor], CString, Ptr[GVolume]]): Unit = !struct.at(248).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], CString, Ptr[GVolume]]]] = value
    def get_mount_for_uuid: CFuncPtr2[Ptr[GVolumeMonitor], CString, Ptr[GMount]] = !struct.at(256).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], CString, Ptr[GMount]]]]
    def get_mount_for_uuid_=(value: CFuncPtr2[Ptr[GVolumeMonitor], CString, Ptr[GMount]]): Unit = !struct.at(256).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], CString, Ptr[GMount]]]] = value
    def adopt_orphan_mount: CFuncPtr2[Ptr[GMount], Ptr[GVolumeMonitor], Ptr[GVolume]] = !struct.at(264).asInstanceOf[Ptr[CFuncPtr2[Ptr[GMount], Ptr[GVolumeMonitor], Ptr[GVolume]]]]
    def adopt_orphan_mount_=(value: CFuncPtr2[Ptr[GMount], Ptr[GVolumeMonitor], Ptr[GVolume]]): Unit = !struct.at(264).asInstanceOf[Ptr[CFuncPtr2[Ptr[GMount], Ptr[GVolumeMonitor], Ptr[GVolume]]]] = value
    def drive_eject_button: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit] = !struct.at(272).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]]]
    def drive_eject_button_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]): Unit = !struct.at(272).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]]] = value
    def drive_stop_button: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit] = !struct.at(280).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]]]
    def drive_stop_button_=(value: CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]): Unit = !struct.at(280).asInstanceOf[Ptr[CFuncPtr2[Ptr[GVolumeMonitor], Ptr[GDrive], Unit]]] = value
    def _g_reserved1: CFuncPtr0[Unit] = !struct.at(288).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at(288).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved2: CFuncPtr0[Unit] = !struct.at(296).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at(296).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved3: CFuncPtr0[Unit] = !struct.at(304).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at(304).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved4: CFuncPtr0[Unit] = !struct.at(312).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at(312).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved5: CFuncPtr0[Unit] = !struct.at(320).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved5_=(value: CFuncPtr0[Unit]): Unit = !struct.at(320).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value
    def _g_reserved6: CFuncPtr0[Unit] = !struct.at(328).asInstanceOf[Ptr[CFuncPtr0[Unit]]]
    def _g_reserved6_=(value: CFuncPtr0[Unit]): Unit = !struct.at(328).asInstanceOf[Ptr[CFuncPtr0[Unit]]] = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GZlibCompressor = CStruct0
object _GZlibCompressor:
  given _tag: Tag[_GZlibCompressor] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gzlibcompressor.h
*/
opaque type _GZlibCompressorClass = CStruct1[GObjectClass]
object _GZlibCompressorClass:
  given _tag: Tag[_GZlibCompressorClass] = Tag.materializeCStruct1Tag[GObjectClass]
  def apply()(using Zone): Ptr[_GZlibCompressorClass] = scala.scalanative.unsafe.alloc[_GZlibCompressorClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[_GZlibCompressorClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: _GZlibCompressorClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/giotypes.h
*/
opaque type _GZlibDecompressor = CStruct0
object _GZlibDecompressor:
  given _tag: Tag[_GZlibDecompressor] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/glib-2.0/gio/gzlibdecompressor.h
*/
opaque type _GZlibDecompressorClass = CStruct1[GObjectClass]
object _GZlibDecompressorClass:
  given _tag: Tag[_GZlibDecompressorClass] = Tag.materializeCStruct1Tag[GObjectClass]
  def apply()(using Zone): Ptr[_GZlibDecompressorClass] = scala.scalanative.unsafe.alloc[_GZlibDecompressorClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[_GZlibDecompressorClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: _GZlibDecompressorClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type _GdkAppLaunchContext = CStruct0
object _GdkAppLaunchContext:
  given _tag: Tag[_GdkAppLaunchContext] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type _GdkButtonEvent = CStruct0
object _GdkButtonEvent:
  given _tag: Tag[_GdkButtonEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type _GdkCairoContext = CStruct0
object _GdkCairoContext:
  given _tag: Tag[_GdkCairoContext] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type _GdkClipboard = CStruct0
object _GdkClipboard:
  given _tag: Tag[_GdkClipboard] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentdeserializer.h
*/
opaque type _GdkContentDeserializer = CStruct0
object _GdkContentDeserializer:
  given _tag: Tag[_GdkContentDeserializer] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type _GdkContentFormats = CStruct0
object _GdkContentFormats:
  given _tag: Tag[_GdkContentFormats] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
*/
opaque type _GdkContentFormatsBuilder = CStruct0
object _GdkContentFormatsBuilder:
  given _tag: Tag[_GdkContentFormatsBuilder] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentprovider.h
*/
opaque type _GdkContentProvider = CStruct1[GObject]
object _GdkContentProvider:
  given _tag: Tag[_GdkContentProvider] = Tag.materializeCStruct1Tag[GObject]
  def apply()(using Zone): Ptr[_GdkContentProvider] = scala.scalanative.unsafe.alloc[_GdkContentProvider](1)
  def apply(parent : GObject)(using Zone): Ptr[_GdkContentProvider] = 
    val ____ptr = apply()
    (!____ptr).parent = parent
    ____ptr
  extension (struct: _GdkContentProvider)
    def parent : GObject = struct._1
    def parent_=(value: GObject): Unit = !struct.at1 = value

/**
 * GdkContentProviderClass: _changed: Signal class closure for `GdkContentProvider::content-changed`

 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentprovider.h
*/
opaque type _GdkContentProviderClass = CStruct10[GObjectClass, CFuncPtr1[Ptr[GdkContentProvider], Unit], CFuncPtr2[Ptr[GdkContentProvider], Ptr[GdkClipboard], Unit], CFuncPtr2[Ptr[GdkContentProvider], Ptr[GdkClipboard], Unit], CFuncPtr1[Ptr[GdkContentProvider], Ptr[GdkContentFormats]], CFuncPtr1[Ptr[GdkContentProvider], Ptr[GdkContentFormats]], CFuncPtr7[Ptr[GdkContentProvider], CString, Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GdkContentProvider], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr3[Ptr[GdkContentProvider], Ptr[GValue], Ptr[Ptr[GError]], gboolean], CArray[gpointer, Nat._8]]
object _GdkContentProviderClass:
  given _tag: Tag[_GdkContentProviderClass] = Tag.materializeCStruct10Tag[GObjectClass, CFuncPtr1[Ptr[GdkContentProvider], Unit], CFuncPtr2[Ptr[GdkContentProvider], Ptr[GdkClipboard], Unit], CFuncPtr2[Ptr[GdkContentProvider], Ptr[GdkClipboard], Unit], CFuncPtr1[Ptr[GdkContentProvider], Ptr[GdkContentFormats]], CFuncPtr1[Ptr[GdkContentProvider], Ptr[GdkContentFormats]], CFuncPtr7[Ptr[GdkContentProvider], CString, Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], CFuncPtr3[Ptr[GdkContentProvider], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], CFuncPtr3[Ptr[GdkContentProvider], Ptr[GValue], Ptr[Ptr[GError]], gboolean], CArray[gpointer, Nat._8]]
  def apply()(using Zone): Ptr[_GdkContentProviderClass] = scala.scalanative.unsafe.alloc[_GdkContentProviderClass](1)
  def apply(parent_class : GObjectClass, content_changed : CFuncPtr1[Ptr[GdkContentProvider], Unit], attach_clipboard : CFuncPtr2[Ptr[GdkContentProvider], Ptr[GdkClipboard], Unit], detach_clipboard : CFuncPtr2[Ptr[GdkContentProvider], Ptr[GdkClipboard], Unit], ref_formats : CFuncPtr1[Ptr[GdkContentProvider], Ptr[GdkContentFormats]], ref_storable_formats : CFuncPtr1[Ptr[GdkContentProvider], Ptr[GdkContentFormats]], write_mime_type_async : CFuncPtr7[Ptr[GdkContentProvider], CString, Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit], write_mime_type_finish : CFuncPtr3[Ptr[GdkContentProvider], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean], get_value : CFuncPtr3[Ptr[GdkContentProvider], Ptr[GValue], Ptr[Ptr[GError]], gboolean], padding : CArray[gpointer, Nat._8])(using Zone): Ptr[_GdkContentProviderClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).content_changed = content_changed
    (!____ptr).attach_clipboard = attach_clipboard
    (!____ptr).detach_clipboard = detach_clipboard
    (!____ptr).ref_formats = ref_formats
    (!____ptr).ref_storable_formats = ref_storable_formats
    (!____ptr).write_mime_type_async = write_mime_type_async
    (!____ptr).write_mime_type_finish = write_mime_type_finish
    (!____ptr).get_value = get_value
    (!____ptr).padding = padding
    ____ptr
  extension (struct: _GdkContentProviderClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def content_changed : CFuncPtr1[Ptr[GdkContentProvider], Unit] = struct._2
    def content_changed_=(value: CFuncPtr1[Ptr[GdkContentProvider], Unit]): Unit = !struct.at2 = value
    def attach_clipboard : CFuncPtr2[Ptr[GdkContentProvider], Ptr[GdkClipboard], Unit] = struct._3
    def attach_clipboard_=(value: CFuncPtr2[Ptr[GdkContentProvider], Ptr[GdkClipboard], Unit]): Unit = !struct.at3 = value
    def detach_clipboard : CFuncPtr2[Ptr[GdkContentProvider], Ptr[GdkClipboard], Unit] = struct._4
    def detach_clipboard_=(value: CFuncPtr2[Ptr[GdkContentProvider], Ptr[GdkClipboard], Unit]): Unit = !struct.at4 = value
    def ref_formats : CFuncPtr1[Ptr[GdkContentProvider], Ptr[GdkContentFormats]] = struct._5
    def ref_formats_=(value: CFuncPtr1[Ptr[GdkContentProvider], Ptr[GdkContentFormats]]): Unit = !struct.at5 = value
    def ref_storable_formats : CFuncPtr1[Ptr[GdkContentProvider], Ptr[GdkContentFormats]] = struct._6
    def ref_storable_formats_=(value: CFuncPtr1[Ptr[GdkContentProvider], Ptr[GdkContentFormats]]): Unit = !struct.at6 = value
    def write_mime_type_async : CFuncPtr7[Ptr[GdkContentProvider], CString, Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit] = struct._7
    def write_mime_type_async_=(value: CFuncPtr7[Ptr[GdkContentProvider], CString, Ptr[GOutputStream], CInt, Ptr[GCancellable], GAsyncReadyCallback, gpointer, Unit]): Unit = !struct.at7 = value
    def write_mime_type_finish : CFuncPtr3[Ptr[GdkContentProvider], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean] = struct._8
    def write_mime_type_finish_=(value: CFuncPtr3[Ptr[GdkContentProvider], Ptr[GAsyncResult], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at8 = value
    def get_value : CFuncPtr3[Ptr[GdkContentProvider], Ptr[GValue], Ptr[Ptr[GError]], gboolean] = struct._9
    def get_value_=(value: CFuncPtr3[Ptr[GdkContentProvider], Ptr[GValue], Ptr[Ptr[GError]], gboolean]): Unit = !struct.at9 = value
    def padding : CArray[gpointer, Nat._8] = struct._10
    def padding_=(value: CArray[gpointer, Nat._8]): Unit = !struct.at10 = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentserializer.h
*/
opaque type _GdkContentSerializer = CStruct0
object _GdkContentSerializer:
  given _tag: Tag[_GdkContentSerializer] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type _GdkCrossingEvent = CStruct0
object _GdkCrossingEvent:
  given _tag: Tag[_GdkCrossingEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type _GdkCursor = CStruct0
object _GdkCursor:
  given _tag: Tag[_GdkCursor] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type _GdkDNDEvent = CStruct0
object _GdkDNDEvent:
  given _tag: Tag[_GdkDNDEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type _GdkDeleteEvent = CStruct0
object _GdkDeleteEvent:
  given _tag: Tag[_GdkDeleteEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type _GdkDevice = CStruct0
object _GdkDevice:
  given _tag: Tag[_GdkDevice] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevicepad.h
*/
opaque type _GdkDevicePad = CStruct0
object _GdkDevicePad:
  given _tag: Tag[_GdkDevicePad] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevicepad.h
*/
opaque type _GdkDevicePadInterface = CStruct0
object _GdkDevicePadInterface:
  given _tag: Tag[_GdkDevicePadInterface] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevicetool.h
*/
opaque type _GdkDeviceTool = CStruct0
object _GdkDeviceTool:
  given _tag: Tag[_GdkDeviceTool] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type _GdkDisplay = CStruct0
object _GdkDisplay:
  given _tag: Tag[_GdkDisplay] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type _GdkDisplayManager = CStruct0
object _GdkDisplayManager:
  given _tag: Tag[_GdkDisplayManager] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type _GdkDrag = CStruct0
object _GdkDrag:
  given _tag: Tag[_GdkDrag] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdragsurface.h
*/
opaque type _GdkDragSurface = CStruct0
object _GdkDragSurface:
  given _tag: Tag[_GdkDragSurface] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdragsurface.h
*/
opaque type _GdkDragSurfaceInterface = CStruct0
object _GdkDragSurfaceInterface:
  given _tag: Tag[_GdkDragSurfaceInterface] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type _GdkDrawContext = CStruct0
object _GdkDrawContext:
  given _tag: Tag[_GdkDrawContext] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type _GdkDrop = CStruct0
object _GdkDrop:
  given _tag: Tag[_GdkDrop] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type _GdkEvent = CStruct0
object _GdkEvent:
  given _tag: Tag[_GdkEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type _GdkEventSequence = CStruct0
object _GdkEventSequence:
  given _tag: Tag[_GdkEventSequence] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
*/
opaque type _GdkFileList = CStruct0
object _GdkFileList:
  given _tag: Tag[_GdkFileList] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type _GdkFocusEvent = CStruct0
object _GdkFocusEvent:
  given _tag: Tag[_GdkFocusEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframeclock.h
*/
opaque type _GdkFrameClock = CStruct0
object _GdkFrameClock:
  given _tag: Tag[_GdkFrameClock] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframeclock.h
*/
opaque type _GdkFrameClockClass = CStruct0
object _GdkFrameClockClass:
  given _tag: Tag[_GdkFrameClockClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframeclock.h
*/
opaque type _GdkFrameClockPrivate = CStruct0
object _GdkFrameClockPrivate:
  given _tag: Tag[_GdkFrameClockPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframetimings.h
*/
opaque type _GdkFrameTimings = CStruct0
object _GdkFrameTimings:
  given _tag: Tag[_GdkFrameTimings] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type _GdkGLContext = CStruct0
object _GdkGLContext:
  given _tag: Tag[_GdkGLContext] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkgltexture.h
*/
opaque type _GdkGLTexture = CStruct0
object _GdkGLTexture:
  given _tag: Tag[_GdkGLTexture] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkgltexture.h
*/
opaque type _GdkGLTextureClass = CStruct0
object _GdkGLTextureClass:
  given _tag: Tag[_GdkGLTextureClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type _GdkGrabBrokenEvent = CStruct0
object _GdkGrabBrokenEvent:
  given _tag: Tag[_GdkGrabBrokenEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type _GdkKeyEvent = CStruct0
object _GdkKeyEvent:
  given _tag: Tag[_GdkKeyEvent] = Tag.materializeCStruct0Tag

/**
 * GdkKeymapKey: : the hardware keycode. This is an identifying number for a physical key. : indicates movement in a horizontal direction. Usually groups are used for two different languages. In group 0, a key might have two English characters, and in group 1 it might have two Hebrew characters. The Hebrew characters will be printed on the key next to the English characters. : indicates which symbol on the key will be used, in a vertical direction. So on a standard US keyboard, the key with the number “1” on it also has the exclamation point ("!") character on it. The level indicates whether to use the “1” or the “!” symbol. The letter keys are considered to have a lowercase letter at level 0, and an uppercase letter at level 1, though only the uppercase letter is printed.

 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type _GdkKeymapKey = CStruct3[guint, CInt, CInt]
object _GdkKeymapKey:
  given _tag: Tag[_GdkKeymapKey] = Tag.materializeCStruct3Tag[guint, CInt, CInt]
  def apply()(using Zone): Ptr[_GdkKeymapKey] = scala.scalanative.unsafe.alloc[_GdkKeymapKey](1)
  def apply(keycode : guint, group : CInt, level : CInt)(using Zone): Ptr[_GdkKeymapKey] = 
    val ____ptr = apply()
    (!____ptr).keycode = keycode
    (!____ptr).group = group
    (!____ptr).level = level
    ____ptr
  extension (struct: _GdkKeymapKey)
    def keycode : guint = struct._1
    def keycode_=(value: guint): Unit = !struct.at1 = value
    def group : CInt = struct._2
    def group_=(value: CInt): Unit = !struct.at2 = value
    def level : CInt = struct._3
    def level_=(value: CInt): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmemorytexture.h
*/
opaque type _GdkMemoryTexture = CStruct0
object _GdkMemoryTexture:
  given _tag: Tag[_GdkMemoryTexture] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmemorytexture.h
*/
opaque type _GdkMemoryTextureClass = CStruct0
object _GdkMemoryTextureClass:
  given _tag: Tag[_GdkMemoryTextureClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmonitor.h
*/
opaque type _GdkMonitor = CStruct0
object _GdkMonitor:
  given _tag: Tag[_GdkMonitor] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmonitor.h
*/
opaque type _GdkMonitorClass = CStruct0
object _GdkMonitorClass:
  given _tag: Tag[_GdkMonitorClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type _GdkMotionEvent = CStruct0
object _GdkMotionEvent:
  given _tag: Tag[_GdkMotionEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type _GdkPadEvent = CStruct0
object _GdkPadEvent:
  given _tag: Tag[_GdkPadEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
*/
opaque type _GdkPaintable = CStruct0
object _GdkPaintable:
  given _tag: Tag[_GdkPaintable] = Tag.materializeCStruct0Tag

/**
 * GdkPaintableInterface: : Snapshot the paintable. The given and are guaranteed to be larger than 0.0. The resulting snapshot must modify only the area in the rectangle from (0,0) to (width, height). This is the only function that must be implemented for this interface. _current_image: return a `GdkPaintable` that does not change over time. This means the `GDK_PAINTABLE_STATIC_SIZE` and `GDK_PAINTABLE_STATIC_CONTENTS` flag are set. _flags: Get the flags for this instance. See [enum.PaintableFlags] for details. _intrinsic_width: The preferred width for this object to be snapshot at or 0 if none. This is purely a hint. The object must still be able to render at any size. _intrinsic_height: The preferred height for this object to be snapshot at or 0 if none. This is purely a hint. The object must still be able to render at any size. _intrinsic_aspect_ratio: The preferred aspect ratio for this object or 0 if none. If both [vfunc.Paintable.get_intrinsic_width] and [vfunc.Paintable.get_intrinsic_height] return non-zero values, this function should return the aspect ratio computed from those.

 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
*/
opaque type _GdkPaintableInterface = CStruct7[GTypeInterface, CFuncPtr4[Ptr[GdkPaintable], Ptr[GdkSnapshot], Double, Double, Unit], CFuncPtr1[Ptr[GdkPaintable], Ptr[GdkPaintable]], CFuncPtr1[Ptr[GdkPaintable], GdkPaintableFlags], CFuncPtr1[Ptr[GdkPaintable], CInt], CFuncPtr1[Ptr[GdkPaintable], CInt], CFuncPtr1[Ptr[GdkPaintable], Double]]
object _GdkPaintableInterface:
  given _tag: Tag[_GdkPaintableInterface] = Tag.materializeCStruct7Tag[GTypeInterface, CFuncPtr4[Ptr[GdkPaintable], Ptr[GdkSnapshot], Double, Double, Unit], CFuncPtr1[Ptr[GdkPaintable], Ptr[GdkPaintable]], CFuncPtr1[Ptr[GdkPaintable], GdkPaintableFlags], CFuncPtr1[Ptr[GdkPaintable], CInt], CFuncPtr1[Ptr[GdkPaintable], CInt], CFuncPtr1[Ptr[GdkPaintable], Double]]
  def apply()(using Zone): Ptr[_GdkPaintableInterface] = scala.scalanative.unsafe.alloc[_GdkPaintableInterface](1)
  def apply(g_iface : GTypeInterface, snapshot : CFuncPtr4[Ptr[GdkPaintable], Ptr[GdkSnapshot], Double, Double, Unit], get_current_image : CFuncPtr1[Ptr[GdkPaintable], Ptr[GdkPaintable]], get_flags : CFuncPtr1[Ptr[GdkPaintable], GdkPaintableFlags], get_intrinsic_width : CFuncPtr1[Ptr[GdkPaintable], CInt], get_intrinsic_height : CFuncPtr1[Ptr[GdkPaintable], CInt], get_intrinsic_aspect_ratio : CFuncPtr1[Ptr[GdkPaintable], Double])(using Zone): Ptr[_GdkPaintableInterface] = 
    val ____ptr = apply()
    (!____ptr).g_iface = g_iface
    (!____ptr).snapshot = snapshot
    (!____ptr).get_current_image = get_current_image
    (!____ptr).get_flags = get_flags
    (!____ptr).get_intrinsic_width = get_intrinsic_width
    (!____ptr).get_intrinsic_height = get_intrinsic_height
    (!____ptr).get_intrinsic_aspect_ratio = get_intrinsic_aspect_ratio
    ____ptr
  extension (struct: _GdkPaintableInterface)
    def g_iface : GTypeInterface = struct._1
    def g_iface_=(value: GTypeInterface): Unit = !struct.at1 = value
    def snapshot : CFuncPtr4[Ptr[GdkPaintable], Ptr[GdkSnapshot], Double, Double, Unit] = struct._2
    def snapshot_=(value: CFuncPtr4[Ptr[GdkPaintable], Ptr[GdkSnapshot], Double, Double, Unit]): Unit = !struct.at2 = value
    def get_current_image : CFuncPtr1[Ptr[GdkPaintable], Ptr[GdkPaintable]] = struct._3
    def get_current_image_=(value: CFuncPtr1[Ptr[GdkPaintable], Ptr[GdkPaintable]]): Unit = !struct.at3 = value
    def get_flags : CFuncPtr1[Ptr[GdkPaintable], GdkPaintableFlags] = struct._4
    def get_flags_=(value: CFuncPtr1[Ptr[GdkPaintable], GdkPaintableFlags]): Unit = !struct.at4 = value
    def get_intrinsic_width : CFuncPtr1[Ptr[GdkPaintable], CInt] = struct._5
    def get_intrinsic_width_=(value: CFuncPtr1[Ptr[GdkPaintable], CInt]): Unit = !struct.at5 = value
    def get_intrinsic_height : CFuncPtr1[Ptr[GdkPaintable], CInt] = struct._6
    def get_intrinsic_height_=(value: CFuncPtr1[Ptr[GdkPaintable], CInt]): Unit = !struct.at6 = value
    def get_intrinsic_aspect_ratio : CFuncPtr1[Ptr[GdkPaintable], Double] = struct._7
    def get_intrinsic_aspect_ratio_=(value: CFuncPtr1[Ptr[GdkPaintable], Double]): Unit = !struct.at7 = value

/**
 * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
*/
opaque type _GdkPixbuf = CStruct0
object _GdkPixbuf:
  given _tag: Tag[_GdkPixbuf] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
*/
opaque type _GdkPixbufAnimation = CStruct0
object _GdkPixbufAnimation:
  given _tag: Tag[_GdkPixbufAnimation] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
*/
opaque type _GdkPixbufAnimationIter = CStruct0
object _GdkPixbufAnimationIter:
  given _tag: Tag[_GdkPixbufAnimationIter] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h
*/
opaque type _GdkPixbufFormat = CStruct0
object _GdkPixbufFormat:
  given _tag: Tag[_GdkPixbufFormat] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h
*/
opaque type _GdkPixbufLoader = CStruct2[GObject, gpointer]
object _GdkPixbufLoader:
  given _tag: Tag[_GdkPixbufLoader] = Tag.materializeCStruct2Tag[GObject, gpointer]
  def apply()(using Zone): Ptr[_GdkPixbufLoader] = scala.scalanative.unsafe.alloc[_GdkPixbufLoader](1)
  def apply(parent_instance : GObject, priv : gpointer)(using Zone): Ptr[_GdkPixbufLoader] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _GdkPixbufLoader)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def priv : gpointer = struct._2
    def priv_=(value: gpointer): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h
*/
opaque type _GdkPixbufLoaderClass = CStruct5[GObjectClass, CFuncPtr3[Ptr[GdkPixbufLoader], CInt, CInt, Unit], CFuncPtr1[Ptr[GdkPixbufLoader], Unit], CFuncPtr5[Ptr[GdkPixbufLoader], CInt, CInt, CInt, CInt, Unit], CFuncPtr1[Ptr[GdkPixbufLoader], Unit]]
object _GdkPixbufLoaderClass:
  given _tag: Tag[_GdkPixbufLoaderClass] = Tag.materializeCStruct5Tag[GObjectClass, CFuncPtr3[Ptr[GdkPixbufLoader], CInt, CInt, Unit], CFuncPtr1[Ptr[GdkPixbufLoader], Unit], CFuncPtr5[Ptr[GdkPixbufLoader], CInt, CInt, CInt, CInt, Unit], CFuncPtr1[Ptr[GdkPixbufLoader], Unit]]
  def apply()(using Zone): Ptr[_GdkPixbufLoaderClass] = scala.scalanative.unsafe.alloc[_GdkPixbufLoaderClass](1)
  def apply(parent_class : GObjectClass, size_prepared : CFuncPtr3[Ptr[GdkPixbufLoader], CInt, CInt, Unit], area_prepared : CFuncPtr1[Ptr[GdkPixbufLoader], Unit], area_updated : CFuncPtr5[Ptr[GdkPixbufLoader], CInt, CInt, CInt, CInt, Unit], closed : CFuncPtr1[Ptr[GdkPixbufLoader], Unit])(using Zone): Ptr[_GdkPixbufLoaderClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).size_prepared = size_prepared
    (!____ptr).area_prepared = area_prepared
    (!____ptr).area_updated = area_updated
    (!____ptr).closed = closed
    ____ptr
  extension (struct: _GdkPixbufLoaderClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def size_prepared : CFuncPtr3[Ptr[GdkPixbufLoader], CInt, CInt, Unit] = struct._2
    def size_prepared_=(value: CFuncPtr3[Ptr[GdkPixbufLoader], CInt, CInt, Unit]): Unit = !struct.at2 = value
    def area_prepared : CFuncPtr1[Ptr[GdkPixbufLoader], Unit] = struct._3
    def area_prepared_=(value: CFuncPtr1[Ptr[GdkPixbufLoader], Unit]): Unit = !struct.at3 = value
    def area_updated : CFuncPtr5[Ptr[GdkPixbufLoader], CInt, CInt, CInt, CInt, Unit] = struct._4
    def area_updated_=(value: CFuncPtr5[Ptr[GdkPixbufLoader], CInt, CInt, CInt, CInt, Unit]): Unit = !struct.at4 = value
    def closed : CFuncPtr1[Ptr[GdkPixbufLoader], Unit] = struct._5
    def closed_=(value: CFuncPtr1[Ptr[GdkPixbufLoader], Unit]): Unit = !struct.at5 = value

/**
 * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h
*/
opaque type _GdkPixbufSimpleAnim = CStruct0
object _GdkPixbufSimpleAnim:
  given _tag: Tag[_GdkPixbufSimpleAnim] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h
*/
opaque type _GdkPixbufSimpleAnimClass = CStruct0
object _GdkPixbufSimpleAnimClass:
  given _tag: Tag[_GdkPixbufSimpleAnimClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopup.h
*/
opaque type _GdkPopup = CStruct0
object _GdkPopup:
  given _tag: Tag[_GdkPopup] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopup.h
*/
opaque type _GdkPopupInterface = CStruct0
object _GdkPopupInterface:
  given _tag: Tag[_GdkPopupInterface] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopuplayout.h
*/
opaque type _GdkPopupLayout = CStruct0
object _GdkPopupLayout:
  given _tag: Tag[_GdkPopupLayout] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type _GdkProximityEvent = CStruct0
object _GdkProximityEvent:
  given _tag: Tag[_GdkProximityEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkrgba.h
*/
opaque type _GdkRGBA = CStruct4[Float, Float, Float, Float]
object _GdkRGBA:
  given _tag: Tag[_GdkRGBA] = Tag.materializeCStruct4Tag[Float, Float, Float, Float]
  def apply()(using Zone): Ptr[_GdkRGBA] = scala.scalanative.unsafe.alloc[_GdkRGBA](1)
  def apply(red : Float, green : Float, blue : Float, alpha : Float)(using Zone): Ptr[_GdkRGBA] = 
    val ____ptr = apply()
    (!____ptr).red = red
    (!____ptr).green = green
    (!____ptr).blue = blue
    (!____ptr).alpha = alpha
    ____ptr
  extension (struct: _GdkRGBA)
    def red : Float = struct._1
    def red_=(value: Float): Unit = !struct.at1 = value
    def green : Float = struct._2
    def green_=(value: Float): Unit = !struct.at2 = value
    def blue : Float = struct._3
    def blue_=(value: Float): Unit = !struct.at3 = value
    def alpha : Float = struct._4
    def alpha_=(value: Float): Unit = !struct.at4 = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type _GdkScrollEvent = CStruct0
object _GdkScrollEvent:
  given _tag: Tag[_GdkScrollEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkseat.h
*/
opaque type _GdkSeat = CStruct1[GObject]
object _GdkSeat:
  given _tag: Tag[_GdkSeat] = Tag.materializeCStruct1Tag[GObject]
  def apply()(using Zone): Ptr[_GdkSeat] = scala.scalanative.unsafe.alloc[_GdkSeat](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[_GdkSeat] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _GdkSeat)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type _GdkSnapshot = CStruct0
object _GdkSnapshot:
  given _tag: Tag[_GdkSnapshot] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksnapshot.h
*/
opaque type _GdkSnapshotClass = CStruct0
object _GdkSnapshotClass:
  given _tag: Tag[_GdkSnapshotClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type _GdkSurface = CStruct0
object _GdkSurface:
  given _tag: Tag[_GdkSurface] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
*/
opaque type _GdkSurfaceClass = CStruct0
object _GdkSurfaceClass:
  given _tag: Tag[_GdkSurfaceClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type _GdkTexture = CStruct0
object _GdkTexture:
  given _tag: Tag[_GdkTexture] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
*/
opaque type _GdkTextureClass = CStruct0
object _GdkTextureClass:
  given _tag: Tag[_GdkTextureClass] = Tag.materializeCStruct0Tag

/**
 * GdkTimeCoord: : The timestamp for this event : Flags indicating what axes are present : (array fixed-size=12): axis values

 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevice.h
*/
opaque type _GdkTimeCoord = CStruct3[guint32, GdkAxisFlags, CArray[Double, Nat.Digit2[Nat._1, Nat._2]]]
object _GdkTimeCoord:
  given _tag: Tag[_GdkTimeCoord] = Tag.materializeCStruct3Tag[guint32, GdkAxisFlags, CArray[Double, Nat.Digit2[Nat._1, Nat._2]]]
  def apply()(using Zone): Ptr[_GdkTimeCoord] = scala.scalanative.unsafe.alloc[_GdkTimeCoord](1)
  def apply(time : guint32, flags : GdkAxisFlags, axes : CArray[Double, Nat.Digit2[Nat._1, Nat._2]])(using Zone): Ptr[_GdkTimeCoord] = 
    val ____ptr = apply()
    (!____ptr).time = time
    (!____ptr).flags = flags
    (!____ptr).axes = axes
    ____ptr
  extension (struct: _GdkTimeCoord)
    def time : guint32 = struct._1
    def time_=(value: guint32): Unit = !struct.at1 = value
    def flags : GdkAxisFlags = struct._2
    def flags_=(value: GdkAxisFlags): Unit = !struct.at2 = value
    def axes : CArray[Double, Nat.Digit2[Nat._1, Nat._2]] = struct._3
    def axes_=(value: CArray[Double, Nat.Digit2[Nat._1, Nat._2]]): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
*/
opaque type _GdkToplevel = CStruct0
object _GdkToplevel:
  given _tag: Tag[_GdkToplevel] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
*/
opaque type _GdkToplevelInterface = CStruct0
object _GdkToplevelInterface:
  given _tag: Tag[_GdkToplevelInterface] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevellayout.h
*/
opaque type _GdkToplevelLayout = CStruct0
object _GdkToplevelLayout:
  given _tag: Tag[_GdkToplevelLayout] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevelsize.h
*/
opaque type _GdkToplevelSize = CStruct0
object _GdkToplevelSize:
  given _tag: Tag[_GdkToplevelSize] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type _GdkTouchEvent = CStruct0
object _GdkTouchEvent:
  given _tag: Tag[_GdkTouchEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
*/
opaque type _GdkTouchpadEvent = CStruct0
object _GdkTouchpadEvent:
  given _tag: Tag[_GdkTouchpadEvent] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktypes.h
*/
opaque type _GdkVulkanContext = CStruct0
object _GdkVulkanContext:
  given _tag: Tag[_GdkVulkanContext] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskBlendNode = CStruct0
object _GskBlendNode:
  given _tag: Tag[_GskBlendNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskBlurNode = CStruct0
object _GskBlurNode:
  given _tag: Tag[_GskBlurNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskBorderNode = CStruct0
object _GskBorderNode:
  given _tag: Tag[_GskBorderNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskCairoNode = CStruct0
object _GskCairoNode:
  given _tag: Tag[_GskCairoNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskcairorenderer.h
*/
opaque type _GskCairoRenderer = CStruct0
object _GskCairoRenderer:
  given _tag: Tag[_GskCairoRenderer] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskcairorenderer.h
*/
opaque type _GskCairoRendererClass = CStruct0
object _GskCairoRendererClass:
  given _tag: Tag[_GskCairoRendererClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskClipNode = CStruct0
object _GskClipNode:
  given _tag: Tag[_GskClipNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskColorMatrixNode = CStruct0
object _GskColorMatrixNode:
  given _tag: Tag[_GskColorMatrixNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskColorNode = CStruct0
object _GskColorNode:
  given _tag: Tag[_GskColorNode] = Tag.materializeCStruct0Tag

/**
 * GskColorStop: : the offset of the color stop : the color at the given offset

 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskColorStop = CStruct2[Float, GdkRGBA]
object _GskColorStop:
  given _tag: Tag[_GskColorStop] = Tag.materializeCStruct2Tag[Float, GdkRGBA]
  def apply()(using Zone): Ptr[_GskColorStop] = scala.scalanative.unsafe.alloc[_GskColorStop](1)
  def apply(offset : Float, color : GdkRGBA)(using Zone): Ptr[_GskColorStop] = 
    val ____ptr = apply()
    (!____ptr).offset = offset
    (!____ptr).color = color
    ____ptr
  extension (struct: _GskColorStop)
    def offset : Float = struct._1
    def offset_=(value: Float): Unit = !struct.at1 = value
    def color : GdkRGBA = struct._2
    def color_=(value: GdkRGBA): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskConicGradientNode = CStruct0
object _GskConicGradientNode:
  given _tag: Tag[_GskConicGradientNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskContainerNode = CStruct0
object _GskContainerNode:
  given _tag: Tag[_GskContainerNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskCrossFadeNode = CStruct0
object _GskCrossFadeNode:
  given _tag: Tag[_GskCrossFadeNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskDebugNode = CStruct0
object _GskDebugNode:
  given _tag: Tag[_GskDebugNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
*/
opaque type _GskGLShader = CStruct0
object _GskGLShader:
  given _tag: Tag[_GskGLShader] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskGLShaderNode = CStruct0
object _GskGLShaderNode:
  given _tag: Tag[_GskGLShaderNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskInsetShadowNode = CStruct0
object _GskInsetShadowNode:
  given _tag: Tag[_GskInsetShadowNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskLinearGradientNode = CStruct0
object _GskLinearGradientNode:
  given _tag: Tag[_GskLinearGradientNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskOpacityNode = CStruct0
object _GskOpacityNode:
  given _tag: Tag[_GskOpacityNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskOutsetShadowNode = CStruct0
object _GskOutsetShadowNode:
  given _tag: Tag[_GskOutsetShadowNode] = Tag.materializeCStruct0Tag

/**
 * GskParseLocation: : the offset of the location in the parse buffer, as bytes : the offset of the location in the parse buffer, as characters

 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskParseLocation = CStruct5[gsize, gsize, gsize, gsize, gsize]
object _GskParseLocation:
  given _tag: Tag[_GskParseLocation] = Tag.materializeCStruct5Tag[gsize, gsize, gsize, gsize, gsize]
  def apply()(using Zone): Ptr[_GskParseLocation] = scala.scalanative.unsafe.alloc[_GskParseLocation](1)
  def apply(bytes : gsize, chars : gsize, lines : gsize, line_bytes : gsize, line_chars : gsize)(using Zone): Ptr[_GskParseLocation] = 
    val ____ptr = apply()
    (!____ptr).bytes = bytes
    (!____ptr).chars = chars
    (!____ptr).lines = lines
    (!____ptr).line_bytes = line_bytes
    (!____ptr).line_chars = line_chars
    ____ptr
  extension (struct: _GskParseLocation)
    def bytes : gsize = struct._1
    def bytes_=(value: gsize): Unit = !struct.at1 = value
    def chars : gsize = struct._2
    def chars_=(value: gsize): Unit = !struct.at2 = value
    def lines : gsize = struct._3
    def lines_=(value: gsize): Unit = !struct.at3 = value
    def line_bytes : gsize = struct._4
    def line_bytes_=(value: gsize): Unit = !struct.at4 = value
    def line_chars : gsize = struct._5
    def line_chars_=(value: gsize): Unit = !struct.at5 = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskRadialGradientNode = CStruct0
object _GskRadialGradientNode:
  given _tag: Tag[_GskRadialGradientNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskRenderNode = CStruct0
object _GskRenderNode:
  given _tag: Tag[_GskRenderNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktypes.h
*/
opaque type _GskRenderer = CStruct0
object _GskRenderer:
  given _tag: Tag[_GskRenderer] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrenderer.h
*/
opaque type _GskRendererClass = CStruct0
object _GskRendererClass:
  given _tag: Tag[_GskRendererClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskRepeatNode = CStruct0
object _GskRepeatNode:
  given _tag: Tag[_GskRepeatNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskRepeatingLinearGradientNode = CStruct0
object _GskRepeatingLinearGradientNode:
  given _tag: Tag[_GskRepeatingLinearGradientNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskRepeatingRadialGradientNode = CStruct0
object _GskRepeatingRadialGradientNode:
  given _tag: Tag[_GskRepeatingRadialGradientNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskRoundedClipNode = CStruct0
object _GskRoundedClipNode:
  given _tag: Tag[_GskRoundedClipNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskroundedrect.h
*/
opaque type _GskRoundedRect = CStruct2[graphene_rect_t, CArray[graphene_size_t, Nat._4]]
object _GskRoundedRect:
  given _tag: Tag[_GskRoundedRect] = Tag.materializeCStruct2Tag[graphene_rect_t, CArray[graphene_size_t, Nat._4]]
  def apply()(using Zone): Ptr[_GskRoundedRect] = scala.scalanative.unsafe.alloc[_GskRoundedRect](1)
  def apply(bounds : graphene_rect_t, corner : CArray[graphene_size_t, Nat._4])(using Zone): Ptr[_GskRoundedRect] = 
    val ____ptr = apply()
    (!____ptr).bounds = bounds
    (!____ptr).corner = corner
    ____ptr
  extension (struct: _GskRoundedRect)
    def bounds : graphene_rect_t = struct._1
    def bounds_=(value: graphene_rect_t): Unit = !struct.at1 = value
    def corner : CArray[graphene_size_t, Nat._4] = struct._2
    def corner_=(value: CArray[graphene_size_t, Nat._4]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
*/
opaque type _GskShaderArgsBuilder = CStruct0
object _GskShaderArgsBuilder:
  given _tag: Tag[_GskShaderArgsBuilder] = Tag.materializeCStruct0Tag

/**
 * GskShadow: : the color of the shadow : the horizontal offset of the shadow : the vertical offset of the shadow : the radius of the shadow

 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskShadow = CStruct4[GdkRGBA, Float, Float, Float]
object _GskShadow:
  given _tag: Tag[_GskShadow] = Tag.materializeCStruct4Tag[GdkRGBA, Float, Float, Float]
  def apply()(using Zone): Ptr[_GskShadow] = scala.scalanative.unsafe.alloc[_GskShadow](1)
  def apply(color : GdkRGBA, dx : Float, dy : Float, radius : Float)(using Zone): Ptr[_GskShadow] = 
    val ____ptr = apply()
    (!____ptr).color = color
    (!____ptr).dx = dx
    (!____ptr).dy = dy
    (!____ptr).radius = radius
    ____ptr
  extension (struct: _GskShadow)
    def color : GdkRGBA = struct._1
    def color_=(value: GdkRGBA): Unit = !struct.at1 = value
    def dx : Float = struct._2
    def dx_=(value: Float): Unit = !struct.at2 = value
    def dy : Float = struct._3
    def dy_=(value: Float): Unit = !struct.at3 = value
    def radius : Float = struct._4
    def radius_=(value: Float): Unit = !struct.at4 = value

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskShadowNode = CStruct0
object _GskShadowNode:
  given _tag: Tag[_GskShadowNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskTextNode = CStruct0
object _GskTextNode:
  given _tag: Tag[_GskTextNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskTextureNode = CStruct0
object _GskTextureNode:
  given _tag: Tag[_GskTextureNode] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktypes.h
*/
opaque type _GskTransform = CStruct0
object _GskTransform:
  given _tag: Tag[_GskTransform] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
*/
opaque type _GskTransformNode = CStruct0
object _GskTransformNode:
  given _tag: Tag[_GskTransformNode] = Tag.materializeCStruct0Tag

/**
 * PangoAnalysis: _engine: unused, reserved _engine: unused, reserved : the font for this segment. : the bidirectional level for this segment. : the glyph orientation for this segment (A `PangoGravity`). : boolean flags for this segment (Since: 1.16). : the detected script for this segment (A `PangoScript`) (Since: 1.18). : the detected language for this segment. _attrs: extra attributes for this segment.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-item.h
*/
opaque type _PangoAnalysis = CStruct9[Ptr[PangoEngineShape], Ptr[PangoEngineLang], Ptr[PangoFont], guint8, guint8, guint8, guint8, Ptr[PangoLanguage], Ptr[Byte]]
object _PangoAnalysis:
  given _tag: Tag[_PangoAnalysis] = Tag.materializeCStruct9Tag[Ptr[PangoEngineShape], Ptr[PangoEngineLang], Ptr[PangoFont], guint8, guint8, guint8, guint8, Ptr[PangoLanguage], Ptr[Byte]]
  def apply()(using Zone): Ptr[_PangoAnalysis] = scala.scalanative.unsafe.alloc[_PangoAnalysis](1)
  def apply(shape_engine : Ptr[PangoEngineShape], lang_engine : Ptr[PangoEngineLang], font : Ptr[PangoFont], level : guint8, gravity : guint8, flags : guint8, script : guint8, language : Ptr[PangoLanguage], extra_attrs : Ptr[GSList])(using Zone): Ptr[_PangoAnalysis] = 
    val ____ptr = apply()
    (!____ptr).shape_engine = shape_engine
    (!____ptr).lang_engine = lang_engine
    (!____ptr).font = font
    (!____ptr).level = level
    (!____ptr).gravity = gravity
    (!____ptr).flags = flags
    (!____ptr).script = script
    (!____ptr).language = language
    (!____ptr).extra_attrs = extra_attrs
    ____ptr
  extension (struct: _PangoAnalysis)
    def shape_engine : Ptr[PangoEngineShape] = struct._1
    def shape_engine_=(value: Ptr[PangoEngineShape]): Unit = !struct.at1 = value
    def lang_engine : Ptr[PangoEngineLang] = struct._2
    def lang_engine_=(value: Ptr[PangoEngineLang]): Unit = !struct.at2 = value
    def font : Ptr[PangoFont] = struct._3
    def font_=(value: Ptr[PangoFont]): Unit = !struct.at3 = value
    def level : guint8 = struct._4
    def level_=(value: guint8): Unit = !struct.at4 = value
    def gravity : guint8 = struct._5
    def gravity_=(value: guint8): Unit = !struct.at5 = value
    def flags : guint8 = struct._6
    def flags_=(value: guint8): Unit = !struct.at6 = value
    def script : guint8 = struct._7
    def script_=(value: guint8): Unit = !struct.at7 = value
    def language : Ptr[PangoLanguage] = struct._8
    def language_=(value: Ptr[PangoLanguage]): Unit = !struct.at8 = value
    def extra_attrs : Ptr[GSList] = struct._9.asInstanceOf[Ptr[GSList]]
    def extra_attrs_=(value: Ptr[GSList]): Unit = !struct.at9 = value.asInstanceOf[Ptr[Byte]]

/**
 * PangoAttrClass: : the type ID for this attribute : function to duplicate an attribute of this type (see [method.Attribute.copy]) : function to free an attribute of this type (see [method.Attribute.destroy]) : function to check two attributes of this type for equality (see [method.Attribute.equal])

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type _PangoAttrClass = CStruct4[PangoAttrType, CFuncPtr1[Ptr[Byte], Ptr[Byte]], CFuncPtr1[Ptr[Byte], Unit], CFuncPtr2[Ptr[Byte], Ptr[Byte], gboolean]]
object _PangoAttrClass:
  given _tag: Tag[_PangoAttrClass] = Tag.materializeCStruct4Tag[PangoAttrType, CFuncPtr1[Ptr[Byte], Ptr[Byte]], CFuncPtr1[Ptr[Byte], Unit], CFuncPtr2[Ptr[Byte], Ptr[Byte], gboolean]]
  def apply()(using Zone): Ptr[_PangoAttrClass] = scala.scalanative.unsafe.alloc[_PangoAttrClass](1)
  def apply(`type` : PangoAttrType, copy : CFuncPtr1[Ptr[PangoAttribute], Ptr[PangoAttribute]], destroy : CFuncPtr1[Ptr[PangoAttribute], Unit], equal : CFuncPtr2[Ptr[PangoAttribute], Ptr[PangoAttribute], gboolean])(using Zone): Ptr[_PangoAttrClass] = 
    val ____ptr = apply()
    (!____ptr).`type` = `type`
    (!____ptr).copy = copy
    (!____ptr).destroy = destroy
    (!____ptr).equal = equal
    ____ptr
  extension (struct: _PangoAttrClass)
    def `type` : PangoAttrType = struct._1
    def type_=(value: PangoAttrType): Unit = !struct.at1 = value
    def copy : CFuncPtr1[Ptr[PangoAttribute], Ptr[PangoAttribute]] = struct._2.asInstanceOf[CFuncPtr1[Ptr[PangoAttribute], Ptr[PangoAttribute]]]
    def copy_=(value: CFuncPtr1[Ptr[PangoAttribute], Ptr[PangoAttribute]]): Unit = !struct.at2 = value.asInstanceOf[CFuncPtr1[Ptr[Byte], Ptr[Byte]]]
    def destroy : CFuncPtr1[Ptr[PangoAttribute], Unit] = struct._3.asInstanceOf[CFuncPtr1[Ptr[PangoAttribute], Unit]]
    def destroy_=(value: CFuncPtr1[Ptr[PangoAttribute], Unit]): Unit = !struct.at3 = value.asInstanceOf[CFuncPtr1[Ptr[Byte], Unit]]
    def equal : CFuncPtr2[Ptr[PangoAttribute], Ptr[PangoAttribute], gboolean] = struct._4.asInstanceOf[CFuncPtr2[Ptr[PangoAttribute], Ptr[PangoAttribute], gboolean]]
    def equal_=(value: CFuncPtr2[Ptr[PangoAttribute], Ptr[PangoAttribute], gboolean]): Unit = !struct.at4 = value.asInstanceOf[CFuncPtr2[Ptr[Byte], Ptr[Byte], gboolean]]

/**
 * PangoAttrColor: : the common portion of the attribute : the `PangoColor` which is the value of the attribute

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type _PangoAttrColor = CStruct2[PangoAttribute, PangoColor]
object _PangoAttrColor:
  given _tag: Tag[_PangoAttrColor] = Tag.materializeCStruct2Tag[PangoAttribute, PangoColor]
  def apply()(using Zone): Ptr[_PangoAttrColor] = scala.scalanative.unsafe.alloc[_PangoAttrColor](1)
  def apply(attr : PangoAttribute, color : PangoColor)(using Zone): Ptr[_PangoAttrColor] = 
    val ____ptr = apply()
    (!____ptr).attr = attr
    (!____ptr).color = color
    ____ptr
  extension (struct: _PangoAttrColor)
    def attr : PangoAttribute = struct._1
    def attr_=(value: PangoAttribute): Unit = !struct.at1 = value
    def color : PangoColor = struct._2
    def color_=(value: PangoColor): Unit = !struct.at2 = value

/**
 * PangoAttrFloat: : the common portion of the attribute : the value of the attribute

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type _PangoAttrFloat = CStruct2[PangoAttribute, Double]
object _PangoAttrFloat:
  given _tag: Tag[_PangoAttrFloat] = Tag.materializeCStruct2Tag[PangoAttribute, Double]
  def apply()(using Zone): Ptr[_PangoAttrFloat] = scala.scalanative.unsafe.alloc[_PangoAttrFloat](1)
  def apply(attr : PangoAttribute, value : Double)(using Zone): Ptr[_PangoAttrFloat] = 
    val ____ptr = apply()
    (!____ptr).attr = attr
    (!____ptr).value = value
    ____ptr
  extension (struct: _PangoAttrFloat)
    def attr : PangoAttribute = struct._1
    def attr_=(value: PangoAttribute): Unit = !struct.at1 = value
    def value : Double = struct._2
    def value_=(value: Double): Unit = !struct.at2 = value

/**
 * PangoAttrFontDesc: : the common portion of the attribute : the font description which is the value of this attribute

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type _PangoAttrFontDesc = CStruct2[PangoAttribute, Ptr[PangoFontDescription]]
object _PangoAttrFontDesc:
  given _tag: Tag[_PangoAttrFontDesc] = Tag.materializeCStruct2Tag[PangoAttribute, Ptr[PangoFontDescription]]
  def apply()(using Zone): Ptr[_PangoAttrFontDesc] = scala.scalanative.unsafe.alloc[_PangoAttrFontDesc](1)
  def apply(attr : PangoAttribute, desc : Ptr[PangoFontDescription])(using Zone): Ptr[_PangoAttrFontDesc] = 
    val ____ptr = apply()
    (!____ptr).attr = attr
    (!____ptr).desc = desc
    ____ptr
  extension (struct: _PangoAttrFontDesc)
    def attr : PangoAttribute = struct._1
    def attr_=(value: PangoAttribute): Unit = !struct.at1 = value
    def desc : Ptr[PangoFontDescription] = struct._2
    def desc_=(value: Ptr[PangoFontDescription]): Unit = !struct.at2 = value

/**
 * PangoAttrFontFeatures: : the common portion of the attribute : the features, as a string in CSS syntax

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type _PangoAttrFontFeatures = CStruct2[PangoAttribute, Ptr[gchar]]
object _PangoAttrFontFeatures:
  given _tag: Tag[_PangoAttrFontFeatures] = Tag.materializeCStruct2Tag[PangoAttribute, Ptr[gchar]]
  def apply()(using Zone): Ptr[_PangoAttrFontFeatures] = scala.scalanative.unsafe.alloc[_PangoAttrFontFeatures](1)
  def apply(attr : PangoAttribute, features : Ptr[gchar])(using Zone): Ptr[_PangoAttrFontFeatures] = 
    val ____ptr = apply()
    (!____ptr).attr = attr
    (!____ptr).features = features
    ____ptr
  extension (struct: _PangoAttrFontFeatures)
    def attr : PangoAttribute = struct._1
    def attr_=(value: PangoAttribute): Unit = !struct.at1 = value
    def features : Ptr[gchar] = struct._2
    def features_=(value: Ptr[gchar]): Unit = !struct.at2 = value

/**
 * PangoAttrInt: : the common portion of the attribute : the value of the attribute

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type _PangoAttrInt = CStruct2[PangoAttribute, CInt]
object _PangoAttrInt:
  given _tag: Tag[_PangoAttrInt] = Tag.materializeCStruct2Tag[PangoAttribute, CInt]
  def apply()(using Zone): Ptr[_PangoAttrInt] = scala.scalanative.unsafe.alloc[_PangoAttrInt](1)
  def apply(attr : PangoAttribute, value : CInt)(using Zone): Ptr[_PangoAttrInt] = 
    val ____ptr = apply()
    (!____ptr).attr = attr
    (!____ptr).value = value
    ____ptr
  extension (struct: _PangoAttrInt)
    def attr : PangoAttribute = struct._1
    def attr_=(value: PangoAttribute): Unit = !struct.at1 = value
    def value : CInt = struct._2
    def value_=(value: CInt): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type _PangoAttrIterator = CStruct0
object _PangoAttrIterator:
  given _tag: Tag[_PangoAttrIterator] = Tag.materializeCStruct0Tag

/**
 * PangoAttrLanguage: : the common portion of the attribute : the `PangoLanguage` which is the value of the attribute

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type _PangoAttrLanguage = CStruct2[PangoAttribute, Ptr[PangoLanguage]]
object _PangoAttrLanguage:
  given _tag: Tag[_PangoAttrLanguage] = Tag.materializeCStruct2Tag[PangoAttribute, Ptr[PangoLanguage]]
  def apply()(using Zone): Ptr[_PangoAttrLanguage] = scala.scalanative.unsafe.alloc[_PangoAttrLanguage](1)
  def apply(attr : PangoAttribute, value : Ptr[PangoLanguage])(using Zone): Ptr[_PangoAttrLanguage] = 
    val ____ptr = apply()
    (!____ptr).attr = attr
    (!____ptr).value = value
    ____ptr
  extension (struct: _PangoAttrLanguage)
    def attr : PangoAttribute = struct._1
    def attr_=(value: PangoAttribute): Unit = !struct.at1 = value
    def value : Ptr[PangoLanguage] = struct._2
    def value_=(value: Ptr[PangoLanguage]): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type _PangoAttrList = CStruct0
object _PangoAttrList:
  given _tag: Tag[_PangoAttrList] = Tag.materializeCStruct0Tag

/**
 * PangoAttrShape: : the common portion of the attribute

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type _PangoAttrShape = CStruct6[PangoAttribute, PangoRectangle, PangoRectangle, gpointer, PangoAttrDataCopyFunc, GDestroyNotify]
object _PangoAttrShape:
  given _tag: Tag[_PangoAttrShape] = Tag.materializeCStruct6Tag[PangoAttribute, PangoRectangle, PangoRectangle, gpointer, PangoAttrDataCopyFunc, GDestroyNotify]
  def apply()(using Zone): Ptr[_PangoAttrShape] = scala.scalanative.unsafe.alloc[_PangoAttrShape](1)
  def apply(attr : PangoAttribute, ink_rect : PangoRectangle, logical_rect : PangoRectangle, data : gpointer, copy_func : PangoAttrDataCopyFunc, destroy_func : GDestroyNotify)(using Zone): Ptr[_PangoAttrShape] = 
    val ____ptr = apply()
    (!____ptr).attr = attr
    (!____ptr).ink_rect = ink_rect
    (!____ptr).logical_rect = logical_rect
    (!____ptr).data = data
    (!____ptr).copy_func = copy_func
    (!____ptr).destroy_func = destroy_func
    ____ptr
  extension (struct: _PangoAttrShape)
    def attr : PangoAttribute = struct._1
    def attr_=(value: PangoAttribute): Unit = !struct.at1 = value
    def ink_rect : PangoRectangle = struct._2
    def ink_rect_=(value: PangoRectangle): Unit = !struct.at2 = value
    def logical_rect : PangoRectangle = struct._3
    def logical_rect_=(value: PangoRectangle): Unit = !struct.at3 = value
    def data : gpointer = struct._4
    def data_=(value: gpointer): Unit = !struct.at4 = value
    def copy_func : PangoAttrDataCopyFunc = struct._5
    def copy_func_=(value: PangoAttrDataCopyFunc): Unit = !struct.at5 = value
    def destroy_func : GDestroyNotify = struct._6
    def destroy_func_=(value: GDestroyNotify): Unit = !struct.at6 = value

/**
 * PangoAttrSize: : the common portion of the attribute : size of font, in units of 1/%PANGO_SCALE of a point (for %PANGO_ATTR_SIZE) or of a device unit (for %PANGO_ATTR_ABSOLUTE_SIZE) : whether the font size is in device units or points. This field is only present for compatibility with Pango-1.8.0 (%PANGO_ATTR_ABSOLUTE_SIZE was added in 1.8.1); and always will be %FALSE for %PANGO_ATTR_SIZE and %TRUE for %PANGO_ATTR_ABSOLUTE_SIZE.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type _PangoAttrSize = CStruct3[PangoAttribute, CInt, guint]
object _PangoAttrSize:
  given _tag: Tag[_PangoAttrSize] = Tag.materializeCStruct3Tag[PangoAttribute, CInt, guint]
  def apply()(using Zone): Ptr[_PangoAttrSize] = scala.scalanative.unsafe.alloc[_PangoAttrSize](1)
  def apply(attr : PangoAttribute, size : CInt, absolute : guint)(using Zone): Ptr[_PangoAttrSize] = 
    val ____ptr = apply()
    (!____ptr).attr = attr
    (!____ptr).size = size
    (!____ptr).absolute = absolute
    ____ptr
  extension (struct: _PangoAttrSize)
    def attr : PangoAttribute = struct._1
    def attr_=(value: PangoAttribute): Unit = !struct.at1 = value
    def size : CInt = struct._2
    def size_=(value: CInt): Unit = !struct.at2 = value
    def absolute : guint = struct._3
    def absolute_=(value: guint): Unit = !struct.at3 = value

/**
 * PangoAttrString: : the common portion of the attribute : the string which is the value of the attribute

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type _PangoAttrString = CStruct2[PangoAttribute, CString]
object _PangoAttrString:
  given _tag: Tag[_PangoAttrString] = Tag.materializeCStruct2Tag[PangoAttribute, CString]
  def apply()(using Zone): Ptr[_PangoAttrString] = scala.scalanative.unsafe.alloc[_PangoAttrString](1)
  def apply(attr : PangoAttribute, value : CString)(using Zone): Ptr[_PangoAttrString] = 
    val ____ptr = apply()
    (!____ptr).attr = attr
    (!____ptr).value = value
    ____ptr
  extension (struct: _PangoAttrString)
    def attr : PangoAttribute = struct._1
    def attr_=(value: PangoAttribute): Unit = !struct.at1 = value
    def value : CString = struct._2
    def value_=(value: CString): Unit = !struct.at2 = value

/**
 * PangoAttribute: _index: the start index of the range (in bytes). _index: end index of the range (in bytes). The character at this index is not included in the range.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
*/
opaque type _PangoAttribute = CStruct3[Ptr[Byte], guint, guint]
object _PangoAttribute:
  given _tag: Tag[_PangoAttribute] = Tag.materializeCStruct3Tag[Ptr[Byte], guint, guint]
  def apply()(using Zone): Ptr[_PangoAttribute] = scala.scalanative.unsafe.alloc[_PangoAttribute](1)
  def apply(klass : Ptr[PangoAttrClass], start_index : guint, end_index : guint)(using Zone): Ptr[_PangoAttribute] = 
    val ____ptr = apply()
    (!____ptr).klass = klass
    (!____ptr).start_index = start_index
    (!____ptr).end_index = end_index
    ____ptr
  extension (struct: _PangoAttribute)
    def klass : Ptr[PangoAttrClass] = struct._1.asInstanceOf[Ptr[PangoAttrClass]]
    def klass_=(value: Ptr[PangoAttrClass]): Unit = !struct.at1 = value.asInstanceOf[Ptr[Byte]]
    def start_index : guint = struct._2
    def start_index_=(value: guint): Unit = !struct.at2 = value
    def end_index : guint = struct._3
    def end_index_=(value: guint): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
*/
opaque type _PangoCairoFont = CStruct0
object _PangoCairoFont:
  given _tag: Tag[_PangoCairoFont] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
*/
opaque type _PangoCairoFontMap = CStruct0
object _PangoCairoFontMap:
  given _tag: Tag[_PangoCairoFontMap] = Tag.materializeCStruct0Tag

/**
 * PangoColor: : value of red component : value of green component : value of blue component

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-color.h
*/
opaque type _PangoColor = CStruct3[guint16, guint16, guint16]
object _PangoColor:
  given _tag: Tag[_PangoColor] = Tag.materializeCStruct3Tag[guint16, guint16, guint16]
  def apply()(using Zone): Ptr[_PangoColor] = scala.scalanative.unsafe.alloc[_PangoColor](1)
  def apply(red : guint16, green : guint16, blue : guint16)(using Zone): Ptr[_PangoColor] = 
    val ____ptr = apply()
    (!____ptr).red = red
    (!____ptr).green = green
    (!____ptr).blue = blue
    ____ptr
  extension (struct: _PangoColor)
    def red : guint16 = struct._1
    def red_=(value: guint16): Unit = !struct.at1 = value
    def green : guint16 = struct._2
    def green_=(value: guint16): Unit = !struct.at2 = value
    def blue : guint16 = struct._3
    def blue_=(value: guint16): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-types.h
*/
opaque type _PangoContext = CStruct0
object _PangoContext:
  given _tag: Tag[_PangoContext] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
*/
opaque type _PangoContextClass = CStruct0
object _PangoContextClass:
  given _tag: Tag[_PangoContextClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-coverage.h
*/
opaque type _PangoCoverage = CStruct0
object _PangoCoverage:
  given _tag: Tag[_PangoCoverage] = Tag.materializeCStruct0Tag

/**
 * PangoEngine:

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
*/
opaque type _PangoEngine = CStruct1[GObject]
object _PangoEngine:
  given _tag: Tag[_PangoEngine] = Tag.materializeCStruct1Tag[GObject]
  def apply()(using Zone): Ptr[_PangoEngine] = scala.scalanative.unsafe.alloc[_PangoEngine](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[_PangoEngine] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _PangoEngine)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value

/**
 * PangoEngineClass:

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
*/
opaque type _PangoEngineClass = CStruct1[GObjectClass]
object _PangoEngineClass:
  given _tag: Tag[_PangoEngineClass] = Tag.materializeCStruct1Tag[GObjectClass]
  def apply()(using Zone): Ptr[_PangoEngineClass] = scala.scalanative.unsafe.alloc[_PangoEngineClass](1)
  def apply(parent_class : GObjectClass)(using Zone): Ptr[_PangoEngineClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    ____ptr
  extension (struct: _PangoEngineClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value

/**
 * PangoEngineInfo: _type: a string identifying the engine type. _type: a string identifying the render type. : array of scripts this engine supports. _scripts: number of items in .

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
*/
opaque type _PangoEngineInfo = CStruct5[Ptr[gchar], Ptr[gchar], Ptr[gchar], Ptr[PangoEngineScriptInfo], gint]
object _PangoEngineInfo:
  given _tag: Tag[_PangoEngineInfo] = Tag.materializeCStruct5Tag[Ptr[gchar], Ptr[gchar], Ptr[gchar], Ptr[PangoEngineScriptInfo], gint]
  def apply()(using Zone): Ptr[_PangoEngineInfo] = scala.scalanative.unsafe.alloc[_PangoEngineInfo](1)
  def apply(id : Ptr[gchar], engine_type : Ptr[gchar], render_type : Ptr[gchar], scripts : Ptr[PangoEngineScriptInfo], n_scripts : gint)(using Zone): Ptr[_PangoEngineInfo] = 
    val ____ptr = apply()
    (!____ptr).id = id
    (!____ptr).engine_type = engine_type
    (!____ptr).render_type = render_type
    (!____ptr).scripts = scripts
    (!____ptr).n_scripts = n_scripts
    ____ptr
  extension (struct: _PangoEngineInfo)
    def id : Ptr[gchar] = struct._1
    def id_=(value: Ptr[gchar]): Unit = !struct.at1 = value
    def engine_type : Ptr[gchar] = struct._2
    def engine_type_=(value: Ptr[gchar]): Unit = !struct.at2 = value
    def render_type : Ptr[gchar] = struct._3
    def render_type_=(value: Ptr[gchar]): Unit = !struct.at3 = value
    def scripts : Ptr[PangoEngineScriptInfo] = struct._4
    def scripts_=(value: Ptr[PangoEngineScriptInfo]): Unit = !struct.at4 = value
    def n_scripts : gint = struct._5
    def n_scripts_=(value: gint): Unit = !struct.at5 = value

/**
 * PangoEngineLang:

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
*/
opaque type _PangoEngineLang = CStruct1[PangoEngine]
object _PangoEngineLang:
  given _tag: Tag[_PangoEngineLang] = Tag.materializeCStruct1Tag[PangoEngine]
  def apply()(using Zone): Ptr[_PangoEngineLang] = scala.scalanative.unsafe.alloc[_PangoEngineLang](1)
  def apply(parent_instance : PangoEngine)(using Zone): Ptr[_PangoEngineLang] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _PangoEngineLang)
    def parent_instance : PangoEngine = struct._1
    def parent_instance_=(value: PangoEngine): Unit = !struct.at1 = value

/**
 * PangoEngineLangClass: _break: (nullable): Provides a custom implementation of pango_break(). If %NULL, pango_default_break() is used instead. If not %NULL, for Pango versions before 1.16 (module interface version before 1.6.0), this was called instead of pango_default_break(), but in newer versions, pango_default_break() is always called and this is called after that to allow tailoring the breaking results.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
*/
opaque type _PangoEngineLangClass = CStruct2[PangoEngineClass, CFuncPtr6[Ptr[PangoEngineLang], CString, CInt, Ptr[Byte], Ptr[PangoLogAttr], CInt, Unit]]
object _PangoEngineLangClass:
  given _tag: Tag[_PangoEngineLangClass] = Tag.materializeCStruct2Tag[PangoEngineClass, CFuncPtr6[Ptr[PangoEngineLang], CString, CInt, Ptr[Byte], Ptr[PangoLogAttr], CInt, Unit]]
  def apply()(using Zone): Ptr[_PangoEngineLangClass] = scala.scalanative.unsafe.alloc[_PangoEngineLangClass](1)
  def apply(parent_class : PangoEngineClass, script_break : CFuncPtr6[Ptr[PangoEngineLang], CString, CInt, Ptr[PangoAnalysis], Ptr[PangoLogAttr], CInt, Unit])(using Zone): Ptr[_PangoEngineLangClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).script_break = script_break
    ____ptr
  extension (struct: _PangoEngineLangClass)
    def parent_class : PangoEngineClass = struct._1
    def parent_class_=(value: PangoEngineClass): Unit = !struct.at1 = value
    def script_break : CFuncPtr6[Ptr[PangoEngineLang], CString, CInt, Ptr[PangoAnalysis], Ptr[PangoLogAttr], CInt, Unit] = struct._2.asInstanceOf[CFuncPtr6[Ptr[PangoEngineLang], CString, CInt, Ptr[PangoAnalysis], Ptr[PangoLogAttr], CInt, Unit]]
    def script_break_=(value: CFuncPtr6[Ptr[PangoEngineLang], CString, CInt, Ptr[PangoAnalysis], Ptr[PangoLogAttr], CInt, Unit]): Unit = !struct.at2 = value.asInstanceOf[CFuncPtr6[Ptr[PangoEngineLang], CString, CInt, Ptr[Byte], Ptr[PangoLogAttr], CInt, Unit]]

/**
 * PangoEngineScriptInfo: : a `PangoScript`. The value %PANGO_SCRIPT_COMMON has the special meaning here of "all scripts" : a semicolon separated list of languages that this engine handles for this script. This may be empty, in which case the engine is saying that it is a fallback choice for all languages for this range, but should not be used if another engine indicates that it is specific for the language for a given code point. An entry in this list of "*" indicates that this engine is specific to all languages for this range.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
*/
opaque type _PangoEngineScriptInfo = CStruct2[PangoScript, Ptr[gchar]]
object _PangoEngineScriptInfo:
  given _tag: Tag[_PangoEngineScriptInfo] = Tag.materializeCStruct2Tag[PangoScript, Ptr[gchar]]
  def apply()(using Zone): Ptr[_PangoEngineScriptInfo] = scala.scalanative.unsafe.alloc[_PangoEngineScriptInfo](1)
  def apply(script : PangoScript, langs : Ptr[gchar])(using Zone): Ptr[_PangoEngineScriptInfo] = 
    val ____ptr = apply()
    (!____ptr).script = script
    (!____ptr).langs = langs
    ____ptr
  extension (struct: _PangoEngineScriptInfo)
    def script : PangoScript = struct._1
    def script_=(value: PangoScript): Unit = !struct.at1 = value
    def langs : Ptr[gchar] = struct._2
    def langs_=(value: Ptr[gchar]): Unit = !struct.at2 = value

/**
 * PangoEngineShape:

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
*/
opaque type _PangoEngineShape = CStruct1[PangoEngine]
object _PangoEngineShape:
  given _tag: Tag[_PangoEngineShape] = Tag.materializeCStruct1Tag[PangoEngine]
  def apply()(using Zone): Ptr[_PangoEngineShape] = scala.scalanative.unsafe.alloc[_PangoEngineShape](1)
  def apply(parent_instance : PangoEngine)(using Zone): Ptr[_PangoEngineShape] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _PangoEngineShape)
    def parent_instance : PangoEngine = struct._1
    def parent_instance_=(value: PangoEngine): Unit = !struct.at1 = value

/**
 * PangoEngineShapeClass: _shape: Given a font, a piece of text, and a `PangoAnalysis` structure, converts characters to glyphs and positions the resulting glyphs. The results are stored in the `PangoGlyphString` that is passed in. (The implementation should resize it appropriately using pango_glyph_string_set_size()). All fields of the _clusters and array must be filled in, with the exception that Pango will automatically generate `glyphs->glyphs[i].attr.is_cluster_start` using the _clusters array. Each input character must occur in one of the output logical clusters; if no rendering is desired for a character, this may involve inserting glyphs with the `PangoGlyph` ID %PANGO_GLYPH_EMPTY, which is guaranteed never to render. If the shaping fails for any reason, the shaper should return with an empty (zero-size) glyph string. If the shaper has not set the size on the glyph string yet, simply returning signals the failure too. : Returns the characters that this engine can cover with a given font for a given language. If not overridden, the default implementation simply returns the coverage information for the font itself unmodified.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
*/
opaque type _PangoEngineShapeClass = CStruct3[PangoEngineClass, CFuncPtr8[Ptr[PangoEngineShape], Ptr[PangoFont], CString, CUnsignedInt, Ptr[Byte], Ptr[PangoGlyphString], CString, CUnsignedInt, Unit], CFuncPtr4[Ptr[PangoEngineShape], Ptr[PangoFont], Ptr[PangoLanguage], gunichar, PangoCoverageLevel]]
object _PangoEngineShapeClass:
  given _tag: Tag[_PangoEngineShapeClass] = Tag.materializeCStruct3Tag[PangoEngineClass, CFuncPtr8[Ptr[PangoEngineShape], Ptr[PangoFont], CString, CUnsignedInt, Ptr[Byte], Ptr[PangoGlyphString], CString, CUnsignedInt, Unit], CFuncPtr4[Ptr[PangoEngineShape], Ptr[PangoFont], Ptr[PangoLanguage], gunichar, PangoCoverageLevel]]
  def apply()(using Zone): Ptr[_PangoEngineShapeClass] = scala.scalanative.unsafe.alloc[_PangoEngineShapeClass](1)
  def apply(parent_class : PangoEngineClass, script_shape : CFuncPtr8[Ptr[PangoEngineShape], Ptr[PangoFont], CString, CUnsignedInt, Ptr[PangoAnalysis], Ptr[PangoGlyphString], CString, CUnsignedInt, Unit], covers : CFuncPtr4[Ptr[PangoEngineShape], Ptr[PangoFont], Ptr[PangoLanguage], gunichar, PangoCoverageLevel])(using Zone): Ptr[_PangoEngineShapeClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).script_shape = script_shape
    (!____ptr).covers = covers
    ____ptr
  extension (struct: _PangoEngineShapeClass)
    def parent_class : PangoEngineClass = struct._1
    def parent_class_=(value: PangoEngineClass): Unit = !struct.at1 = value
    def script_shape : CFuncPtr8[Ptr[PangoEngineShape], Ptr[PangoFont], CString, CUnsignedInt, Ptr[PangoAnalysis], Ptr[PangoGlyphString], CString, CUnsignedInt, Unit] = struct._2.asInstanceOf[CFuncPtr8[Ptr[PangoEngineShape], Ptr[PangoFont], CString, CUnsignedInt, Ptr[PangoAnalysis], Ptr[PangoGlyphString], CString, CUnsignedInt, Unit]]
    def script_shape_=(value: CFuncPtr8[Ptr[PangoEngineShape], Ptr[PangoFont], CString, CUnsignedInt, Ptr[PangoAnalysis], Ptr[PangoGlyphString], CString, CUnsignedInt, Unit]): Unit = !struct.at2 = value.asInstanceOf[CFuncPtr8[Ptr[PangoEngineShape], Ptr[PangoFont], CString, CUnsignedInt, Ptr[Byte], Ptr[PangoGlyphString], CString, CUnsignedInt, Unit]]
    def covers : CFuncPtr4[Ptr[PangoEngineShape], Ptr[PangoFont], Ptr[PangoLanguage], gunichar, PangoCoverageLevel] = struct._3
    def covers_=(value: CFuncPtr4[Ptr[PangoEngineShape], Ptr[PangoFont], Ptr[PangoLanguage], gunichar, PangoCoverageLevel]): Unit = !struct.at3 = value

/**
 * PangoFont:

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
*/
opaque type _PangoFont = CStruct1[GObject]
object _PangoFont:
  given _tag: Tag[_PangoFont] = Tag.materializeCStruct1Tag[GObject]
  def apply()(using Zone): Ptr[_PangoFont] = scala.scalanative.unsafe.alloc[_PangoFont](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[_PangoFont] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _PangoFont)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
*/
opaque type _PangoFontClass = CStruct9[GObjectClass, CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontDescription]], CFuncPtr2[Ptr[PangoFont], Ptr[PangoLanguage], Ptr[PangoCoverage]], CFuncPtr4[Ptr[PangoFont], PangoGlyph, Ptr[PangoRectangle], Ptr[PangoRectangle], Unit], CFuncPtr2[Ptr[PangoFont], Ptr[PangoLanguage], Ptr[PangoFontMetrics]], CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontMap]], CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontDescription]], CFuncPtr4[Ptr[PangoFont], Ptr[hb_feature_t], guint, Ptr[guint], Unit], CFuncPtr1[Ptr[PangoFont], Ptr[hb_font_t]]]
object _PangoFontClass:
  given _tag: Tag[_PangoFontClass] = Tag.materializeCStruct9Tag[GObjectClass, CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontDescription]], CFuncPtr2[Ptr[PangoFont], Ptr[PangoLanguage], Ptr[PangoCoverage]], CFuncPtr4[Ptr[PangoFont], PangoGlyph, Ptr[PangoRectangle], Ptr[PangoRectangle], Unit], CFuncPtr2[Ptr[PangoFont], Ptr[PangoLanguage], Ptr[PangoFontMetrics]], CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontMap]], CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontDescription]], CFuncPtr4[Ptr[PangoFont], Ptr[hb_feature_t], guint, Ptr[guint], Unit], CFuncPtr1[Ptr[PangoFont], Ptr[hb_font_t]]]
  def apply()(using Zone): Ptr[_PangoFontClass] = scala.scalanative.unsafe.alloc[_PangoFontClass](1)
  def apply(parent_class : GObjectClass, describe : CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontDescription]], get_coverage : CFuncPtr2[Ptr[PangoFont], Ptr[PangoLanguage], Ptr[PangoCoverage]], get_glyph_extents : CFuncPtr4[Ptr[PangoFont], PangoGlyph, Ptr[PangoRectangle], Ptr[PangoRectangle], Unit], get_metrics : CFuncPtr2[Ptr[PangoFont], Ptr[PangoLanguage], Ptr[PangoFontMetrics]], get_font_map : CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontMap]], describe_absolute : CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontDescription]], get_features : CFuncPtr4[Ptr[PangoFont], Ptr[hb_feature_t], guint, Ptr[guint], Unit], create_hb_font : CFuncPtr1[Ptr[PangoFont], Ptr[hb_font_t]])(using Zone): Ptr[_PangoFontClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).describe = describe
    (!____ptr).get_coverage = get_coverage
    (!____ptr).get_glyph_extents = get_glyph_extents
    (!____ptr).get_metrics = get_metrics
    (!____ptr).get_font_map = get_font_map
    (!____ptr).describe_absolute = describe_absolute
    (!____ptr).get_features = get_features
    (!____ptr).create_hb_font = create_hb_font
    ____ptr
  extension (struct: _PangoFontClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def describe : CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontDescription]] = struct._2
    def describe_=(value: CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontDescription]]): Unit = !struct.at2 = value
    def get_coverage : CFuncPtr2[Ptr[PangoFont], Ptr[PangoLanguage], Ptr[PangoCoverage]] = struct._3
    def get_coverage_=(value: CFuncPtr2[Ptr[PangoFont], Ptr[PangoLanguage], Ptr[PangoCoverage]]): Unit = !struct.at3 = value
    def get_glyph_extents : CFuncPtr4[Ptr[PangoFont], PangoGlyph, Ptr[PangoRectangle], Ptr[PangoRectangle], Unit] = struct._4
    def get_glyph_extents_=(value: CFuncPtr4[Ptr[PangoFont], PangoGlyph, Ptr[PangoRectangle], Ptr[PangoRectangle], Unit]): Unit = !struct.at4 = value
    def get_metrics : CFuncPtr2[Ptr[PangoFont], Ptr[PangoLanguage], Ptr[PangoFontMetrics]] = struct._5
    def get_metrics_=(value: CFuncPtr2[Ptr[PangoFont], Ptr[PangoLanguage], Ptr[PangoFontMetrics]]): Unit = !struct.at5 = value
    def get_font_map : CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontMap]] = struct._6
    def get_font_map_=(value: CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontMap]]): Unit = !struct.at6 = value
    def describe_absolute : CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontDescription]] = struct._7
    def describe_absolute_=(value: CFuncPtr1[Ptr[PangoFont], Ptr[PangoFontDescription]]): Unit = !struct.at7 = value
    def get_features : CFuncPtr4[Ptr[PangoFont], Ptr[hb_feature_t], guint, Ptr[guint], Unit] = struct._8
    def get_features_=(value: CFuncPtr4[Ptr[PangoFont], Ptr[hb_feature_t], guint, Ptr[guint], Unit]): Unit = !struct.at8 = value
    def create_hb_font : CFuncPtr1[Ptr[PangoFont], Ptr[hb_font_t]] = struct._9
    def create_hb_font_=(value: CFuncPtr1[Ptr[PangoFont], Ptr[hb_font_t]]): Unit = !struct.at9 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
*/
opaque type _PangoFontDescription = CStruct0
object _PangoFontDescription:
  given _tag: Tag[_PangoFontDescription] = Tag.materializeCStruct0Tag

/**
 * PangoFontFace:

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
*/
opaque type _PangoFontFace = CStruct1[GObject]
object _PangoFontFace:
  given _tag: Tag[_PangoFontFace] = Tag.materializeCStruct1Tag[GObject]
  def apply()(using Zone): Ptr[_PangoFontFace] = scala.scalanative.unsafe.alloc[_PangoFontFace](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[_PangoFontFace] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _PangoFontFace)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
*/
opaque type _PangoFontFaceClass = CStruct8[GObjectClass, CFuncPtr1[Ptr[PangoFontFace], CString], CFuncPtr1[Ptr[PangoFontFace], Ptr[PangoFontDescription]], CFuncPtr3[Ptr[PangoFontFace], Ptr[Ptr[CInt]], Ptr[CInt], Unit], CFuncPtr1[Ptr[PangoFontFace], gboolean], CFuncPtr1[Ptr[PangoFontFace], Ptr[PangoFontFamily]], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _PangoFontFaceClass:
  given _tag: Tag[_PangoFontFaceClass] = Tag.materializeCStruct8Tag[GObjectClass, CFuncPtr1[Ptr[PangoFontFace], CString], CFuncPtr1[Ptr[PangoFontFace], Ptr[PangoFontDescription]], CFuncPtr3[Ptr[PangoFontFace], Ptr[Ptr[CInt]], Ptr[CInt], Unit], CFuncPtr1[Ptr[PangoFontFace], gboolean], CFuncPtr1[Ptr[PangoFontFace], Ptr[PangoFontFamily]], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_PangoFontFaceClass] = scala.scalanative.unsafe.alloc[_PangoFontFaceClass](1)
  def apply(parent_class : GObjectClass, get_face_name : CFuncPtr1[Ptr[PangoFontFace], CString], describe : CFuncPtr1[Ptr[PangoFontFace], Ptr[PangoFontDescription]], list_sizes : CFuncPtr3[Ptr[PangoFontFace], Ptr[Ptr[CInt]], Ptr[CInt], Unit], is_synthesized : CFuncPtr1[Ptr[PangoFontFace], gboolean], get_family : CFuncPtr1[Ptr[PangoFontFace], Ptr[PangoFontFamily]], _pango_reserved3 : CFuncPtr0[Unit], _pango_reserved4 : CFuncPtr0[Unit])(using Zone): Ptr[_PangoFontFaceClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_face_name = get_face_name
    (!____ptr).describe = describe
    (!____ptr).list_sizes = list_sizes
    (!____ptr).is_synthesized = is_synthesized
    (!____ptr).get_family = get_family
    (!____ptr)._pango_reserved3 = _pango_reserved3
    (!____ptr)._pango_reserved4 = _pango_reserved4
    ____ptr
  extension (struct: _PangoFontFaceClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def get_face_name : CFuncPtr1[Ptr[PangoFontFace], CString] = struct._2
    def get_face_name_=(value: CFuncPtr1[Ptr[PangoFontFace], CString]): Unit = !struct.at2 = value
    def describe : CFuncPtr1[Ptr[PangoFontFace], Ptr[PangoFontDescription]] = struct._3
    def describe_=(value: CFuncPtr1[Ptr[PangoFontFace], Ptr[PangoFontDescription]]): Unit = !struct.at3 = value
    def list_sizes : CFuncPtr3[Ptr[PangoFontFace], Ptr[Ptr[CInt]], Ptr[CInt], Unit] = struct._4
    def list_sizes_=(value: CFuncPtr3[Ptr[PangoFontFace], Ptr[Ptr[CInt]], Ptr[CInt], Unit]): Unit = !struct.at4 = value
    def is_synthesized : CFuncPtr1[Ptr[PangoFontFace], gboolean] = struct._5
    def is_synthesized_=(value: CFuncPtr1[Ptr[PangoFontFace], gboolean]): Unit = !struct.at5 = value
    def get_family : CFuncPtr1[Ptr[PangoFontFace], Ptr[PangoFontFamily]] = struct._6
    def get_family_=(value: CFuncPtr1[Ptr[PangoFontFace], Ptr[PangoFontFamily]]): Unit = !struct.at6 = value
    def _pango_reserved3 : CFuncPtr0[Unit] = struct._7
    def _pango_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at7 = value
    def _pango_reserved4 : CFuncPtr0[Unit] = struct._8
    def _pango_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at8 = value

/**
 * PangoFontFamily:

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
*/
opaque type _PangoFontFamily = CStruct1[GObject]
object _PangoFontFamily:
  given _tag: Tag[_PangoFontFamily] = Tag.materializeCStruct1Tag[GObject]
  def apply()(using Zone): Ptr[_PangoFontFamily] = scala.scalanative.unsafe.alloc[_PangoFontFamily](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[_PangoFontFamily] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _PangoFontFamily)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
*/
opaque type _PangoFontFamilyClass = CStruct7[GObjectClass, CFuncPtr3[Ptr[PangoFontFamily], Ptr[Ptr[Ptr[PangoFontFace]]], Ptr[CInt], Unit], CFuncPtr1[Ptr[PangoFontFamily], CString], CFuncPtr1[Ptr[PangoFontFamily], gboolean], CFuncPtr1[Ptr[PangoFontFamily], gboolean], CFuncPtr2[Ptr[PangoFontFamily], CString, Ptr[PangoFontFace]], CFuncPtr0[Unit]]
object _PangoFontFamilyClass:
  given _tag: Tag[_PangoFontFamilyClass] = Tag.materializeCStruct7Tag[GObjectClass, CFuncPtr3[Ptr[PangoFontFamily], Ptr[Ptr[Ptr[PangoFontFace]]], Ptr[CInt], Unit], CFuncPtr1[Ptr[PangoFontFamily], CString], CFuncPtr1[Ptr[PangoFontFamily], gboolean], CFuncPtr1[Ptr[PangoFontFamily], gboolean], CFuncPtr2[Ptr[PangoFontFamily], CString, Ptr[PangoFontFace]], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_PangoFontFamilyClass] = scala.scalanative.unsafe.alloc[_PangoFontFamilyClass](1)
  def apply(parent_class : GObjectClass, list_faces : CFuncPtr3[Ptr[PangoFontFamily], Ptr[Ptr[Ptr[PangoFontFace]]], Ptr[CInt], Unit], get_name : CFuncPtr1[Ptr[PangoFontFamily], CString], is_monospace : CFuncPtr1[Ptr[PangoFontFamily], gboolean], is_variable : CFuncPtr1[Ptr[PangoFontFamily], gboolean], get_face : CFuncPtr2[Ptr[PangoFontFamily], CString, Ptr[PangoFontFace]], _pango_reserved2 : CFuncPtr0[Unit])(using Zone): Ptr[_PangoFontFamilyClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).list_faces = list_faces
    (!____ptr).get_name = get_name
    (!____ptr).is_monospace = is_monospace
    (!____ptr).is_variable = is_variable
    (!____ptr).get_face = get_face
    (!____ptr)._pango_reserved2 = _pango_reserved2
    ____ptr
  extension (struct: _PangoFontFamilyClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def list_faces : CFuncPtr3[Ptr[PangoFontFamily], Ptr[Ptr[Ptr[PangoFontFace]]], Ptr[CInt], Unit] = struct._2
    def list_faces_=(value: CFuncPtr3[Ptr[PangoFontFamily], Ptr[Ptr[Ptr[PangoFontFace]]], Ptr[CInt], Unit]): Unit = !struct.at2 = value
    def get_name : CFuncPtr1[Ptr[PangoFontFamily], CString] = struct._3
    def get_name_=(value: CFuncPtr1[Ptr[PangoFontFamily], CString]): Unit = !struct.at3 = value
    def is_monospace : CFuncPtr1[Ptr[PangoFontFamily], gboolean] = struct._4
    def is_monospace_=(value: CFuncPtr1[Ptr[PangoFontFamily], gboolean]): Unit = !struct.at4 = value
    def is_variable : CFuncPtr1[Ptr[PangoFontFamily], gboolean] = struct._5
    def is_variable_=(value: CFuncPtr1[Ptr[PangoFontFamily], gboolean]): Unit = !struct.at5 = value
    def get_face : CFuncPtr2[Ptr[PangoFontFamily], CString, Ptr[PangoFontFace]] = struct._6
    def get_face_=(value: CFuncPtr2[Ptr[PangoFontFamily], CString, Ptr[PangoFontFace]]): Unit = !struct.at6 = value
    def _pango_reserved2 : CFuncPtr0[Unit] = struct._7
    def _pango_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at7 = value

/**
 * PangoFontMap:

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontmap.h
*/
opaque type _PangoFontMap = CStruct1[GObject]
object _PangoFontMap:
  given _tag: Tag[_PangoFontMap] = Tag.materializeCStruct1Tag[GObject]
  def apply()(using Zone): Ptr[_PangoFontMap] = scala.scalanative.unsafe.alloc[_PangoFontMap](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[_PangoFontMap] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _PangoFontMap)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value

/**
 * PangoFontMapClass: _class: parent `GObjectClass` _font: a function to load a font with a given description. See pango_font_map_load_font(). _families: A function to list available font families. See pango_font_map_list_families(). _fontset: a function to load a fontset with a given given description suitable for a particular language. See pango_font_map_load_fontset(). _engine_type: the type of rendering-system-dependent engines that can handle fonts of this fonts loaded with this fontmap. _serial: a function to get the serial number of the fontmap. See pango_font_map_get_serial(). : See pango_font_map_changed()

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontmap.h
*/
opaque type _PangoFontMapClass = CStruct9[GObjectClass, CFuncPtr3[Ptr[PangoFontMap], Ptr[PangoContext], Ptr[PangoFontDescription], Ptr[PangoFont]], CFuncPtr3[Ptr[PangoFontMap], Ptr[Ptr[Ptr[PangoFontFamily]]], Ptr[CInt], Unit], CFuncPtr4[Ptr[PangoFontMap], Ptr[PangoContext], Ptr[PangoFontDescription], Ptr[PangoLanguage], Ptr[PangoFontset]], CString, CFuncPtr1[Ptr[PangoFontMap], guint], CFuncPtr1[Ptr[PangoFontMap], Unit], CFuncPtr2[Ptr[PangoFontMap], CString, Ptr[PangoFontFamily]], CFuncPtr2[Ptr[PangoFontMap], Ptr[PangoFont], Ptr[PangoFontFace]]]
object _PangoFontMapClass:
  given _tag: Tag[_PangoFontMapClass] = Tag.materializeCStruct9Tag[GObjectClass, CFuncPtr3[Ptr[PangoFontMap], Ptr[PangoContext], Ptr[PangoFontDescription], Ptr[PangoFont]], CFuncPtr3[Ptr[PangoFontMap], Ptr[Ptr[Ptr[PangoFontFamily]]], Ptr[CInt], Unit], CFuncPtr4[Ptr[PangoFontMap], Ptr[PangoContext], Ptr[PangoFontDescription], Ptr[PangoLanguage], Ptr[PangoFontset]], CString, CFuncPtr1[Ptr[PangoFontMap], guint], CFuncPtr1[Ptr[PangoFontMap], Unit], CFuncPtr2[Ptr[PangoFontMap], CString, Ptr[PangoFontFamily]], CFuncPtr2[Ptr[PangoFontMap], Ptr[PangoFont], Ptr[PangoFontFace]]]
  def apply()(using Zone): Ptr[_PangoFontMapClass] = scala.scalanative.unsafe.alloc[_PangoFontMapClass](1)
  def apply(parent_class : GObjectClass, load_font : CFuncPtr3[Ptr[PangoFontMap], Ptr[PangoContext], Ptr[PangoFontDescription], Ptr[PangoFont]], list_families : CFuncPtr3[Ptr[PangoFontMap], Ptr[Ptr[Ptr[PangoFontFamily]]], Ptr[CInt], Unit], load_fontset : CFuncPtr4[Ptr[PangoFontMap], Ptr[PangoContext], Ptr[PangoFontDescription], Ptr[PangoLanguage], Ptr[PangoFontset]], shape_engine_type : CString, get_serial : CFuncPtr1[Ptr[PangoFontMap], guint], changed : CFuncPtr1[Ptr[PangoFontMap], Unit], get_family : CFuncPtr2[Ptr[PangoFontMap], CString, Ptr[PangoFontFamily]], get_face : CFuncPtr2[Ptr[PangoFontMap], Ptr[PangoFont], Ptr[PangoFontFace]])(using Zone): Ptr[_PangoFontMapClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).load_font = load_font
    (!____ptr).list_families = list_families
    (!____ptr).load_fontset = load_fontset
    (!____ptr).shape_engine_type = shape_engine_type
    (!____ptr).get_serial = get_serial
    (!____ptr).changed = changed
    (!____ptr).get_family = get_family
    (!____ptr).get_face = get_face
    ____ptr
  extension (struct: _PangoFontMapClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def load_font : CFuncPtr3[Ptr[PangoFontMap], Ptr[PangoContext], Ptr[PangoFontDescription], Ptr[PangoFont]] = struct._2
    def load_font_=(value: CFuncPtr3[Ptr[PangoFontMap], Ptr[PangoContext], Ptr[PangoFontDescription], Ptr[PangoFont]]): Unit = !struct.at2 = value
    def list_families : CFuncPtr3[Ptr[PangoFontMap], Ptr[Ptr[Ptr[PangoFontFamily]]], Ptr[CInt], Unit] = struct._3
    def list_families_=(value: CFuncPtr3[Ptr[PangoFontMap], Ptr[Ptr[Ptr[PangoFontFamily]]], Ptr[CInt], Unit]): Unit = !struct.at3 = value
    def load_fontset : CFuncPtr4[Ptr[PangoFontMap], Ptr[PangoContext], Ptr[PangoFontDescription], Ptr[PangoLanguage], Ptr[PangoFontset]] = struct._4
    def load_fontset_=(value: CFuncPtr4[Ptr[PangoFontMap], Ptr[PangoContext], Ptr[PangoFontDescription], Ptr[PangoLanguage], Ptr[PangoFontset]]): Unit = !struct.at4 = value
    def shape_engine_type : CString = struct._5
    def shape_engine_type_=(value: CString): Unit = !struct.at5 = value
    def get_serial : CFuncPtr1[Ptr[PangoFontMap], guint] = struct._6
    def get_serial_=(value: CFuncPtr1[Ptr[PangoFontMap], guint]): Unit = !struct.at6 = value
    def changed : CFuncPtr1[Ptr[PangoFontMap], Unit] = struct._7
    def changed_=(value: CFuncPtr1[Ptr[PangoFontMap], Unit]): Unit = !struct.at7 = value
    def get_family : CFuncPtr2[Ptr[PangoFontMap], CString, Ptr[PangoFontFamily]] = struct._8
    def get_family_=(value: CFuncPtr2[Ptr[PangoFontMap], CString, Ptr[PangoFontFamily]]): Unit = !struct.at8 = value
    def get_face : CFuncPtr2[Ptr[PangoFontMap], Ptr[PangoFont], Ptr[PangoFontFace]] = struct._9
    def get_face_=(value: CFuncPtr2[Ptr[PangoFontMap], Ptr[PangoFont], Ptr[PangoFontFace]]): Unit = !struct.at9 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
*/
opaque type _PangoFontMetrics = CStruct10[guint, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt]
object _PangoFontMetrics:
  given _tag: Tag[_PangoFontMetrics] = Tag.materializeCStruct10Tag[guint, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt, CInt]
  def apply()(using Zone): Ptr[_PangoFontMetrics] = scala.scalanative.unsafe.alloc[_PangoFontMetrics](1)
  def apply(ref_count : guint, ascent : CInt, descent : CInt, height : CInt, approximate_char_width : CInt, approximate_digit_width : CInt, underline_position : CInt, underline_thickness : CInt, strikethrough_position : CInt, strikethrough_thickness : CInt)(using Zone): Ptr[_PangoFontMetrics] = 
    val ____ptr = apply()
    (!____ptr).ref_count = ref_count
    (!____ptr).ascent = ascent
    (!____ptr).descent = descent
    (!____ptr).height = height
    (!____ptr).approximate_char_width = approximate_char_width
    (!____ptr).approximate_digit_width = approximate_digit_width
    (!____ptr).underline_position = underline_position
    (!____ptr).underline_thickness = underline_thickness
    (!____ptr).strikethrough_position = strikethrough_position
    (!____ptr).strikethrough_thickness = strikethrough_thickness
    ____ptr
  extension (struct: _PangoFontMetrics)
    def ref_count : guint = struct._1
    def ref_count_=(value: guint): Unit = !struct.at1 = value
    def ascent : CInt = struct._2
    def ascent_=(value: CInt): Unit = !struct.at2 = value
    def descent : CInt = struct._3
    def descent_=(value: CInt): Unit = !struct.at3 = value
    def height : CInt = struct._4
    def height_=(value: CInt): Unit = !struct.at4 = value
    def approximate_char_width : CInt = struct._5
    def approximate_char_width_=(value: CInt): Unit = !struct.at5 = value
    def approximate_digit_width : CInt = struct._6
    def approximate_digit_width_=(value: CInt): Unit = !struct.at6 = value
    def underline_position : CInt = struct._7
    def underline_position_=(value: CInt): Unit = !struct.at7 = value
    def underline_thickness : CInt = struct._8
    def underline_thickness_=(value: CInt): Unit = !struct.at8 = value
    def strikethrough_position : CInt = struct._9
    def strikethrough_position_=(value: CInt): Unit = !struct.at9 = value
    def strikethrough_thickness : CInt = struct._10
    def strikethrough_thickness_=(value: CInt): Unit = !struct.at10 = value

/**
 * PangoFontset:

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontset.h
*/
opaque type _PangoFontset = CStruct1[GObject]
object _PangoFontset:
  given _tag: Tag[_PangoFontset] = Tag.materializeCStruct1Tag[GObject]
  def apply()(using Zone): Ptr[_PangoFontset] = scala.scalanative.unsafe.alloc[_PangoFontset](1)
  def apply(parent_instance : GObject)(using Zone): Ptr[_PangoFontset] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    ____ptr
  extension (struct: _PangoFontset)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value

/**
 * PangoFontsetClass: _class: parent `GObjectClass` _font: a function to get the font in the fontset that contains the best glyph for the given Unicode character; see [method.Fontset.get_font] _metrics: a function to get overall metric information for the fonts in the fontset; see [method.Fontset.get_metrics] _language: a function to get the language of the fontset. : a function to loop over the fonts in the fontset. See [method.Fontset.foreach]

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontset.h
*/
opaque type _PangoFontsetClass = CStruct9[GObjectClass, CFuncPtr2[Ptr[PangoFontset], guint, Ptr[PangoFont]], CFuncPtr1[Ptr[PangoFontset], Ptr[PangoFontMetrics]], CFuncPtr1[Ptr[PangoFontset], Ptr[PangoLanguage]], CFuncPtr3[Ptr[PangoFontset], PangoFontsetForeachFunc, gpointer, Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _PangoFontsetClass:
  given _tag: Tag[_PangoFontsetClass] = Tag.materializeCStruct9Tag[GObjectClass, CFuncPtr2[Ptr[PangoFontset], guint, Ptr[PangoFont]], CFuncPtr1[Ptr[PangoFontset], Ptr[PangoFontMetrics]], CFuncPtr1[Ptr[PangoFontset], Ptr[PangoLanguage]], CFuncPtr3[Ptr[PangoFontset], PangoFontsetForeachFunc, gpointer, Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_PangoFontsetClass] = scala.scalanative.unsafe.alloc[_PangoFontsetClass](1)
  def apply(parent_class : GObjectClass, get_font : CFuncPtr2[Ptr[PangoFontset], guint, Ptr[PangoFont]], get_metrics : CFuncPtr1[Ptr[PangoFontset], Ptr[PangoFontMetrics]], get_language : CFuncPtr1[Ptr[PangoFontset], Ptr[PangoLanguage]], foreach : CFuncPtr3[Ptr[PangoFontset], PangoFontsetForeachFunc, gpointer, Unit], _pango_reserved1 : CFuncPtr0[Unit], _pango_reserved2 : CFuncPtr0[Unit], _pango_reserved3 : CFuncPtr0[Unit], _pango_reserved4 : CFuncPtr0[Unit])(using Zone): Ptr[_PangoFontsetClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).get_font = get_font
    (!____ptr).get_metrics = get_metrics
    (!____ptr).get_language = get_language
    (!____ptr).foreach = foreach
    (!____ptr)._pango_reserved1 = _pango_reserved1
    (!____ptr)._pango_reserved2 = _pango_reserved2
    (!____ptr)._pango_reserved3 = _pango_reserved3
    (!____ptr)._pango_reserved4 = _pango_reserved4
    ____ptr
  extension (struct: _PangoFontsetClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def get_font : CFuncPtr2[Ptr[PangoFontset], guint, Ptr[PangoFont]] = struct._2
    def get_font_=(value: CFuncPtr2[Ptr[PangoFontset], guint, Ptr[PangoFont]]): Unit = !struct.at2 = value
    def get_metrics : CFuncPtr1[Ptr[PangoFontset], Ptr[PangoFontMetrics]] = struct._3
    def get_metrics_=(value: CFuncPtr1[Ptr[PangoFontset], Ptr[PangoFontMetrics]]): Unit = !struct.at3 = value
    def get_language : CFuncPtr1[Ptr[PangoFontset], Ptr[PangoLanguage]] = struct._4
    def get_language_=(value: CFuncPtr1[Ptr[PangoFontset], Ptr[PangoLanguage]]): Unit = !struct.at4 = value
    def foreach : CFuncPtr3[Ptr[PangoFontset], PangoFontsetForeachFunc, gpointer, Unit] = struct._5
    def foreach_=(value: CFuncPtr3[Ptr[PangoFontset], PangoFontsetForeachFunc, gpointer, Unit]): Unit = !struct.at5 = value
    def _pango_reserved1 : CFuncPtr0[Unit] = struct._6
    def _pango_reserved1_=(value: CFuncPtr0[Unit]): Unit = !struct.at6 = value
    def _pango_reserved2 : CFuncPtr0[Unit] = struct._7
    def _pango_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at7 = value
    def _pango_reserved3 : CFuncPtr0[Unit] = struct._8
    def _pango_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at8 = value
    def _pango_reserved4 : CFuncPtr0[Unit] = struct._9
    def _pango_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at9 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontset-simple.h
*/
opaque type _PangoFontsetSimple = CStruct0
object _PangoFontsetSimple:
  given _tag: Tag[_PangoFontsetSimple] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontset-simple.h
*/
opaque type _PangoFontsetSimpleClass = CStruct0
object _PangoFontsetSimpleClass:
  given _tag: Tag[_PangoFontsetSimpleClass] = Tag.materializeCStruct0Tag

/**
 * PangoGlyphGeometry: : the logical width to use for the the character. _offset: horizontal offset from nominal character position. _offset: vertical offset from nominal character position.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
*/
opaque type _PangoGlyphGeometry = CStruct3[PangoGlyphUnit, PangoGlyphUnit, PangoGlyphUnit]
object _PangoGlyphGeometry:
  given _tag: Tag[_PangoGlyphGeometry] = Tag.materializeCStruct3Tag[PangoGlyphUnit, PangoGlyphUnit, PangoGlyphUnit]
  def apply()(using Zone): Ptr[_PangoGlyphGeometry] = scala.scalanative.unsafe.alloc[_PangoGlyphGeometry](1)
  def apply(width : PangoGlyphUnit, x_offset : PangoGlyphUnit, y_offset : PangoGlyphUnit)(using Zone): Ptr[_PangoGlyphGeometry] = 
    val ____ptr = apply()
    (!____ptr).width = width
    (!____ptr).x_offset = x_offset
    (!____ptr).y_offset = y_offset
    ____ptr
  extension (struct: _PangoGlyphGeometry)
    def width : PangoGlyphUnit = struct._1
    def width_=(value: PangoGlyphUnit): Unit = !struct.at1 = value
    def x_offset : PangoGlyphUnit = struct._2
    def x_offset_=(value: PangoGlyphUnit): Unit = !struct.at2 = value
    def y_offset : PangoGlyphUnit = struct._3
    def y_offset_=(value: PangoGlyphUnit): Unit = !struct.at3 = value

/**
 * PangoGlyphInfo: : the glyph itself. : the positional information about the glyph. : the visual attributes of the glyph.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
*/
opaque type _PangoGlyphInfo = CStruct3[PangoGlyph, PangoGlyphGeometry, PangoGlyphVisAttr]
object _PangoGlyphInfo:
  given _tag: Tag[_PangoGlyphInfo] = Tag.materializeCStruct3Tag[PangoGlyph, PangoGlyphGeometry, PangoGlyphVisAttr]
  def apply()(using Zone): Ptr[_PangoGlyphInfo] = scala.scalanative.unsafe.alloc[_PangoGlyphInfo](1)
  def apply(glyph : PangoGlyph, geometry : PangoGlyphGeometry, attr : PangoGlyphVisAttr)(using Zone): Ptr[_PangoGlyphInfo] = 
    val ____ptr = apply()
    (!____ptr).glyph = glyph
    (!____ptr).geometry = geometry
    (!____ptr).attr = attr
    ____ptr
  extension (struct: _PangoGlyphInfo)
    def glyph : PangoGlyph = struct._1
    def glyph_=(value: PangoGlyph): Unit = !struct.at1 = value
    def geometry : PangoGlyphGeometry = struct._2
    def geometry_=(value: PangoGlyphGeometry): Unit = !struct.at2 = value
    def attr : PangoGlyphVisAttr = struct._3
    def attr_=(value: PangoGlyphVisAttr): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph-item.h
*/
opaque type _PangoGlyphItem = CStruct5[Ptr[Byte], Ptr[PangoGlyphString], CInt, CInt, CInt]
object _PangoGlyphItem:
  given _tag: Tag[_PangoGlyphItem] = Tag.materializeCStruct5Tag[Ptr[Byte], Ptr[PangoGlyphString], CInt, CInt, CInt]
  def apply()(using Zone): Ptr[_PangoGlyphItem] = scala.scalanative.unsafe.alloc[_PangoGlyphItem](1)
  def apply(item : Ptr[PangoItem], glyphs : Ptr[PangoGlyphString], y_offset : CInt, start_x_offset : CInt, end_x_offset : CInt)(using Zone): Ptr[_PangoGlyphItem] = 
    val ____ptr = apply()
    (!____ptr).item = item
    (!____ptr).glyphs = glyphs
    (!____ptr).y_offset = y_offset
    (!____ptr).start_x_offset = start_x_offset
    (!____ptr).end_x_offset = end_x_offset
    ____ptr
  extension (struct: _PangoGlyphItem)
    def item : Ptr[PangoItem] = struct._1.asInstanceOf[Ptr[PangoItem]]
    def item_=(value: Ptr[PangoItem]): Unit = !struct.at1 = value.asInstanceOf[Ptr[Byte]]
    def glyphs : Ptr[PangoGlyphString] = struct._2
    def glyphs_=(value: Ptr[PangoGlyphString]): Unit = !struct.at2 = value
    def y_offset : CInt = struct._3
    def y_offset_=(value: CInt): Unit = !struct.at3 = value
    def start_x_offset : CInt = struct._4
    def start_x_offset_=(value: CInt): Unit = !struct.at4 = value
    def end_x_offset : CInt = struct._5
    def end_x_offset_=(value: CInt): Unit = !struct.at5 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph-item.h
*/
opaque type _PangoGlyphItemIter = CStruct8[Ptr[Byte], Ptr[gchar], CInt, CInt, CInt, CInt, CInt, CInt]
object _PangoGlyphItemIter:
  given _tag: Tag[_PangoGlyphItemIter] = Tag.materializeCStruct8Tag[Ptr[Byte], Ptr[gchar], CInt, CInt, CInt, CInt, CInt, CInt]
  def apply()(using Zone): Ptr[_PangoGlyphItemIter] = scala.scalanative.unsafe.alloc[_PangoGlyphItemIter](1)
  def apply(glyph_item : Ptr[PangoGlyphItem], text : Ptr[gchar], start_glyph : CInt, start_index : CInt, start_char : CInt, end_glyph : CInt, end_index : CInt, end_char : CInt)(using Zone): Ptr[_PangoGlyphItemIter] = 
    val ____ptr = apply()
    (!____ptr).glyph_item = glyph_item
    (!____ptr).text = text
    (!____ptr).start_glyph = start_glyph
    (!____ptr).start_index = start_index
    (!____ptr).start_char = start_char
    (!____ptr).end_glyph = end_glyph
    (!____ptr).end_index = end_index
    (!____ptr).end_char = end_char
    ____ptr
  extension (struct: _PangoGlyphItemIter)
    def glyph_item : Ptr[PangoGlyphItem] = struct._1.asInstanceOf[Ptr[PangoGlyphItem]]
    def glyph_item_=(value: Ptr[PangoGlyphItem]): Unit = !struct.at1 = value.asInstanceOf[Ptr[Byte]]
    def text : Ptr[gchar] = struct._2
    def text_=(value: Ptr[gchar]): Unit = !struct.at2 = value
    def start_glyph : CInt = struct._3
    def start_glyph_=(value: CInt): Unit = !struct.at3 = value
    def start_index : CInt = struct._4
    def start_index_=(value: CInt): Unit = !struct.at4 = value
    def start_char : CInt = struct._5
    def start_char_=(value: CInt): Unit = !struct.at5 = value
    def end_glyph : CInt = struct._6
    def end_glyph_=(value: CInt): Unit = !struct.at6 = value
    def end_index : CInt = struct._7
    def end_index_=(value: CInt): Unit = !struct.at7 = value
    def end_char : CInt = struct._8
    def end_char_=(value: CInt): Unit = !struct.at8 = value

/**
 * PangoGlyphString: : (array length=num_glyphs): array of glyph information _clusters: logical cluster info, indexed by the byte index within the text corresponding to the glyph string

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
*/
opaque type _PangoGlyphString = CStruct4[CInt, Ptr[PangoGlyphInfo], Ptr[CInt], CInt]
object _PangoGlyphString:
  given _tag: Tag[_PangoGlyphString] = Tag.materializeCStruct4Tag[CInt, Ptr[PangoGlyphInfo], Ptr[CInt], CInt]
  def apply()(using Zone): Ptr[_PangoGlyphString] = scala.scalanative.unsafe.alloc[_PangoGlyphString](1)
  def apply(num_glyphs : CInt, glyphs : Ptr[PangoGlyphInfo], log_clusters : Ptr[CInt], space : CInt)(using Zone): Ptr[_PangoGlyphString] = 
    val ____ptr = apply()
    (!____ptr).num_glyphs = num_glyphs
    (!____ptr).glyphs = glyphs
    (!____ptr).log_clusters = log_clusters
    (!____ptr).space = space
    ____ptr
  extension (struct: _PangoGlyphString)
    def num_glyphs : CInt = struct._1
    def num_glyphs_=(value: CInt): Unit = !struct.at1 = value
    def glyphs : Ptr[PangoGlyphInfo] = struct._2
    def glyphs_=(value: Ptr[PangoGlyphInfo]): Unit = !struct.at2 = value
    def log_clusters : Ptr[CInt] = struct._3
    def log_clusters_=(value: Ptr[CInt]): Unit = !struct.at3 = value
    def space : CInt = struct._4
    def space_=(value: CInt): Unit = !struct.at4 = value

/**
 * PangoGlyphVisAttr:

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
*/
opaque type _PangoGlyphVisAttr = CStruct2[guint, guint]
object _PangoGlyphVisAttr:
  given _tag: Tag[_PangoGlyphVisAttr] = Tag.materializeCStruct2Tag[guint, guint]
  def apply()(using Zone): Ptr[_PangoGlyphVisAttr] = scala.scalanative.unsafe.alloc[_PangoGlyphVisAttr](1)
  def apply(is_cluster_start : guint, is_color : guint)(using Zone): Ptr[_PangoGlyphVisAttr] = 
    val ____ptr = apply()
    (!____ptr).is_cluster_start = is_cluster_start
    (!____ptr).is_color = is_color
    ____ptr
  extension (struct: _PangoGlyphVisAttr)
    def is_cluster_start : guint = struct._1
    def is_cluster_start_=(value: guint): Unit = !struct.at1 = value
    def is_color : guint = struct._2
    def is_color_=(value: guint): Unit = !struct.at2 = value

/**
 * PangoItem: : byte offset of the start of this item in text. : length of this item in bytes. _offset: character offset of the start of this item in text. Since 1.50 : analysis results for the item.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-item.h
*/
opaque type _PangoItem = CStruct4[CInt, CInt, CInt, PangoAnalysis]
object _PangoItem:
  given _tag: Tag[_PangoItem] = Tag.materializeCStruct4Tag[CInt, CInt, CInt, PangoAnalysis]
  def apply()(using Zone): Ptr[_PangoItem] = scala.scalanative.unsafe.alloc[_PangoItem](1)
  def apply(offset : CInt, length : CInt, num_chars : CInt, analysis : PangoAnalysis)(using Zone): Ptr[_PangoItem] = 
    val ____ptr = apply()
    (!____ptr).offset = offset
    (!____ptr).length = length
    (!____ptr).num_chars = num_chars
    (!____ptr).analysis = analysis
    ____ptr
  extension (struct: _PangoItem)
    def offset : CInt = struct._1
    def offset_=(value: CInt): Unit = !struct.at1 = value
    def length : CInt = struct._2
    def length_=(value: CInt): Unit = !struct.at2 = value
    def num_chars : CInt = struct._3
    def num_chars_=(value: CInt): Unit = !struct.at3 = value
    def analysis : PangoAnalysis = struct._4
    def analysis_=(value: PangoAnalysis): Unit = !struct.at4 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-types.h
*/
opaque type _PangoLanguage = CStruct0
object _PangoLanguage:
  given _tag: Tag[_PangoLanguage] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
*/
opaque type _PangoLayout = CStruct0
object _PangoLayout:
  given _tag: Tag[_PangoLayout] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
*/
opaque type _PangoLayoutClass = CStruct0
object _PangoLayoutClass:
  given _tag: Tag[_PangoLayoutClass] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
*/
opaque type _PangoLayoutIter = CStruct0
object _PangoLayoutIter:
  given _tag: Tag[_PangoLayoutIter] = Tag.materializeCStruct0Tag

/**
 * PangoLayoutLine: : (nullable): the layout this line belongs to, might be %NULL _index: start of line as byte index into layout->text : length of line in bytes : (nullable) (element-type Pango.LayoutRun): list of runs in the line, from left to right _dir: #Resolved PangoDirection of line

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
*/
opaque type _PangoLayoutLine = CStruct6[Ptr[PangoLayout], gint, gint, Ptr[Byte], guint, guint]
object _PangoLayoutLine:
  given _tag: Tag[_PangoLayoutLine] = Tag.materializeCStruct6Tag[Ptr[PangoLayout], gint, gint, Ptr[Byte], guint, guint]
  def apply()(using Zone): Ptr[_PangoLayoutLine] = scala.scalanative.unsafe.alloc[_PangoLayoutLine](1)
  def apply(layout : Ptr[PangoLayout], start_index : gint, length : gint, runs : Ptr[GSList], is_paragraph_start : guint, resolved_dir : guint)(using Zone): Ptr[_PangoLayoutLine] = 
    val ____ptr = apply()
    (!____ptr).layout = layout
    (!____ptr).start_index = start_index
    (!____ptr).length = length
    (!____ptr).runs = runs
    (!____ptr).is_paragraph_start = is_paragraph_start
    (!____ptr).resolved_dir = resolved_dir
    ____ptr
  extension (struct: _PangoLayoutLine)
    def layout : Ptr[PangoLayout] = struct._1
    def layout_=(value: Ptr[PangoLayout]): Unit = !struct.at1 = value
    def start_index : gint = struct._2
    def start_index_=(value: gint): Unit = !struct.at2 = value
    def length : gint = struct._3
    def length_=(value: gint): Unit = !struct.at3 = value
    def runs : Ptr[GSList] = struct._4.asInstanceOf[Ptr[GSList]]
    def runs_=(value: Ptr[GSList]): Unit = !struct.at4 = value.asInstanceOf[Ptr[Byte]]
    def is_paragraph_start : guint = struct._5
    def is_paragraph_start_=(value: guint): Unit = !struct.at5 = value
    def resolved_dir : guint = struct._6
    def resolved_dir_=(value: guint): Unit = !struct.at6 = value

/**
 * PangoLogAttr: i.e. this is a grapheme boundary, or the first character in the text. This flag implements Unicode's [Grapheme Cluster Boundaries](http://www.unicode.org/reports/tr29/) semantics. Note that in degenerate cases, you could have both and There are two ways to divide sentences. The first assigns all inter-sentence whitespace/control/format chars to some sentence, so all chars are in some sentence; the boundaries there. The second way doesn't assign between-sentence spaces, etc. to any sentence, so Note that in degenerate cases, you could have both and period, so the next sentence starts right away) _deletes_character: if set, backspace deletes one character rather than the entire grapheme cluster. This field is only meaningful on grapheme boundaries (where the full grapheme (e.g. letter + diacritics) is considered a unit, while in others, each decomposed character in the grapheme is a unit. In the default implementation of [func], this bit is set on all grapheme boundaries except those following Latin, Cyrillic or Greek base characters. expanded for justification purposes. (Since: 1.18) More specifically, means that this is not a position in the middle of a word. For example, both sides of a punctuation mark are considered word boundaries. This flag is particularly useful when selecting text word-by-word. This flag implements Unicode's [Word Boundaries](http://www.unicode.org/reports/tr29/) semantics. (Since: 1.22) _inserts_hyphen: when breaking lines before this char, insert a hyphen. Since: 1.50 _removes_preceding: when breaking lines before this char, remove the preceding char. Since 1.50

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-break.h
*/
opaque type _PangoLogAttr = CStruct16[guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint]
object _PangoLogAttr:
  given _tag: Tag[_PangoLogAttr] = Tag.materializeCStruct16Tag[guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint, guint]
  def apply()(using Zone): Ptr[_PangoLogAttr] = scala.scalanative.unsafe.alloc[_PangoLogAttr](1)
  def apply(is_line_break : guint, is_mandatory_break : guint, is_char_break : guint, is_white : guint, is_cursor_position : guint, is_word_start : guint, is_word_end : guint, is_sentence_boundary : guint, is_sentence_start : guint, is_sentence_end : guint, backspace_deletes_character : guint, is_expandable_space : guint, is_word_boundary : guint, break_inserts_hyphen : guint, break_removes_preceding : guint, reserved : guint)(using Zone): Ptr[_PangoLogAttr] = 
    val ____ptr = apply()
    (!____ptr).is_line_break = is_line_break
    (!____ptr).is_mandatory_break = is_mandatory_break
    (!____ptr).is_char_break = is_char_break
    (!____ptr).is_white = is_white
    (!____ptr).is_cursor_position = is_cursor_position
    (!____ptr).is_word_start = is_word_start
    (!____ptr).is_word_end = is_word_end
    (!____ptr).is_sentence_boundary = is_sentence_boundary
    (!____ptr).is_sentence_start = is_sentence_start
    (!____ptr).is_sentence_end = is_sentence_end
    (!____ptr).backspace_deletes_character = backspace_deletes_character
    (!____ptr).is_expandable_space = is_expandable_space
    (!____ptr).is_word_boundary = is_word_boundary
    (!____ptr).break_inserts_hyphen = break_inserts_hyphen
    (!____ptr).break_removes_preceding = break_removes_preceding
    (!____ptr).reserved = reserved
    ____ptr
  extension (struct: _PangoLogAttr)
    def is_line_break : guint = struct._1
    def is_line_break_=(value: guint): Unit = !struct.at1 = value
    def is_mandatory_break : guint = struct._2
    def is_mandatory_break_=(value: guint): Unit = !struct.at2 = value
    def is_char_break : guint = struct._3
    def is_char_break_=(value: guint): Unit = !struct.at3 = value
    def is_white : guint = struct._4
    def is_white_=(value: guint): Unit = !struct.at4 = value
    def is_cursor_position : guint = struct._5
    def is_cursor_position_=(value: guint): Unit = !struct.at5 = value
    def is_word_start : guint = struct._6
    def is_word_start_=(value: guint): Unit = !struct.at6 = value
    def is_word_end : guint = struct._7
    def is_word_end_=(value: guint): Unit = !struct.at7 = value
    def is_sentence_boundary : guint = struct._8
    def is_sentence_boundary_=(value: guint): Unit = !struct.at8 = value
    def is_sentence_start : guint = struct._9
    def is_sentence_start_=(value: guint): Unit = !struct.at9 = value
    def is_sentence_end : guint = struct._10
    def is_sentence_end_=(value: guint): Unit = !struct.at10 = value
    def backspace_deletes_character : guint = struct._11
    def backspace_deletes_character_=(value: guint): Unit = !struct.at11 = value
    def is_expandable_space : guint = struct._12
    def is_expandable_space_=(value: guint): Unit = !struct.at12 = value
    def is_word_boundary : guint = struct._13
    def is_word_boundary_=(value: guint): Unit = !struct.at13 = value
    def break_inserts_hyphen : guint = struct._14
    def break_inserts_hyphen_=(value: guint): Unit = !struct.at14 = value
    def break_removes_preceding : guint = struct._15
    def break_removes_preceding_=(value: guint): Unit = !struct.at15 = value
    def reserved : guint = struct._16
    def reserved_=(value: guint): Unit = !struct.at16 = value

/**
 * PangoMatrix: : 1st component of the transformation matrix : 2nd component of the transformation matrix : 3rd component of the transformation matrix : 4th component of the transformation matrix : x translation : y translation

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-matrix.h
*/
opaque type _PangoMatrix = CStruct6[Double, Double, Double, Double, Double, Double]
object _PangoMatrix:
  given _tag: Tag[_PangoMatrix] = Tag.materializeCStruct6Tag[Double, Double, Double, Double, Double, Double]
  def apply()(using Zone): Ptr[_PangoMatrix] = scala.scalanative.unsafe.alloc[_PangoMatrix](1)
  def apply(xx : Double, xy : Double, yx : Double, yy : Double, x0 : Double, y0 : Double)(using Zone): Ptr[_PangoMatrix] = 
    val ____ptr = apply()
    (!____ptr).xx = xx
    (!____ptr).xy = xy
    (!____ptr).yx = yx
    (!____ptr).yy = yy
    (!____ptr).x0 = x0
    (!____ptr).y0 = y0
    ____ptr
  extension (struct: _PangoMatrix)
    def xx : Double = struct._1
    def xx_=(value: Double): Unit = !struct.at1 = value
    def xy : Double = struct._2
    def xy_=(value: Double): Unit = !struct.at2 = value
    def yx : Double = struct._3
    def yx_=(value: Double): Unit = !struct.at3 = value
    def yy : Double = struct._4
    def yy_=(value: Double): Unit = !struct.at4 = value
    def x0 : Double = struct._5
    def x0_=(value: Double): Unit = !struct.at5 = value
    def y0 : Double = struct._6
    def y0_=(value: Double): Unit = !struct.at6 = value

/**
 * PangoRectangle: : X coordinate of the left side of the rectangle. : Y coordinate of the the top side of the rectangle. : width of the rectangle. : height of the rectangle.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-types.h
*/
opaque type _PangoRectangle = CStruct4[CInt, CInt, CInt, CInt]
object _PangoRectangle:
  given _tag: Tag[_PangoRectangle] = Tag.materializeCStruct4Tag[CInt, CInt, CInt, CInt]
  def apply()(using Zone): Ptr[_PangoRectangle] = scala.scalanative.unsafe.alloc[_PangoRectangle](1)
  def apply(x : CInt, y : CInt, width : CInt, height : CInt)(using Zone): Ptr[_PangoRectangle] = 
    val ____ptr = apply()
    (!____ptr).x = x
    (!____ptr).y = y
    (!____ptr).width = width
    (!____ptr).height = height
    ____ptr
  extension (struct: _PangoRectangle)
    def x : CInt = struct._1
    def x_=(value: CInt): Unit = !struct.at1 = value
    def y : CInt = struct._2
    def y_=(value: CInt): Unit = !struct.at2 = value
    def width : CInt = struct._3
    def width_=(value: CInt): Unit = !struct.at3 = value
    def height : CInt = struct._4
    def height_=(value: CInt): Unit = !struct.at4 = value

/**
 * PangoRenderer: : (nullable): the current transformation matrix for the Renderer; may be %NULL, which should be treated the same as the identity matrix.

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
*/
opaque type _PangoRenderer = CStruct6[GObject, PangoUnderline, gboolean, CInt, Ptr[PangoMatrix], Ptr[PangoRendererPrivate]]
object _PangoRenderer:
  given _tag: Tag[_PangoRenderer] = Tag.materializeCStruct6Tag[GObject, PangoUnderline, gboolean, CInt, Ptr[PangoMatrix], Ptr[PangoRendererPrivate]]
  def apply()(using Zone): Ptr[_PangoRenderer] = scala.scalanative.unsafe.alloc[_PangoRenderer](1)
  def apply(parent_instance : GObject, underline : PangoUnderline, strikethrough : gboolean, active_count : CInt, matrix : Ptr[PangoMatrix], priv : Ptr[PangoRendererPrivate])(using Zone): Ptr[_PangoRenderer] = 
    val ____ptr = apply()
    (!____ptr).parent_instance = parent_instance
    (!____ptr).underline = underline
    (!____ptr).strikethrough = strikethrough
    (!____ptr).active_count = active_count
    (!____ptr).matrix = matrix
    (!____ptr).priv = priv
    ____ptr
  extension (struct: _PangoRenderer)
    def parent_instance : GObject = struct._1
    def parent_instance_=(value: GObject): Unit = !struct.at1 = value
    def underline : PangoUnderline = struct._2
    def underline_=(value: PangoUnderline): Unit = !struct.at2 = value
    def strikethrough : gboolean = struct._3
    def strikethrough_=(value: gboolean): Unit = !struct.at3 = value
    def active_count : CInt = struct._4
    def active_count_=(value: CInt): Unit = !struct.at4 = value
    def matrix : Ptr[PangoMatrix] = struct._5
    def matrix_=(value: Ptr[PangoMatrix]): Unit = !struct.at5 = value
    def priv : Ptr[PangoRendererPrivate] = struct._6
    def priv_=(value: Ptr[PangoRendererPrivate]): Unit = !struct.at6 = value

/**
 * PangoRendererClass: _glyphs: draws a `PangoGlyphString` _rectangle: draws a rectangle _error_underline: draws a squiggly line that approximately covers the given rectangle in the style of an underline used to indicate a spelling error. _shape: draw content for a glyph shaped with `PangoAttrShape` , are the coordinates of the left edge of the baseline, in user coordinates. _trapezoid: draws a trapezoidal filled area _glyph: draws a single glyph

 * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
*/
opaque type _PangoRendererClass = CStruct15[GObjectClass, CFuncPtr5[Ptr[PangoRenderer], Ptr[PangoFont], Ptr[PangoGlyphString], CInt, CInt, Unit], CFuncPtr6[Ptr[PangoRenderer], PangoRenderPart, CInt, CInt, CInt, CInt, Unit], CFuncPtr5[Ptr[PangoRenderer], CInt, CInt, CInt, CInt, Unit], CFuncPtr4[Ptr[PangoRenderer], Ptr[Byte], CInt, CInt, Unit], CFuncPtr8[Ptr[PangoRenderer], PangoRenderPart, Double, Double, Double, Double, Double, Double, Unit], CFuncPtr5[Ptr[PangoRenderer], Ptr[PangoFont], PangoGlyph, Double, Double, Unit], CFuncPtr2[Ptr[PangoRenderer], PangoRenderPart, Unit], CFuncPtr1[Ptr[PangoRenderer], Unit], CFuncPtr1[Ptr[PangoRenderer], Unit], CFuncPtr2[Ptr[PangoRenderer], Ptr[Byte], Unit], CFuncPtr5[Ptr[PangoRenderer], CString, Ptr[Byte], CInt, CInt, Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
object _PangoRendererClass:
  given _tag: Tag[_PangoRendererClass] = Tag.materializeCStruct15Tag[GObjectClass, CFuncPtr5[Ptr[PangoRenderer], Ptr[PangoFont], Ptr[PangoGlyphString], CInt, CInt, Unit], CFuncPtr6[Ptr[PangoRenderer], PangoRenderPart, CInt, CInt, CInt, CInt, Unit], CFuncPtr5[Ptr[PangoRenderer], CInt, CInt, CInt, CInt, Unit], CFuncPtr4[Ptr[PangoRenderer], Ptr[Byte], CInt, CInt, Unit], CFuncPtr8[Ptr[PangoRenderer], PangoRenderPart, Double, Double, Double, Double, Double, Double, Unit], CFuncPtr5[Ptr[PangoRenderer], Ptr[PangoFont], PangoGlyph, Double, Double, Unit], CFuncPtr2[Ptr[PangoRenderer], PangoRenderPart, Unit], CFuncPtr1[Ptr[PangoRenderer], Unit], CFuncPtr1[Ptr[PangoRenderer], Unit], CFuncPtr2[Ptr[PangoRenderer], Ptr[Byte], Unit], CFuncPtr5[Ptr[PangoRenderer], CString, Ptr[Byte], CInt, CInt, Unit], CFuncPtr0[Unit], CFuncPtr0[Unit], CFuncPtr0[Unit]]
  def apply()(using Zone): Ptr[_PangoRendererClass] = scala.scalanative.unsafe.alloc[_PangoRendererClass](1)
  def apply(parent_class : GObjectClass, draw_glyphs : CFuncPtr5[Ptr[PangoRenderer], Ptr[PangoFont], Ptr[PangoGlyphString], CInt, CInt, Unit], draw_rectangle : CFuncPtr6[Ptr[PangoRenderer], PangoRenderPart, CInt, CInt, CInt, CInt, Unit], draw_error_underline : CFuncPtr5[Ptr[PangoRenderer], CInt, CInt, CInt, CInt, Unit], draw_shape : CFuncPtr4[Ptr[PangoRenderer], Ptr[PangoAttrShape], CInt, CInt, Unit], draw_trapezoid : CFuncPtr8[Ptr[PangoRenderer], PangoRenderPart, Double, Double, Double, Double, Double, Double, Unit], draw_glyph : CFuncPtr5[Ptr[PangoRenderer], Ptr[PangoFont], PangoGlyph, Double, Double, Unit], part_changed : CFuncPtr2[Ptr[PangoRenderer], PangoRenderPart, Unit], begin : CFuncPtr1[Ptr[PangoRenderer], Unit], end : CFuncPtr1[Ptr[PangoRenderer], Unit], prepare_run : CFuncPtr2[Ptr[PangoRenderer], Ptr[PangoLayoutRun], Unit], draw_glyph_item : CFuncPtr5[Ptr[PangoRenderer], CString, Ptr[PangoGlyphItem], CInt, CInt, Unit], _pango_reserved2 : CFuncPtr0[Unit], _pango_reserved3 : CFuncPtr0[Unit], _pango_reserved4 : CFuncPtr0[Unit])(using Zone): Ptr[_PangoRendererClass] = 
    val ____ptr = apply()
    (!____ptr).parent_class = parent_class
    (!____ptr).draw_glyphs = draw_glyphs
    (!____ptr).draw_rectangle = draw_rectangle
    (!____ptr).draw_error_underline = draw_error_underline
    (!____ptr).draw_shape = draw_shape
    (!____ptr).draw_trapezoid = draw_trapezoid
    (!____ptr).draw_glyph = draw_glyph
    (!____ptr).part_changed = part_changed
    (!____ptr).begin = begin
    (!____ptr).end = end
    (!____ptr).prepare_run = prepare_run
    (!____ptr).draw_glyph_item = draw_glyph_item
    (!____ptr)._pango_reserved2 = _pango_reserved2
    (!____ptr)._pango_reserved3 = _pango_reserved3
    (!____ptr)._pango_reserved4 = _pango_reserved4
    ____ptr
  extension (struct: _PangoRendererClass)
    def parent_class : GObjectClass = struct._1
    def parent_class_=(value: GObjectClass): Unit = !struct.at1 = value
    def draw_glyphs : CFuncPtr5[Ptr[PangoRenderer], Ptr[PangoFont], Ptr[PangoGlyphString], CInt, CInt, Unit] = struct._2
    def draw_glyphs_=(value: CFuncPtr5[Ptr[PangoRenderer], Ptr[PangoFont], Ptr[PangoGlyphString], CInt, CInt, Unit]): Unit = !struct.at2 = value
    def draw_rectangle : CFuncPtr6[Ptr[PangoRenderer], PangoRenderPart, CInt, CInt, CInt, CInt, Unit] = struct._3
    def draw_rectangle_=(value: CFuncPtr6[Ptr[PangoRenderer], PangoRenderPart, CInt, CInt, CInt, CInt, Unit]): Unit = !struct.at3 = value
    def draw_error_underline : CFuncPtr5[Ptr[PangoRenderer], CInt, CInt, CInt, CInt, Unit] = struct._4
    def draw_error_underline_=(value: CFuncPtr5[Ptr[PangoRenderer], CInt, CInt, CInt, CInt, Unit]): Unit = !struct.at4 = value
    def draw_shape : CFuncPtr4[Ptr[PangoRenderer], Ptr[PangoAttrShape], CInt, CInt, Unit] = struct._5.asInstanceOf[CFuncPtr4[Ptr[PangoRenderer], Ptr[PangoAttrShape], CInt, CInt, Unit]]
    def draw_shape_=(value: CFuncPtr4[Ptr[PangoRenderer], Ptr[PangoAttrShape], CInt, CInt, Unit]): Unit = !struct.at5 = value.asInstanceOf[CFuncPtr4[Ptr[PangoRenderer], Ptr[Byte], CInt, CInt, Unit]]
    def draw_trapezoid : CFuncPtr8[Ptr[PangoRenderer], PangoRenderPart, Double, Double, Double, Double, Double, Double, Unit] = struct._6
    def draw_trapezoid_=(value: CFuncPtr8[Ptr[PangoRenderer], PangoRenderPart, Double, Double, Double, Double, Double, Double, Unit]): Unit = !struct.at6 = value
    def draw_glyph : CFuncPtr5[Ptr[PangoRenderer], Ptr[PangoFont], PangoGlyph, Double, Double, Unit] = struct._7
    def draw_glyph_=(value: CFuncPtr5[Ptr[PangoRenderer], Ptr[PangoFont], PangoGlyph, Double, Double, Unit]): Unit = !struct.at7 = value
    def part_changed : CFuncPtr2[Ptr[PangoRenderer], PangoRenderPart, Unit] = struct._8
    def part_changed_=(value: CFuncPtr2[Ptr[PangoRenderer], PangoRenderPart, Unit]): Unit = !struct.at8 = value
    def begin : CFuncPtr1[Ptr[PangoRenderer], Unit] = struct._9
    def begin_=(value: CFuncPtr1[Ptr[PangoRenderer], Unit]): Unit = !struct.at9 = value
    def end : CFuncPtr1[Ptr[PangoRenderer], Unit] = struct._10
    def end_=(value: CFuncPtr1[Ptr[PangoRenderer], Unit]): Unit = !struct.at10 = value
    def prepare_run : CFuncPtr2[Ptr[PangoRenderer], Ptr[PangoLayoutRun], Unit] = struct._11.asInstanceOf[CFuncPtr2[Ptr[PangoRenderer], Ptr[PangoLayoutRun], Unit]]
    def prepare_run_=(value: CFuncPtr2[Ptr[PangoRenderer], Ptr[PangoLayoutRun], Unit]): Unit = !struct.at11 = value.asInstanceOf[CFuncPtr2[Ptr[PangoRenderer], Ptr[Byte], Unit]]
    def draw_glyph_item : CFuncPtr5[Ptr[PangoRenderer], CString, Ptr[PangoGlyphItem], CInt, CInt, Unit] = struct._12.asInstanceOf[CFuncPtr5[Ptr[PangoRenderer], CString, Ptr[PangoGlyphItem], CInt, CInt, Unit]]
    def draw_glyph_item_=(value: CFuncPtr5[Ptr[PangoRenderer], CString, Ptr[PangoGlyphItem], CInt, CInt, Unit]): Unit = !struct.at12 = value.asInstanceOf[CFuncPtr5[Ptr[PangoRenderer], CString, Ptr[Byte], CInt, CInt, Unit]]
    def _pango_reserved2 : CFuncPtr0[Unit] = struct._13
    def _pango_reserved2_=(value: CFuncPtr0[Unit]): Unit = !struct.at13 = value
    def _pango_reserved3 : CFuncPtr0[Unit] = struct._14
    def _pango_reserved3_=(value: CFuncPtr0[Unit]): Unit = !struct.at14 = value
    def _pango_reserved4 : CFuncPtr0[Unit] = struct._15
    def _pango_reserved4_=(value: CFuncPtr0[Unit]): Unit = !struct.at15 = value

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
*/
opaque type _PangoRendererPrivate = CStruct0
object _PangoRendererPrivate:
  given _tag: Tag[_PangoRendererPrivate] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-script.h
*/
opaque type _PangoScriptIter = CStruct0
object _PangoScriptIter:
  given _tag: Tag[_PangoScriptIter] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
*/
opaque type _PangoTabArray = CStruct0
object _PangoTabArray:
  given _tag: Tag[_PangoTabArray] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type _cairo = CStruct0
object _cairo:
  given _tag: Tag[_cairo] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type _cairo_device = CStruct0
object _cairo_device:
  given _tag: Tag[_cairo_device] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type _cairo_font_face = CStruct0
object _cairo_font_face:
  given _tag: Tag[_cairo_font_face] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type _cairo_font_options = CStruct0
object _cairo_font_options:
  given _tag: Tag[_cairo_font_options] = Tag.materializeCStruct0Tag

/**
 * cairo_matrix_t: : xx component of the affine transformation : yx component of the affine transformation : xy component of the affine transformation : yy component of the affine transformation : X translation component of the affine transformation : Y translation component of the affine transformation

 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type _cairo_matrix = CStruct6[Double, Double, Double, Double, Double, Double]
object _cairo_matrix:
  given _tag: Tag[_cairo_matrix] = Tag.materializeCStruct6Tag[Double, Double, Double, Double, Double, Double]
  def apply()(using Zone): Ptr[_cairo_matrix] = scala.scalanative.unsafe.alloc[_cairo_matrix](1)
  def apply(xx : Double, yx : Double, xy : Double, yy : Double, x0 : Double, y0 : Double)(using Zone): Ptr[_cairo_matrix] = 
    val ____ptr = apply()
    (!____ptr).xx = xx
    (!____ptr).yx = yx
    (!____ptr).xy = xy
    (!____ptr).yy = yy
    (!____ptr).x0 = x0
    (!____ptr).y0 = y0
    ____ptr
  extension (struct: _cairo_matrix)
    def xx : Double = struct._1
    def xx_=(value: Double): Unit = !struct.at1 = value
    def yx : Double = struct._2
    def yx_=(value: Double): Unit = !struct.at2 = value
    def xy : Double = struct._3
    def xy_=(value: Double): Unit = !struct.at3 = value
    def yy : Double = struct._4
    def yy_=(value: Double): Unit = !struct.at4 = value
    def x0 : Double = struct._5
    def x0_=(value: Double): Unit = !struct.at5 = value
    def y0 : Double = struct._6
    def y0_=(value: Double): Unit = !struct.at6 = value

/**
 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type _cairo_pattern = CStruct0
object _cairo_pattern:
  given _tag: Tag[_cairo_pattern] = Tag.materializeCStruct0Tag

/**
 * cairo_rectangle_t: : X coordinate of the left side of the rectangle : Y coordinate of the the top side of the rectangle : width of the rectangle : height of the rectangle

 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type _cairo_rectangle = CStruct4[Double, Double, Double, Double]
object _cairo_rectangle:
  given _tag: Tag[_cairo_rectangle] = Tag.materializeCStruct4Tag[Double, Double, Double, Double]
  def apply()(using Zone): Ptr[_cairo_rectangle] = scala.scalanative.unsafe.alloc[_cairo_rectangle](1)
  def apply(x : Double, y : Double, width : Double, height : Double)(using Zone): Ptr[_cairo_rectangle] = 
    val ____ptr = apply()
    (!____ptr).x = x
    (!____ptr).y = y
    (!____ptr).width = width
    (!____ptr).height = height
    ____ptr
  extension (struct: _cairo_rectangle)
    def x : Double = struct._1
    def x_=(value: Double): Unit = !struct.at1 = value
    def y : Double = struct._2
    def y_=(value: Double): Unit = !struct.at2 = value
    def width : Double = struct._3
    def width_=(value: Double): Unit = !struct.at3 = value
    def height : Double = struct._4
    def height_=(value: Double): Unit = !struct.at4 = value

/**
 * cairo_rectangle_int_t: : X coordinate of the left side of the rectangle : Y coordinate of the the top side of the rectangle : width of the rectangle : height of the rectangle

 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type _cairo_rectangle_int = CStruct4[CInt, CInt, CInt, CInt]
object _cairo_rectangle_int:
  given _tag: Tag[_cairo_rectangle_int] = Tag.materializeCStruct4Tag[CInt, CInt, CInt, CInt]
  def apply()(using Zone): Ptr[_cairo_rectangle_int] = scala.scalanative.unsafe.alloc[_cairo_rectangle_int](1)
  def apply(x : CInt, y : CInt, width : CInt, height : CInt)(using Zone): Ptr[_cairo_rectangle_int] = 
    val ____ptr = apply()
    (!____ptr).x = x
    (!____ptr).y = y
    (!____ptr).width = width
    (!____ptr).height = height
    ____ptr
  extension (struct: _cairo_rectangle_int)
    def x : CInt = struct._1
    def x_=(value: CInt): Unit = !struct.at1 = value
    def y : CInt = struct._2
    def y_=(value: CInt): Unit = !struct.at2 = value
    def width : CInt = struct._3
    def width_=(value: CInt): Unit = !struct.at3 = value
    def height : CInt = struct._4
    def height_=(value: CInt): Unit = !struct.at4 = value

/**
 * cairo_rectangle_list_t: : Error status of the rectangle list : Array containing the rectangles

 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type _cairo_rectangle_list = CStruct3[cairo_status_t, Ptr[cairo_rectangle_t], CInt]
object _cairo_rectangle_list:
  given _tag: Tag[_cairo_rectangle_list] = Tag.materializeCStruct3Tag[cairo_status_t, Ptr[cairo_rectangle_t], CInt]
  def apply()(using Zone): Ptr[_cairo_rectangle_list] = scala.scalanative.unsafe.alloc[_cairo_rectangle_list](1)
  def apply(status : cairo_status_t, rectangles : Ptr[cairo_rectangle_t], num_rectangles : CInt)(using Zone): Ptr[_cairo_rectangle_list] = 
    val ____ptr = apply()
    (!____ptr).status = status
    (!____ptr).rectangles = rectangles
    (!____ptr).num_rectangles = num_rectangles
    ____ptr
  extension (struct: _cairo_rectangle_list)
    def status : cairo_status_t = struct._1
    def status_=(value: cairo_status_t): Unit = !struct.at1 = value
    def rectangles : Ptr[cairo_rectangle_t] = struct._2
    def rectangles_=(value: Ptr[cairo_rectangle_t]): Unit = !struct.at2 = value
    def num_rectangles : CInt = struct._3
    def num_rectangles_=(value: CInt): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type _cairo_region = CStruct0
object _cairo_region:
  given _tag: Tag[_cairo_region] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type _cairo_scaled_font = CStruct0
object _cairo_scaled_font:
  given _tag: Tag[_cairo_scaled_font] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type _cairo_surface = CStruct0
object _cairo_surface:
  given _tag: Tag[_cairo_surface] = Tag.materializeCStruct0Tag

/**
 * cairo_user_data_key_t: : not used; ignore.

 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type _cairo_user_data_key = CStruct1[CInt]
object _cairo_user_data_key:
  given _tag: Tag[_cairo_user_data_key] = Tag.materializeCStruct1Tag[CInt]
  def apply()(using Zone): Ptr[_cairo_user_data_key] = scala.scalanative.unsafe.alloc[_cairo_user_data_key](1)
  def apply(unused : CInt)(using Zone): Ptr[_cairo_user_data_key] = 
    val ____ptr = apply()
    (!____ptr).unused = unused
    ____ptr
  extension (struct: _cairo_user_data_key)
    def unused : CInt = struct._1
    def unused_=(value: CInt): Unit = !struct.at1 = value

/**
 * graphene_box_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
*/
opaque type _graphene_box_t = CStruct2[graphene_vec3_t, graphene_vec3_t]
object _graphene_box_t:
  given _tag: Tag[_graphene_box_t] = Tag.materializeCStruct2Tag[graphene_vec3_t, graphene_vec3_t]
  def apply()(using Zone): Ptr[_graphene_box_t] = scala.scalanative.unsafe.alloc[_graphene_box_t](1)
  def apply(__graphene_private_min : graphene_vec3_t, __graphene_private_max : graphene_vec3_t)(using Zone): Ptr[_graphene_box_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_min = __graphene_private_min
    (!____ptr).__graphene_private_max = __graphene_private_max
    ____ptr
  extension (struct: _graphene_box_t)
    def __graphene_private_min : graphene_vec3_t = struct._1
    def __graphene_private_min_=(value: graphene_vec3_t): Unit = !struct.at1 = value
    def __graphene_private_max : graphene_vec3_t = struct._2
    def __graphene_private_max_=(value: graphene_vec3_t): Unit = !struct.at2 = value

/**
 * graphene_euler_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
*/
opaque type _graphene_euler_t = CStruct2[graphene_vec3_t, graphene_euler_order_t]
object _graphene_euler_t:
  given _tag: Tag[_graphene_euler_t] = Tag.materializeCStruct2Tag[graphene_vec3_t, graphene_euler_order_t]
  def apply()(using Zone): Ptr[_graphene_euler_t] = scala.scalanative.unsafe.alloc[_graphene_euler_t](1)
  def apply(__graphene_private_angles : graphene_vec3_t, __graphene_private_order : graphene_euler_order_t)(using Zone): Ptr[_graphene_euler_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_angles = __graphene_private_angles
    (!____ptr).__graphene_private_order = __graphene_private_order
    ____ptr
  extension (struct: _graphene_euler_t)
    def __graphene_private_angles : graphene_vec3_t = struct._1
    def __graphene_private_angles_=(value: graphene_vec3_t): Unit = !struct.at1 = value
    def __graphene_private_order : graphene_euler_order_t = struct._2
    def __graphene_private_order_=(value: graphene_euler_order_t): Unit = !struct.at2 = value

/**
 * graphene_frustum_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-frustum.h
*/
opaque type _graphene_frustum_t = CStruct1[CArray[graphene_plane_t, Nat._6]]
object _graphene_frustum_t:
  given _tag: Tag[_graphene_frustum_t] = Tag.materializeCStruct1Tag[CArray[graphene_plane_t, Nat._6]]
  def apply()(using Zone): Ptr[_graphene_frustum_t] = scala.scalanative.unsafe.alloc[_graphene_frustum_t](1)
  def apply(__graphene_private_planes : CArray[graphene_plane_t, Nat._6])(using Zone): Ptr[_graphene_frustum_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_planes = __graphene_private_planes
    ____ptr
  extension (struct: _graphene_frustum_t)
    def __graphene_private_planes : CArray[graphene_plane_t, Nat._6] = struct._1
    def __graphene_private_planes_=(value: CArray[graphene_plane_t, Nat._6]): Unit = !struct.at1 = value

/**
 * graphene_matrix_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
*/
opaque type _graphene_matrix_t = CStruct1[graphene_simd4x4f_t]
object _graphene_matrix_t:
  given _tag: Tag[_graphene_matrix_t] = Tag.materializeCStruct1Tag[graphene_simd4x4f_t]
  def apply()(using Zone): Ptr[_graphene_matrix_t] = scala.scalanative.unsafe.alloc[_graphene_matrix_t](1)
  def apply(__graphene_private_value : graphene_simd4x4f_t)(using Zone): Ptr[_graphene_matrix_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_value = __graphene_private_value
    ____ptr
  extension (struct: _graphene_matrix_t)
    def __graphene_private_value : graphene_simd4x4f_t = struct._1
    def __graphene_private_value_=(value: graphene_simd4x4f_t): Unit = !struct.at1 = value

/**
 * graphene_plane_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-plane.h
*/
opaque type _graphene_plane_t = CStruct2[graphene_vec3_t, Float]
object _graphene_plane_t:
  given _tag: Tag[_graphene_plane_t] = Tag.materializeCStruct2Tag[graphene_vec3_t, Float]
  def apply()(using Zone): Ptr[_graphene_plane_t] = scala.scalanative.unsafe.alloc[_graphene_plane_t](1)
  def apply(__graphene_private_normal : graphene_vec3_t, __graphene_private_constant : Float)(using Zone): Ptr[_graphene_plane_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_normal = __graphene_private_normal
    (!____ptr).__graphene_private_constant = __graphene_private_constant
    ____ptr
  extension (struct: _graphene_plane_t)
    def __graphene_private_normal : graphene_vec3_t = struct._1
    def __graphene_private_normal_=(value: graphene_vec3_t): Unit = !struct.at1 = value
    def __graphene_private_constant : Float = struct._2
    def __graphene_private_constant_=(value: Float): Unit = !struct.at2 = value

/**
 * graphene_point3d_t: : the X coordinate : the Y coordinate : the Z coordinate

 * [bindgen] header: /usr/include/graphene-1.0/graphene-point3d.h
*/
opaque type _graphene_point3d_t = CStruct3[Float, Float, Float]
object _graphene_point3d_t:
  given _tag: Tag[_graphene_point3d_t] = Tag.materializeCStruct3Tag[Float, Float, Float]
  def apply()(using Zone): Ptr[_graphene_point3d_t] = scala.scalanative.unsafe.alloc[_graphene_point3d_t](1)
  def apply(x : Float, y : Float, z : Float)(using Zone): Ptr[_graphene_point3d_t] = 
    val ____ptr = apply()
    (!____ptr).x = x
    (!____ptr).y = y
    (!____ptr).z = z
    ____ptr
  extension (struct: _graphene_point3d_t)
    def x : Float = struct._1
    def x_=(value: Float): Unit = !struct.at1 = value
    def y : Float = struct._2
    def y_=(value: Float): Unit = !struct.at2 = value
    def z : Float = struct._3
    def z_=(value: Float): Unit = !struct.at3 = value

/**
 * graphene_point_t: : the X coordinate of the point : the Y coordinate of the point

 * [bindgen] header: /usr/include/graphene-1.0/graphene-point.h
*/
opaque type _graphene_point_t = CStruct2[Float, Float]
object _graphene_point_t:
  given _tag: Tag[_graphene_point_t] = Tag.materializeCStruct2Tag[Float, Float]
  def apply()(using Zone): Ptr[_graphene_point_t] = scala.scalanative.unsafe.alloc[_graphene_point_t](1)
  def apply(x : Float, y : Float)(using Zone): Ptr[_graphene_point_t] = 
    val ____ptr = apply()
    (!____ptr).x = x
    (!____ptr).y = y
    ____ptr
  extension (struct: _graphene_point_t)
    def x : Float = struct._1
    def x_=(value: Float): Unit = !struct.at1 = value
    def y : Float = struct._2
    def y_=(value: Float): Unit = !struct.at2 = value

/**
 * graphene_quad_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-quad.h
*/
opaque type _graphene_quad_t = CStruct1[CArray[graphene_point_t, Nat._4]]
object _graphene_quad_t:
  given _tag: Tag[_graphene_quad_t] = Tag.materializeCStruct1Tag[CArray[graphene_point_t, Nat._4]]
  def apply()(using Zone): Ptr[_graphene_quad_t] = scala.scalanative.unsafe.alloc[_graphene_quad_t](1)
  def apply(__graphene_private_points : CArray[graphene_point_t, Nat._4])(using Zone): Ptr[_graphene_quad_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_points = __graphene_private_points
    ____ptr
  extension (struct: _graphene_quad_t)
    def __graphene_private_points : CArray[graphene_point_t, Nat._4] = struct._1
    def __graphene_private_points_=(value: CArray[graphene_point_t, Nat._4]): Unit = !struct.at1 = value

/**
 * graphene_quaternion_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
*/
opaque type _graphene_quaternion_t = CStruct4[Float, Float, Float, Float]
object _graphene_quaternion_t:
  given _tag: Tag[_graphene_quaternion_t] = Tag.materializeCStruct4Tag[Float, Float, Float, Float]
  def apply()(using Zone): Ptr[_graphene_quaternion_t] = scala.scalanative.unsafe.alloc[_graphene_quaternion_t](1)
  def apply(__graphene_private_x : Float, __graphene_private_y : Float, __graphene_private_z : Float, __graphene_private_w : Float)(using Zone): Ptr[_graphene_quaternion_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_x = __graphene_private_x
    (!____ptr).__graphene_private_y = __graphene_private_y
    (!____ptr).__graphene_private_z = __graphene_private_z
    (!____ptr).__graphene_private_w = __graphene_private_w
    ____ptr
  extension (struct: _graphene_quaternion_t)
    def __graphene_private_x : Float = struct._1
    def __graphene_private_x_=(value: Float): Unit = !struct.at1 = value
    def __graphene_private_y : Float = struct._2
    def __graphene_private_y_=(value: Float): Unit = !struct.at2 = value
    def __graphene_private_z : Float = struct._3
    def __graphene_private_z_=(value: Float): Unit = !struct.at3 = value
    def __graphene_private_w : Float = struct._4
    def __graphene_private_w_=(value: Float): Unit = !struct.at4 = value

/**
 * graphene_ray_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-ray.h
*/
opaque type _graphene_ray_t = CStruct2[graphene_vec3_t, graphene_vec3_t]
object _graphene_ray_t:
  given _tag: Tag[_graphene_ray_t] = Tag.materializeCStruct2Tag[graphene_vec3_t, graphene_vec3_t]
  def apply()(using Zone): Ptr[_graphene_ray_t] = scala.scalanative.unsafe.alloc[_graphene_ray_t](1)
  def apply(__graphene_private_origin : graphene_vec3_t, __graphene_private_direction : graphene_vec3_t)(using Zone): Ptr[_graphene_ray_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_origin = __graphene_private_origin
    (!____ptr).__graphene_private_direction = __graphene_private_direction
    ____ptr
  extension (struct: _graphene_ray_t)
    def __graphene_private_origin : graphene_vec3_t = struct._1
    def __graphene_private_origin_=(value: graphene_vec3_t): Unit = !struct.at1 = value
    def __graphene_private_direction : graphene_vec3_t = struct._2
    def __graphene_private_direction_=(value: graphene_vec3_t): Unit = !struct.at2 = value

/**
 * graphene_rect_t: : the coordinates of the origin of the rectangle : the size of the rectangle

 * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
*/
opaque type _graphene_rect_t = CStruct2[graphene_point_t, graphene_size_t]
object _graphene_rect_t:
  given _tag: Tag[_graphene_rect_t] = Tag.materializeCStruct2Tag[graphene_point_t, graphene_size_t]
  def apply()(using Zone): Ptr[_graphene_rect_t] = scala.scalanative.unsafe.alloc[_graphene_rect_t](1)
  def apply(origin : graphene_point_t, size : graphene_size_t)(using Zone): Ptr[_graphene_rect_t] = 
    val ____ptr = apply()
    (!____ptr).origin = origin
    (!____ptr).size = size
    ____ptr
  extension (struct: _graphene_rect_t)
    def origin : graphene_point_t = struct._1
    def origin_=(value: graphene_point_t): Unit = !struct.at1 = value
    def size : graphene_size_t = struct._2
    def size_=(value: graphene_size_t): Unit = !struct.at2 = value

/**
 * graphene_size_t: : the width : the height

 * [bindgen] header: /usr/include/graphene-1.0/graphene-size.h
*/
opaque type _graphene_size_t = CStruct2[Float, Float]
object _graphene_size_t:
  given _tag: Tag[_graphene_size_t] = Tag.materializeCStruct2Tag[Float, Float]
  def apply()(using Zone): Ptr[_graphene_size_t] = scala.scalanative.unsafe.alloc[_graphene_size_t](1)
  def apply(width : Float, height : Float)(using Zone): Ptr[_graphene_size_t] = 
    val ____ptr = apply()
    (!____ptr).width = width
    (!____ptr).height = height
    ____ptr
  extension (struct: _graphene_size_t)
    def width : Float = struct._1
    def width_=(value: Float): Unit = !struct.at1 = value
    def height : Float = struct._2
    def height_=(value: Float): Unit = !struct.at2 = value

/**
 * graphene_sphere_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-sphere.h
*/
opaque type _graphene_sphere_t = CStruct2[graphene_vec3_t, Float]
object _graphene_sphere_t:
  given _tag: Tag[_graphene_sphere_t] = Tag.materializeCStruct2Tag[graphene_vec3_t, Float]
  def apply()(using Zone): Ptr[_graphene_sphere_t] = scala.scalanative.unsafe.alloc[_graphene_sphere_t](1)
  def apply(__graphene_private_center : graphene_vec3_t, __graphene_private_radius : Float)(using Zone): Ptr[_graphene_sphere_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_center = __graphene_private_center
    (!____ptr).__graphene_private_radius = __graphene_private_radius
    ____ptr
  extension (struct: _graphene_sphere_t)
    def __graphene_private_center : graphene_vec3_t = struct._1
    def __graphene_private_center_=(value: graphene_vec3_t): Unit = !struct.at1 = value
    def __graphene_private_radius : Float = struct._2
    def __graphene_private_radius_=(value: Float): Unit = !struct.at2 = value

/**
 * graphene_triangle_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-triangle.h
*/
opaque type _graphene_triangle_t = CStruct3[graphene_vec3_t, graphene_vec3_t, graphene_vec3_t]
object _graphene_triangle_t:
  given _tag: Tag[_graphene_triangle_t] = Tag.materializeCStruct3Tag[graphene_vec3_t, graphene_vec3_t, graphene_vec3_t]
  def apply()(using Zone): Ptr[_graphene_triangle_t] = scala.scalanative.unsafe.alloc[_graphene_triangle_t](1)
  def apply(__graphene_private_a : graphene_vec3_t, __graphene_private_b : graphene_vec3_t, __graphene_private_c : graphene_vec3_t)(using Zone): Ptr[_graphene_triangle_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_a = __graphene_private_a
    (!____ptr).__graphene_private_b = __graphene_private_b
    (!____ptr).__graphene_private_c = __graphene_private_c
    ____ptr
  extension (struct: _graphene_triangle_t)
    def __graphene_private_a : graphene_vec3_t = struct._1
    def __graphene_private_a_=(value: graphene_vec3_t): Unit = !struct.at1 = value
    def __graphene_private_b : graphene_vec3_t = struct._2
    def __graphene_private_b_=(value: graphene_vec3_t): Unit = !struct.at2 = value
    def __graphene_private_c : graphene_vec3_t = struct._3
    def __graphene_private_c_=(value: graphene_vec3_t): Unit = !struct.at3 = value

/**
 * graphene_vec2_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
*/
opaque type _graphene_vec2_t = CStruct1[graphene_simd4f_t]
object _graphene_vec2_t:
  given _tag: Tag[_graphene_vec2_t] = Tag.materializeCStruct1Tag[graphene_simd4f_t]
  def apply()(using Zone): Ptr[_graphene_vec2_t] = scala.scalanative.unsafe.alloc[_graphene_vec2_t](1)
  def apply(__graphene_private_value : graphene_simd4f_t)(using Zone): Ptr[_graphene_vec2_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_value = __graphene_private_value
    ____ptr
  extension (struct: _graphene_vec2_t)
    def __graphene_private_value : graphene_simd4f_t = struct._1
    def __graphene_private_value_=(value: graphene_simd4f_t): Unit = !struct.at1 = value

/**
 * graphene_vec3_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
*/
opaque type _graphene_vec3_t = CStruct1[graphene_simd4f_t]
object _graphene_vec3_t:
  given _tag: Tag[_graphene_vec3_t] = Tag.materializeCStruct1Tag[graphene_simd4f_t]
  def apply()(using Zone): Ptr[_graphene_vec3_t] = scala.scalanative.unsafe.alloc[_graphene_vec3_t](1)
  def apply(__graphene_private_value : graphene_simd4f_t)(using Zone): Ptr[_graphene_vec3_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_value = __graphene_private_value
    ____ptr
  extension (struct: _graphene_vec3_t)
    def __graphene_private_value : graphene_simd4f_t = struct._1
    def __graphene_private_value_=(value: graphene_simd4f_t): Unit = !struct.at1 = value

/**
 * graphene_vec4_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
*/
opaque type _graphene_vec4_t = CStruct1[graphene_simd4f_t]
object _graphene_vec4_t:
  given _tag: Tag[_graphene_vec4_t] = Tag.materializeCStruct1Tag[graphene_simd4f_t]
  def apply()(using Zone): Ptr[_graphene_vec4_t] = scala.scalanative.unsafe.alloc[_graphene_vec4_t](1)
  def apply(__graphene_private_value : graphene_simd4f_t)(using Zone): Ptr[_graphene_vec4_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_value = __graphene_private_value
    ____ptr
  extension (struct: _graphene_vec4_t)
    def __graphene_private_value : graphene_simd4f_t = struct._1
    def __graphene_private_value_=(value: graphene_simd4f_t): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type cairo_device_t = CStruct0
object cairo_device_t:
  given _tag: Tag[cairo_device_t] = Tag.materializeCStruct0Tag

/**
 * cairo_font_extents_t: : the distance that the font extends above the baseline. Note that this is not always exactly equal to the maximum of the extents of all the glyphs in the font, but rather is picked to express the font designer's intent as to how the font should align with elements above it. : the distance that the font extends below the baseline. This value is positive for typical fonts that include portions below the baseline. Note that this is not always exactly equal to the maximum of the extents of all the glyphs in the font, but rather is picked to express the font designer's intent as to how the font should align with elements below it. : the recommended vertical distance between baselines when setting consecutive lines of text with the font. This is greater than + by a quantity known as the <firstterm>line spacing</firstterm> or <firstterm>external leading</firstterm>. When space is at a premium, most fonts can be set with only a distance of + between lines. _x_advance: the maximum distance in the X direction that the origin is advanced for any glyph in the font. _y_advance: the maximum distance in the Y direction that the origin is advanced for any glyph in the font. This will be zero for normal fonts used for horizontal writing. (The scripts of East Asia are sometimes written vertically.)

 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type cairo_font_extents_t = CStruct5[Double, Double, Double, Double, Double]
object cairo_font_extents_t:
  given _tag: Tag[cairo_font_extents_t] = Tag.materializeCStruct5Tag[Double, Double, Double, Double, Double]
  def apply()(using Zone): Ptr[cairo_font_extents_t] = scala.scalanative.unsafe.alloc[cairo_font_extents_t](1)
  def apply(ascent : Double, descent : Double, height : Double, max_x_advance : Double, max_y_advance : Double)(using Zone): Ptr[cairo_font_extents_t] = 
    val ____ptr = apply()
    (!____ptr).ascent = ascent
    (!____ptr).descent = descent
    (!____ptr).height = height
    (!____ptr).max_x_advance = max_x_advance
    (!____ptr).max_y_advance = max_y_advance
    ____ptr
  extension (struct: cairo_font_extents_t)
    def ascent : Double = struct._1
    def ascent_=(value: Double): Unit = !struct.at1 = value
    def descent : Double = struct._2
    def descent_=(value: Double): Unit = !struct.at2 = value
    def height : Double = struct._3
    def height_=(value: Double): Unit = !struct.at3 = value
    def max_x_advance : Double = struct._4
    def max_x_advance_=(value: Double): Unit = !struct.at4 = value
    def max_y_advance : Double = struct._5
    def max_y_advance_=(value: Double): Unit = !struct.at5 = value

/**
 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type cairo_font_face_t = CStruct0
object cairo_font_face_t:
  given _tag: Tag[cairo_font_face_t] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type cairo_font_options_t = CStruct0
object cairo_font_options_t:
  given _tag: Tag[cairo_font_options_t] = Tag.materializeCStruct0Tag

/**
 * cairo_glyph_t: : glyph index in the font. The exact interpretation of the glyph index depends on the font technology being used. : the offset in the X direction between the origin used for drawing or measuring the string and the origin of this glyph. : the offset in the Y direction between the origin used for drawing or measuring the string and the origin of this glyph.

 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type cairo_glyph_t = CStruct3[CUnsignedLongInt, Double, Double]
object cairo_glyph_t:
  given _tag: Tag[cairo_glyph_t] = Tag.materializeCStruct3Tag[CUnsignedLongInt, Double, Double]
  def apply()(using Zone): Ptr[cairo_glyph_t] = scala.scalanative.unsafe.alloc[cairo_glyph_t](1)
  def apply(index : CUnsignedLongInt, x : Double, y : Double)(using Zone): Ptr[cairo_glyph_t] = 
    val ____ptr = apply()
    (!____ptr).index = index
    (!____ptr).x = x
    (!____ptr).y = y
    ____ptr
  extension (struct: cairo_glyph_t)
    def index : CUnsignedLongInt = struct._1
    def index_=(value: CUnsignedLongInt): Unit = !struct.at1 = value
    def x : Double = struct._2
    def x_=(value: Double): Unit = !struct.at2 = value
    def y : Double = struct._3
    def y_=(value: Double): Unit = !struct.at3 = value

/**
 * cairo_matrix_t: : xx component of the affine transformation : yx component of the affine transformation : xy component of the affine transformation : yy component of the affine transformation : X translation component of the affine transformation : Y translation component of the affine transformation

 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type cairo_matrix_t = CStruct6[Double, Double, Double, Double, Double, Double]
object cairo_matrix_t:
  given _tag: Tag[cairo_matrix_t] = Tag.materializeCStruct6Tag[Double, Double, Double, Double, Double, Double]
  def apply()(using Zone): Ptr[cairo_matrix_t] = scala.scalanative.unsafe.alloc[cairo_matrix_t](1)
  def apply(xx : Double, yx : Double, xy : Double, yy : Double, x0 : Double, y0 : Double)(using Zone): Ptr[cairo_matrix_t] = 
    val ____ptr = apply()
    (!____ptr).xx = xx
    (!____ptr).yx = yx
    (!____ptr).xy = xy
    (!____ptr).yy = yy
    (!____ptr).x0 = x0
    (!____ptr).y0 = y0
    ____ptr
  extension (struct: cairo_matrix_t)
    def xx : Double = struct._1
    def xx_=(value: Double): Unit = !struct.at1 = value
    def yx : Double = struct._2
    def yx_=(value: Double): Unit = !struct.at2 = value
    def xy : Double = struct._3
    def xy_=(value: Double): Unit = !struct.at3 = value
    def yy : Double = struct._4
    def yy_=(value: Double): Unit = !struct.at4 = value
    def x0 : Double = struct._5
    def x0_=(value: Double): Unit = !struct.at5 = value
    def y0 : Double = struct._6
    def y0_=(value: Double): Unit = !struct.at6 = value

/**
 * cairo_path_t: : the current error status

 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type cairo_path = CStruct3[cairo_status_t, Ptr[cairo_path_data_t], CInt]
object cairo_path:
  given _tag: Tag[cairo_path] = Tag.materializeCStruct3Tag[cairo_status_t, Ptr[cairo_path_data_t], CInt]
  def apply()(using Zone): Ptr[cairo_path] = scala.scalanative.unsafe.alloc[cairo_path](1)
  def apply(status : cairo_status_t, data : Ptr[cairo_path_data_t], num_data : CInt)(using Zone): Ptr[cairo_path] = 
    val ____ptr = apply()
    (!____ptr).status = status
    (!____ptr).data = data
    (!____ptr).num_data = num_data
    ____ptr
  extension (struct: cairo_path)
    def status : cairo_status_t = struct._1
    def status_=(value: cairo_status_t): Unit = !struct.at1 = value
    def data : Ptr[cairo_path_data_t] = struct._2
    def data_=(value: Ptr[cairo_path_data_t]): Unit = !struct.at2 = value
    def num_data : CInt = struct._3
    def num_data_=(value: CInt): Unit = !struct.at3 = value

/**
 * cairo_path_t: : the current error status

 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type cairo_path_t = CStruct3[cairo_status_t, Ptr[cairo_path_data_t], CInt]
object cairo_path_t:
  given _tag: Tag[cairo_path_t] = Tag.materializeCStruct3Tag[cairo_status_t, Ptr[cairo_path_data_t], CInt]
  def apply()(using Zone): Ptr[cairo_path_t] = scala.scalanative.unsafe.alloc[cairo_path_t](1)
  def apply(status : cairo_status_t, data : Ptr[cairo_path_data_t], num_data : CInt)(using Zone): Ptr[cairo_path_t] = 
    val ____ptr = apply()
    (!____ptr).status = status
    (!____ptr).data = data
    (!____ptr).num_data = num_data
    ____ptr
  extension (struct: cairo_path_t)
    def status : cairo_status_t = struct._1
    def status_=(value: cairo_status_t): Unit = !struct.at1 = value
    def data : Ptr[cairo_path_data_t] = struct._2
    def data_=(value: Ptr[cairo_path_data_t]): Unit = !struct.at2 = value
    def num_data : CInt = struct._3
    def num_data_=(value: CInt): Unit = !struct.at3 = value

/**
 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type cairo_pattern_t = CStruct0
object cairo_pattern_t:
  given _tag: Tag[cairo_pattern_t] = Tag.materializeCStruct0Tag

/**
 * cairo_rectangle_int_t: : X coordinate of the left side of the rectangle : Y coordinate of the the top side of the rectangle : width of the rectangle : height of the rectangle

 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type cairo_rectangle_int_t = CStruct4[CInt, CInt, CInt, CInt]
object cairo_rectangle_int_t:
  given _tag: Tag[cairo_rectangle_int_t] = Tag.materializeCStruct4Tag[CInt, CInt, CInt, CInt]
  def apply()(using Zone): Ptr[cairo_rectangle_int_t] = scala.scalanative.unsafe.alloc[cairo_rectangle_int_t](1)
  def apply(x : CInt, y : CInt, width : CInt, height : CInt)(using Zone): Ptr[cairo_rectangle_int_t] = 
    val ____ptr = apply()
    (!____ptr).x = x
    (!____ptr).y = y
    (!____ptr).width = width
    (!____ptr).height = height
    ____ptr
  extension (struct: cairo_rectangle_int_t)
    def x : CInt = struct._1
    def x_=(value: CInt): Unit = !struct.at1 = value
    def y : CInt = struct._2
    def y_=(value: CInt): Unit = !struct.at2 = value
    def width : CInt = struct._3
    def width_=(value: CInt): Unit = !struct.at3 = value
    def height : CInt = struct._4
    def height_=(value: CInt): Unit = !struct.at4 = value

/**
 * cairo_rectangle_list_t: : Error status of the rectangle list : Array containing the rectangles

 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type cairo_rectangle_list_t = CStruct3[cairo_status_t, Ptr[cairo_rectangle_t], CInt]
object cairo_rectangle_list_t:
  given _tag: Tag[cairo_rectangle_list_t] = Tag.materializeCStruct3Tag[cairo_status_t, Ptr[cairo_rectangle_t], CInt]
  def apply()(using Zone): Ptr[cairo_rectangle_list_t] = scala.scalanative.unsafe.alloc[cairo_rectangle_list_t](1)
  def apply(status : cairo_status_t, rectangles : Ptr[cairo_rectangle_t], num_rectangles : CInt)(using Zone): Ptr[cairo_rectangle_list_t] = 
    val ____ptr = apply()
    (!____ptr).status = status
    (!____ptr).rectangles = rectangles
    (!____ptr).num_rectangles = num_rectangles
    ____ptr
  extension (struct: cairo_rectangle_list_t)
    def status : cairo_status_t = struct._1
    def status_=(value: cairo_status_t): Unit = !struct.at1 = value
    def rectangles : Ptr[cairo_rectangle_t] = struct._2
    def rectangles_=(value: Ptr[cairo_rectangle_t]): Unit = !struct.at2 = value
    def num_rectangles : CInt = struct._3
    def num_rectangles_=(value: CInt): Unit = !struct.at3 = value

/**
 * cairo_rectangle_t: : X coordinate of the left side of the rectangle : Y coordinate of the the top side of the rectangle : width of the rectangle : height of the rectangle

 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type cairo_rectangle_t = CStruct4[Double, Double, Double, Double]
object cairo_rectangle_t:
  given _tag: Tag[cairo_rectangle_t] = Tag.materializeCStruct4Tag[Double, Double, Double, Double]
  def apply()(using Zone): Ptr[cairo_rectangle_t] = scala.scalanative.unsafe.alloc[cairo_rectangle_t](1)
  def apply(x : Double, y : Double, width : Double, height : Double)(using Zone): Ptr[cairo_rectangle_t] = 
    val ____ptr = apply()
    (!____ptr).x = x
    (!____ptr).y = y
    (!____ptr).width = width
    (!____ptr).height = height
    ____ptr
  extension (struct: cairo_rectangle_t)
    def x : Double = struct._1
    def x_=(value: Double): Unit = !struct.at1 = value
    def y : Double = struct._2
    def y_=(value: Double): Unit = !struct.at2 = value
    def width : Double = struct._3
    def width_=(value: Double): Unit = !struct.at3 = value
    def height : Double = struct._4
    def height_=(value: Double): Unit = !struct.at4 = value

/**
 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type cairo_region_t = CStruct0
object cairo_region_t:
  given _tag: Tag[cairo_region_t] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type cairo_scaled_font_t = CStruct0
object cairo_scaled_font_t:
  given _tag: Tag[cairo_scaled_font_t] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type cairo_surface_t = CStruct0
object cairo_surface_t:
  given _tag: Tag[cairo_surface_t] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type cairo_t = CStruct0
object cairo_t:
  given _tag: Tag[cairo_t] = Tag.materializeCStruct0Tag

/**
 * cairo_text_cluster_t:

 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type cairo_text_cluster_t = CStruct2[CInt, CInt]
object cairo_text_cluster_t:
  given _tag: Tag[cairo_text_cluster_t] = Tag.materializeCStruct2Tag[CInt, CInt]
  def apply()(using Zone): Ptr[cairo_text_cluster_t] = scala.scalanative.unsafe.alloc[cairo_text_cluster_t](1)
  def apply(num_bytes : CInt, num_glyphs : CInt)(using Zone): Ptr[cairo_text_cluster_t] = 
    val ____ptr = apply()
    (!____ptr).num_bytes = num_bytes
    (!____ptr).num_glyphs = num_glyphs
    ____ptr
  extension (struct: cairo_text_cluster_t)
    def num_bytes : CInt = struct._1
    def num_bytes_=(value: CInt): Unit = !struct.at1 = value
    def num_glyphs : CInt = struct._2
    def num_glyphs_=(value: CInt): Unit = !struct.at2 = value

/**
 * cairo_text_extents_t: _bearing: the horizontal distance from the origin to the leftmost part of the glyphs as drawn. Positive if the glyphs lie entirely to the right of the origin. _bearing: the vertical distance from the origin to the topmost part of the glyphs as drawn. Positive only if the glyphs lie completely below the origin; will usually be negative. : width of the glyphs as drawn : height of the glyphs as drawn _advance:distance to advance in the X direction after drawing these glyphs _advance: distance to advance in the Y direction after drawing these glyphs. Will typically be zero except for vertical text layout as found in East-Asian languages.

 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type cairo_text_extents_t = CStruct6[Double, Double, Double, Double, Double, Double]
object cairo_text_extents_t:
  given _tag: Tag[cairo_text_extents_t] = Tag.materializeCStruct6Tag[Double, Double, Double, Double, Double, Double]
  def apply()(using Zone): Ptr[cairo_text_extents_t] = scala.scalanative.unsafe.alloc[cairo_text_extents_t](1)
  def apply(x_bearing : Double, y_bearing : Double, width : Double, height : Double, x_advance : Double, y_advance : Double)(using Zone): Ptr[cairo_text_extents_t] = 
    val ____ptr = apply()
    (!____ptr).x_bearing = x_bearing
    (!____ptr).y_bearing = y_bearing
    (!____ptr).width = width
    (!____ptr).height = height
    (!____ptr).x_advance = x_advance
    (!____ptr).y_advance = y_advance
    ____ptr
  extension (struct: cairo_text_extents_t)
    def x_bearing : Double = struct._1
    def x_bearing_=(value: Double): Unit = !struct.at1 = value
    def y_bearing : Double = struct._2
    def y_bearing_=(value: Double): Unit = !struct.at2 = value
    def width : Double = struct._3
    def width_=(value: Double): Unit = !struct.at3 = value
    def height : Double = struct._4
    def height_=(value: Double): Unit = !struct.at4 = value
    def x_advance : Double = struct._5
    def x_advance_=(value: Double): Unit = !struct.at5 = value
    def y_advance : Double = struct._6
    def y_advance_=(value: Double): Unit = !struct.at6 = value

/**
 * cairo_user_data_key_t: : not used; ignore.

 * [bindgen] header: /usr/include/cairo/cairo.h
*/
opaque type cairo_user_data_key_t = CStruct1[CInt]
object cairo_user_data_key_t:
  given _tag: Tag[cairo_user_data_key_t] = Tag.materializeCStruct1Tag[CInt]
  def apply()(using Zone): Ptr[cairo_user_data_key_t] = scala.scalanative.unsafe.alloc[cairo_user_data_key_t](1)
  def apply(unused : CInt)(using Zone): Ptr[cairo_user_data_key_t] = 
    val ____ptr = apply()
    (!____ptr).unused = unused
    ____ptr
  extension (struct: cairo_user_data_key_t)
    def unused : CInt = struct._1
    def unused_=(value: CInt): Unit = !struct.at1 = value

/**
 * graphene_box_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
*/
opaque type graphene_box_t = CStruct2[graphene_vec3_t, graphene_vec3_t]
object graphene_box_t:
  given _tag: Tag[graphene_box_t] = Tag.materializeCStruct2Tag[graphene_vec3_t, graphene_vec3_t]
  def apply()(using Zone): Ptr[graphene_box_t] = scala.scalanative.unsafe.alloc[graphene_box_t](1)
  def apply(__graphene_private_min : graphene_vec3_t, __graphene_private_max : graphene_vec3_t)(using Zone): Ptr[graphene_box_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_min = __graphene_private_min
    (!____ptr).__graphene_private_max = __graphene_private_max
    ____ptr
  extension (struct: graphene_box_t)
    def __graphene_private_min : graphene_vec3_t = struct._1
    def __graphene_private_min_=(value: graphene_vec3_t): Unit = !struct.at1 = value
    def __graphene_private_max : graphene_vec3_t = struct._2
    def __graphene_private_max_=(value: graphene_vec3_t): Unit = !struct.at2 = value

/**
 * graphene_euler_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
*/
opaque type graphene_euler_t = CStruct2[graphene_vec3_t, graphene_euler_order_t]
object graphene_euler_t:
  given _tag: Tag[graphene_euler_t] = Tag.materializeCStruct2Tag[graphene_vec3_t, graphene_euler_order_t]
  def apply()(using Zone): Ptr[graphene_euler_t] = scala.scalanative.unsafe.alloc[graphene_euler_t](1)
  def apply(__graphene_private_angles : graphene_vec3_t, __graphene_private_order : graphene_euler_order_t)(using Zone): Ptr[graphene_euler_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_angles = __graphene_private_angles
    (!____ptr).__graphene_private_order = __graphene_private_order
    ____ptr
  extension (struct: graphene_euler_t)
    def __graphene_private_angles : graphene_vec3_t = struct._1
    def __graphene_private_angles_=(value: graphene_vec3_t): Unit = !struct.at1 = value
    def __graphene_private_order : graphene_euler_order_t = struct._2
    def __graphene_private_order_=(value: graphene_euler_order_t): Unit = !struct.at2 = value

/**
 * graphene_frustum_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-frustum.h
*/
opaque type graphene_frustum_t = CStruct1[CArray[graphene_plane_t, Nat._6]]
object graphene_frustum_t:
  given _tag: Tag[graphene_frustum_t] = Tag.materializeCStruct1Tag[CArray[graphene_plane_t, Nat._6]]
  def apply()(using Zone): Ptr[graphene_frustum_t] = scala.scalanative.unsafe.alloc[graphene_frustum_t](1)
  def apply(__graphene_private_planes : CArray[graphene_plane_t, Nat._6])(using Zone): Ptr[graphene_frustum_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_planes = __graphene_private_planes
    ____ptr
  extension (struct: graphene_frustum_t)
    def __graphene_private_planes : CArray[graphene_plane_t, Nat._6] = struct._1
    def __graphene_private_planes_=(value: CArray[graphene_plane_t, Nat._6]): Unit = !struct.at1 = value

/**
 * graphene_matrix_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
*/
opaque type graphene_matrix_t = CStruct1[graphene_simd4x4f_t]
object graphene_matrix_t:
  given _tag: Tag[graphene_matrix_t] = Tag.materializeCStruct1Tag[graphene_simd4x4f_t]
  def apply()(using Zone): Ptr[graphene_matrix_t] = scala.scalanative.unsafe.alloc[graphene_matrix_t](1)
  def apply(__graphene_private_value : graphene_simd4x4f_t)(using Zone): Ptr[graphene_matrix_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_value = __graphene_private_value
    ____ptr
  extension (struct: graphene_matrix_t)
    def __graphene_private_value : graphene_simd4x4f_t = struct._1
    def __graphene_private_value_=(value: graphene_simd4x4f_t): Unit = !struct.at1 = value

/**
 * graphene_plane_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-plane.h
*/
opaque type graphene_plane_t = CStruct2[graphene_vec3_t, Float]
object graphene_plane_t:
  given _tag: Tag[graphene_plane_t] = Tag.materializeCStruct2Tag[graphene_vec3_t, Float]
  def apply()(using Zone): Ptr[graphene_plane_t] = scala.scalanative.unsafe.alloc[graphene_plane_t](1)
  def apply(__graphene_private_normal : graphene_vec3_t, __graphene_private_constant : Float)(using Zone): Ptr[graphene_plane_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_normal = __graphene_private_normal
    (!____ptr).__graphene_private_constant = __graphene_private_constant
    ____ptr
  extension (struct: graphene_plane_t)
    def __graphene_private_normal : graphene_vec3_t = struct._1
    def __graphene_private_normal_=(value: graphene_vec3_t): Unit = !struct.at1 = value
    def __graphene_private_constant : Float = struct._2
    def __graphene_private_constant_=(value: Float): Unit = !struct.at2 = value

/**
 * graphene_point3d_t: : the X coordinate : the Y coordinate : the Z coordinate

 * [bindgen] header: /usr/include/graphene-1.0/graphene-point3d.h
*/
opaque type graphene_point3d_t = CStruct3[Float, Float, Float]
object graphene_point3d_t:
  given _tag: Tag[graphene_point3d_t] = Tag.materializeCStruct3Tag[Float, Float, Float]
  def apply()(using Zone): Ptr[graphene_point3d_t] = scala.scalanative.unsafe.alloc[graphene_point3d_t](1)
  def apply(x : Float, y : Float, z : Float)(using Zone): Ptr[graphene_point3d_t] = 
    val ____ptr = apply()
    (!____ptr).x = x
    (!____ptr).y = y
    (!____ptr).z = z
    ____ptr
  extension (struct: graphene_point3d_t)
    def x : Float = struct._1
    def x_=(value: Float): Unit = !struct.at1 = value
    def y : Float = struct._2
    def y_=(value: Float): Unit = !struct.at2 = value
    def z : Float = struct._3
    def z_=(value: Float): Unit = !struct.at3 = value

/**
 * graphene_point_t: : the X coordinate of the point : the Y coordinate of the point

 * [bindgen] header: /usr/include/graphene-1.0/graphene-point.h
*/
opaque type graphene_point_t = CStruct2[Float, Float]
object graphene_point_t:
  given _tag: Tag[graphene_point_t] = Tag.materializeCStruct2Tag[Float, Float]
  def apply()(using Zone): Ptr[graphene_point_t] = scala.scalanative.unsafe.alloc[graphene_point_t](1)
  def apply(x : Float, y : Float)(using Zone): Ptr[graphene_point_t] = 
    val ____ptr = apply()
    (!____ptr).x = x
    (!____ptr).y = y
    ____ptr
  extension (struct: graphene_point_t)
    def x : Float = struct._1
    def x_=(value: Float): Unit = !struct.at1 = value
    def y : Float = struct._2
    def y_=(value: Float): Unit = !struct.at2 = value

/**
 * graphene_quad_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-quad.h
*/
opaque type graphene_quad_t = CStruct1[CArray[graphene_point_t, Nat._4]]
object graphene_quad_t:
  given _tag: Tag[graphene_quad_t] = Tag.materializeCStruct1Tag[CArray[graphene_point_t, Nat._4]]
  def apply()(using Zone): Ptr[graphene_quad_t] = scala.scalanative.unsafe.alloc[graphene_quad_t](1)
  def apply(__graphene_private_points : CArray[graphene_point_t, Nat._4])(using Zone): Ptr[graphene_quad_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_points = __graphene_private_points
    ____ptr
  extension (struct: graphene_quad_t)
    def __graphene_private_points : CArray[graphene_point_t, Nat._4] = struct._1
    def __graphene_private_points_=(value: CArray[graphene_point_t, Nat._4]): Unit = !struct.at1 = value

/**
 * graphene_quaternion_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
*/
opaque type graphene_quaternion_t = CStruct4[Float, Float, Float, Float]
object graphene_quaternion_t:
  given _tag: Tag[graphene_quaternion_t] = Tag.materializeCStruct4Tag[Float, Float, Float, Float]
  def apply()(using Zone): Ptr[graphene_quaternion_t] = scala.scalanative.unsafe.alloc[graphene_quaternion_t](1)
  def apply(__graphene_private_x : Float, __graphene_private_y : Float, __graphene_private_z : Float, __graphene_private_w : Float)(using Zone): Ptr[graphene_quaternion_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_x = __graphene_private_x
    (!____ptr).__graphene_private_y = __graphene_private_y
    (!____ptr).__graphene_private_z = __graphene_private_z
    (!____ptr).__graphene_private_w = __graphene_private_w
    ____ptr
  extension (struct: graphene_quaternion_t)
    def __graphene_private_x : Float = struct._1
    def __graphene_private_x_=(value: Float): Unit = !struct.at1 = value
    def __graphene_private_y : Float = struct._2
    def __graphene_private_y_=(value: Float): Unit = !struct.at2 = value
    def __graphene_private_z : Float = struct._3
    def __graphene_private_z_=(value: Float): Unit = !struct.at3 = value
    def __graphene_private_w : Float = struct._4
    def __graphene_private_w_=(value: Float): Unit = !struct.at4 = value

/**
 * graphene_ray_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-ray.h
*/
opaque type graphene_ray_t = CStruct2[graphene_vec3_t, graphene_vec3_t]
object graphene_ray_t:
  given _tag: Tag[graphene_ray_t] = Tag.materializeCStruct2Tag[graphene_vec3_t, graphene_vec3_t]
  def apply()(using Zone): Ptr[graphene_ray_t] = scala.scalanative.unsafe.alloc[graphene_ray_t](1)
  def apply(__graphene_private_origin : graphene_vec3_t, __graphene_private_direction : graphene_vec3_t)(using Zone): Ptr[graphene_ray_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_origin = __graphene_private_origin
    (!____ptr).__graphene_private_direction = __graphene_private_direction
    ____ptr
  extension (struct: graphene_ray_t)
    def __graphene_private_origin : graphene_vec3_t = struct._1
    def __graphene_private_origin_=(value: graphene_vec3_t): Unit = !struct.at1 = value
    def __graphene_private_direction : graphene_vec3_t = struct._2
    def __graphene_private_direction_=(value: graphene_vec3_t): Unit = !struct.at2 = value

/**
 * graphene_rect_t: : the coordinates of the origin of the rectangle : the size of the rectangle

 * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
*/
opaque type graphene_rect_t = CStruct2[graphene_point_t, graphene_size_t]
object graphene_rect_t:
  given _tag: Tag[graphene_rect_t] = Tag.materializeCStruct2Tag[graphene_point_t, graphene_size_t]
  def apply()(using Zone): Ptr[graphene_rect_t] = scala.scalanative.unsafe.alloc[graphene_rect_t](1)
  def apply(origin : graphene_point_t, size : graphene_size_t)(using Zone): Ptr[graphene_rect_t] = 
    val ____ptr = apply()
    (!____ptr).origin = origin
    (!____ptr).size = size
    ____ptr
  extension (struct: graphene_rect_t)
    def origin : graphene_point_t = struct._1
    def origin_=(value: graphene_point_t): Unit = !struct.at1 = value
    def size : graphene_size_t = struct._2
    def size_=(value: graphene_size_t): Unit = !struct.at2 = value

/**
 * [bindgen] header: /usr/lib/x86_64-linux-gnu/graphene-1.0/include/graphene-config.h
*/
opaque type graphene_simd4x4f_t = CStruct4[graphene_simd4f_t, graphene_simd4f_t, graphene_simd4f_t, graphene_simd4f_t]
object graphene_simd4x4f_t:
  given _tag: Tag[graphene_simd4x4f_t] = Tag.materializeCStruct4Tag[graphene_simd4f_t, graphene_simd4f_t, graphene_simd4f_t, graphene_simd4f_t]
  def apply()(using Zone): Ptr[graphene_simd4x4f_t] = scala.scalanative.unsafe.alloc[graphene_simd4x4f_t](1)
  def apply(x : graphene_simd4f_t, y : graphene_simd4f_t, z : graphene_simd4f_t, w : graphene_simd4f_t)(using Zone): Ptr[graphene_simd4x4f_t] = 
    val ____ptr = apply()
    (!____ptr).x = x
    (!____ptr).y = y
    (!____ptr).z = z
    (!____ptr).w = w
    ____ptr
  extension (struct: graphene_simd4x4f_t)
    def x : graphene_simd4f_t = struct._1
    def x_=(value: graphene_simd4f_t): Unit = !struct.at1 = value
    def y : graphene_simd4f_t = struct._2
    def y_=(value: graphene_simd4f_t): Unit = !struct.at2 = value
    def z : graphene_simd4f_t = struct._3
    def z_=(value: graphene_simd4f_t): Unit = !struct.at3 = value
    def w : graphene_simd4f_t = struct._4
    def w_=(value: graphene_simd4f_t): Unit = !struct.at4 = value

/**
 * graphene_size_t: : the width : the height

 * [bindgen] header: /usr/include/graphene-1.0/graphene-size.h
*/
opaque type graphene_size_t = CStruct2[Float, Float]
object graphene_size_t:
  given _tag: Tag[graphene_size_t] = Tag.materializeCStruct2Tag[Float, Float]
  def apply()(using Zone): Ptr[graphene_size_t] = scala.scalanative.unsafe.alloc[graphene_size_t](1)
  def apply(width : Float, height : Float)(using Zone): Ptr[graphene_size_t] = 
    val ____ptr = apply()
    (!____ptr).width = width
    (!____ptr).height = height
    ____ptr
  extension (struct: graphene_size_t)
    def width : Float = struct._1
    def width_=(value: Float): Unit = !struct.at1 = value
    def height : Float = struct._2
    def height_=(value: Float): Unit = !struct.at2 = value

/**
 * graphene_sphere_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-sphere.h
*/
opaque type graphene_sphere_t = CStruct2[graphene_vec3_t, Float]
object graphene_sphere_t:
  given _tag: Tag[graphene_sphere_t] = Tag.materializeCStruct2Tag[graphene_vec3_t, Float]
  def apply()(using Zone): Ptr[graphene_sphere_t] = scala.scalanative.unsafe.alloc[graphene_sphere_t](1)
  def apply(__graphene_private_center : graphene_vec3_t, __graphene_private_radius : Float)(using Zone): Ptr[graphene_sphere_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_center = __graphene_private_center
    (!____ptr).__graphene_private_radius = __graphene_private_radius
    ____ptr
  extension (struct: graphene_sphere_t)
    def __graphene_private_center : graphene_vec3_t = struct._1
    def __graphene_private_center_=(value: graphene_vec3_t): Unit = !struct.at1 = value
    def __graphene_private_radius : Float = struct._2
    def __graphene_private_radius_=(value: Float): Unit = !struct.at2 = value

/**
 * graphene_triangle_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-triangle.h
*/
opaque type graphene_triangle_t = CStruct3[graphene_vec3_t, graphene_vec3_t, graphene_vec3_t]
object graphene_triangle_t:
  given _tag: Tag[graphene_triangle_t] = Tag.materializeCStruct3Tag[graphene_vec3_t, graphene_vec3_t, graphene_vec3_t]
  def apply()(using Zone): Ptr[graphene_triangle_t] = scala.scalanative.unsafe.alloc[graphene_triangle_t](1)
  def apply(__graphene_private_a : graphene_vec3_t, __graphene_private_b : graphene_vec3_t, __graphene_private_c : graphene_vec3_t)(using Zone): Ptr[graphene_triangle_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_a = __graphene_private_a
    (!____ptr).__graphene_private_b = __graphene_private_b
    (!____ptr).__graphene_private_c = __graphene_private_c
    ____ptr
  extension (struct: graphene_triangle_t)
    def __graphene_private_a : graphene_vec3_t = struct._1
    def __graphene_private_a_=(value: graphene_vec3_t): Unit = !struct.at1 = value
    def __graphene_private_b : graphene_vec3_t = struct._2
    def __graphene_private_b_=(value: graphene_vec3_t): Unit = !struct.at2 = value
    def __graphene_private_c : graphene_vec3_t = struct._3
    def __graphene_private_c_=(value: graphene_vec3_t): Unit = !struct.at3 = value

/**
 * graphene_vec2_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
*/
opaque type graphene_vec2_t = CStruct1[graphene_simd4f_t]
object graphene_vec2_t:
  given _tag: Tag[graphene_vec2_t] = Tag.materializeCStruct1Tag[graphene_simd4f_t]
  def apply()(using Zone): Ptr[graphene_vec2_t] = scala.scalanative.unsafe.alloc[graphene_vec2_t](1)
  def apply(__graphene_private_value : graphene_simd4f_t)(using Zone): Ptr[graphene_vec2_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_value = __graphene_private_value
    ____ptr
  extension (struct: graphene_vec2_t)
    def __graphene_private_value : graphene_simd4f_t = struct._1
    def __graphene_private_value_=(value: graphene_simd4f_t): Unit = !struct.at1 = value

/**
 * graphene_vec3_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
*/
opaque type graphene_vec3_t = CStruct1[graphene_simd4f_t]
object graphene_vec3_t:
  given _tag: Tag[graphene_vec3_t] = Tag.materializeCStruct1Tag[graphene_simd4f_t]
  def apply()(using Zone): Ptr[graphene_vec3_t] = scala.scalanative.unsafe.alloc[graphene_vec3_t](1)
  def apply(__graphene_private_value : graphene_simd4f_t)(using Zone): Ptr[graphene_vec3_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_value = __graphene_private_value
    ____ptr
  extension (struct: graphene_vec3_t)
    def __graphene_private_value : graphene_simd4f_t = struct._1
    def __graphene_private_value_=(value: graphene_simd4f_t): Unit = !struct.at1 = value

/**
 * graphene_vec4_t:

 * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
*/
opaque type graphene_vec4_t = CStruct1[graphene_simd4f_t]
object graphene_vec4_t:
  given _tag: Tag[graphene_vec4_t] = Tag.materializeCStruct1Tag[graphene_simd4f_t]
  def apply()(using Zone): Ptr[graphene_vec4_t] = scala.scalanative.unsafe.alloc[graphene_vec4_t](1)
  def apply(__graphene_private_value : graphene_simd4f_t)(using Zone): Ptr[graphene_vec4_t] = 
    val ____ptr = apply()
    (!____ptr).__graphene_private_value = __graphene_private_value
    ____ptr
  extension (struct: graphene_vec4_t)
    def __graphene_private_value : graphene_simd4f_t = struct._1
    def __graphene_private_value_=(value: graphene_simd4f_t): Unit = !struct.at1 = value

/**
 * [bindgen] header: /usr/include/harfbuzz/hb-blob.h
*/
opaque type hb_blob_t = CStruct0
object hb_blob_t:
  given _tag: Tag[hb_blob_t] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
*/
opaque type hb_buffer_t = CStruct0
object hb_buffer_t:
  given _tag: Tag[hb_buffer_t] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/harfbuzz/hb-face.h
*/
opaque type hb_face_t = CStruct0
object hb_face_t:
  given _tag: Tag[hb_face_t] = Tag.materializeCStruct0Tag

/**
 * hb_feature_t: : The #hb_tag_t tag of the feature : The value of the feature. 0 disables the feature, non-zero (usually 1) enables the feature. For features implemented as lookup type 3 (like 'salt') the is a one based index into the alternates. : the cluster to start applying this feature setting (inclusive). : the cluster to end applying this feature setting (exclusive).

 * [bindgen] header: /usr/include/harfbuzz/hb-common.h
*/
opaque type hb_feature_t = CStruct4[hb_tag_t, uint32_t, CUnsignedInt, CUnsignedInt]
object hb_feature_t:
  given _tag: Tag[hb_feature_t] = Tag.materializeCStruct4Tag[hb_tag_t, uint32_t, CUnsignedInt, CUnsignedInt]
  def apply()(using Zone): Ptr[hb_feature_t] = scala.scalanative.unsafe.alloc[hb_feature_t](1)
  def apply(tag : hb_tag_t, value : uint32_t, start : CUnsignedInt, end : CUnsignedInt)(using Zone): Ptr[hb_feature_t] = 
    val ____ptr = apply()
    (!____ptr).tag = tag
    (!____ptr).value = value
    (!____ptr).start = start
    (!____ptr).end = end
    ____ptr
  extension (struct: hb_feature_t)
    def tag : hb_tag_t = struct._1
    def tag_=(value: hb_tag_t): Unit = !struct.at1 = value
    def value : uint32_t = struct._2
    def value_=(value: uint32_t): Unit = !struct.at2 = value
    def start : CUnsignedInt = struct._3
    def start_=(value: CUnsignedInt): Unit = !struct.at3 = value
    def end : CUnsignedInt = struct._4
    def end_=(value: CUnsignedInt): Unit = !struct.at4 = value

/**
 * hb_font_extents_t: : The height of typographic ascenders. : The depth of typographic descenders.

 * [bindgen] header: /usr/include/harfbuzz/hb-font.h
*/
opaque type hb_font_extents_t = CStruct12[hb_position_t, hb_position_t, hb_position_t, hb_position_t, hb_position_t, hb_position_t, hb_position_t, hb_position_t, hb_position_t, hb_position_t, hb_position_t, hb_position_t]
object hb_font_extents_t:
  given _tag: Tag[hb_font_extents_t] = Tag.materializeCStruct12Tag[hb_position_t, hb_position_t, hb_position_t, hb_position_t, hb_position_t, hb_position_t, hb_position_t, hb_position_t, hb_position_t, hb_position_t, hb_position_t, hb_position_t]
  def apply()(using Zone): Ptr[hb_font_extents_t] = scala.scalanative.unsafe.alloc[hb_font_extents_t](1)
  def apply(ascender : hb_position_t, descender : hb_position_t, line_gap : hb_position_t, reserved9 : hb_position_t, reserved8 : hb_position_t, reserved7 : hb_position_t, reserved6 : hb_position_t, reserved5 : hb_position_t, reserved4 : hb_position_t, reserved3 : hb_position_t, reserved2 : hb_position_t, reserved1 : hb_position_t)(using Zone): Ptr[hb_font_extents_t] = 
    val ____ptr = apply()
    (!____ptr).ascender = ascender
    (!____ptr).descender = descender
    (!____ptr).line_gap = line_gap
    (!____ptr).reserved9 = reserved9
    (!____ptr).reserved8 = reserved8
    (!____ptr).reserved7 = reserved7
    (!____ptr).reserved6 = reserved6
    (!____ptr).reserved5 = reserved5
    (!____ptr).reserved4 = reserved4
    (!____ptr).reserved3 = reserved3
    (!____ptr).reserved2 = reserved2
    (!____ptr).reserved1 = reserved1
    ____ptr
  extension (struct: hb_font_extents_t)
    def ascender : hb_position_t = struct._1
    def ascender_=(value: hb_position_t): Unit = !struct.at1 = value
    def descender : hb_position_t = struct._2
    def descender_=(value: hb_position_t): Unit = !struct.at2 = value
    def line_gap : hb_position_t = struct._3
    def line_gap_=(value: hb_position_t): Unit = !struct.at3 = value
    def reserved9 : hb_position_t = struct._4
    def reserved9_=(value: hb_position_t): Unit = !struct.at4 = value
    def reserved8 : hb_position_t = struct._5
    def reserved8_=(value: hb_position_t): Unit = !struct.at5 = value
    def reserved7 : hb_position_t = struct._6
    def reserved7_=(value: hb_position_t): Unit = !struct.at6 = value
    def reserved6 : hb_position_t = struct._7
    def reserved6_=(value: hb_position_t): Unit = !struct.at7 = value
    def reserved5 : hb_position_t = struct._8
    def reserved5_=(value: hb_position_t): Unit = !struct.at8 = value
    def reserved4 : hb_position_t = struct._9
    def reserved4_=(value: hb_position_t): Unit = !struct.at9 = value
    def reserved3 : hb_position_t = struct._10
    def reserved3_=(value: hb_position_t): Unit = !struct.at10 = value
    def reserved2 : hb_position_t = struct._11
    def reserved2_=(value: hb_position_t): Unit = !struct.at11 = value
    def reserved1 : hb_position_t = struct._12
    def reserved1_=(value: hb_position_t): Unit = !struct.at12 = value

/**
 * [bindgen] header: /usr/include/harfbuzz/hb-font.h
*/
opaque type hb_font_funcs_t = CStruct0
object hb_font_funcs_t:
  given _tag: Tag[hb_font_funcs_t] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/harfbuzz/hb-font.h
*/
opaque type hb_font_t = CStruct0
object hb_font_t:
  given _tag: Tag[hb_font_t] = Tag.materializeCStruct0Tag

/**
 * hb_glyph_extents_t: _bearing: Distance from the x-origin to the left extremum of the glyph. _bearing: Distance from the top extremum of the glyph to the y-origin. : Distance from the left extremum of the glyph to the right extremum. : Distance from the top extremum of the glyph to the bottom extremum.

 * [bindgen] header: /usr/include/harfbuzz/hb-font.h
*/
opaque type hb_glyph_extents_t = CStruct4[hb_position_t, hb_position_t, hb_position_t, hb_position_t]
object hb_glyph_extents_t:
  given _tag: Tag[hb_glyph_extents_t] = Tag.materializeCStruct4Tag[hb_position_t, hb_position_t, hb_position_t, hb_position_t]
  def apply()(using Zone): Ptr[hb_glyph_extents_t] = scala.scalanative.unsafe.alloc[hb_glyph_extents_t](1)
  def apply(x_bearing : hb_position_t, y_bearing : hb_position_t, width : hb_position_t, height : hb_position_t)(using Zone): Ptr[hb_glyph_extents_t] = 
    val ____ptr = apply()
    (!____ptr).x_bearing = x_bearing
    (!____ptr).y_bearing = y_bearing
    (!____ptr).width = width
    (!____ptr).height = height
    ____ptr
  extension (struct: hb_glyph_extents_t)
    def x_bearing : hb_position_t = struct._1
    def x_bearing_=(value: hb_position_t): Unit = !struct.at1 = value
    def y_bearing : hb_position_t = struct._2
    def y_bearing_=(value: hb_position_t): Unit = !struct.at2 = value
    def width : hb_position_t = struct._3
    def width_=(value: hb_position_t): Unit = !struct.at3 = value
    def height : hb_position_t = struct._4
    def height_=(value: hb_position_t): Unit = !struct.at4 = value

/**
 * hb_glyph_info_t: : either a Unicode code point (before shaping) or a glyph index (after shaping). : the index of the character in the original text that corresponds to this #hb_glyph_info_t, or whatever the client passes to hb_buffer_add(). More than one #hb_glyph_info_t can have the same value, if they resulted from the same character (e.g. one to many glyph substitution), and when more than one character gets merged in the same glyph (e.g. many to one glyph substitution) the #hb_glyph_info_t will have the smallest cluster value of them. By default some characters are merged into the same cluster (e.g. combining marks have the same cluster as their bases) even if they are separate glyphs, hb_buffer_set_cluster_level() allow selecting more fine-grained cluster handling.

 * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
*/
opaque type hb_glyph_info_t = CStruct5[hb_codepoint_t, hb_mask_t, uint32_t, hb_var_int_t, hb_var_int_t]
object hb_glyph_info_t:
  given _tag: Tag[hb_glyph_info_t] = Tag.materializeCStruct5Tag[hb_codepoint_t, hb_mask_t, uint32_t, hb_var_int_t, hb_var_int_t]
  def apply()(using Zone): Ptr[hb_glyph_info_t] = scala.scalanative.unsafe.alloc[hb_glyph_info_t](1)
  def apply(codepoint : hb_codepoint_t, mask : hb_mask_t, cluster : uint32_t, var1 : hb_var_int_t, var2 : hb_var_int_t)(using Zone): Ptr[hb_glyph_info_t] = 
    val ____ptr = apply()
    (!____ptr).codepoint = codepoint
    (!____ptr).mask = mask
    (!____ptr).cluster = cluster
    (!____ptr).var1 = var1
    (!____ptr).var2 = var2
    ____ptr
  extension (struct: hb_glyph_info_t)
    def codepoint : hb_codepoint_t = struct._1
    def codepoint_=(value: hb_codepoint_t): Unit = !struct.at1 = value
    def mask : hb_mask_t = struct._2
    def mask_=(value: hb_mask_t): Unit = !struct.at2 = value
    def cluster : uint32_t = struct._3
    def cluster_=(value: uint32_t): Unit = !struct.at3 = value
    def var1 : hb_var_int_t = struct._4
    def var1_=(value: hb_var_int_t): Unit = !struct.at4 = value
    def var2 : hb_var_int_t = struct._5
    def var2_=(value: hb_var_int_t): Unit = !struct.at5 = value

/**
 * hb_glyph_position_t: _advance: how much the line advances after drawing this glyph when setting text in horizontal direction. _advance: how much the line advances after drawing this glyph when setting text in vertical direction. _offset: how much the glyph moves on the X-axis before drawing it, this should not affect how much the line advances. _offset: how much the glyph moves on the Y-axis before drawing it, this should not affect how much the line advances.

 * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
*/
opaque type hb_glyph_position_t = CStruct5[hb_position_t, hb_position_t, hb_position_t, hb_position_t, hb_var_int_t]
object hb_glyph_position_t:
  given _tag: Tag[hb_glyph_position_t] = Tag.materializeCStruct5Tag[hb_position_t, hb_position_t, hb_position_t, hb_position_t, hb_var_int_t]
  def apply()(using Zone): Ptr[hb_glyph_position_t] = scala.scalanative.unsafe.alloc[hb_glyph_position_t](1)
  def apply(x_advance : hb_position_t, y_advance : hb_position_t, x_offset : hb_position_t, y_offset : hb_position_t, `var` : hb_var_int_t)(using Zone): Ptr[hb_glyph_position_t] = 
    val ____ptr = apply()
    (!____ptr).x_advance = x_advance
    (!____ptr).y_advance = y_advance
    (!____ptr).x_offset = x_offset
    (!____ptr).y_offset = y_offset
    (!____ptr).`var` = `var`
    ____ptr
  extension (struct: hb_glyph_position_t)
    def x_advance : hb_position_t = struct._1
    def x_advance_=(value: hb_position_t): Unit = !struct.at1 = value
    def y_advance : hb_position_t = struct._2
    def y_advance_=(value: hb_position_t): Unit = !struct.at2 = value
    def x_offset : hb_position_t = struct._3
    def x_offset_=(value: hb_position_t): Unit = !struct.at3 = value
    def y_offset : hb_position_t = struct._4
    def y_offset_=(value: hb_position_t): Unit = !struct.at4 = value
    def `var` : hb_var_int_t = struct._5
    def var_=(value: hb_var_int_t): Unit = !struct.at5 = value

/**
 * [bindgen] header: /usr/include/harfbuzz/hb-common.h
*/
opaque type hb_language_impl_t = CStruct0
object hb_language_impl_t:
  given _tag: Tag[hb_language_impl_t] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/harfbuzz/hb-map.h
*/
opaque type hb_map_t = CStruct0
object hb_map_t:
  given _tag: Tag[hb_map_t] = Tag.materializeCStruct0Tag

/**
 * hb_segment_properties_t: : the #hb_direction_t of the buffer, see hb_buffer_set_direction(). : the #hb_script_t of the buffer, see hb_buffer_set_script(). : the #hb_language_t of the buffer, see hb_buffer_set_language().

 * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
*/
opaque type hb_segment_properties_t = CStruct5[hb_direction_t, hb_script_t, hb_language_t, Ptr[Byte], Ptr[Byte]]
object hb_segment_properties_t:
  given _tag: Tag[hb_segment_properties_t] = Tag.materializeCStruct5Tag[hb_direction_t, hb_script_t, hb_language_t, Ptr[Byte], Ptr[Byte]]
  def apply()(using Zone): Ptr[hb_segment_properties_t] = scala.scalanative.unsafe.alloc[hb_segment_properties_t](1)
  def apply(direction : hb_direction_t, script : hb_script_t, language : hb_language_t, reserved1 : Ptr[Byte], reserved2 : Ptr[Byte])(using Zone): Ptr[hb_segment_properties_t] = 
    val ____ptr = apply()
    (!____ptr).direction = direction
    (!____ptr).script = script
    (!____ptr).language = language
    (!____ptr).reserved1 = reserved1
    (!____ptr).reserved2 = reserved2
    ____ptr
  extension (struct: hb_segment_properties_t)
    def direction : hb_direction_t = struct._1
    def direction_=(value: hb_direction_t): Unit = !struct.at1 = value
    def script : hb_script_t = struct._2
    def script_=(value: hb_script_t): Unit = !struct.at2 = value
    def language : hb_language_t = struct._3
    def language_=(value: hb_language_t): Unit = !struct.at3 = value
    def reserved1 : Ptr[Byte] = struct._4
    def reserved1_=(value: Ptr[Byte]): Unit = !struct.at4 = value
    def reserved2 : Ptr[Byte] = struct._5
    def reserved2_=(value: Ptr[Byte]): Unit = !struct.at5 = value

/**
 * [bindgen] header: /usr/include/harfbuzz/hb-set.h
*/
opaque type hb_set_t = CStruct0
object hb_set_t:
  given _tag: Tag[hb_set_t] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/harfbuzz/hb-shape-plan.h
*/
opaque type hb_shape_plan_t = CStruct0
object hb_shape_plan_t:
  given _tag: Tag[hb_shape_plan_t] = Tag.materializeCStruct0Tag

/**
 * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
*/
opaque type hb_unicode_funcs_t = CStruct0
object hb_unicode_funcs_t:
  given _tag: Tag[hb_unicode_funcs_t] = Tag.materializeCStruct0Tag

/**
 * hb_user_data_key_t:

 * [bindgen] header: /usr/include/harfbuzz/hb-common.h
*/
opaque type hb_user_data_key_t = CStruct1[CChar]
object hb_user_data_key_t:
  given _tag: Tag[hb_user_data_key_t] = Tag.materializeCStruct1Tag[CChar]
  def apply()(using Zone): Ptr[hb_user_data_key_t] = scala.scalanative.unsafe.alloc[hb_user_data_key_t](1)
  def apply(unused : CChar)(using Zone): Ptr[hb_user_data_key_t] = 
    val ____ptr = apply()
    (!____ptr).unused = unused
    ____ptr
  extension (struct: hb_user_data_key_t)
    def unused : CChar = struct._1
    def unused_=(value: CChar): Unit = !struct.at1 = value

/**
 * hb_variation_t: : The #hb_tag_t tag of the variation-axis name : The value of the variation axis

 * [bindgen] header: /usr/include/harfbuzz/hb-common.h
*/
opaque type hb_variation_t = CStruct2[hb_tag_t, Float]
object hb_variation_t:
  given _tag: Tag[hb_variation_t] = Tag.materializeCStruct2Tag[hb_tag_t, Float]
  def apply()(using Zone): Ptr[hb_variation_t] = scala.scalanative.unsafe.alloc[hb_variation_t](1)
  def apply(tag : hb_tag_t, value : Float)(using Zone): Ptr[hb_variation_t] = 
    val ____ptr = apply()
    (!____ptr).tag = tag
    (!____ptr).value = value
    ____ptr
  extension (struct: hb_variation_t)
    def tag : hb_tag_t = struct._1
    def tag_=(value: hb_tag_t): Unit = !struct.at1 = value
    def value : Float = struct._2
    def value_=(value: Float): Unit = !struct.at2 = value

