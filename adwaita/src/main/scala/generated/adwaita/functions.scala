package adwaita
package functions

import _root_.scala.scalanative.unsafe.*
import _root_.scala.scalanative.unsigned.*
import _root_.scala.scalanative.libc.*
import _root_.scala.scalanative.*

import _root_.adwaita.enumerations.*
import _root_.adwaita.aliases.*
import _root_.adwaita.structs.*
import _root_.adwaita.unions.*


@extern
private[adwaita] object extern_functions:
  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def ADW_ACTION_ROW(ptr : gpointer): Ptr[AdwActionRow] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def ADW_ACTION_ROW_CLASS(ptr : gpointer): Ptr[AdwActionRowClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def ADW_ACTION_ROW_GET_CLASS(ptr : gpointer): Ptr[AdwActionRowClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def ADW_ANIMATION(ptr : gpointer): Ptr[AdwAnimation] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def ADW_ANIMATION_CLASS(ptr : gpointer): Ptr[AdwAnimationClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def ADW_ANIMATION_GET_CLASS(ptr : gpointer): Ptr[AdwAnimationClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def ADW_ANIMATION_TARGET(ptr : gpointer): Ptr[AdwAnimationTarget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def ADW_ANIMATION_TARGET_CLASS(ptr : gpointer): Ptr[AdwAnimationTargetClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def ADW_ANIMATION_TARGET_GET_CLASS(ptr : gpointer): Ptr[AdwAnimationTargetClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
  */
  def ADW_APPLICATION(ptr : gpointer): Ptr[AdwApplication] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
  */
  def ADW_APPLICATION_CLASS(ptr : gpointer): Ptr[AdwApplicationClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
  */
  def ADW_APPLICATION_GET_CLASS(ptr : gpointer): Ptr[AdwApplicationClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
  */
  def ADW_APPLICATION_WINDOW(ptr : gpointer): Ptr[AdwApplicationWindow] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
  */
  def ADW_APPLICATION_WINDOW_CLASS(ptr : gpointer): Ptr[AdwApplicationWindowClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
  */
  def ADW_APPLICATION_WINDOW_GET_CLASS(ptr : gpointer): Ptr[AdwApplicationWindowClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def ADW_AVATAR(ptr : gpointer): Ptr[AdwAvatar] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
  */
  def ADW_BIN(ptr : gpointer): Ptr[AdwBin] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
  */
  def ADW_BIN_CLASS(ptr : gpointer): Ptr[AdwBinClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
  */
  def ADW_BIN_GET_CLASS(ptr : gpointer): Ptr[AdwBinClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
  */
  def ADW_BUTTON_CONTENT(ptr : gpointer): Ptr[AdwButtonContent] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def ADW_CALLBACK_ANIMATION_TARGET(ptr : gpointer): Ptr[AdwCallbackAnimationTarget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def ADW_CALLBACK_ANIMATION_TARGET_CLASS(ptr : gpointer): Ptr[AdwCallbackAnimationTargetClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def ADW_CALLBACK_ANIMATION_TARGET_GET_CLASS(ptr : gpointer): Ptr[AdwCallbackAnimationTargetClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def ADW_CAROUSEL(ptr : gpointer): Ptr[AdwCarousel] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-dots.h
  */
  def ADW_CAROUSEL_INDICATOR_DOTS(ptr : gpointer): Ptr[AdwCarouselIndicatorDots] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-lines.h
  */
  def ADW_CAROUSEL_INDICATOR_LINES(ptr : gpointer): Ptr[AdwCarouselIndicatorLines] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
  */
  def ADW_CLAMP(ptr : gpointer): Ptr[AdwClamp] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
  */
  def ADW_CLAMP_LAYOUT(ptr : gpointer): Ptr[AdwClampLayout] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
  */
  def ADW_CLAMP_SCROLLABLE(ptr : gpointer): Ptr[AdwClampScrollable] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def ADW_COMBO_ROW(ptr : gpointer): Ptr[AdwComboRow] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def ADW_COMBO_ROW_CLASS(ptr : gpointer): Ptr[AdwComboRowClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def ADW_COMBO_ROW_GET_CLASS(ptr : gpointer): Ptr[AdwComboRowClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def ADW_ENUM_LIST_ITEM(ptr : gpointer): Ptr[AdwEnumListItem] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def ADW_ENUM_LIST_MODEL(ptr : gpointer): Ptr[AdwEnumListModel] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def ADW_EXPANDER_ROW(ptr : gpointer): Ptr[AdwExpanderRow] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def ADW_EXPANDER_ROW_CLASS(ptr : gpointer): Ptr[AdwExpanderRowClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def ADW_EXPANDER_ROW_GET_CLASS(ptr : gpointer): Ptr[AdwExpanderRowClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def ADW_FLAP(ptr : gpointer): Ptr[AdwFlap] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def ADW_HEADER_BAR(ptr : gpointer): Ptr[AdwHeaderBar] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def ADW_IS_ACTION_ROW(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def ADW_IS_ACTION_ROW_CLASS(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def ADW_IS_ANIMATION(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def ADW_IS_ANIMATION_CLASS(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def ADW_IS_ANIMATION_TARGET(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def ADW_IS_ANIMATION_TARGET_CLASS(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
  */
  def ADW_IS_APPLICATION(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
  */
  def ADW_IS_APPLICATION_CLASS(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
  */
  def ADW_IS_APPLICATION_WINDOW(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
  */
  def ADW_IS_APPLICATION_WINDOW_CLASS(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def ADW_IS_AVATAR(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
  */
  def ADW_IS_BIN(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
  */
  def ADW_IS_BIN_CLASS(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
  */
  def ADW_IS_BUTTON_CONTENT(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def ADW_IS_CALLBACK_ANIMATION_TARGET(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def ADW_IS_CALLBACK_ANIMATION_TARGET_CLASS(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def ADW_IS_CAROUSEL(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-dots.h
  */
  def ADW_IS_CAROUSEL_INDICATOR_DOTS(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-lines.h
  */
  def ADW_IS_CAROUSEL_INDICATOR_LINES(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
  */
  def ADW_IS_CLAMP(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
  */
  def ADW_IS_CLAMP_LAYOUT(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
  */
  def ADW_IS_CLAMP_SCROLLABLE(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def ADW_IS_COMBO_ROW(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def ADW_IS_COMBO_ROW_CLASS(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def ADW_IS_ENUM_LIST_ITEM(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def ADW_IS_ENUM_LIST_MODEL(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def ADW_IS_EXPANDER_ROW(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def ADW_IS_EXPANDER_ROW_CLASS(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def ADW_IS_FLAP(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def ADW_IS_HEADER_BAR(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def ADW_IS_LEAFLET(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def ADW_IS_LEAFLET_PAGE(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def ADW_IS_PREFERENCES_GROUP(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def ADW_IS_PREFERENCES_GROUP_CLASS(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def ADW_IS_PREFERENCES_PAGE(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def ADW_IS_PREFERENCES_PAGE_CLASS(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def ADW_IS_PREFERENCES_ROW(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def ADW_IS_PREFERENCES_ROW_CLASS(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def ADW_IS_PREFERENCES_WINDOW(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def ADW_IS_PREFERENCES_WINDOW_CLASS(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def ADW_IS_SPLIT_BUTTON(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def ADW_IS_SPRING_ANIMATION(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def ADW_IS_SPRING_ANIMATION_CLASS(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def ADW_IS_SQUEEZER(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def ADW_IS_SQUEEZER_PAGE(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def ADW_IS_STATUS_PAGE(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def ADW_IS_STYLE_MANAGER(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipeable.h
  */
  def ADW_IS_SWIPEABLE(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def ADW_IS_SWIPE_TRACKER(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def ADW_IS_TAB_BAR(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def ADW_IS_TAB_PAGE(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def ADW_IS_TAB_VIEW(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def ADW_IS_TIMED_ANIMATION(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def ADW_IS_TIMED_ANIMATION_CLASS(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def ADW_IS_TOAST(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast-overlay.h
  */
  def ADW_IS_TOAST_OVERLAY(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def ADW_IS_VIEW_STACK(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def ADW_IS_VIEW_STACK_PAGE(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
  */
  def ADW_IS_VIEW_SWITCHER(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
  */
  def ADW_IS_VIEW_SWITCHER_BAR(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def ADW_IS_VIEW_SWITCHER_TITLE(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
  */
  def ADW_IS_WINDOW(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
  */
  def ADW_IS_WINDOW_CLASS(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
  */
  def ADW_IS_WINDOW_TITLE(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def ADW_LEAFLET(ptr : gpointer): Ptr[AdwLeaflet] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def ADW_LEAFLET_PAGE(ptr : gpointer): Ptr[AdwLeafletPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def ADW_PREFERENCES_GROUP(ptr : gpointer): Ptr[AdwPreferencesGroup] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def ADW_PREFERENCES_GROUP_CLASS(ptr : gpointer): Ptr[AdwPreferencesGroupClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def ADW_PREFERENCES_GROUP_GET_CLASS(ptr : gpointer): Ptr[AdwPreferencesGroupClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def ADW_PREFERENCES_PAGE(ptr : gpointer): Ptr[AdwPreferencesPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def ADW_PREFERENCES_PAGE_CLASS(ptr : gpointer): Ptr[AdwPreferencesPageClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def ADW_PREFERENCES_PAGE_GET_CLASS(ptr : gpointer): Ptr[AdwPreferencesPageClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def ADW_PREFERENCES_ROW(ptr : gpointer): Ptr[AdwPreferencesRow] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def ADW_PREFERENCES_ROW_CLASS(ptr : gpointer): Ptr[AdwPreferencesRowClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def ADW_PREFERENCES_ROW_GET_CLASS(ptr : gpointer): Ptr[AdwPreferencesRowClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def ADW_PREFERENCES_WINDOW(ptr : gpointer): Ptr[AdwPreferencesWindow] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def ADW_PREFERENCES_WINDOW_CLASS(ptr : gpointer): Ptr[AdwPreferencesWindowClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def ADW_PREFERENCES_WINDOW_GET_CLASS(ptr : gpointer): Ptr[AdwPreferencesWindowClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def ADW_SPLIT_BUTTON(ptr : gpointer): Ptr[AdwSplitButton] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def ADW_SPRING_ANIMATION(ptr : gpointer): Ptr[AdwSpringAnimation] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def ADW_SPRING_ANIMATION_CLASS(ptr : gpointer): Ptr[AdwSpringAnimationClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def ADW_SPRING_ANIMATION_GET_CLASS(ptr : gpointer): Ptr[AdwSpringAnimationClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def ADW_SQUEEZER(ptr : gpointer): Ptr[AdwSqueezer] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def ADW_SQUEEZER_PAGE(ptr : gpointer): Ptr[AdwSqueezerPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def ADW_STATUS_PAGE(ptr : gpointer): Ptr[AdwStatusPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def ADW_STYLE_MANAGER(ptr : gpointer): Ptr[AdwStyleManager] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipeable.h
  */
  def ADW_SWIPEABLE(ptr : gpointer): Ptr[AdwSwipeable] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipeable.h
  */
  def ADW_SWIPEABLE_GET_IFACE(ptr : gpointer): Ptr[AdwSwipeableInterface] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def ADW_SWIPE_TRACKER(ptr : gpointer): Ptr[AdwSwipeTracker] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def ADW_TAB_BAR(ptr : gpointer): Ptr[AdwTabBar] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def ADW_TAB_PAGE(ptr : gpointer): Ptr[AdwTabPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def ADW_TAB_VIEW(ptr : gpointer): Ptr[AdwTabView] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def ADW_TIMED_ANIMATION(ptr : gpointer): Ptr[AdwTimedAnimation] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def ADW_TIMED_ANIMATION_CLASS(ptr : gpointer): Ptr[AdwTimedAnimationClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def ADW_TIMED_ANIMATION_GET_CLASS(ptr : gpointer): Ptr[AdwTimedAnimationClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def ADW_TOAST(ptr : gpointer): Ptr[AdwToast] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast-overlay.h
  */
  def ADW_TOAST_OVERLAY(ptr : gpointer): Ptr[AdwToastOverlay] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def ADW_VIEW_STACK(ptr : gpointer): Ptr[AdwViewStack] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def ADW_VIEW_STACK_PAGE(ptr : gpointer): Ptr[AdwViewStackPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
  */
  def ADW_VIEW_SWITCHER(ptr : gpointer): Ptr[AdwViewSwitcher] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
  */
  def ADW_VIEW_SWITCHER_BAR(ptr : gpointer): Ptr[AdwViewSwitcherBar] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def ADW_VIEW_SWITCHER_TITLE(ptr : gpointer): Ptr[AdwViewSwitcherTitle] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
  */
  def ADW_WINDOW(ptr : gpointer): Ptr[AdwWindow] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
  */
  def ADW_WINDOW_CLASS(ptr : gpointer): Ptr[AdwWindowClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
  */
  def ADW_WINDOW_GET_CLASS(ptr : gpointer): Ptr[AdwWindowClass] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
  */
  def ADW_WINDOW_TITLE(ptr : gpointer): Ptr[AdwWindowTitle] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdragsurface.h
  */
  def GDK_DRAG_SURFACE(ptr : gpointer): Ptr[GdkDragSurface] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdragsurface.h
  */
  def GDK_DRAG_SURFACE_GET_IFACE(ptr : gpointer): Ptr[GdkDragSurfaceInterface] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdragsurface.h
  */
  def GDK_IS_DRAG_SURFACE(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
  */
  def GDK_IS_PAINTABLE(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopup.h
  */
  def GDK_IS_POPUP(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def GDK_IS_TOPLEVEL(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
  */
  def GDK_PAINTABLE(ptr : gpointer): Ptr[GdkPaintable] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
  */
  def GDK_PAINTABLE_GET_IFACE(ptr : gpointer): Ptr[GdkPaintableInterface] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopup.h
  */
  def GDK_POPUP(ptr : gpointer): Ptr[GdkPopup] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopup.h
  */
  def GDK_POPUP_GET_IFACE(ptr : gpointer): Ptr[GdkPopupInterface] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def GDK_TOPLEVEL(ptr : gpointer): Ptr[GdkToplevel] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def GDK_TOPLEVEL_GET_IFACE(ptr : gpointer): Ptr[GdkToplevelInterface] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def GSK_GL_SHADER(ptr : gpointer): Ptr[GskGLShader] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def GSK_IS_GL_SHADER(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
  */
  def G_DEBUG_CONTROLLER_DBUS(ptr : gpointer): Ptr[GDebugControllerDBus] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
  */
  def G_DEBUG_CONTROLLER_DBUS_CLASS(ptr : gpointer): Ptr[GDebugControllerDBusClass] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
  */
  def G_DEBUG_CONTROLLER_DBUS_GET_CLASS(ptr : gpointer): Ptr[GDebugControllerDBusClass] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
  */
  def G_IS_DEBUG_CONTROLLER_DBUS(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
  */
  def G_IS_DEBUG_CONTROLLER_DBUS_CLASS(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/glistmodel.h
  */
  def G_IS_LIST_MODEL(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def G_IS_LIST_STORE(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/glistmodel.h
  */
  def G_LIST_MODEL(ptr : gpointer): Ptr[GListModel] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/glistmodel.h
  */
  def G_LIST_MODEL_GET_IFACE(ptr : gpointer): Ptr[GListModelInterface] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def G_LIST_STORE(ptr : gpointer): Ptr[GListStore] = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_add(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_clamp(v : Ptr[graphene_simd4f_t], min : Ptr[graphene_simd4f_t], max : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_clamp_scalar(v : Ptr[graphene_simd4f_t], min : Float, max : Float, __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_cmp_eq(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t]): Boolean = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_cmp_ge(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t]): Boolean = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_cmp_gt(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t]): Boolean = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_cmp_le(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t]): Boolean = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_cmp_lt(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t]): Boolean = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_cmp_neq(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t]): Boolean = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_cross3(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_div(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_dot2(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_dot3(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_dot3_scalar(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t]): Float = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_dot4(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_dup_2f(s : Ptr[graphene_simd4f_t], v : Ptr[Float]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_dup_3f(s : Ptr[graphene_simd4f_t], v : Ptr[Float]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_dup_4f(s : Ptr[graphene_simd4f_t], v : Ptr[Float]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_flip_sign_0101(s : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_flip_sign_1010(s : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_get(s : Ptr[graphene_simd4f_t], i : CUnsignedInt): Float = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_get_w(s : Ptr[graphene_simd4f_t]): Float = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_get_x(s : Ptr[graphene_simd4f_t]): Float = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_get_y(s : Ptr[graphene_simd4f_t]): Float = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_get_z(s : Ptr[graphene_simd4f_t]): Float = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_init(x : Float, y : Float, z : Float, w : Float, __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_init_2f(v : Ptr[Float], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_init_3f(v : Ptr[Float], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_init_4f(v : Ptr[Float], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_init_zero(__return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_interpolate(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t], f : Float, __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_is_zero2(v : Ptr[graphene_simd4f_t]): Boolean = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_is_zero3(v : Ptr[graphene_simd4f_t]): Boolean = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_is_zero4(v : Ptr[graphene_simd4f_t]): Boolean = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_length2(v : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_length3(v : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_length4(v : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_madd(m1 : Ptr[graphene_simd4f_t], m2 : Ptr[graphene_simd4f_t], a : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_max(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_max_val(v : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_merge_high(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_merge_low(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_merge_w(s : Ptr[graphene_simd4f_t], v : Float, __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_min(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_min_val(v : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_mul(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_neg(s : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_normalize2(v : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_normalize3(v : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_normalize4(v : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_reciprocal(s : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_rsqrt(s : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_shuffle_wxyz(s : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_shuffle_yzwx(s : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_shuffle_zwxy(s : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_splat(v : Float, __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_splat_w(s : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_splat_x(s : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_splat_y(s : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_splat_z(s : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_sqrt(s : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_sub(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_sum(v : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_sum_scalar(v : Ptr[graphene_simd4f_t]): Float = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_zero_w(s : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4f_zero_zw(s : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4x4f_init(x : Ptr[graphene_simd4f_t], y : Ptr[graphene_simd4f_t], z : Ptr[graphene_simd4f_t], w : Ptr[graphene_simd4f_t], __return : Ptr[graphene_simd4x4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4x4f_init_look_at(m : Ptr[graphene_simd4x4f_t], eye : Ptr[graphene_simd4f_t], center : Ptr[graphene_simd4f_t], up : Ptr[graphene_simd4f_t]): Unit = extern

  private[adwaita] def __sn_wrap_adwaita_graphene_simd4x4f_rotation(m : Ptr[graphene_simd4x4f_t], rad : Float, axis : Ptr[graphene_simd4f_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def _g_log_fallback_handler(log_domain : Ptr[gchar], log_level : GLogLevelFlags, message : Ptr[gchar], unused_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def _g_param_type_register_static_constant(name : Ptr[gchar], pspec_info : Ptr[GParamSpecTypeInfo], opt_type : GType): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def _g_signals_destroy(itype : GType): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def adw_action_row_activate(self : Ptr[AdwActionRow]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def adw_action_row_add_prefix(self : Ptr[AdwActionRow], widget : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def adw_action_row_add_suffix(self : Ptr[AdwActionRow], widget : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def adw_action_row_get_activatable_widget(self : Ptr[AdwActionRow]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def adw_action_row_get_icon_name(self : Ptr[AdwActionRow]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def adw_action_row_get_subtitle(self : Ptr[AdwActionRow]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def adw_action_row_get_subtitle_lines(self : Ptr[AdwActionRow]): CInt = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def adw_action_row_get_title_lines(self : Ptr[AdwActionRow]): CInt = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def adw_action_row_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def adw_action_row_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def adw_action_row_remove(self : Ptr[AdwActionRow], widget : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def adw_action_row_set_activatable_widget(self : Ptr[AdwActionRow], widget : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def adw_action_row_set_icon_name(self : Ptr[AdwActionRow], icon_name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def adw_action_row_set_subtitle(self : Ptr[AdwActionRow], subtitle : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def adw_action_row_set_subtitle_lines(self : Ptr[AdwActionRow], subtitle_lines : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def adw_action_row_set_title_lines(self : Ptr[AdwActionRow], title_lines : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def adw_animation_get_state(self : Ptr[AdwAnimation]): AdwAnimationState = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def adw_animation_get_target(self : Ptr[AdwAnimation]): Ptr[AdwAnimationTarget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def adw_animation_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def adw_animation_get_value(self : Ptr[AdwAnimation]): Double = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def adw_animation_get_widget(self : Ptr[AdwAnimation]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def adw_animation_pause(self : Ptr[AdwAnimation]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def adw_animation_play(self : Ptr[AdwAnimation]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def adw_animation_reset(self : Ptr[AdwAnimation]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def adw_animation_resume(self : Ptr[AdwAnimation]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def adw_animation_skip(self : Ptr[AdwAnimation]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enums.h
  */
  def adw_animation_state_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def adw_animation_target_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
  */
  def adw_application_get_style_manager(self : Ptr[AdwApplication]): Ptr[AdwStyleManager] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
  */
  def adw_application_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
  */
  def adw_application_new(application_id : CString, flags : GApplicationFlags): Ptr[AdwApplication] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
  */
  def adw_application_window_get_content(self : Ptr[AdwApplicationWindow]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
  */
  def adw_application_window_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
  */
  def adw_application_window_new(app : Ptr[_root_.gtk4.all.GtkApplication]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
  */
  def adw_application_window_set_content(self : Ptr[AdwApplicationWindow], content : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def adw_avatar_draw_to_texture(self : Ptr[AdwAvatar], scale_factor : CInt): Ptr[GdkTexture] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def adw_avatar_get_custom_image(self : Ptr[AdwAvatar]): Ptr[GdkPaintable] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def adw_avatar_get_icon_name(self : Ptr[AdwAvatar]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def adw_avatar_get_show_initials(self : Ptr[AdwAvatar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def adw_avatar_get_size(self : Ptr[AdwAvatar]): CInt = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def adw_avatar_get_text(self : Ptr[AdwAvatar]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def adw_avatar_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def adw_avatar_new(size : CInt, text : CString, show_initials : gboolean): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def adw_avatar_set_custom_image(self : Ptr[AdwAvatar], custom_image : Ptr[GdkPaintable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def adw_avatar_set_icon_name(self : Ptr[AdwAvatar], icon_name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def adw_avatar_set_show_initials(self : Ptr[AdwAvatar], show_initials : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def adw_avatar_set_size(self : Ptr[AdwAvatar], size : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def adw_avatar_set_text(self : Ptr[AdwAvatar], text : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
  */
  def adw_bin_get_child(self : Ptr[AdwBin]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
  */
  def adw_bin_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
  */
  def adw_bin_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
  */
  def adw_bin_set_child(self : Ptr[AdwBin], child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
  */
  def adw_button_content_get_icon_name(self : Ptr[AdwButtonContent]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
  */
  def adw_button_content_get_label(self : Ptr[AdwButtonContent]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
  */
  def adw_button_content_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
  */
  def adw_button_content_get_use_underline(self : Ptr[AdwButtonContent]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
  */
  def adw_button_content_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
  */
  def adw_button_content_set_icon_name(self : Ptr[AdwButtonContent], icon_name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
  */
  def adw_button_content_set_label(self : Ptr[AdwButtonContent], label : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
  */
  def adw_button_content_set_use_underline(self : Ptr[AdwButtonContent], use_underline : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def adw_callback_animation_target_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def adw_callback_animation_target_new(callback : AdwAnimationTargetFunc, user_data : gpointer, destroy : GDestroyNotify): Ptr[AdwAnimationTarget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_append(self : Ptr[AdwCarousel], child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_get_allow_long_swipes(self : Ptr[AdwCarousel]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_get_allow_mouse_drag(self : Ptr[AdwCarousel]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_get_allow_scroll_wheel(self : Ptr[AdwCarousel]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_get_interactive(self : Ptr[AdwCarousel]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_get_n_pages(self : Ptr[AdwCarousel]): guint = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_get_nth_page(self : Ptr[AdwCarousel], n : guint): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_get_position(self : Ptr[AdwCarousel]): Double = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_get_reveal_duration(self : Ptr[AdwCarousel]): guint = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_get_scroll_params(self : Ptr[AdwCarousel]): Ptr[AdwSpringParams] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_get_spacing(self : Ptr[AdwCarousel]): guint = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-dots.h
  */
  def adw_carousel_indicator_dots_get_carousel(self : Ptr[AdwCarouselIndicatorDots]): Ptr[AdwCarousel] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-dots.h
  */
  def adw_carousel_indicator_dots_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-dots.h
  */
  def adw_carousel_indicator_dots_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-dots.h
  */
  def adw_carousel_indicator_dots_set_carousel(self : Ptr[AdwCarouselIndicatorDots], carousel : Ptr[AdwCarousel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-lines.h
  */
  def adw_carousel_indicator_lines_get_carousel(self : Ptr[AdwCarouselIndicatorLines]): Ptr[AdwCarousel] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-lines.h
  */
  def adw_carousel_indicator_lines_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-lines.h
  */
  def adw_carousel_indicator_lines_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-lines.h
  */
  def adw_carousel_indicator_lines_set_carousel(self : Ptr[AdwCarouselIndicatorLines], carousel : Ptr[AdwCarousel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_insert(self : Ptr[AdwCarousel], child : Ptr[_root_.gtk4.all.GtkWidget], position : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_prepend(self : Ptr[AdwCarousel], child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_remove(self : Ptr[AdwCarousel], child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_reorder(self : Ptr[AdwCarousel], child : Ptr[_root_.gtk4.all.GtkWidget], position : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_scroll_to(self : Ptr[AdwCarousel], widget : Ptr[_root_.gtk4.all.GtkWidget], animate : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_set_allow_long_swipes(self : Ptr[AdwCarousel], allow_long_swipes : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_set_allow_mouse_drag(self : Ptr[AdwCarousel], allow_mouse_drag : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_set_allow_scroll_wheel(self : Ptr[AdwCarousel], allow_scroll_wheel : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_set_interactive(self : Ptr[AdwCarousel], interactive : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_set_reveal_duration(self : Ptr[AdwCarousel], reveal_duration : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_set_scroll_params(self : Ptr[AdwCarousel], params : Ptr[AdwSpringParams]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def adw_carousel_set_spacing(self : Ptr[AdwCarousel], spacing : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enums.h
  */
  def adw_centering_policy_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
  */
  def adw_clamp_get_child(self : Ptr[AdwClamp]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
  */
  def adw_clamp_get_maximum_size(self : Ptr[AdwClamp]): CInt = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
  */
  def adw_clamp_get_tightening_threshold(self : Ptr[AdwClamp]): CInt = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
  */
  def adw_clamp_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
  */
  def adw_clamp_layout_get_maximum_size(self : Ptr[AdwClampLayout]): CInt = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
  */
  def adw_clamp_layout_get_tightening_threshold(self : Ptr[AdwClampLayout]): CInt = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
  */
  def adw_clamp_layout_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
  */
  def adw_clamp_layout_new(): Ptr[_root_.gtk4.all.GtkLayoutManager] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
  */
  def adw_clamp_layout_set_maximum_size(self : Ptr[AdwClampLayout], maximum_size : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
  */
  def adw_clamp_layout_set_tightening_threshold(self : Ptr[AdwClampLayout], tightening_threshold : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
  */
  def adw_clamp_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
  */
  def adw_clamp_scrollable_get_child(self : Ptr[AdwClampScrollable]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
  */
  def adw_clamp_scrollable_get_maximum_size(self : Ptr[AdwClampScrollable]): CInt = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
  */
  def adw_clamp_scrollable_get_tightening_threshold(self : Ptr[AdwClampScrollable]): CInt = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
  */
  def adw_clamp_scrollable_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
  */
  def adw_clamp_scrollable_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
  */
  def adw_clamp_scrollable_set_child(self : Ptr[AdwClampScrollable], child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
  */
  def adw_clamp_scrollable_set_maximum_size(self : Ptr[AdwClampScrollable], maximum_size : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
  */
  def adw_clamp_scrollable_set_tightening_threshold(self : Ptr[AdwClampScrollable], tightening_threshold : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
  */
  def adw_clamp_set_child(self : Ptr[AdwClamp], child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
  */
  def adw_clamp_set_maximum_size(self : Ptr[AdwClamp], maximum_size : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
  */
  def adw_clamp_set_tightening_threshold(self : Ptr[AdwClamp], tightening_threshold : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enums.h
  */
  def adw_color_scheme_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def adw_combo_row_get_expression(self : Ptr[AdwComboRow]): Ptr[_root_.gtk4.all.GtkExpression] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def adw_combo_row_get_factory(self : Ptr[AdwComboRow]): Ptr[_root_.gtk4.all.GtkListItemFactory] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def adw_combo_row_get_list_factory(self : Ptr[AdwComboRow]): Ptr[_root_.gtk4.all.GtkListItemFactory] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def adw_combo_row_get_model(self : Ptr[AdwComboRow]): Ptr[GListModel] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def adw_combo_row_get_selected(self : Ptr[AdwComboRow]): guint = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def adw_combo_row_get_selected_item(self : Ptr[AdwComboRow]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def adw_combo_row_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def adw_combo_row_get_use_subtitle(self : Ptr[AdwComboRow]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def adw_combo_row_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def adw_combo_row_set_expression(self : Ptr[AdwComboRow], expression : Ptr[_root_.gtk4.all.GtkExpression]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def adw_combo_row_set_factory(self : Ptr[AdwComboRow], factory : Ptr[_root_.gtk4.all.GtkListItemFactory]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def adw_combo_row_set_list_factory(self : Ptr[AdwComboRow], factory : Ptr[_root_.gtk4.all.GtkListItemFactory]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def adw_combo_row_set_model(self : Ptr[AdwComboRow], model : Ptr[GListModel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def adw_combo_row_set_selected(self : Ptr[AdwComboRow], position : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def adw_combo_row_set_use_subtitle(self : Ptr[AdwComboRow], use_subtitle : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-easing.h
  */
  def adw_easing_ease(self : AdwEasing, value : Double): Double = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enums.h
  */
  def adw_easing_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def adw_enum_list_item_get_name(self : Ptr[AdwEnumListItem]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def adw_enum_list_item_get_nick(self : Ptr[AdwEnumListItem]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def adw_enum_list_item_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def adw_enum_list_item_get_value(self : Ptr[AdwEnumListItem]): CInt = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def adw_enum_list_model_find_position(self : Ptr[AdwEnumListModel], value : CInt): guint = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def adw_enum_list_model_get_enum_type(self : Ptr[AdwEnumListModel]): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def adw_enum_list_model_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def adw_enum_list_model_new(enum_type : GType): Ptr[AdwEnumListModel] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def adw_expander_row_add_action(self : Ptr[AdwExpanderRow], widget : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def adw_expander_row_add_prefix(self : Ptr[AdwExpanderRow], widget : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def adw_expander_row_add_row(self : Ptr[AdwExpanderRow], child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def adw_expander_row_get_enable_expansion(self : Ptr[AdwExpanderRow]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def adw_expander_row_get_expanded(self : Ptr[AdwExpanderRow]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def adw_expander_row_get_icon_name(self : Ptr[AdwExpanderRow]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def adw_expander_row_get_show_enable_switch(self : Ptr[AdwExpanderRow]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def adw_expander_row_get_subtitle(self : Ptr[AdwExpanderRow]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def adw_expander_row_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def adw_expander_row_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def adw_expander_row_remove(self : Ptr[AdwExpanderRow], child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def adw_expander_row_set_enable_expansion(self : Ptr[AdwExpanderRow], enable_expansion : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def adw_expander_row_set_expanded(self : Ptr[AdwExpanderRow], expanded : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def adw_expander_row_set_icon_name(self : Ptr[AdwExpanderRow], icon_name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def adw_expander_row_set_show_enable_switch(self : Ptr[AdwExpanderRow], show_enable_switch : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def adw_expander_row_set_subtitle(self : Ptr[AdwExpanderRow], subtitle : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enums.h
  */
  def adw_flap_fold_policy_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_get_content(self : Ptr[AdwFlap]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_get_flap(self : Ptr[AdwFlap]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_get_flap_position(self : Ptr[AdwFlap]): _root_.gtk4.all.GtkPackType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_get_fold_duration(self : Ptr[AdwFlap]): guint = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_get_fold_policy(self : Ptr[AdwFlap]): AdwFlapFoldPolicy = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_get_fold_threshold_policy(self : Ptr[AdwFlap]): AdwFoldThresholdPolicy = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_get_folded(self : Ptr[AdwFlap]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_get_locked(self : Ptr[AdwFlap]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_get_modal(self : Ptr[AdwFlap]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_get_reveal_flap(self : Ptr[AdwFlap]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_get_reveal_params(self : Ptr[AdwFlap]): Ptr[AdwSpringParams] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_get_reveal_progress(self : Ptr[AdwFlap]): Double = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_get_separator(self : Ptr[AdwFlap]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_get_swipe_to_close(self : Ptr[AdwFlap]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_get_swipe_to_open(self : Ptr[AdwFlap]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_get_transition_type(self : Ptr[AdwFlap]): AdwFlapTransitionType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_set_content(self : Ptr[AdwFlap], content : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_set_flap(self : Ptr[AdwFlap], flap : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_set_flap_position(self : Ptr[AdwFlap], position : _root_.gtk4.all.GtkPackType): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_set_fold_duration(self : Ptr[AdwFlap], duration : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_set_fold_policy(self : Ptr[AdwFlap], policy : AdwFlapFoldPolicy): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_set_fold_threshold_policy(self : Ptr[AdwFlap], policy : AdwFoldThresholdPolicy): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_set_locked(self : Ptr[AdwFlap], locked : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_set_modal(self : Ptr[AdwFlap], modal : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_set_reveal_flap(self : Ptr[AdwFlap], reveal_flap : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_set_reveal_params(self : Ptr[AdwFlap], params : Ptr[AdwSpringParams]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_set_separator(self : Ptr[AdwFlap], separator : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_set_swipe_to_close(self : Ptr[AdwFlap], swipe_to_close : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_set_swipe_to_open(self : Ptr[AdwFlap], swipe_to_open : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def adw_flap_set_transition_type(self : Ptr[AdwFlap], transition_type : AdwFlapTransitionType): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enums.h
  */
  def adw_flap_transition_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enums.h
  */
  def adw_fold_threshold_policy_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-util.h
  */
  def adw_get_enable_animations(widget : Ptr[_root_.gtk4.all.GtkWidget]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-version.h
  */
  def adw_get_major_version(): guint = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-version.h
  */
  def adw_get_micro_version(): guint = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-version.h
  */
  def adw_get_minor_version(): guint = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def adw_header_bar_get_centering_policy(self : Ptr[AdwHeaderBar]): AdwCenteringPolicy = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def adw_header_bar_get_decoration_layout(self : Ptr[AdwHeaderBar]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def adw_header_bar_get_show_end_title_buttons(self : Ptr[AdwHeaderBar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def adw_header_bar_get_show_start_title_buttons(self : Ptr[AdwHeaderBar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def adw_header_bar_get_title_widget(self : Ptr[AdwHeaderBar]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def adw_header_bar_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def adw_header_bar_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def adw_header_bar_pack_end(self : Ptr[AdwHeaderBar], child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def adw_header_bar_pack_start(self : Ptr[AdwHeaderBar], child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def adw_header_bar_remove(self : Ptr[AdwHeaderBar], child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def adw_header_bar_set_centering_policy(self : Ptr[AdwHeaderBar], centering_policy : AdwCenteringPolicy): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def adw_header_bar_set_decoration_layout(self : Ptr[AdwHeaderBar], layout : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def adw_header_bar_set_show_end_title_buttons(self : Ptr[AdwHeaderBar], setting : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def adw_header_bar_set_show_start_title_buttons(self : Ptr[AdwHeaderBar], setting : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def adw_header_bar_set_title_widget(self : Ptr[AdwHeaderBar], title_widget : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-main.h
  */
  def adw_init(): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-main.h
  */
  def adw_is_initialized(): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_append(self : Ptr[AdwLeaflet], child : Ptr[_root_.gtk4.all.GtkWidget]): Ptr[AdwLeafletPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_get_adjacent_child(self : Ptr[AdwLeaflet], direction : AdwNavigationDirection): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_get_can_navigate_back(self : Ptr[AdwLeaflet]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_get_can_navigate_forward(self : Ptr[AdwLeaflet]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_get_can_unfold(self : Ptr[AdwLeaflet]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_get_child_by_name(self : Ptr[AdwLeaflet], name : CString): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_get_child_transition_params(self : Ptr[AdwLeaflet]): Ptr[AdwSpringParams] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_get_child_transition_running(self : Ptr[AdwLeaflet]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_get_fold_threshold_policy(self : Ptr[AdwLeaflet]): AdwFoldThresholdPolicy = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_get_folded(self : Ptr[AdwLeaflet]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_get_homogeneous(self : Ptr[AdwLeaflet]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_get_mode_transition_duration(self : Ptr[AdwLeaflet]): guint = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_get_page(self : Ptr[AdwLeaflet], child : Ptr[_root_.gtk4.all.GtkWidget]): Ptr[AdwLeafletPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_get_pages(self : Ptr[AdwLeaflet]): Ptr[_root_.gtk4.all.GtkSelectionModel] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_get_transition_type(self : Ptr[AdwLeaflet]): AdwLeafletTransitionType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_get_visible_child(self : Ptr[AdwLeaflet]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_get_visible_child_name(self : Ptr[AdwLeaflet]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_insert_child_after(self : Ptr[AdwLeaflet], child : Ptr[_root_.gtk4.all.GtkWidget], sibling : Ptr[_root_.gtk4.all.GtkWidget]): Ptr[AdwLeafletPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_navigate(self : Ptr[AdwLeaflet], direction : AdwNavigationDirection): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_page_get_child(self : Ptr[AdwLeafletPage]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_page_get_name(self : Ptr[AdwLeafletPage]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_page_get_navigatable(self : Ptr[AdwLeafletPage]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_page_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_page_set_name(self : Ptr[AdwLeafletPage], name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_page_set_navigatable(self : Ptr[AdwLeafletPage], navigatable : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_prepend(self : Ptr[AdwLeaflet], child : Ptr[_root_.gtk4.all.GtkWidget]): Ptr[AdwLeafletPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_remove(self : Ptr[AdwLeaflet], child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_reorder_child_after(self : Ptr[AdwLeaflet], child : Ptr[_root_.gtk4.all.GtkWidget], sibling : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_set_can_navigate_back(self : Ptr[AdwLeaflet], can_navigate_back : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_set_can_navigate_forward(self : Ptr[AdwLeaflet], can_navigate_forward : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_set_can_unfold(self : Ptr[AdwLeaflet], can_unfold : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_set_child_transition_params(self : Ptr[AdwLeaflet], params : Ptr[AdwSpringParams]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_set_fold_threshold_policy(self : Ptr[AdwLeaflet], policy : AdwFoldThresholdPolicy): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_set_homogeneous(self : Ptr[AdwLeaflet], homogeneous : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_set_mode_transition_duration(self : Ptr[AdwLeaflet], duration : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_set_transition_type(self : Ptr[AdwLeaflet], transition : AdwLeafletTransitionType): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_set_visible_child(self : Ptr[AdwLeaflet], visible_child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def adw_leaflet_set_visible_child_name(self : Ptr[AdwLeaflet], name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enums.h
  */
  def adw_leaflet_transition_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-util.h
  */
  def adw_lerp(a : Double, b : Double, t : Double): Double = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enums.h
  */
  def adw_navigation_direction_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def adw_preferences_group_add(self : Ptr[AdwPreferencesGroup], child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def adw_preferences_group_get_description(self : Ptr[AdwPreferencesGroup]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def adw_preferences_group_get_header_suffix(self : Ptr[AdwPreferencesGroup]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def adw_preferences_group_get_title(self : Ptr[AdwPreferencesGroup]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def adw_preferences_group_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def adw_preferences_group_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def adw_preferences_group_remove(self : Ptr[AdwPreferencesGroup], child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def adw_preferences_group_set_description(self : Ptr[AdwPreferencesGroup], description : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def adw_preferences_group_set_header_suffix(self : Ptr[AdwPreferencesGroup], suffix : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def adw_preferences_group_set_title(self : Ptr[AdwPreferencesGroup], title : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def adw_preferences_page_add(self : Ptr[AdwPreferencesPage], group : Ptr[AdwPreferencesGroup]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def adw_preferences_page_get_icon_name(self : Ptr[AdwPreferencesPage]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def adw_preferences_page_get_name(self : Ptr[AdwPreferencesPage]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def adw_preferences_page_get_title(self : Ptr[AdwPreferencesPage]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def adw_preferences_page_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def adw_preferences_page_get_use_underline(self : Ptr[AdwPreferencesPage]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def adw_preferences_page_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def adw_preferences_page_remove(self : Ptr[AdwPreferencesPage], group : Ptr[AdwPreferencesGroup]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def adw_preferences_page_set_icon_name(self : Ptr[AdwPreferencesPage], icon_name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def adw_preferences_page_set_name(self : Ptr[AdwPreferencesPage], name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def adw_preferences_page_set_title(self : Ptr[AdwPreferencesPage], title : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def adw_preferences_page_set_use_underline(self : Ptr[AdwPreferencesPage], use_underline : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def adw_preferences_row_get_title(self : Ptr[AdwPreferencesRow]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def adw_preferences_row_get_title_selectable(self : Ptr[AdwPreferencesRow]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def adw_preferences_row_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def adw_preferences_row_get_use_underline(self : Ptr[AdwPreferencesRow]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def adw_preferences_row_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def adw_preferences_row_set_title(self : Ptr[AdwPreferencesRow], title : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def adw_preferences_row_set_title_selectable(self : Ptr[AdwPreferencesRow], title_selectable : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def adw_preferences_row_set_use_underline(self : Ptr[AdwPreferencesRow], use_underline : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def adw_preferences_window_add(self : Ptr[AdwPreferencesWindow], page : Ptr[AdwPreferencesPage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def adw_preferences_window_add_toast(self : Ptr[AdwPreferencesWindow], toast : Ptr[AdwToast]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def adw_preferences_window_close_subpage(self : Ptr[AdwPreferencesWindow]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def adw_preferences_window_get_can_navigate_back(self : Ptr[AdwPreferencesWindow]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def adw_preferences_window_get_search_enabled(self : Ptr[AdwPreferencesWindow]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def adw_preferences_window_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def adw_preferences_window_get_visible_page(self : Ptr[AdwPreferencesWindow]): Ptr[AdwPreferencesPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def adw_preferences_window_get_visible_page_name(self : Ptr[AdwPreferencesWindow]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def adw_preferences_window_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def adw_preferences_window_present_subpage(self : Ptr[AdwPreferencesWindow], subpage : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def adw_preferences_window_remove(self : Ptr[AdwPreferencesWindow], page : Ptr[AdwPreferencesPage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def adw_preferences_window_set_can_navigate_back(self : Ptr[AdwPreferencesWindow], can_navigate_back : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def adw_preferences_window_set_search_enabled(self : Ptr[AdwPreferencesWindow], search_enabled : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def adw_preferences_window_set_visible_page(self : Ptr[AdwPreferencesWindow], page : Ptr[AdwPreferencesPage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def adw_preferences_window_set_visible_page_name(self : Ptr[AdwPreferencesWindow], name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def adw_split_button_get_child(self : Ptr[AdwSplitButton]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def adw_split_button_get_direction(self : Ptr[AdwSplitButton]): _root_.gtk4.all.GtkArrowType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def adw_split_button_get_icon_name(self : Ptr[AdwSplitButton]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def adw_split_button_get_label(self : Ptr[AdwSplitButton]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def adw_split_button_get_menu_model(self : Ptr[AdwSplitButton]): Ptr[GMenuModel] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def adw_split_button_get_popover(self : Ptr[AdwSplitButton]): Ptr[_root_.gtk4.all.GtkPopover] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def adw_split_button_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def adw_split_button_get_use_underline(self : Ptr[AdwSplitButton]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def adw_split_button_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def adw_split_button_popdown(self : Ptr[AdwSplitButton]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def adw_split_button_popup(self : Ptr[AdwSplitButton]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def adw_split_button_set_child(self : Ptr[AdwSplitButton], child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def adw_split_button_set_direction(self : Ptr[AdwSplitButton], direction : _root_.gtk4.all.GtkArrowType): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def adw_split_button_set_icon_name(self : Ptr[AdwSplitButton], icon_name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def adw_split_button_set_label(self : Ptr[AdwSplitButton], label : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def adw_split_button_set_menu_model(self : Ptr[AdwSplitButton], menu_model : Ptr[GMenuModel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def adw_split_button_set_popover(self : Ptr[AdwSplitButton], popover : Ptr[_root_.gtk4.all.GtkPopover]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def adw_split_button_set_use_underline(self : Ptr[AdwSplitButton], use_underline : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def adw_spring_animation_get_clamp(self : Ptr[AdwSpringAnimation]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def adw_spring_animation_get_epsilon(self : Ptr[AdwSpringAnimation]): Double = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def adw_spring_animation_get_estimated_duration(self : Ptr[AdwSpringAnimation]): guint = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def adw_spring_animation_get_initial_velocity(self : Ptr[AdwSpringAnimation]): Double = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def adw_spring_animation_get_spring_params(self : Ptr[AdwSpringAnimation]): Ptr[AdwSpringParams] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def adw_spring_animation_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def adw_spring_animation_get_value_from(self : Ptr[AdwSpringAnimation]): Double = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def adw_spring_animation_get_value_to(self : Ptr[AdwSpringAnimation]): Double = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def adw_spring_animation_get_velocity(self : Ptr[AdwSpringAnimation]): Double = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def adw_spring_animation_new(widget : Ptr[_root_.gtk4.all.GtkWidget], from : Double, to : Double, spring_params : Ptr[AdwSpringParams], target : Ptr[AdwAnimationTarget]): Ptr[AdwAnimation] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def adw_spring_animation_set_clamp(self : Ptr[AdwSpringAnimation], clamp : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def adw_spring_animation_set_epsilon(self : Ptr[AdwSpringAnimation], epsilon : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def adw_spring_animation_set_initial_velocity(self : Ptr[AdwSpringAnimation], velocity : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def adw_spring_animation_set_spring_params(self : Ptr[AdwSpringAnimation], spring_params : Ptr[AdwSpringParams]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def adw_spring_animation_set_value_from(self : Ptr[AdwSpringAnimation], value : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def adw_spring_animation_set_value_to(self : Ptr[AdwSpringAnimation], value : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-params.h
  */
  def adw_spring_params_get_damping(self : Ptr[AdwSpringParams]): Double = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-params.h
  */
  def adw_spring_params_get_damping_ratio(self : Ptr[AdwSpringParams]): Double = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-params.h
  */
  def adw_spring_params_get_mass(self : Ptr[AdwSpringParams]): Double = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-params.h
  */
  def adw_spring_params_get_stiffness(self : Ptr[AdwSpringParams]): Double = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-params.h
  */
  def adw_spring_params_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-params.h
  */
  def adw_spring_params_new(damping_ratio : Double, mass : Double, stiffness : Double): Ptr[AdwSpringParams] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-params.h
  */
  def adw_spring_params_new_full(damping : Double, mass : Double, stiffness : Double): Ptr[AdwSpringParams] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-params.h
  */
  def adw_spring_params_ref(self : Ptr[AdwSpringParams]): Ptr[AdwSpringParams] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-params.h
  */
  def adw_spring_params_unref(self : Ptr[AdwSpringParams]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_add(self : Ptr[AdwSqueezer], child : Ptr[_root_.gtk4.all.GtkWidget]): Ptr[AdwSqueezerPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_get_allow_none(self : Ptr[AdwSqueezer]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_get_homogeneous(self : Ptr[AdwSqueezer]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_get_interpolate_size(self : Ptr[AdwSqueezer]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_get_page(self : Ptr[AdwSqueezer], child : Ptr[_root_.gtk4.all.GtkWidget]): Ptr[AdwSqueezerPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_get_pages(self : Ptr[AdwSqueezer]): Ptr[_root_.gtk4.all.GtkSelectionModel] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_get_switch_threshold_policy(self : Ptr[AdwSqueezer]): AdwFoldThresholdPolicy = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_get_transition_duration(self : Ptr[AdwSqueezer]): guint = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_get_transition_running(self : Ptr[AdwSqueezer]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_get_transition_type(self : Ptr[AdwSqueezer]): AdwSqueezerTransitionType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_get_visible_child(self : Ptr[AdwSqueezer]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_get_xalign(self : Ptr[AdwSqueezer]): Float = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_get_yalign(self : Ptr[AdwSqueezer]): Float = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_page_get_child(self : Ptr[AdwSqueezerPage]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_page_get_enabled(self : Ptr[AdwSqueezerPage]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_page_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_page_set_enabled(self : Ptr[AdwSqueezerPage], enabled : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_remove(self : Ptr[AdwSqueezer], child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_set_allow_none(self : Ptr[AdwSqueezer], allow_none : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_set_homogeneous(self : Ptr[AdwSqueezer], homogeneous : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_set_interpolate_size(self : Ptr[AdwSqueezer], interpolate_size : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_set_switch_threshold_policy(self : Ptr[AdwSqueezer], policy : AdwFoldThresholdPolicy): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_set_transition_duration(self : Ptr[AdwSqueezer], duration : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_set_transition_type(self : Ptr[AdwSqueezer], transition : AdwSqueezerTransitionType): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_set_xalign(self : Ptr[AdwSqueezer], xalign : Float): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def adw_squeezer_set_yalign(self : Ptr[AdwSqueezer], yalign : Float): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enums.h
  */
  def adw_squeezer_transition_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def adw_status_page_get_child(self : Ptr[AdwStatusPage]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def adw_status_page_get_description(self : Ptr[AdwStatusPage]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def adw_status_page_get_icon_name(self : Ptr[AdwStatusPage]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def adw_status_page_get_paintable(self : Ptr[AdwStatusPage]): Ptr[GdkPaintable] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def adw_status_page_get_title(self : Ptr[AdwStatusPage]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def adw_status_page_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def adw_status_page_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def adw_status_page_set_child(self : Ptr[AdwStatusPage], child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def adw_status_page_set_description(self : Ptr[AdwStatusPage], description : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def adw_status_page_set_icon_name(self : Ptr[AdwStatusPage], icon_name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def adw_status_page_set_paintable(self : Ptr[AdwStatusPage], paintable : Ptr[GdkPaintable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def adw_status_page_set_title(self : Ptr[AdwStatusPage], title : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def adw_style_manager_get_color_scheme(self : Ptr[AdwStyleManager]): AdwColorScheme = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def adw_style_manager_get_dark(self : Ptr[AdwStyleManager]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def adw_style_manager_get_default(): Ptr[AdwStyleManager] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def adw_style_manager_get_display(self : Ptr[AdwStyleManager]): Ptr[GdkDisplay] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def adw_style_manager_get_for_display(display : Ptr[GdkDisplay]): Ptr[AdwStyleManager] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def adw_style_manager_get_high_contrast(self : Ptr[AdwStyleManager]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def adw_style_manager_get_system_supports_color_schemes(self : Ptr[AdwStyleManager]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def adw_style_manager_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def adw_style_manager_set_color_scheme(self : Ptr[AdwStyleManager], color_scheme : AdwColorScheme): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def adw_swipe_tracker_get_allow_long_swipes(self : Ptr[AdwSwipeTracker]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def adw_swipe_tracker_get_allow_mouse_drag(self : Ptr[AdwSwipeTracker]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def adw_swipe_tracker_get_enabled(self : Ptr[AdwSwipeTracker]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def adw_swipe_tracker_get_reversed(self : Ptr[AdwSwipeTracker]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def adw_swipe_tracker_get_swipeable(self : Ptr[AdwSwipeTracker]): Ptr[AdwSwipeable] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def adw_swipe_tracker_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def adw_swipe_tracker_new(swipeable : Ptr[AdwSwipeable]): Ptr[AdwSwipeTracker] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def adw_swipe_tracker_set_allow_long_swipes(self : Ptr[AdwSwipeTracker], allow_long_swipes : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def adw_swipe_tracker_set_allow_mouse_drag(self : Ptr[AdwSwipeTracker], allow_mouse_drag : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def adw_swipe_tracker_set_enabled(self : Ptr[AdwSwipeTracker], enabled : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def adw_swipe_tracker_set_reversed(self : Ptr[AdwSwipeTracker], reversed : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def adw_swipe_tracker_shift_position(self : Ptr[AdwSwipeTracker], delta : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipeable.h
  */
  def adw_swipeable_get_cancel_progress(self : Ptr[AdwSwipeable]): Double = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipeable.h
  */
  def adw_swipeable_get_distance(self : Ptr[AdwSwipeable]): Double = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipeable.h
  */
  def adw_swipeable_get_progress(self : Ptr[AdwSwipeable]): Double = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipeable.h
  */
  def adw_swipeable_get_snap_points(self : Ptr[AdwSwipeable], n_snap_points : Ptr[CInt]): Ptr[Double] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipeable.h
  */
  def adw_swipeable_get_swipe_area(self : Ptr[AdwSwipeable], navigation_direction : AdwNavigationDirection, is_drag : gboolean, rect : Ptr[GdkRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipeable.h
  */
  def adw_swipeable_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def adw_tab_bar_get_autohide(self : Ptr[AdwTabBar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def adw_tab_bar_get_end_action_widget(self : Ptr[AdwTabBar]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def adw_tab_bar_get_expand_tabs(self : Ptr[AdwTabBar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def adw_tab_bar_get_inverted(self : Ptr[AdwTabBar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def adw_tab_bar_get_is_overflowing(self : Ptr[AdwTabBar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def adw_tab_bar_get_start_action_widget(self : Ptr[AdwTabBar]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def adw_tab_bar_get_tabs_revealed(self : Ptr[AdwTabBar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def adw_tab_bar_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def adw_tab_bar_get_view(self : Ptr[AdwTabBar]): Ptr[AdwTabView] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def adw_tab_bar_new(): Ptr[AdwTabBar] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def adw_tab_bar_set_autohide(self : Ptr[AdwTabBar], autohide : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def adw_tab_bar_set_end_action_widget(self : Ptr[AdwTabBar], widget : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def adw_tab_bar_set_expand_tabs(self : Ptr[AdwTabBar], expand_tabs : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def adw_tab_bar_set_inverted(self : Ptr[AdwTabBar], inverted : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def adw_tab_bar_set_start_action_widget(self : Ptr[AdwTabBar], widget : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def adw_tab_bar_set_view(self : Ptr[AdwTabBar], view : Ptr[AdwTabView]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def adw_tab_bar_setup_extra_drop_target(self : Ptr[AdwTabBar], actions : GdkDragAction, types : Ptr[GType], n_types : gsize): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_page_get_child(self : Ptr[AdwTabPage]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_page_get_icon(self : Ptr[AdwTabPage]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_page_get_indicator_activatable(self : Ptr[AdwTabPage]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_page_get_indicator_icon(self : Ptr[AdwTabPage]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_page_get_loading(self : Ptr[AdwTabPage]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_page_get_needs_attention(self : Ptr[AdwTabPage]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_page_get_parent(self : Ptr[AdwTabPage]): Ptr[AdwTabPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_page_get_pinned(self : Ptr[AdwTabPage]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_page_get_selected(self : Ptr[AdwTabPage]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_page_get_title(self : Ptr[AdwTabPage]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_page_get_tooltip(self : Ptr[AdwTabPage]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_page_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_page_set_icon(self : Ptr[AdwTabPage], icon : Ptr[GIcon]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_page_set_indicator_activatable(self : Ptr[AdwTabPage], activatable : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_page_set_indicator_icon(self : Ptr[AdwTabPage], indicator_icon : Ptr[GIcon]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_page_set_loading(self : Ptr[AdwTabPage], loading : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_page_set_needs_attention(self : Ptr[AdwTabPage], needs_attention : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_page_set_title(self : Ptr[AdwTabPage], title : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_page_set_tooltip(self : Ptr[AdwTabPage], tooltip : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_add_page(self : Ptr[AdwTabView], child : Ptr[_root_.gtk4.all.GtkWidget], parent : Ptr[AdwTabPage]): Ptr[AdwTabPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_append(self : Ptr[AdwTabView], child : Ptr[_root_.gtk4.all.GtkWidget]): Ptr[AdwTabPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_append_pinned(self : Ptr[AdwTabView], child : Ptr[_root_.gtk4.all.GtkWidget]): Ptr[AdwTabPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_close_other_pages(self : Ptr[AdwTabView], page : Ptr[AdwTabPage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_close_page(self : Ptr[AdwTabView], page : Ptr[AdwTabPage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_close_page_finish(self : Ptr[AdwTabView], page : Ptr[AdwTabPage], confirm : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_close_pages_after(self : Ptr[AdwTabView], page : Ptr[AdwTabPage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_close_pages_before(self : Ptr[AdwTabView], page : Ptr[AdwTabPage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_get_default_icon(self : Ptr[AdwTabView]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_get_is_transferring_page(self : Ptr[AdwTabView]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_get_menu_model(self : Ptr[AdwTabView]): Ptr[GMenuModel] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_get_n_pages(self : Ptr[AdwTabView]): CInt = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_get_n_pinned_pages(self : Ptr[AdwTabView]): CInt = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_get_nth_page(self : Ptr[AdwTabView], position : CInt): Ptr[AdwTabPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_get_page(self : Ptr[AdwTabView], child : Ptr[_root_.gtk4.all.GtkWidget]): Ptr[AdwTabPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_get_page_position(self : Ptr[AdwTabView], page : Ptr[AdwTabPage]): CInt = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_get_pages(self : Ptr[AdwTabView]): Ptr[_root_.gtk4.all.GtkSelectionModel] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_get_selected_page(self : Ptr[AdwTabView]): Ptr[AdwTabPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_insert(self : Ptr[AdwTabView], child : Ptr[_root_.gtk4.all.GtkWidget], position : CInt): Ptr[AdwTabPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_insert_pinned(self : Ptr[AdwTabView], child : Ptr[_root_.gtk4.all.GtkWidget], position : CInt): Ptr[AdwTabPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_new(): Ptr[AdwTabView] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_prepend(self : Ptr[AdwTabView], child : Ptr[_root_.gtk4.all.GtkWidget]): Ptr[AdwTabPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_prepend_pinned(self : Ptr[AdwTabView], child : Ptr[_root_.gtk4.all.GtkWidget]): Ptr[AdwTabPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_reorder_backward(self : Ptr[AdwTabView], page : Ptr[AdwTabPage]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_reorder_first(self : Ptr[AdwTabView], page : Ptr[AdwTabPage]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_reorder_forward(self : Ptr[AdwTabView], page : Ptr[AdwTabPage]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_reorder_last(self : Ptr[AdwTabView], page : Ptr[AdwTabPage]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_reorder_page(self : Ptr[AdwTabView], page : Ptr[AdwTabPage], position : CInt): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_select_next_page(self : Ptr[AdwTabView]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_select_previous_page(self : Ptr[AdwTabView]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_set_default_icon(self : Ptr[AdwTabView], default_icon : Ptr[GIcon]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_set_menu_model(self : Ptr[AdwTabView], menu_model : Ptr[GMenuModel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_set_page_pinned(self : Ptr[AdwTabView], page : Ptr[AdwTabPage], pinned : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_set_selected_page(self : Ptr[AdwTabView], selected_page : Ptr[AdwTabPage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def adw_tab_view_transfer_page(self : Ptr[AdwTabView], page : Ptr[AdwTabPage], other_view : Ptr[AdwTabView], position : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def adw_timed_animation_get_alternate(self : Ptr[AdwTimedAnimation]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def adw_timed_animation_get_duration(self : Ptr[AdwTimedAnimation]): guint = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def adw_timed_animation_get_easing(self : Ptr[AdwTimedAnimation]): AdwEasing = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def adw_timed_animation_get_repeat_count(self : Ptr[AdwTimedAnimation]): guint = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def adw_timed_animation_get_reverse(self : Ptr[AdwTimedAnimation]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def adw_timed_animation_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def adw_timed_animation_get_value_from(self : Ptr[AdwTimedAnimation]): Double = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def adw_timed_animation_get_value_to(self : Ptr[AdwTimedAnimation]): Double = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def adw_timed_animation_new(widget : Ptr[_root_.gtk4.all.GtkWidget], from : Double, to : Double, duration : guint, target : Ptr[AdwAnimationTarget]): Ptr[AdwAnimation] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def adw_timed_animation_set_alternate(self : Ptr[AdwTimedAnimation], alternate : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def adw_timed_animation_set_duration(self : Ptr[AdwTimedAnimation], duration : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def adw_timed_animation_set_easing(self : Ptr[AdwTimedAnimation], easing : AdwEasing): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def adw_timed_animation_set_repeat_count(self : Ptr[AdwTimedAnimation], repeat_count : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def adw_timed_animation_set_reverse(self : Ptr[AdwTimedAnimation], reverse : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def adw_timed_animation_set_value_from(self : Ptr[AdwTimedAnimation], value : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def adw_timed_animation_set_value_to(self : Ptr[AdwTimedAnimation], value : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def adw_toast_dismiss(self : Ptr[AdwToast]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def adw_toast_get_action_name(self : Ptr[AdwToast]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def adw_toast_get_action_target_value(self : Ptr[AdwToast]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def adw_toast_get_button_label(self : Ptr[AdwToast]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def adw_toast_get_priority(self : Ptr[AdwToast]): AdwToastPriority = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def adw_toast_get_timeout(self : Ptr[AdwToast]): guint = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def adw_toast_get_title(self : Ptr[AdwToast]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def adw_toast_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def adw_toast_new(title : CString): Ptr[AdwToast] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast-overlay.h
  */
  def adw_toast_overlay_add_toast(self : Ptr[AdwToastOverlay], toast : Ptr[AdwToast]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast-overlay.h
  */
  def adw_toast_overlay_get_child(self : Ptr[AdwToastOverlay]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast-overlay.h
  */
  def adw_toast_overlay_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast-overlay.h
  */
  def adw_toast_overlay_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast-overlay.h
  */
  def adw_toast_overlay_set_child(self : Ptr[AdwToastOverlay], child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enums.h
  */
  def adw_toast_priority_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def adw_toast_set_action_name(self : Ptr[AdwToast], action_name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def adw_toast_set_action_target(self : Ptr[AdwToast], format_string : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def adw_toast_set_action_target_value(self : Ptr[AdwToast], action_target : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def adw_toast_set_button_label(self : Ptr[AdwToast], button_label : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def adw_toast_set_detailed_action_name(self : Ptr[AdwToast], detailed_action_name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def adw_toast_set_priority(self : Ptr[AdwToast], priority : AdwToastPriority): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def adw_toast_set_timeout(self : Ptr[AdwToast], timeout : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def adw_toast_set_title(self : Ptr[AdwToast], title : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_add(self : Ptr[AdwViewStack], child : Ptr[_root_.gtk4.all.GtkWidget]): Ptr[AdwViewStackPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_add_named(self : Ptr[AdwViewStack], child : Ptr[_root_.gtk4.all.GtkWidget], name : CString): Ptr[AdwViewStackPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_add_titled(self : Ptr[AdwViewStack], child : Ptr[_root_.gtk4.all.GtkWidget], name : CString, title : CString): Ptr[AdwViewStackPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_get_child_by_name(self : Ptr[AdwViewStack], name : CString): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_get_hhomogeneous(self : Ptr[AdwViewStack]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_get_page(self : Ptr[AdwViewStack], child : Ptr[_root_.gtk4.all.GtkWidget]): Ptr[AdwViewStackPage] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_get_pages(self : Ptr[AdwViewStack]): Ptr[_root_.gtk4.all.GtkSelectionModel] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_get_vhomogeneous(self : Ptr[AdwViewStack]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_get_visible_child(self : Ptr[AdwViewStack]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_get_visible_child_name(self : Ptr[AdwViewStack]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_page_get_badge_number(self : Ptr[AdwViewStackPage]): guint = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_page_get_child(self : Ptr[AdwViewStackPage]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_page_get_icon_name(self : Ptr[AdwViewStackPage]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_page_get_name(self : Ptr[AdwViewStackPage]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_page_get_needs_attention(self : Ptr[AdwViewStackPage]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_page_get_title(self : Ptr[AdwViewStackPage]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_page_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_page_get_use_underline(self : Ptr[AdwViewStackPage]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_page_get_visible(self : Ptr[AdwViewStackPage]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_page_set_badge_number(self : Ptr[AdwViewStackPage], badge_number : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_page_set_icon_name(self : Ptr[AdwViewStackPage], icon_name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_page_set_name(self : Ptr[AdwViewStackPage], name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_page_set_needs_attention(self : Ptr[AdwViewStackPage], needs_attention : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_page_set_title(self : Ptr[AdwViewStackPage], title : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_page_set_use_underline(self : Ptr[AdwViewStackPage], use_underline : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_page_set_visible(self : Ptr[AdwViewStackPage], visible : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_remove(self : Ptr[AdwViewStack], child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_set_hhomogeneous(self : Ptr[AdwViewStack], hhomogeneous : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_set_vhomogeneous(self : Ptr[AdwViewStack], vhomogeneous : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_set_visible_child(self : Ptr[AdwViewStack], child : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def adw_view_stack_set_visible_child_name(self : Ptr[AdwViewStack], name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
  */
  def adw_view_switcher_bar_get_reveal(self : Ptr[AdwViewSwitcherBar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
  */
  def adw_view_switcher_bar_get_stack(self : Ptr[AdwViewSwitcherBar]): Ptr[AdwViewStack] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
  */
  def adw_view_switcher_bar_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
  */
  def adw_view_switcher_bar_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
  */
  def adw_view_switcher_bar_set_reveal(self : Ptr[AdwViewSwitcherBar], reveal : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
  */
  def adw_view_switcher_bar_set_stack(self : Ptr[AdwViewSwitcherBar], stack : Ptr[AdwViewStack]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
  */
  def adw_view_switcher_get_policy(self : Ptr[AdwViewSwitcher]): AdwViewSwitcherPolicy = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
  */
  def adw_view_switcher_get_stack(self : Ptr[AdwViewSwitcher]): Ptr[AdwViewStack] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
  */
  def adw_view_switcher_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
  */
  def adw_view_switcher_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enums.h
  */
  def adw_view_switcher_policy_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
  */
  def adw_view_switcher_set_policy(self : Ptr[AdwViewSwitcher], policy : AdwViewSwitcherPolicy): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
  */
  def adw_view_switcher_set_stack(self : Ptr[AdwViewSwitcher], stack : Ptr[AdwViewStack]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def adw_view_switcher_title_get_stack(self : Ptr[AdwViewSwitcherTitle]): Ptr[AdwViewStack] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def adw_view_switcher_title_get_subtitle(self : Ptr[AdwViewSwitcherTitle]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def adw_view_switcher_title_get_title(self : Ptr[AdwViewSwitcherTitle]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def adw_view_switcher_title_get_title_visible(self : Ptr[AdwViewSwitcherTitle]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def adw_view_switcher_title_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def adw_view_switcher_title_get_view_switcher_enabled(self : Ptr[AdwViewSwitcherTitle]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def adw_view_switcher_title_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def adw_view_switcher_title_set_stack(self : Ptr[AdwViewSwitcherTitle], stack : Ptr[AdwViewStack]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def adw_view_switcher_title_set_subtitle(self : Ptr[AdwViewSwitcherTitle], subtitle : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def adw_view_switcher_title_set_title(self : Ptr[AdwViewSwitcherTitle], title : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def adw_view_switcher_title_set_view_switcher_enabled(self : Ptr[AdwViewSwitcherTitle], enabled : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
  */
  def adw_window_get_content(self : Ptr[AdwWindow]): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
  */
  def adw_window_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
  */
  def adw_window_new(): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
  */
  def adw_window_set_content(self : Ptr[AdwWindow], content : Ptr[_root_.gtk4.all.GtkWidget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
  */
  def adw_window_title_get_subtitle(self : Ptr[AdwWindowTitle]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
  */
  def adw_window_title_get_title(self : Ptr[AdwWindowTitle]): CString = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
  */
  def adw_window_title_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
  */
  def adw_window_title_new(title : CString, subtitle : CString): Ptr[_root_.gtk4.all.GtkWidget] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
  */
  def adw_window_title_set_subtitle(self : Ptr[AdwWindowTitle], subtitle : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
  */
  def adw_window_title_set_title(self : Ptr[AdwWindowTitle], title : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_append_path(cr : Ptr[cairo_t], path : Ptr[cairo_path_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_arc(cr : Ptr[cairo_t], xc : Double, yc : Double, radius : Double, angle1 : Double, angle2 : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_arc_negative(cr : Ptr[cairo_t], xc : Double, yc : Double, radius : Double, angle1 : Double, angle2 : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_clip(cr : Ptr[cairo_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_clip_extents(cr : Ptr[cairo_t], x1 : Ptr[Double], y1 : Ptr[Double], x2 : Ptr[Double], y2 : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_clip_preserve(cr : Ptr[cairo_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_close_path(cr : Ptr[cairo_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_copy_clip_rectangle_list(cr : Ptr[cairo_t]): Ptr[cairo_rectangle_list_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_copy_page(cr : Ptr[cairo_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_copy_path(cr : Ptr[cairo_t]): Ptr[cairo_path_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_copy_path_flat(cr : Ptr[cairo_t]): Ptr[cairo_path_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_create(target : Ptr[cairo_surface_t]): Ptr[cairo_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_curve_to(cr : Ptr[cairo_t], x1 : Double, y1 : Double, x2 : Double, y2 : Double, x3 : Double, y3 : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_debug_reset_static_data(): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_destroy(cr : Ptr[cairo_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_device_acquire(device : Ptr[cairo_device_t]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_device_destroy(device : Ptr[cairo_device_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_device_finish(device : Ptr[cairo_device_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_device_flush(device : Ptr[cairo_device_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_device_get_reference_count(device : Ptr[cairo_device_t]): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_device_get_type(device : Ptr[cairo_device_t]): cairo_device_type_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_device_get_user_data(device : Ptr[cairo_device_t], key : Ptr[cairo_user_data_key_t]): Ptr[Byte] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_device_observer_elapsed(device : Ptr[cairo_device_t]): Double = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_device_observer_fill_elapsed(device : Ptr[cairo_device_t]): Double = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_device_observer_glyphs_elapsed(device : Ptr[cairo_device_t]): Double = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_device_observer_mask_elapsed(device : Ptr[cairo_device_t]): Double = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_device_observer_paint_elapsed(device : Ptr[cairo_device_t]): Double = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_device_observer_print(device : Ptr[cairo_device_t], write_func : cairo_write_func_t, closure : Ptr[Byte]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_device_observer_stroke_elapsed(device : Ptr[cairo_device_t]): Double = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_device_reference(device : Ptr[cairo_device_t]): Ptr[cairo_device_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_device_release(device : Ptr[cairo_device_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_device_set_user_data(device : Ptr[cairo_device_t], key : Ptr[cairo_user_data_key_t], user_data : Ptr[Byte], destroy : cairo_destroy_func_t): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_device_status(device : Ptr[cairo_device_t]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_device_to_user(cr : Ptr[cairo_t], x : Ptr[Double], y : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_device_to_user_distance(cr : Ptr[cairo_t], dx : Ptr[Double], dy : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_fill(cr : Ptr[cairo_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_fill_extents(cr : Ptr[cairo_t], x1 : Ptr[Double], y1 : Ptr[Double], x2 : Ptr[Double], y2 : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_fill_preserve(cr : Ptr[cairo_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_extents(cr : Ptr[cairo_t], extents : Ptr[cairo_font_extents_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_face_destroy(font_face : Ptr[cairo_font_face_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_face_get_reference_count(font_face : Ptr[cairo_font_face_t]): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_face_get_type(font_face : Ptr[cairo_font_face_t]): cairo_font_type_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_face_get_user_data(font_face : Ptr[cairo_font_face_t], key : Ptr[cairo_user_data_key_t]): Ptr[Byte] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_face_reference(font_face : Ptr[cairo_font_face_t]): Ptr[cairo_font_face_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_face_set_user_data(font_face : Ptr[cairo_font_face_t], key : Ptr[cairo_user_data_key_t], user_data : Ptr[Byte], destroy : cairo_destroy_func_t): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_face_status(font_face : Ptr[cairo_font_face_t]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_options_copy(original : Ptr[cairo_font_options_t]): Ptr[cairo_font_options_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_options_create(): Ptr[cairo_font_options_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_options_destroy(options : Ptr[cairo_font_options_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_options_equal(options : Ptr[cairo_font_options_t], other : Ptr[cairo_font_options_t]): cairo_bool_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_options_get_antialias(options : Ptr[cairo_font_options_t]): cairo_antialias_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_options_get_hint_metrics(options : Ptr[cairo_font_options_t]): cairo_hint_metrics_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_options_get_hint_style(options : Ptr[cairo_font_options_t]): cairo_hint_style_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_options_get_subpixel_order(options : Ptr[cairo_font_options_t]): cairo_subpixel_order_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_options_get_variations(options : Ptr[cairo_font_options_t]): CString = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_options_hash(options : Ptr[cairo_font_options_t]): CUnsignedLongInt = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_options_merge(options : Ptr[cairo_font_options_t], other : Ptr[cairo_font_options_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_options_set_antialias(options : Ptr[cairo_font_options_t], antialias : cairo_antialias_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_options_set_hint_metrics(options : Ptr[cairo_font_options_t], hint_metrics : cairo_hint_metrics_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_options_set_hint_style(options : Ptr[cairo_font_options_t], hint_style : cairo_hint_style_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_options_set_subpixel_order(options : Ptr[cairo_font_options_t], subpixel_order : cairo_subpixel_order_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_options_set_variations(options : Ptr[cairo_font_options_t], variations : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_font_options_status(options : Ptr[cairo_font_options_t]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_format_stride_for_width(format : cairo_format_t, width : CInt): CInt = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_antialias(cr : Ptr[cairo_t]): cairo_antialias_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_current_point(cr : Ptr[cairo_t], x : Ptr[Double], y : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_dash(cr : Ptr[cairo_t], dashes : Ptr[Double], offset : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_dash_count(cr : Ptr[cairo_t]): CInt = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_fill_rule(cr : Ptr[cairo_t]): cairo_fill_rule_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_font_face(cr : Ptr[cairo_t]): Ptr[cairo_font_face_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_font_matrix(cr : Ptr[cairo_t], matrix : Ptr[cairo_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_font_options(cr : Ptr[cairo_t], options : Ptr[cairo_font_options_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_group_target(cr : Ptr[cairo_t]): Ptr[cairo_surface_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_line_cap(cr : Ptr[cairo_t]): cairo_line_cap_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_line_join(cr : Ptr[cairo_t]): cairo_line_join_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_line_width(cr : Ptr[cairo_t]): Double = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_matrix(cr : Ptr[cairo_t], matrix : Ptr[cairo_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_miter_limit(cr : Ptr[cairo_t]): Double = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_operator(cr : Ptr[cairo_t]): cairo_operator_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_reference_count(cr : Ptr[cairo_t]): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_scaled_font(cr : Ptr[cairo_t]): Ptr[cairo_scaled_font_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_source(cr : Ptr[cairo_t]): Ptr[cairo_pattern_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_target(cr : Ptr[cairo_t]): Ptr[cairo_surface_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_tolerance(cr : Ptr[cairo_t]): Double = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_get_user_data(cr : Ptr[cairo_t], key : Ptr[cairo_user_data_key_t]): Ptr[Byte] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_glyph_allocate(num_glyphs : CInt): Ptr[cairo_glyph_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_glyph_extents(cr : Ptr[cairo_t], glyphs : Ptr[cairo_glyph_t], num_glyphs : CInt, extents : Ptr[cairo_text_extents_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_glyph_free(glyphs : Ptr[cairo_glyph_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_glyph_path(cr : Ptr[cairo_t], glyphs : Ptr[cairo_glyph_t], num_glyphs : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_has_current_point(cr : Ptr[cairo_t]): cairo_bool_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_identity_matrix(cr : Ptr[cairo_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_image_surface_create(format : cairo_format_t, width : CInt, height : CInt): Ptr[cairo_surface_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_image_surface_create_for_data(data : Ptr[CUnsignedChar], format : cairo_format_t, width : CInt, height : CInt, stride : CInt): Ptr[cairo_surface_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_image_surface_create_from_png(filename : CString): Ptr[cairo_surface_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_image_surface_create_from_png_stream(read_func : cairo_read_func_t, closure : Ptr[Byte]): Ptr[cairo_surface_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_image_surface_get_data(surface : Ptr[cairo_surface_t]): Ptr[CUnsignedChar] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_image_surface_get_format(surface : Ptr[cairo_surface_t]): cairo_format_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_image_surface_get_height(surface : Ptr[cairo_surface_t]): CInt = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_image_surface_get_stride(surface : Ptr[cairo_surface_t]): CInt = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_image_surface_get_width(surface : Ptr[cairo_surface_t]): CInt = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_in_clip(cr : Ptr[cairo_t], x : Double, y : Double): cairo_bool_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_in_fill(cr : Ptr[cairo_t], x : Double, y : Double): cairo_bool_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_in_stroke(cr : Ptr[cairo_t], x : Double, y : Double): cairo_bool_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_line_to(cr : Ptr[cairo_t], x : Double, y : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_mask(cr : Ptr[cairo_t], pattern : Ptr[cairo_pattern_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_mask_surface(cr : Ptr[cairo_t], surface : Ptr[cairo_surface_t], surface_x : Double, surface_y : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_matrix_init(matrix : Ptr[cairo_matrix_t], xx : Double, yx : Double, xy : Double, yy : Double, x0 : Double, y0 : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_matrix_init_identity(matrix : Ptr[cairo_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_matrix_init_rotate(matrix : Ptr[cairo_matrix_t], radians : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_matrix_init_scale(matrix : Ptr[cairo_matrix_t], sx : Double, sy : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_matrix_init_translate(matrix : Ptr[cairo_matrix_t], tx : Double, ty : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_matrix_invert(matrix : Ptr[cairo_matrix_t]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_matrix_multiply(result : Ptr[cairo_matrix_t], a : Ptr[cairo_matrix_t], b : Ptr[cairo_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_matrix_rotate(matrix : Ptr[cairo_matrix_t], radians : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_matrix_scale(matrix : Ptr[cairo_matrix_t], sx : Double, sy : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_matrix_transform_distance(matrix : Ptr[cairo_matrix_t], dx : Ptr[Double], dy : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_matrix_transform_point(matrix : Ptr[cairo_matrix_t], x : Ptr[Double], y : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_matrix_translate(matrix : Ptr[cairo_matrix_t], tx : Double, ty : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_mesh_pattern_begin_patch(pattern : Ptr[cairo_pattern_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_mesh_pattern_curve_to(pattern : Ptr[cairo_pattern_t], x1 : Double, y1 : Double, x2 : Double, y2 : Double, x3 : Double, y3 : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_mesh_pattern_end_patch(pattern : Ptr[cairo_pattern_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_mesh_pattern_get_control_point(pattern : Ptr[cairo_pattern_t], patch_num : CUnsignedInt, point_num : CUnsignedInt, x : Ptr[Double], y : Ptr[Double]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_mesh_pattern_get_corner_color_rgba(pattern : Ptr[cairo_pattern_t], patch_num : CUnsignedInt, corner_num : CUnsignedInt, red : Ptr[Double], green : Ptr[Double], blue : Ptr[Double], alpha : Ptr[Double]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_mesh_pattern_get_patch_count(pattern : Ptr[cairo_pattern_t], count : Ptr[CUnsignedInt]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_mesh_pattern_get_path(pattern : Ptr[cairo_pattern_t], patch_num : CUnsignedInt): Ptr[cairo_path_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_mesh_pattern_line_to(pattern : Ptr[cairo_pattern_t], x : Double, y : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_mesh_pattern_move_to(pattern : Ptr[cairo_pattern_t], x : Double, y : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_mesh_pattern_set_control_point(pattern : Ptr[cairo_pattern_t], point_num : CUnsignedInt, x : Double, y : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_mesh_pattern_set_corner_color_rgb(pattern : Ptr[cairo_pattern_t], corner_num : CUnsignedInt, red : Double, green : Double, blue : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_mesh_pattern_set_corner_color_rgba(pattern : Ptr[cairo_pattern_t], corner_num : CUnsignedInt, red : Double, green : Double, blue : Double, alpha : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_move_to(cr : Ptr[cairo_t], x : Double, y : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_new_path(cr : Ptr[cairo_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_new_sub_path(cr : Ptr[cairo_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_paint(cr : Ptr[cairo_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_paint_with_alpha(cr : Ptr[cairo_t], alpha : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_path_destroy(path : Ptr[cairo_path_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_path_extents(cr : Ptr[cairo_t], x1 : Ptr[Double], y1 : Ptr[Double], x2 : Ptr[Double], y2 : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_add_color_stop_rgb(pattern : Ptr[cairo_pattern_t], offset : Double, red : Double, green : Double, blue : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_add_color_stop_rgba(pattern : Ptr[cairo_pattern_t], offset : Double, red : Double, green : Double, blue : Double, alpha : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_create_for_surface(surface : Ptr[cairo_surface_t]): Ptr[cairo_pattern_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_create_linear(x0 : Double, y0 : Double, x1 : Double, y1 : Double): Ptr[cairo_pattern_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_create_mesh(): Ptr[cairo_pattern_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_create_radial(cx0 : Double, cy0 : Double, radius0 : Double, cx1 : Double, cy1 : Double, radius1 : Double): Ptr[cairo_pattern_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_create_raster_source(user_data : Ptr[Byte], content : cairo_content_t, width : CInt, height : CInt): Ptr[cairo_pattern_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_create_rgb(red : Double, green : Double, blue : Double): Ptr[cairo_pattern_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_create_rgba(red : Double, green : Double, blue : Double, alpha : Double): Ptr[cairo_pattern_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_destroy(pattern : Ptr[cairo_pattern_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_get_color_stop_count(pattern : Ptr[cairo_pattern_t], count : Ptr[CInt]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_get_color_stop_rgba(pattern : Ptr[cairo_pattern_t], index : CInt, offset : Ptr[Double], red : Ptr[Double], green : Ptr[Double], blue : Ptr[Double], alpha : Ptr[Double]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_get_extend(pattern : Ptr[cairo_pattern_t]): cairo_extend_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_get_filter(pattern : Ptr[cairo_pattern_t]): cairo_filter_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_get_linear_points(pattern : Ptr[cairo_pattern_t], x0 : Ptr[Double], y0 : Ptr[Double], x1 : Ptr[Double], y1 : Ptr[Double]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_get_matrix(pattern : Ptr[cairo_pattern_t], matrix : Ptr[cairo_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_get_radial_circles(pattern : Ptr[cairo_pattern_t], x0 : Ptr[Double], y0 : Ptr[Double], r0 : Ptr[Double], x1 : Ptr[Double], y1 : Ptr[Double], r1 : Ptr[Double]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_get_reference_count(pattern : Ptr[cairo_pattern_t]): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_get_rgba(pattern : Ptr[cairo_pattern_t], red : Ptr[Double], green : Ptr[Double], blue : Ptr[Double], alpha : Ptr[Double]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_get_surface(pattern : Ptr[cairo_pattern_t], surface : Ptr[Ptr[cairo_surface_t]]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_get_type(pattern : Ptr[cairo_pattern_t]): cairo_pattern_type_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_get_user_data(pattern : Ptr[cairo_pattern_t], key : Ptr[cairo_user_data_key_t]): Ptr[Byte] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_reference(pattern : Ptr[cairo_pattern_t]): Ptr[cairo_pattern_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_set_extend(pattern : Ptr[cairo_pattern_t], extend : cairo_extend_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_set_filter(pattern : Ptr[cairo_pattern_t], filter : cairo_filter_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_set_matrix(pattern : Ptr[cairo_pattern_t], matrix : Ptr[cairo_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_set_user_data(pattern : Ptr[cairo_pattern_t], key : Ptr[cairo_user_data_key_t], user_data : Ptr[Byte], destroy : cairo_destroy_func_t): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pattern_status(pattern : Ptr[cairo_pattern_t]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pop_group(cr : Ptr[cairo_t]): Ptr[cairo_pattern_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_pop_group_to_source(cr : Ptr[cairo_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_push_group(cr : Ptr[cairo_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_push_group_with_content(cr : Ptr[cairo_t], content : cairo_content_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_raster_source_pattern_get_acquire(pattern : Ptr[cairo_pattern_t], acquire : Ptr[cairo_raster_source_acquire_func_t], release : Ptr[cairo_raster_source_release_func_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_raster_source_pattern_get_callback_data(pattern : Ptr[cairo_pattern_t]): Ptr[Byte] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_raster_source_pattern_get_copy(pattern : Ptr[cairo_pattern_t]): cairo_raster_source_copy_func_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_raster_source_pattern_get_finish(pattern : Ptr[cairo_pattern_t]): cairo_raster_source_finish_func_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_raster_source_pattern_get_snapshot(pattern : Ptr[cairo_pattern_t]): cairo_raster_source_snapshot_func_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_raster_source_pattern_set_acquire(pattern : Ptr[cairo_pattern_t], acquire : cairo_raster_source_acquire_func_t, release : cairo_raster_source_release_func_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_raster_source_pattern_set_callback_data(pattern : Ptr[cairo_pattern_t], data : Ptr[Byte]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_raster_source_pattern_set_copy(pattern : Ptr[cairo_pattern_t], copy : cairo_raster_source_copy_func_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_raster_source_pattern_set_finish(pattern : Ptr[cairo_pattern_t], finish : cairo_raster_source_finish_func_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_raster_source_pattern_set_snapshot(pattern : Ptr[cairo_pattern_t], snapshot : cairo_raster_source_snapshot_func_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_recording_surface_create(content : cairo_content_t, extents : Ptr[cairo_rectangle_t]): Ptr[cairo_surface_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_recording_surface_get_extents(surface : Ptr[cairo_surface_t], extents : Ptr[cairo_rectangle_t]): cairo_bool_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_recording_surface_ink_extents(surface : Ptr[cairo_surface_t], x0 : Ptr[Double], y0 : Ptr[Double], width : Ptr[Double], height : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_rectangle(cr : Ptr[cairo_t], x : Double, y : Double, width : Double, height : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_rectangle_list_destroy(rectangle_list : Ptr[cairo_rectangle_list_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_reference(cr : Ptr[cairo_t]): Ptr[cairo_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_contains_point(region : Ptr[cairo_region_t], x : CInt, y : CInt): cairo_bool_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_contains_rectangle(region : Ptr[cairo_region_t], rectangle : Ptr[cairo_rectangle_int_t]): cairo_region_overlap_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_copy(original : Ptr[cairo_region_t]): Ptr[cairo_region_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_create(): Ptr[cairo_region_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_create_rectangle(rectangle : Ptr[cairo_rectangle_int_t]): Ptr[cairo_region_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_create_rectangles(rects : Ptr[cairo_rectangle_int_t], count : CInt): Ptr[cairo_region_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_destroy(region : Ptr[cairo_region_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_equal(a : Ptr[cairo_region_t], b : Ptr[cairo_region_t]): cairo_bool_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_get_extents(region : Ptr[cairo_region_t], extents : Ptr[cairo_rectangle_int_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_get_rectangle(region : Ptr[cairo_region_t], nth : CInt, rectangle : Ptr[cairo_rectangle_int_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_intersect(dst : Ptr[cairo_region_t], other : Ptr[cairo_region_t]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_intersect_rectangle(dst : Ptr[cairo_region_t], rectangle : Ptr[cairo_rectangle_int_t]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_is_empty(region : Ptr[cairo_region_t]): cairo_bool_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_num_rectangles(region : Ptr[cairo_region_t]): CInt = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_reference(region : Ptr[cairo_region_t]): Ptr[cairo_region_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_status(region : Ptr[cairo_region_t]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_subtract(dst : Ptr[cairo_region_t], other : Ptr[cairo_region_t]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_subtract_rectangle(dst : Ptr[cairo_region_t], rectangle : Ptr[cairo_rectangle_int_t]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_translate(region : Ptr[cairo_region_t], dx : CInt, dy : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_union(dst : Ptr[cairo_region_t], other : Ptr[cairo_region_t]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_union_rectangle(dst : Ptr[cairo_region_t], rectangle : Ptr[cairo_rectangle_int_t]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_xor(dst : Ptr[cairo_region_t], other : Ptr[cairo_region_t]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_region_xor_rectangle(dst : Ptr[cairo_region_t], rectangle : Ptr[cairo_rectangle_int_t]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_rel_curve_to(cr : Ptr[cairo_t], dx1 : Double, dy1 : Double, dx2 : Double, dy2 : Double, dx3 : Double, dy3 : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_rel_line_to(cr : Ptr[cairo_t], dx : Double, dy : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_rel_move_to(cr : Ptr[cairo_t], dx : Double, dy : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_reset_clip(cr : Ptr[cairo_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_restore(cr : Ptr[cairo_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_rotate(cr : Ptr[cairo_t], angle : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_save(cr : Ptr[cairo_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_scale(cr : Ptr[cairo_t], sx : Double, sy : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_scaled_font_create(font_face : Ptr[cairo_font_face_t], font_matrix : Ptr[cairo_matrix_t], ctm : Ptr[cairo_matrix_t], options : Ptr[cairo_font_options_t]): Ptr[cairo_scaled_font_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_scaled_font_destroy(scaled_font : Ptr[cairo_scaled_font_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_scaled_font_extents(scaled_font : Ptr[cairo_scaled_font_t], extents : Ptr[cairo_font_extents_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_scaled_font_get_ctm(scaled_font : Ptr[cairo_scaled_font_t], ctm : Ptr[cairo_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_scaled_font_get_font_face(scaled_font : Ptr[cairo_scaled_font_t]): Ptr[cairo_font_face_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_scaled_font_get_font_matrix(scaled_font : Ptr[cairo_scaled_font_t], font_matrix : Ptr[cairo_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_scaled_font_get_font_options(scaled_font : Ptr[cairo_scaled_font_t], options : Ptr[cairo_font_options_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_scaled_font_get_reference_count(scaled_font : Ptr[cairo_scaled_font_t]): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_scaled_font_get_scale_matrix(scaled_font : Ptr[cairo_scaled_font_t], scale_matrix : Ptr[cairo_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_scaled_font_get_type(scaled_font : Ptr[cairo_scaled_font_t]): cairo_font_type_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_scaled_font_get_user_data(scaled_font : Ptr[cairo_scaled_font_t], key : Ptr[cairo_user_data_key_t]): Ptr[Byte] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_scaled_font_glyph_extents(scaled_font : Ptr[cairo_scaled_font_t], glyphs : Ptr[cairo_glyph_t], num_glyphs : CInt, extents : Ptr[cairo_text_extents_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_scaled_font_reference(scaled_font : Ptr[cairo_scaled_font_t]): Ptr[cairo_scaled_font_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_scaled_font_set_user_data(scaled_font : Ptr[cairo_scaled_font_t], key : Ptr[cairo_user_data_key_t], user_data : Ptr[Byte], destroy : cairo_destroy_func_t): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_scaled_font_status(scaled_font : Ptr[cairo_scaled_font_t]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_scaled_font_text_extents(scaled_font : Ptr[cairo_scaled_font_t], utf8 : CString, extents : Ptr[cairo_text_extents_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_scaled_font_text_to_glyphs(scaled_font : Ptr[cairo_scaled_font_t], x : Double, y : Double, utf8 : CString, utf8_len : CInt, glyphs : Ptr[Ptr[cairo_glyph_t]], num_glyphs : Ptr[CInt], clusters : Ptr[Ptr[cairo_text_cluster_t]], num_clusters : Ptr[CInt], cluster_flags : Ptr[cairo_text_cluster_flags_t]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_select_font_face(cr : Ptr[cairo_t], family : CString, slant : cairo_font_slant_t, weight : cairo_font_weight_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_set_antialias(cr : Ptr[cairo_t], antialias : cairo_antialias_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_set_dash(cr : Ptr[cairo_t], dashes : Ptr[Double], num_dashes : CInt, offset : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_set_fill_rule(cr : Ptr[cairo_t], fill_rule : cairo_fill_rule_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_set_font_face(cr : Ptr[cairo_t], font_face : Ptr[cairo_font_face_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_set_font_matrix(cr : Ptr[cairo_t], matrix : Ptr[cairo_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_set_font_options(cr : Ptr[cairo_t], options : Ptr[cairo_font_options_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_set_font_size(cr : Ptr[cairo_t], size : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_set_line_cap(cr : Ptr[cairo_t], line_cap : cairo_line_cap_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_set_line_join(cr : Ptr[cairo_t], line_join : cairo_line_join_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_set_line_width(cr : Ptr[cairo_t], width : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_set_matrix(cr : Ptr[cairo_t], matrix : Ptr[cairo_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_set_miter_limit(cr : Ptr[cairo_t], limit : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_set_operator(cr : Ptr[cairo_t], op : cairo_operator_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_set_scaled_font(cr : Ptr[cairo_t], scaled_font : Ptr[cairo_scaled_font_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_set_source(cr : Ptr[cairo_t], source : Ptr[cairo_pattern_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_set_source_rgb(cr : Ptr[cairo_t], red : Double, green : Double, blue : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_set_source_rgba(cr : Ptr[cairo_t], red : Double, green : Double, blue : Double, alpha : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_set_source_surface(cr : Ptr[cairo_t], surface : Ptr[cairo_surface_t], x : Double, y : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_set_tolerance(cr : Ptr[cairo_t], tolerance : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_set_user_data(cr : Ptr[cairo_t], key : Ptr[cairo_user_data_key_t], user_data : Ptr[Byte], destroy : cairo_destroy_func_t): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_show_glyphs(cr : Ptr[cairo_t], glyphs : Ptr[cairo_glyph_t], num_glyphs : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_show_page(cr : Ptr[cairo_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_show_text(cr : Ptr[cairo_t], utf8 : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_show_text_glyphs(cr : Ptr[cairo_t], utf8 : CString, utf8_len : CInt, glyphs : Ptr[cairo_glyph_t], num_glyphs : CInt, clusters : Ptr[cairo_text_cluster_t], num_clusters : CInt, cluster_flags : cairo_text_cluster_flags_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_status(cr : Ptr[cairo_t]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_status_to_string(status : cairo_status_t): CString = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_stroke(cr : Ptr[cairo_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_stroke_extents(cr : Ptr[cairo_t], x1 : Ptr[Double], y1 : Ptr[Double], x2 : Ptr[Double], y2 : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_stroke_preserve(cr : Ptr[cairo_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_copy_page(surface : Ptr[cairo_surface_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_create_for_rectangle(target : Ptr[cairo_surface_t], x : Double, y : Double, width : Double, height : Double): Ptr[cairo_surface_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_create_observer(target : Ptr[cairo_surface_t], mode : cairo_surface_observer_mode_t): Ptr[cairo_surface_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_create_similar(other : Ptr[cairo_surface_t], content : cairo_content_t, width : CInt, height : CInt): Ptr[cairo_surface_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_create_similar_image(other : Ptr[cairo_surface_t], format : cairo_format_t, width : CInt, height : CInt): Ptr[cairo_surface_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_destroy(surface : Ptr[cairo_surface_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_finish(surface : Ptr[cairo_surface_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_flush(surface : Ptr[cairo_surface_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_get_content(surface : Ptr[cairo_surface_t]): cairo_content_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_get_device(surface : Ptr[cairo_surface_t]): Ptr[cairo_device_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_get_device_offset(surface : Ptr[cairo_surface_t], x_offset : Ptr[Double], y_offset : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_get_device_scale(surface : Ptr[cairo_surface_t], x_scale : Ptr[Double], y_scale : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_get_fallback_resolution(surface : Ptr[cairo_surface_t], x_pixels_per_inch : Ptr[Double], y_pixels_per_inch : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_get_font_options(surface : Ptr[cairo_surface_t], options : Ptr[cairo_font_options_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_get_mime_data(surface : Ptr[cairo_surface_t], mime_type : CString, data : Ptr[Ptr[CUnsignedChar]], length : Ptr[CUnsignedLongInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_get_reference_count(surface : Ptr[cairo_surface_t]): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_get_type(surface : Ptr[cairo_surface_t]): cairo_surface_type_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_get_user_data(surface : Ptr[cairo_surface_t], key : Ptr[cairo_user_data_key_t]): Ptr[Byte] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_has_show_text_glyphs(surface : Ptr[cairo_surface_t]): cairo_bool_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_map_to_image(surface : Ptr[cairo_surface_t], extents : Ptr[cairo_rectangle_int_t]): Ptr[cairo_surface_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_mark_dirty(surface : Ptr[cairo_surface_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_mark_dirty_rectangle(surface : Ptr[cairo_surface_t], x : CInt, y : CInt, width : CInt, height : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_observer_add_fill_callback(abstract_surface : Ptr[cairo_surface_t], func : cairo_surface_observer_callback_t, data : Ptr[Byte]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_observer_add_finish_callback(abstract_surface : Ptr[cairo_surface_t], func : cairo_surface_observer_callback_t, data : Ptr[Byte]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_observer_add_flush_callback(abstract_surface : Ptr[cairo_surface_t], func : cairo_surface_observer_callback_t, data : Ptr[Byte]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_observer_add_glyphs_callback(abstract_surface : Ptr[cairo_surface_t], func : cairo_surface_observer_callback_t, data : Ptr[Byte]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_observer_add_mask_callback(abstract_surface : Ptr[cairo_surface_t], func : cairo_surface_observer_callback_t, data : Ptr[Byte]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_observer_add_paint_callback(abstract_surface : Ptr[cairo_surface_t], func : cairo_surface_observer_callback_t, data : Ptr[Byte]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_observer_add_stroke_callback(abstract_surface : Ptr[cairo_surface_t], func : cairo_surface_observer_callback_t, data : Ptr[Byte]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_observer_elapsed(surface : Ptr[cairo_surface_t]): Double = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_observer_print(surface : Ptr[cairo_surface_t], write_func : cairo_write_func_t, closure : Ptr[Byte]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_reference(surface : Ptr[cairo_surface_t]): Ptr[cairo_surface_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_set_device_offset(surface : Ptr[cairo_surface_t], x_offset : Double, y_offset : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_set_device_scale(surface : Ptr[cairo_surface_t], x_scale : Double, y_scale : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_set_fallback_resolution(surface : Ptr[cairo_surface_t], x_pixels_per_inch : Double, y_pixels_per_inch : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_set_mime_data(surface : Ptr[cairo_surface_t], mime_type : CString, data : Ptr[CUnsignedChar], length : CUnsignedLongInt, destroy : cairo_destroy_func_t, closure : Ptr[Byte]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_set_user_data(surface : Ptr[cairo_surface_t], key : Ptr[cairo_user_data_key_t], user_data : Ptr[Byte], destroy : cairo_destroy_func_t): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_show_page(surface : Ptr[cairo_surface_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_status(surface : Ptr[cairo_surface_t]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_supports_mime_type(surface : Ptr[cairo_surface_t], mime_type : CString): cairo_bool_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_unmap_image(surface : Ptr[cairo_surface_t], image : Ptr[cairo_surface_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_write_to_png(surface : Ptr[cairo_surface_t], filename : CString): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_surface_write_to_png_stream(surface : Ptr[cairo_surface_t], write_func : cairo_write_func_t, closure : Ptr[Byte]): cairo_status_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_tag_begin(cr : Ptr[cairo_t], tag_name : CString, attributes : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_tag_end(cr : Ptr[cairo_t], tag_name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_text_cluster_allocate(num_clusters : CInt): Ptr[cairo_text_cluster_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_text_cluster_free(clusters : Ptr[cairo_text_cluster_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_text_extents(cr : Ptr[cairo_t], utf8 : CString, extents : Ptr[cairo_text_extents_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_text_path(cr : Ptr[cairo_t], utf8 : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_toy_font_face_create(family : CString, slant : cairo_font_slant_t, weight : cairo_font_weight_t): Ptr[cairo_font_face_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_toy_font_face_get_family(font_face : Ptr[cairo_font_face_t]): CString = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_toy_font_face_get_slant(font_face : Ptr[cairo_font_face_t]): cairo_font_slant_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_toy_font_face_get_weight(font_face : Ptr[cairo_font_face_t]): cairo_font_weight_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_transform(cr : Ptr[cairo_t], matrix : Ptr[cairo_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_translate(cr : Ptr[cairo_t], tx : Double, ty : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_user_font_face_create(): Ptr[cairo_font_face_t] = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_user_font_face_get_init_func(font_face : Ptr[cairo_font_face_t]): cairo_user_scaled_font_init_func_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_user_font_face_get_render_glyph_func(font_face : Ptr[cairo_font_face_t]): cairo_user_scaled_font_render_glyph_func_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_user_font_face_get_text_to_glyphs_func(font_face : Ptr[cairo_font_face_t]): cairo_user_scaled_font_text_to_glyphs_func_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_user_font_face_get_unicode_to_glyph_func(font_face : Ptr[cairo_font_face_t]): cairo_user_scaled_font_unicode_to_glyph_func_t = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_user_font_face_set_init_func(font_face : Ptr[cairo_font_face_t], init_func : cairo_user_scaled_font_init_func_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_user_font_face_set_render_glyph_func(font_face : Ptr[cairo_font_face_t], render_glyph_func : cairo_user_scaled_font_render_glyph_func_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_user_font_face_set_text_to_glyphs_func(font_face : Ptr[cairo_font_face_t], text_to_glyphs_func : cairo_user_scaled_font_text_to_glyphs_func_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_user_font_face_set_unicode_to_glyph_func(font_face : Ptr[cairo_font_face_t], unicode_to_glyph_func : cairo_user_scaled_font_unicode_to_glyph_func_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_user_to_device(cr : Ptr[cairo_t], x : Ptr[Double], y : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_user_to_device_distance(cr : Ptr[cairo_t], dx : Ptr[Double], dy : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_version(): CInt = extern

  /**
   * [bindgen] header: /usr/include/cairo/cairo.h
  */
  def cairo_version_string(): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontroller.h
  */
  def g_IS_debug_controller(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemorymonitor.h
  */
  def g_IS_memory_monitor(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpowerprofilemonitor.h
  */
  def g_IS_power_profile_monitor(ptr : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gaction.h
  */
  def g_action_activate(action : Ptr[GAction], parameter : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gaction.h
  */
  def g_action_change_state(action : Ptr[GAction], value : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gaction.h
  */
  def g_action_get_enabled(action : Ptr[GAction]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gaction.h
  */
  def g_action_get_name(action : Ptr[GAction]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gaction.h
  */
  def g_action_get_parameter_type(action : Ptr[GAction]): Ptr[GVariantType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gaction.h
  */
  def g_action_get_state(action : Ptr[GAction]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gaction.h
  */
  def g_action_get_state_hint(action : Ptr[GAction]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gaction.h
  */
  def g_action_get_state_type(action : Ptr[GAction]): Ptr[GVariantType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gaction.h
  */
  def g_action_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactiongroup.h
  */
  def g_action_group_action_added(action_group : Ptr[GActionGroup], action_name : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactiongroup.h
  */
  def g_action_group_action_enabled_changed(action_group : Ptr[GActionGroup], action_name : Ptr[gchar], enabled : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactiongroup.h
  */
  def g_action_group_action_removed(action_group : Ptr[GActionGroup], action_name : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactiongroup.h
  */
  def g_action_group_action_state_changed(action_group : Ptr[GActionGroup], action_name : Ptr[gchar], state : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactiongroup.h
  */
  def g_action_group_activate_action(action_group : Ptr[GActionGroup], action_name : Ptr[gchar], parameter : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactiongroup.h
  */
  def g_action_group_change_action_state(action_group : Ptr[GActionGroup], action_name : Ptr[gchar], value : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactiongroup.h
  */
  def g_action_group_get_action_enabled(action_group : Ptr[GActionGroup], action_name : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactiongroup.h
  */
  def g_action_group_get_action_parameter_type(action_group : Ptr[GActionGroup], action_name : Ptr[gchar]): Ptr[GVariantType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactiongroup.h
  */
  def g_action_group_get_action_state(action_group : Ptr[GActionGroup], action_name : Ptr[gchar]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactiongroup.h
  */
  def g_action_group_get_action_state_hint(action_group : Ptr[GActionGroup], action_name : Ptr[gchar]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactiongroup.h
  */
  def g_action_group_get_action_state_type(action_group : Ptr[GActionGroup], action_name : Ptr[gchar]): Ptr[GVariantType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactiongroup.h
  */
  def g_action_group_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactiongroup.h
  */
  def g_action_group_has_action(action_group : Ptr[GActionGroup], action_name : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactiongroup.h
  */
  def g_action_group_list_actions(action_group : Ptr[GActionGroup]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactiongroup.h
  */
  def g_action_group_query_action(action_group : Ptr[GActionGroup], action_name : Ptr[gchar], enabled : Ptr[gboolean], parameter_type : Ptr[Ptr[GVariantType]], state_type : Ptr[Ptr[GVariantType]], state_hint : Ptr[Ptr[GVariant]], state : Ptr[Ptr[GVariant]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactionmap.h
  */
  def g_action_map_add_action(action_map : Ptr[GActionMap], action : Ptr[GAction]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactionmap.h
  */
  def g_action_map_add_action_entries(action_map : Ptr[GActionMap], entries : Ptr[GActionEntry], n_entries : gint, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactionmap.h
  */
  def g_action_map_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactionmap.h
  */
  def g_action_map_lookup_action(action_map : Ptr[GActionMap], action_name : Ptr[gchar]): Ptr[GAction] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactionmap.h
  */
  def g_action_map_remove_action(action_map : Ptr[GActionMap], action_name : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gaction.h
  */
  def g_action_name_is_valid(action_name : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gaction.h
  */
  def g_action_parse_detailed_name(detailed_name : Ptr[gchar], action_name : Ptr[Ptr[gchar]], target_value : Ptr[Ptr[GVariant]], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gaction.h
  */
  def g_action_print_detailed_name(action_name : Ptr[gchar], target_value : Ptr[GVariant]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_aligned_alloc(n_blocks : gsize, n_block_bytes : gsize, alignment : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_aligned_alloc0(n_blocks : gsize, n_block_bytes : gsize, alignment : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_aligned_free(mem : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
  */
  def g_allocator_free(allocator : Ptr[GAllocator]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
  */
  def g_allocator_new(name : Ptr[gchar], n_preallocs : guint): Ptr[GAllocator] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_add_supports_type(appinfo : Ptr[GAppInfo], content_type : CString, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_can_delete(appinfo : Ptr[GAppInfo]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_can_remove_supports_type(appinfo : Ptr[GAppInfo]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_app_info_create_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_create_from_commandline(commandline : CString, application_name : CString, flags : GAppInfoCreateFlags, error : Ptr[Ptr[GError]]): Ptr[GAppInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_delete(appinfo : Ptr[GAppInfo]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_dup(appinfo : Ptr[GAppInfo]): Ptr[GAppInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_equal(appinfo1 : Ptr[GAppInfo], appinfo2 : Ptr[GAppInfo]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_get_all(): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_get_all_for_type(content_type : CString): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_get_commandline(appinfo : Ptr[GAppInfo]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_get_default_for_type(content_type : CString, must_support_uris : gboolean): Ptr[GAppInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_get_default_for_uri_scheme(uri_scheme : CString): Ptr[GAppInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_get_description(appinfo : Ptr[GAppInfo]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_get_display_name(appinfo : Ptr[GAppInfo]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_get_executable(appinfo : Ptr[GAppInfo]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_get_fallback_for_type(content_type : Ptr[gchar]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_get_icon(appinfo : Ptr[GAppInfo]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_get_id(appinfo : Ptr[GAppInfo]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_get_name(appinfo : Ptr[GAppInfo]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_get_recommended_for_type(content_type : Ptr[gchar]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_get_supported_types(appinfo : Ptr[GAppInfo]): Ptr[CString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_launch(appinfo : Ptr[GAppInfo], files : Ptr[GList], context : Ptr[GAppLaunchContext], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_launch_default_for_uri(uri : CString, context : Ptr[GAppLaunchContext], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_launch_default_for_uri_async(uri : CString, context : Ptr[GAppLaunchContext], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_launch_default_for_uri_finish(result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_launch_uris(appinfo : Ptr[GAppInfo], uris : Ptr[GList], context : Ptr[GAppLaunchContext], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_launch_uris_async(appinfo : Ptr[GAppInfo], uris : Ptr[GList], context : Ptr[GAppLaunchContext], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_launch_uris_finish(appinfo : Ptr[GAppInfo], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_monitor_get(): Ptr[GAppInfoMonitor] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_monitor_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_remove_supports_type(appinfo : Ptr[GAppInfo], content_type : CString, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_reset_type_associations(content_type : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_set_as_default_for_extension(appinfo : Ptr[GAppInfo], extension : CString, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_set_as_default_for_type(appinfo : Ptr[GAppInfo], content_type : CString, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_set_as_last_used_for_type(appinfo : Ptr[GAppInfo], content_type : CString, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_should_show(appinfo : Ptr[GAppInfo]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_supports_files(appinfo : Ptr[GAppInfo]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_info_supports_uris(appinfo : Ptr[GAppInfo]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_launch_context_get_display(context : Ptr[GAppLaunchContext], info : Ptr[GAppInfo], files : Ptr[GList]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_launch_context_get_environment(context : Ptr[GAppLaunchContext]): Ptr[CString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_launch_context_get_startup_notify_id(context : Ptr[GAppLaunchContext], info : Ptr[GAppInfo], files : Ptr[GList]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_launch_context_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_launch_context_launch_failed(context : Ptr[GAppLaunchContext], startup_notify_id : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_launch_context_new(): Ptr[GAppLaunchContext] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_launch_context_setenv(context : Ptr[GAppLaunchContext], variable : CString, value : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gappinfo.h
  */
  def g_app_launch_context_unsetenv(context : Ptr[GAppLaunchContext], variable : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_activate(application : Ptr[GApplication]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_add_main_option(application : Ptr[GApplication], long_name : CString, short_name : CChar, flags : GOptionFlags, arg : GOptionArg, description : CString, arg_description : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_add_main_option_entries(application : Ptr[GApplication], entries : Ptr[GOptionEntry]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_add_option_group(application : Ptr[GApplication], group : Ptr[GOptionGroup]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_bind_busy_property(application : Ptr[GApplication], `object` : gpointer, property : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplicationcommandline.h
  */
  def g_application_command_line_create_file_for_arg(cmdline : Ptr[GApplicationCommandLine], arg : Ptr[gchar]): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplicationcommandline.h
  */
  def g_application_command_line_get_arguments(cmdline : Ptr[GApplicationCommandLine], argc : Ptr[CInt]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplicationcommandline.h
  */
  def g_application_command_line_get_cwd(cmdline : Ptr[GApplicationCommandLine]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplicationcommandline.h
  */
  def g_application_command_line_get_environ(cmdline : Ptr[GApplicationCommandLine]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplicationcommandline.h
  */
  def g_application_command_line_get_exit_status(cmdline : Ptr[GApplicationCommandLine]): CInt = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplicationcommandline.h
  */
  def g_application_command_line_get_is_remote(cmdline : Ptr[GApplicationCommandLine]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplicationcommandline.h
  */
  def g_application_command_line_get_options_dict(cmdline : Ptr[GApplicationCommandLine]): Ptr[GVariantDict] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplicationcommandline.h
  */
  def g_application_command_line_get_platform_data(cmdline : Ptr[GApplicationCommandLine]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplicationcommandline.h
  */
  def g_application_command_line_get_stdin(cmdline : Ptr[GApplicationCommandLine]): Ptr[GInputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplicationcommandline.h
  */
  def g_application_command_line_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplicationcommandline.h
  */
  def g_application_command_line_getenv(cmdline : Ptr[GApplicationCommandLine], name : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplicationcommandline.h
  */
  def g_application_command_line_print(cmdline : Ptr[GApplicationCommandLine], format : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplicationcommandline.h
  */
  def g_application_command_line_printerr(cmdline : Ptr[GApplicationCommandLine], format : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplicationcommandline.h
  */
  def g_application_command_line_set_exit_status(cmdline : Ptr[GApplicationCommandLine], exit_status : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_application_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_get_application_id(application : Ptr[GApplication]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_get_dbus_connection(application : Ptr[GApplication]): Ptr[GDBusConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_get_dbus_object_path(application : Ptr[GApplication]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_get_default(): Ptr[GApplication] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_get_flags(application : Ptr[GApplication]): GApplicationFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_get_inactivity_timeout(application : Ptr[GApplication]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_get_is_busy(application : Ptr[GApplication]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_get_is_registered(application : Ptr[GApplication]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_get_is_remote(application : Ptr[GApplication]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_get_resource_base_path(application : Ptr[GApplication]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_hold(application : Ptr[GApplication]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_id_is_valid(application_id : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_mark_busy(application : Ptr[GApplication]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_new(application_id : Ptr[gchar], flags : GApplicationFlags): Ptr[GApplication] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_open(application : Ptr[GApplication], files : Ptr[Ptr[GFile]], n_files : gint, hint : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_quit(application : Ptr[GApplication]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_register(application : Ptr[GApplication], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_release(application : Ptr[GApplication]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_run(application : Ptr[GApplication], argc : CInt, argv : Ptr[CString]): CInt = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_send_notification(application : Ptr[GApplication], id : Ptr[gchar], notification : Ptr[GNotification]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_set_action_group(application : Ptr[GApplication], action_group : Ptr[GActionGroup]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_set_application_id(application : Ptr[GApplication], application_id : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_set_default(application : Ptr[GApplication]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_set_flags(application : Ptr[GApplication], flags : GApplicationFlags): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_set_inactivity_timeout(application : Ptr[GApplication], inactivity_timeout : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_set_option_context_description(application : Ptr[GApplication], description : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_set_option_context_parameter_string(application : Ptr[GApplication], parameter_string : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_set_option_context_summary(application : Ptr[GApplication], summary : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_set_resource_base_path(application : Ptr[GApplication], resource_path : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_unbind_busy_property(application : Ptr[GApplication], `object` : gpointer, property : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_unmark_busy(application : Ptr[GApplication]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gapplication.h
  */
  def g_application_withdraw_notification(application : Ptr[GApplication], id : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_array_append_vals(array : Ptr[GArray], data : gconstpointer, len : guint): Ptr[GArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_array_binary_search(array : Ptr[GArray], target : gconstpointer, compare_func : GCompareFunc, out_match_index : Ptr[guint]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_array_copy(array : Ptr[GArray]): Ptr[GArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_array_free(array : Ptr[GArray], free_segment : gboolean): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_array_get_element_size(array : Ptr[GArray]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_array_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_array_insert_vals(array : Ptr[GArray], `index_` : guint, data : gconstpointer, len : guint): Ptr[GArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_array_new(zero_terminated : gboolean, `clear_` : gboolean, element_size : guint): Ptr[GArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_array_prepend_vals(array : Ptr[GArray], data : gconstpointer, len : guint): Ptr[GArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_array_ref(array : Ptr[GArray]): Ptr[GArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_array_remove_index(array : Ptr[GArray], `index_` : guint): Ptr[GArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_array_remove_index_fast(array : Ptr[GArray], `index_` : guint): Ptr[GArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_array_remove_range(array : Ptr[GArray], `index_` : guint, length : guint): Ptr[GArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_array_set_clear_func(array : Ptr[GArray], clear_func : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_array_set_size(array : Ptr[GArray], length : guint): Ptr[GArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_array_sized_new(zero_terminated : gboolean, `clear_` : gboolean, element_size : guint, reserved_size : guint): Ptr[GArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_array_sort(array : Ptr[GArray], compare_func : GCompareFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_array_sort_with_data(array : Ptr[GArray], compare_func : GCompareDataFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_array_steal(array : Ptr[GArray], len : Ptr[gsize]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_array_unref(array : Ptr[GArray]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_ascii_digit_value(c : gchar): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_ascii_dtostr(buffer : Ptr[gchar], buf_len : gint, d : gdouble): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_ascii_formatd(buffer : Ptr[gchar], buf_len : gint, format : Ptr[gchar], d : gdouble): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_ascii_strcasecmp(s1 : Ptr[gchar], s2 : Ptr[gchar]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_ascii_strdown(str : Ptr[gchar], len : gssize): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_ascii_string_to_signed(str : Ptr[gchar], base : guint, min : gint64, max : gint64, out_num : Ptr[gint64], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_ascii_string_to_unsigned(str : Ptr[gchar], base : guint, min : guint64, max : guint64, out_num : Ptr[guint64], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_ascii_strncasecmp(s1 : Ptr[gchar], s2 : Ptr[gchar], n : gsize): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_ascii_strtod(nptr : Ptr[gchar], endptr : Ptr[Ptr[gchar]]): gdouble = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_ascii_strtoll(nptr : Ptr[gchar], endptr : Ptr[Ptr[gchar]], base : guint): gint64 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_ascii_strtoull(nptr : Ptr[gchar], endptr : Ptr[Ptr[gchar]], base : guint): guint64 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_ascii_strup(str : Ptr[gchar], len : gssize): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_ascii_tolower(c : gchar): gchar = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_ascii_toupper(c : gchar): gchar = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_ascii_xdigit_value(c : gchar): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_ask_password_flags_get_type(): GType = extern

  /**
   * g_assert_finalize_object: (skip) : (transfer full) (type GObject.Object): an object
  
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_assert_finalize_object(`object` : Ptr[GObject]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_assert_warning(log_domain : CString, file : CString, line : CInt, pretty_function : CString, expression : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_assertion_message(domain : CString, file : CString, line : CInt, func : CString, message : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_assertion_message_cmpnum(domain : CString, file : CString, line : CInt, func : CString, expr : CString, arg1 : Double, cmp : CString, arg2 : Double, numtype : CChar): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_assertion_message_cmpstr(domain : CString, file : CString, line : CInt, func : CString, expr : CString, arg1 : CString, cmp : CString, arg2 : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_assertion_message_cmpstrv(domain : CString, file : CString, line : CInt, func : CString, expr : CString, arg1 : Ptr[CString], arg2 : Ptr[CString], first_wrong_idx : gsize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_assertion_message_error(domain : CString, file : CString, line : CInt, func : CString, expr : CString, error : Ptr[GError], error_domain : GQuark, error_code : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_assertion_message_expr(domain : CString, file : CString, line : CInt, func : CString, expr : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gasyncinitable.h
  */
  def g_async_initable_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gasyncinitable.h
  */
  def g_async_initable_init_async(initable : Ptr[GAsyncInitable], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gasyncinitable.h
  */
  def g_async_initable_init_finish(initable : Ptr[GAsyncInitable], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gasyncinitable.h
  */
  def g_async_initable_new_async(object_type : GType, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer, first_property_name : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gasyncinitable.h
  */
  def g_async_initable_new_finish(initable : Ptr[GAsyncInitable], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GObject] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gasyncinitable.h
  */
  def g_async_initable_new_valist_async(object_type : GType, first_property_name : Ptr[gchar], var_args : va_list, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gasyncinitable.h
  */
  def g_async_initable_newv_async(object_type : GType, n_parameters : guint, parameters : Ptr[GParameter], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_length(queue : Ptr[GAsyncQueue]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_length_unlocked(queue : Ptr[GAsyncQueue]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_lock(queue : Ptr[GAsyncQueue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_new(): Ptr[GAsyncQueue] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_new_full(item_free_func : GDestroyNotify): Ptr[GAsyncQueue] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_pop(queue : Ptr[GAsyncQueue]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_pop_unlocked(queue : Ptr[GAsyncQueue]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_push(queue : Ptr[GAsyncQueue], data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_push_front(queue : Ptr[GAsyncQueue], item : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_push_front_unlocked(queue : Ptr[GAsyncQueue], item : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_push_sorted(queue : Ptr[GAsyncQueue], data : gpointer, func : GCompareDataFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_push_sorted_unlocked(queue : Ptr[GAsyncQueue], data : gpointer, func : GCompareDataFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_push_unlocked(queue : Ptr[GAsyncQueue], data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_ref(queue : Ptr[GAsyncQueue]): Ptr[GAsyncQueue] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_ref_unlocked(queue : Ptr[GAsyncQueue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_remove(queue : Ptr[GAsyncQueue], item : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_remove_unlocked(queue : Ptr[GAsyncQueue], item : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_sort(queue : Ptr[GAsyncQueue], func : GCompareDataFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_sort_unlocked(queue : Ptr[GAsyncQueue], func : GCompareDataFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_timed_pop(queue : Ptr[GAsyncQueue], end_time : Ptr[GTimeVal]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_timed_pop_unlocked(queue : Ptr[GAsyncQueue], end_time : Ptr[GTimeVal]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_timeout_pop(queue : Ptr[GAsyncQueue], timeout : guint64): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_timeout_pop_unlocked(queue : Ptr[GAsyncQueue], timeout : guint64): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_try_pop(queue : Ptr[GAsyncQueue]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_try_pop_unlocked(queue : Ptr[GAsyncQueue]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_unlock(queue : Ptr[GAsyncQueue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_unref(queue : Ptr[GAsyncQueue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gasyncqueue.h
  */
  def g_async_queue_unref_and_unlock(queue : Ptr[GAsyncQueue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gasyncresult.h
  */
  def g_async_result_get_source_object(res : Ptr[GAsyncResult]): Ptr[GObject] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gasyncresult.h
  */
  def g_async_result_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gasyncresult.h
  */
  def g_async_result_get_user_data(res : Ptr[GAsyncResult]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gasyncresult.h
  */
  def g_async_result_is_tagged(res : Ptr[GAsyncResult], source_tag : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gasyncresult.h
  */
  def g_async_result_legacy_propagate_error(res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_atexit(func : GVoidFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gatomic.h
  */
  def g_atomic_int_add(atomic : Ptr[gint], `val` : gint): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gatomic.h
  */
  def g_atomic_int_and(atomic : Ptr[guint], `val` : guint): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gatomic.h
  */
  def g_atomic_int_compare_and_exchange(atomic : Ptr[gint], oldval : gint, newval : gint): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gatomic.h
  */
  def g_atomic_int_dec_and_test(atomic : Ptr[gint]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gatomic.h
  */
  def g_atomic_int_exchange_and_add(atomic : Ptr[gint], `val` : gint): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gatomic.h
  */
  def g_atomic_int_get(atomic : Ptr[gint]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gatomic.h
  */
  def g_atomic_int_inc(atomic : Ptr[gint]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gatomic.h
  */
  def g_atomic_int_or(atomic : Ptr[guint], `val` : guint): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gatomic.h
  */
  def g_atomic_int_set(atomic : Ptr[gint], newval : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gatomic.h
  */
  def g_atomic_int_xor(atomic : Ptr[guint], `val` : guint): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gatomic.h
  */
  def g_atomic_pointer_add(atomic : Ptr[Byte], `val` : gssize): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gatomic.h
  */
  def g_atomic_pointer_and(atomic : Ptr[Byte], `val` : gsize): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gatomic.h
  */
  def g_atomic_pointer_compare_and_exchange(atomic : Ptr[Byte], oldval : gpointer, newval : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gatomic.h
  */
  def g_atomic_pointer_get(atomic : Ptr[Byte]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gatomic.h
  */
  def g_atomic_pointer_or(atomic : Ptr[Byte], `val` : gsize): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gatomic.h
  */
  def g_atomic_pointer_set(atomic : Ptr[Byte], newval : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gatomic.h
  */
  def g_atomic_pointer_xor(atomic : Ptr[Byte], `val` : gsize): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grcbox.h
  */
  def g_atomic_rc_box_acquire(mem_block : gpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grcbox.h
  */
  def g_atomic_rc_box_alloc(block_size : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grcbox.h
  */
  def g_atomic_rc_box_alloc0(block_size : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grcbox.h
  */
  def g_atomic_rc_box_dup(block_size : gsize, mem_block : gconstpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grcbox.h
  */
  def g_atomic_rc_box_get_size(mem_block : gpointer): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grcbox.h
  */
  def g_atomic_rc_box_release(mem_block : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grcbox.h
  */
  def g_atomic_rc_box_release_full(mem_block : gpointer, clear_func : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grefcount.h
  */
  def g_atomic_ref_count_compare(arc : Ptr[gatomicrefcount], `val` : gint): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grefcount.h
  */
  def g_atomic_ref_count_dec(arc : Ptr[gatomicrefcount]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grefcount.h
  */
  def g_atomic_ref_count_inc(arc : Ptr[gatomicrefcount]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grefcount.h
  */
  def g_atomic_ref_count_init(arc : Ptr[gatomicrefcount]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def g_autoptr_cleanup_generic_gfree(p : Ptr[Byte]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def g_autoptr_cleanup_gstring_free(string : Ptr[GString]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbase64.h
  */
  def g_base64_decode(text : Ptr[gchar], out_len : Ptr[gsize]): Ptr[guchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbase64.h
  */
  def g_base64_decode_inplace(text : Ptr[gchar], out_len : Ptr[gsize]): Ptr[guchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbase64.h
  */
  def g_base64_decode_step(in : Ptr[gchar], len : gsize, out : Ptr[guchar], state : Ptr[gint], save : Ptr[guint]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbase64.h
  */
  def g_base64_encode(data : Ptr[guchar], len : gsize): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbase64.h
  */
  def g_base64_encode_close(break_lines : gboolean, out : Ptr[gchar], state : Ptr[gint], save : Ptr[gint]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbase64.h
  */
  def g_base64_encode_step(in : Ptr[guchar], len : gsize, break_lines : gboolean, out : Ptr[gchar], state : Ptr[gint], save : Ptr[gint]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_basename(file_name : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gbinding.h
  */
  def g_binding_dup_source(binding : Ptr[GBinding]): Ptr[GObject] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gbinding.h
  */
  def g_binding_dup_target(binding : Ptr[GBinding]): Ptr[GObject] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gbinding.h
  */
  def g_binding_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gbinding.h
  */
  def g_binding_get_flags(binding : Ptr[GBinding]): GBindingFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gbinding.h
  */
  def g_binding_get_source(binding : Ptr[GBinding]): Ptr[GObject] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gbinding.h
  */
  def g_binding_get_source_property(binding : Ptr[GBinding]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gbinding.h
  */
  def g_binding_get_target(binding : Ptr[GBinding]): Ptr[GObject] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gbinding.h
  */
  def g_binding_get_target_property(binding : Ptr[GBinding]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gbinding.h
  */
  def g_binding_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gbindinggroup.h
  */
  def g_binding_group_bind(self : Ptr[GBindingGroup], source_property : Ptr[gchar], target : gpointer, target_property : Ptr[gchar], flags : GBindingFlags): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gbindinggroup.h
  */
  def g_binding_group_bind_full(self : Ptr[GBindingGroup], source_property : Ptr[gchar], target : gpointer, target_property : Ptr[gchar], flags : GBindingFlags, transform_to : GBindingTransformFunc, transform_from : GBindingTransformFunc, user_data : gpointer, user_data_destroy : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gbindinggroup.h
  */
  def g_binding_group_bind_with_closures(self : Ptr[GBindingGroup], source_property : Ptr[gchar], target : gpointer, target_property : Ptr[gchar], flags : GBindingFlags, transform_to : Ptr[GClosure], transform_from : Ptr[GClosure]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gbindinggroup.h
  */
  def g_binding_group_dup_source(self : Ptr[GBindingGroup]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gbindinggroup.h
  */
  def g_binding_group_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gbindinggroup.h
  */
  def g_binding_group_new(): Ptr[GBindingGroup] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gbindinggroup.h
  */
  def g_binding_group_set_source(self : Ptr[GBindingGroup], source : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gbinding.h
  */
  def g_binding_unbind(binding : Ptr[GBinding]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbitlock.h
  */
  def g_bit_lock(address : Ptr[gint], lock_bit : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_bit_nth_lsf(mask : gulong, nth_bit : gint): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_bit_nth_lsf_impl(mask : gulong, nth_bit : gint): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_bit_nth_msf(mask : gulong, nth_bit : gint): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_bit_nth_msf_impl(mask : gulong, nth_bit : gint): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_bit_storage(number : gulong): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_bit_storage_impl(number : gulong): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbitlock.h
  */
  def g_bit_trylock(address : Ptr[gint], lock_bit : gint): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbitlock.h
  */
  def g_bit_unlock(address : Ptr[gint], lock_bit : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
  */
  def g_blow_chunks(): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_add_application(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], name : Ptr[gchar], exec : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_add_group(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], group : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_free(bookmark : Ptr[GBookmarkFile]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_get_added(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], error : Ptr[Ptr[GError]]): time_t = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_get_added_date_time(bookmark : Ptr[GBookmarkFile], uri : CString, error : Ptr[Ptr[GError]]): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_get_app_info(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], name : Ptr[gchar], exec : Ptr[Ptr[gchar]], count : Ptr[guint], stamp : Ptr[time_t], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_get_application_info(bookmark : Ptr[GBookmarkFile], uri : CString, name : CString, exec : Ptr[CString], count : Ptr[CUnsignedInt], stamp : Ptr[Ptr[GDateTime]], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_get_applications(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], length : Ptr[gsize], error : Ptr[Ptr[GError]]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_get_description(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_get_groups(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], length : Ptr[gsize], error : Ptr[Ptr[GError]]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_get_icon(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], href : Ptr[Ptr[gchar]], mime_type : Ptr[Ptr[gchar]], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_get_is_private(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_get_mime_type(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_get_modified(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], error : Ptr[Ptr[GError]]): time_t = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_get_modified_date_time(bookmark : Ptr[GBookmarkFile], uri : CString, error : Ptr[Ptr[GError]]): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_get_size(bookmark : Ptr[GBookmarkFile]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_get_title(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_get_uris(bookmark : Ptr[GBookmarkFile], length : Ptr[gsize]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_get_visited(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], error : Ptr[Ptr[GError]]): time_t = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_get_visited_date_time(bookmark : Ptr[GBookmarkFile], uri : CString, error : Ptr[Ptr[GError]]): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_has_application(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], name : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_has_group(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], group : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_has_item(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_load_from_data(bookmark : Ptr[GBookmarkFile], data : Ptr[gchar], length : gsize, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_load_from_data_dirs(bookmark : Ptr[GBookmarkFile], file : Ptr[gchar], full_path : Ptr[Ptr[gchar]], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_load_from_file(bookmark : Ptr[GBookmarkFile], filename : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_move_item(bookmark : Ptr[GBookmarkFile], old_uri : Ptr[gchar], new_uri : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_new(): Ptr[GBookmarkFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_remove_application(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], name : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_remove_group(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], group : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_remove_item(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_set_added(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], added : time_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_set_added_date_time(bookmark : Ptr[GBookmarkFile], uri : CString, added : Ptr[GDateTime]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_set_app_info(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], name : Ptr[gchar], exec : Ptr[gchar], count : gint, stamp : time_t, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_set_application_info(bookmark : Ptr[GBookmarkFile], uri : CString, name : CString, exec : CString, count : CInt, stamp : Ptr[GDateTime], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_set_description(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], description : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_set_groups(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], groups : Ptr[Ptr[gchar]], length : gsize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_set_icon(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], href : Ptr[gchar], mime_type : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_set_is_private(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], is_private : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_set_mime_type(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], mime_type : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_set_modified(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], modified : time_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_set_modified_date_time(bookmark : Ptr[GBookmarkFile], uri : CString, modified : Ptr[GDateTime]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_set_title(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], title : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_set_visited(bookmark : Ptr[GBookmarkFile], uri : Ptr[gchar], visited : time_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_set_visited_date_time(bookmark : Ptr[GBookmarkFile], uri : CString, visited : Ptr[GDateTime]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_to_data(bookmark : Ptr[GBookmarkFile], length : Ptr[gsize], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbookmarkfile.h
  */
  def g_bookmark_file_to_file(bookmark : Ptr[GBookmarkFile], filename : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gboxed.h
  */
  def g_boxed_copy(boxed_type : GType, src_boxed : gconstpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gboxed.h
  */
  def g_boxed_free(boxed_type : GType, boxed : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gboxed.h
  */
  def g_boxed_type_register_static(name : Ptr[gchar], boxed_copy : GBoxedCopyFunc, boxed_free : GBoxedFreeFunc): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedinputstream.h
  */
  def g_buffered_input_stream_fill(stream : Ptr[GBufferedInputStream], count : gssize, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedinputstream.h
  */
  def g_buffered_input_stream_fill_async(stream : Ptr[GBufferedInputStream], count : gssize, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedinputstream.h
  */
  def g_buffered_input_stream_fill_finish(stream : Ptr[GBufferedInputStream], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedinputstream.h
  */
  def g_buffered_input_stream_get_available(stream : Ptr[GBufferedInputStream]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedinputstream.h
  */
  def g_buffered_input_stream_get_buffer_size(stream : Ptr[GBufferedInputStream]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedinputstream.h
  */
  def g_buffered_input_stream_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedinputstream.h
  */
  def g_buffered_input_stream_new(base_stream : Ptr[GInputStream]): Ptr[GInputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedinputstream.h
  */
  def g_buffered_input_stream_new_sized(base_stream : Ptr[GInputStream], size : gsize): Ptr[GInputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedinputstream.h
  */
  def g_buffered_input_stream_peek(stream : Ptr[GBufferedInputStream], buffer : Ptr[Byte], offset : gsize, count : gsize): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedinputstream.h
  */
  def g_buffered_input_stream_peek_buffer(stream : Ptr[GBufferedInputStream], count : Ptr[gsize]): Ptr[Byte] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedinputstream.h
  */
  def g_buffered_input_stream_read_byte(stream : Ptr[GBufferedInputStream], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): CInt = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedinputstream.h
  */
  def g_buffered_input_stream_set_buffer_size(stream : Ptr[GBufferedInputStream], size : gsize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedoutputstream.h
  */
  def g_buffered_output_stream_get_auto_grow(stream : Ptr[GBufferedOutputStream]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedoutputstream.h
  */
  def g_buffered_output_stream_get_buffer_size(stream : Ptr[GBufferedOutputStream]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedoutputstream.h
  */
  def g_buffered_output_stream_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedoutputstream.h
  */
  def g_buffered_output_stream_new(base_stream : Ptr[GOutputStream]): Ptr[GOutputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedoutputstream.h
  */
  def g_buffered_output_stream_new_sized(base_stream : Ptr[GOutputStream], size : gsize): Ptr[GOutputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedoutputstream.h
  */
  def g_buffered_output_stream_set_auto_grow(stream : Ptr[GBufferedOutputStream], auto_grow : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbufferedoutputstream.h
  */
  def g_buffered_output_stream_set_buffer_size(stream : Ptr[GBufferedOutputStream], size : gsize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_build_filename(first_element : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_build_filename_valist(first_element : Ptr[gchar], args : Ptr[va_list]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_build_filenamev(args : Ptr[Ptr[gchar]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_build_path(separator : Ptr[gchar], first_element : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_build_pathv(separator : Ptr[gchar], args : Ptr[Ptr[gchar]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_bus_get(bus_type : GBusType, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_bus_get_finish(res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GDBusConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_bus_get_sync(bus_type : GBusType, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GDBusConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_bus_name_owner_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_bus_name_watcher_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusnameowning.h
  */
  def g_bus_own_name(bus_type : GBusType, name : Ptr[gchar], flags : GBusNameOwnerFlags, bus_acquired_handler : GBusAcquiredCallback, name_acquired_handler : GBusNameAcquiredCallback, name_lost_handler : GBusNameLostCallback, user_data : gpointer, user_data_free_func : GDestroyNotify): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusnameowning.h
  */
  def g_bus_own_name_on_connection(connection : Ptr[GDBusConnection], name : Ptr[gchar], flags : GBusNameOwnerFlags, name_acquired_handler : GBusNameAcquiredCallback, name_lost_handler : GBusNameLostCallback, user_data : gpointer, user_data_free_func : GDestroyNotify): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusnameowning.h
  */
  def g_bus_own_name_on_connection_with_closures(connection : Ptr[GDBusConnection], name : Ptr[gchar], flags : GBusNameOwnerFlags, name_acquired_closure : Ptr[GClosure], name_lost_closure : Ptr[GClosure]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusnameowning.h
  */
  def g_bus_own_name_with_closures(bus_type : GBusType, name : Ptr[gchar], flags : GBusNameOwnerFlags, bus_acquired_closure : Ptr[GClosure], name_acquired_closure : Ptr[GClosure], name_lost_closure : Ptr[GClosure]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_bus_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusnameowning.h
  */
  def g_bus_unown_name(owner_id : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusnamewatching.h
  */
  def g_bus_unwatch_name(watcher_id : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusnamewatching.h
  */
  def g_bus_watch_name(bus_type : GBusType, name : Ptr[gchar], flags : GBusNameWatcherFlags, name_appeared_handler : GBusNameAppearedCallback, name_vanished_handler : GBusNameVanishedCallback, user_data : gpointer, user_data_free_func : GDestroyNotify): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusnamewatching.h
  */
  def g_bus_watch_name_on_connection(connection : Ptr[GDBusConnection], name : Ptr[gchar], flags : GBusNameWatcherFlags, name_appeared_handler : GBusNameAppearedCallback, name_vanished_handler : GBusNameVanishedCallback, user_data : gpointer, user_data_free_func : GDestroyNotify): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusnamewatching.h
  */
  def g_bus_watch_name_on_connection_with_closures(connection : Ptr[GDBusConnection], name : Ptr[gchar], flags : GBusNameWatcherFlags, name_appeared_closure : Ptr[GClosure], name_vanished_closure : Ptr[GClosure]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusnamewatching.h
  */
  def g_bus_watch_name_with_closures(bus_type : GBusType, name : Ptr[gchar], flags : GBusNameWatcherFlags, name_appeared_closure : Ptr[GClosure], name_vanished_closure : Ptr[GClosure]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_byte_array_append(array : Ptr[GByteArray], data : Ptr[guint8], len : guint): Ptr[GByteArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_byte_array_free(array : Ptr[GByteArray], free_segment : gboolean): Ptr[guint8] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_byte_array_free_to_bytes(array : Ptr[GByteArray]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_byte_array_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_byte_array_new(): Ptr[GByteArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_byte_array_new_take(data : Ptr[guint8], len : gsize): Ptr[GByteArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_byte_array_prepend(array : Ptr[GByteArray], data : Ptr[guint8], len : guint): Ptr[GByteArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_byte_array_ref(array : Ptr[GByteArray]): Ptr[GByteArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_byte_array_remove_index(array : Ptr[GByteArray], `index_` : guint): Ptr[GByteArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_byte_array_remove_index_fast(array : Ptr[GByteArray], `index_` : guint): Ptr[GByteArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_byte_array_remove_range(array : Ptr[GByteArray], `index_` : guint, length : guint): Ptr[GByteArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_byte_array_set_size(array : Ptr[GByteArray], length : guint): Ptr[GByteArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_byte_array_sized_new(reserved_size : guint): Ptr[GByteArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_byte_array_sort(array : Ptr[GByteArray], compare_func : GCompareFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_byte_array_sort_with_data(array : Ptr[GByteArray], compare_func : GCompareDataFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_byte_array_steal(array : Ptr[GByteArray], len : Ptr[gsize]): Ptr[guint8] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_byte_array_unref(array : Ptr[GByteArray]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbytes.h
  */
  def g_bytes_compare(bytes1 : gconstpointer, bytes2 : gconstpointer): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbytes.h
  */
  def g_bytes_equal(bytes1 : gconstpointer, bytes2 : gconstpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbytes.h
  */
  def g_bytes_get_data(bytes : Ptr[GBytes], size : Ptr[gsize]): gconstpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbytes.h
  */
  def g_bytes_get_region(bytes : Ptr[GBytes], element_size : gsize, offset : gsize, n_elements : gsize): gconstpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbytes.h
  */
  def g_bytes_get_size(bytes : Ptr[GBytes]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_bytes_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbytes.h
  */
  def g_bytes_hash(bytes : gconstpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbytesicon.h
  */
  def g_bytes_icon_get_bytes(icon : Ptr[GBytesIcon]): Ptr[GBytes] = extern

  /**
   * GBytesIcon:
  
   * [bindgen] header: /usr/include/glib-2.0/gio/gbytesicon.h
  */
  def g_bytes_icon_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gbytesicon.h
  */
  def g_bytes_icon_new(bytes : Ptr[GBytes]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbytes.h
  */
  def g_bytes_new(data : gconstpointer, size : gsize): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbytes.h
  */
  def g_bytes_new_from_bytes(bytes : Ptr[GBytes], offset : gsize, length : gsize): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbytes.h
  */
  def g_bytes_new_static(data : gconstpointer, size : gsize): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbytes.h
  */
  def g_bytes_new_take(data : gpointer, size : gsize): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbytes.h
  */
  def g_bytes_new_with_free_func(data : gconstpointer, size : gsize, free_func : GDestroyNotify, user_data : gpointer): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbytes.h
  */
  def g_bytes_ref(bytes : Ptr[GBytes]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbytes.h
  */
  def g_bytes_unref(bytes : Ptr[GBytes]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbytes.h
  */
  def g_bytes_unref_to_array(bytes : Ptr[GBytes]): Ptr[GByteArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbytes.h
  */
  def g_bytes_unref_to_data(bytes : Ptr[GBytes], size : Ptr[gsize]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gcache.h
  */
  def g_cache_destroy(cache : Ptr[GCache]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gcache.h
  */
  def g_cache_insert(cache : Ptr[GCache], key : gpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gcache.h
  */
  def g_cache_key_foreach(cache : Ptr[GCache], func : GHFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gcache.h
  */
  def g_cache_new(value_new_func : GCacheNewFunc, value_destroy_func : GCacheDestroyFunc, key_dup_func : GCacheDupFunc, key_destroy_func : GCacheDestroyFunc, hash_key_func : GHashFunc, hash_value_func : GHashFunc, key_equal_func : GEqualFunc): Ptr[GCache] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gcache.h
  */
  def g_cache_remove(cache : Ptr[GCache], value : gconstpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gcache.h
  */
  def g_cache_value_foreach(cache : Ptr[GCache], func : GHFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
  */
  def g_cancellable_cancel(cancellable : Ptr[GCancellable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
  */
  def g_cancellable_connect(cancellable : Ptr[GCancellable], callback : GCallback, data : gpointer, data_destroy_func : GDestroyNotify): gulong = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
  */
  def g_cancellable_disconnect(cancellable : Ptr[GCancellable], handler_id : gulong): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
  */
  def g_cancellable_get_current(): Ptr[GCancellable] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
  */
  def g_cancellable_get_fd(cancellable : Ptr[GCancellable]): CInt = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
  */
  def g_cancellable_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
  */
  def g_cancellable_is_cancelled(cancellable : Ptr[GCancellable]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
  */
  def g_cancellable_make_pollfd(cancellable : Ptr[GCancellable], pollfd : Ptr[GPollFD]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
  */
  def g_cancellable_new(): Ptr[GCancellable] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
  */
  def g_cancellable_pop_current(cancellable : Ptr[GCancellable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
  */
  def g_cancellable_push_current(cancellable : Ptr[GCancellable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
  */
  def g_cancellable_release_fd(cancellable : Ptr[GCancellable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
  */
  def g_cancellable_reset(cancellable : Ptr[GCancellable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
  */
  def g_cancellable_set_error_if_cancelled(cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcancellable.h
  */
  def g_cancellable_source_new(cancellable : Ptr[GCancellable]): Ptr[GSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_canonicalize_filename(filename : Ptr[gchar], relative_to : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_BOOLEAN__BOXED_BOXED(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_BOOLEAN__FLAGS(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_BOOLEAN__FLAGSv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_STRING__OBJECT_POINTER(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_STRING__OBJECT_POINTERv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__BOOLEAN(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__BOOLEANv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__BOXED(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__BOXEDv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__CHAR(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__CHARv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__DOUBLE(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__DOUBLEv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__ENUM(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__ENUMv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__FLAGS(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__FLAGSv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__FLOAT(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__FLOATv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__INT(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__INTv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__LONG(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__LONGv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__OBJECT(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__OBJECTv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__PARAM(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__PARAMv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__POINTER(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__POINTERv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__STRING(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__STRINGv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__UCHAR(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__UCHARv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__UINT(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__UINT_POINTER(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__UINT_POINTERv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__UINTv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__ULONG(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__ULONGv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__VARIANT(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__VARIANTv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__VOID(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gmarshal.h
  */
  def g_cclosure_marshal_VOID__VOIDv(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
  */
  def g_cclosure_marshal_generic(closure : Ptr[GClosure], return_gvalue : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
  */
  def g_cclosure_marshal_generic_va(closure : Ptr[GClosure], return_value : Ptr[GValue], instance : gpointer, args_list : va_list, marshal_data : gpointer, n_params : CInt, param_types : Ptr[GType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
  */
  def g_cclosure_new(callback_func : GCallback, user_data : gpointer, destroy_data : GClosureNotify): Ptr[GClosure] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_cclosure_new_object(callback_func : GCallback, `object` : Ptr[GObject]): Ptr[GClosure] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_cclosure_new_object_swap(callback_func : GCallback, `object` : Ptr[GObject]): Ptr[GClosure] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
  */
  def g_cclosure_new_swap(callback_func : GCallback, user_data : gpointer, destroy_data : GClosureNotify): Ptr[GClosure] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcharsetconverter.h
  */
  def g_charset_converter_get_num_fallbacks(converter : Ptr[GCharsetConverter]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcharsetconverter.h
  */
  def g_charset_converter_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcharsetconverter.h
  */
  def g_charset_converter_get_use_fallback(converter : Ptr[GCharsetConverter]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcharsetconverter.h
  */
  def g_charset_converter_new(to_charset : Ptr[gchar], from_charset : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[GCharsetConverter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcharsetconverter.h
  */
  def g_charset_converter_set_use_fallback(converter : Ptr[GCharsetConverter], use_fallback : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gchecksum.h
  */
  def g_checksum_copy(checksum : Ptr[GChecksum]): Ptr[GChecksum] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gchecksum.h
  */
  def g_checksum_free(checksum : Ptr[GChecksum]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gchecksum.h
  */
  def g_checksum_get_digest(checksum : Ptr[GChecksum], buffer : Ptr[guint8], digest_len : Ptr[gsize]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gchecksum.h
  */
  def g_checksum_get_string(checksum : Ptr[GChecksum]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_checksum_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gchecksum.h
  */
  def g_checksum_new(checksum_type : GChecksumType): Ptr[GChecksum] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gchecksum.h
  */
  def g_checksum_reset(checksum : Ptr[GChecksum]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gchecksum.h
  */
  def g_checksum_type_get_length(checksum_type : GChecksumType): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gchecksum.h
  */
  def g_checksum_update(checksum : Ptr[GChecksum], data : Ptr[guchar], length : gssize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_child_watch_add(pid : GPid, function : GChildWatchFunc, data : gpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_child_watch_add_full(priority : gint, pid : GPid, function : GChildWatchFunc, data : gpointer, notify : GDestroyNotify): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_child_watch_source_new(pid : GPid): Ptr[GSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gerror.h
  */
  def g_clear_error(err : Ptr[Ptr[GError]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_clear_handle_id(tag_ptr : Ptr[guint], clear_func : GClearHandleFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_clear_list(list_ptr : Ptr[Ptr[GList]], destroy : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_clear_object(object_ptr : Ptr[Ptr[GObject]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_clear_pointer(pp : Ptr[gpointer], destroy : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_clear_signal_handler(handler_id_ptr : Ptr[gulong], instance : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_clear_slist(slist_ptr : Ptr[Ptr[GSList]], destroy : GDestroyNotify): Unit = extern

  /**
   * g_clear_weak_pointer: (skip) _pointer_location: The memory address of a pointer
  
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_clear_weak_pointer(weak_pointer_location : Ptr[gpointer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
  */
  def g_closure_add_finalize_notifier(closure : Ptr[GClosure], notify_data : gpointer, notify_func : GClosureNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
  */
  def g_closure_add_invalidate_notifier(closure : Ptr[GClosure], notify_data : gpointer, notify_func : GClosureNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
  */
  def g_closure_add_marshal_guards(closure : Ptr[GClosure], pre_marshal_data : gpointer, pre_marshal_notify : GClosureNotify, post_marshal_data : gpointer, post_marshal_notify : GClosureNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gboxed.h
  */
  def g_closure_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
  */
  def g_closure_invalidate(closure : Ptr[GClosure]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
  */
  def g_closure_invoke(closure : Ptr[GClosure], return_value : Ptr[GValue], n_param_values : guint, param_values : Ptr[GValue], invocation_hint : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_closure_new_object(sizeof_closure : guint, `object` : Ptr[GObject]): Ptr[GClosure] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
  */
  def g_closure_new_simple(sizeof_closure : guint, data : gpointer): Ptr[GClosure] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
  */
  def g_closure_ref(closure : Ptr[GClosure]): Ptr[GClosure] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
  */
  def g_closure_remove_finalize_notifier(closure : Ptr[GClosure], notify_data : gpointer, notify_func : GClosureNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
  */
  def g_closure_remove_invalidate_notifier(closure : Ptr[GClosure], notify_data : gpointer, notify_func : GClosureNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
  */
  def g_closure_set_marshal(closure : Ptr[GClosure], marshal : GClosureMarshal): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
  */
  def g_closure_set_meta_marshal(closure : Ptr[GClosure], marshal_data : gpointer, meta_marshal : GClosureMarshal): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
  */
  def g_closure_sink(closure : Ptr[GClosure]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
  */
  def g_closure_unref(closure : Ptr[GClosure]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gcompletion.h
  */
  def g_completion_add_items(cmp : Ptr[GCompletion], items : Ptr[GList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gcompletion.h
  */
  def g_completion_clear_items(cmp : Ptr[GCompletion]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gcompletion.h
  */
  def g_completion_complete(cmp : Ptr[GCompletion], prefix : Ptr[gchar], new_prefix : Ptr[Ptr[gchar]]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gcompletion.h
  */
  def g_completion_complete_utf8(cmp : Ptr[GCompletion], prefix : Ptr[gchar], new_prefix : Ptr[Ptr[gchar]]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gcompletion.h
  */
  def g_completion_free(cmp : Ptr[GCompletion]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gcompletion.h
  */
  def g_completion_new(func : GCompletionFunc): Ptr[GCompletion] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gcompletion.h
  */
  def g_completion_remove_items(cmp : Ptr[GCompletion], items : Ptr[GList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gcompletion.h
  */
  def g_completion_set_compare(cmp : Ptr[GCompletion], strncmp_func : GCompletionStrncmpFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gchecksum.h
  */
  def g_compute_checksum_for_bytes(checksum_type : GChecksumType, data : Ptr[GBytes]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gchecksum.h
  */
  def g_compute_checksum_for_data(checksum_type : GChecksumType, data : Ptr[guchar], length : gsize): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gchecksum.h
  */
  def g_compute_checksum_for_string(checksum_type : GChecksumType, str : Ptr[gchar], length : gssize): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghmac.h
  */
  def g_compute_hmac_for_bytes(digest_type : GChecksumType, key : Ptr[GBytes], data : Ptr[GBytes]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghmac.h
  */
  def g_compute_hmac_for_data(digest_type : GChecksumType, key : Ptr[guchar], key_len : gsize, data : Ptr[guchar], length : gsize): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghmac.h
  */
  def g_compute_hmac_for_string(digest_type : GChecksumType, key : Ptr[guchar], key_len : gsize, str : Ptr[gchar], length : gssize): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_cond_broadcast(cond : Ptr[GCond]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_cond_clear(cond : Ptr[GCond]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_cond_free(cond : Ptr[GCond]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_cond_init(cond : Ptr[GCond]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_cond_new(): Ptr[GCond] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_cond_signal(cond : Ptr[GCond]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_cond_timed_wait(cond : Ptr[GCond], mutex : Ptr[GMutex], timeval : Ptr[GTimeVal]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_cond_wait(cond : Ptr[GCond], mutex : Ptr[GMutex]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_cond_wait_until(cond : Ptr[GCond], mutex : Ptr[GMutex], end_time : gint64): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcontenttype.h
  */
  def g_content_type_can_be_executable(`type` : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcontenttype.h
  */
  def g_content_type_equals(type1 : Ptr[gchar], type2 : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcontenttype.h
  */
  def g_content_type_from_mime_type(mime_type : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcontenttype.h
  */
  def g_content_type_get_description(`type` : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcontenttype.h
  */
  def g_content_type_get_generic_icon_name(`type` : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcontenttype.h
  */
  def g_content_type_get_icon(`type` : Ptr[gchar]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcontenttype.h
  */
  def g_content_type_get_mime_dirs(): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcontenttype.h
  */
  def g_content_type_get_mime_type(`type` : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcontenttype.h
  */
  def g_content_type_get_symbolic_icon(`type` : Ptr[gchar]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcontenttype.h
  */
  def g_content_type_guess(filename : Ptr[gchar], data : Ptr[guchar], data_size : gsize, result_uncertain : Ptr[gboolean]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcontenttype.h
  */
  def g_content_type_guess_for_tree(root : Ptr[GFile]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcontenttype.h
  */
  def g_content_type_is_a(`type` : Ptr[gchar], supertype : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcontenttype.h
  */
  def g_content_type_is_mime_type(`type` : Ptr[gchar], mime_type : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcontenttype.h
  */
  def g_content_type_is_unknown(`type` : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcontenttype.h
  */
  def g_content_type_set_mime_dirs(dirs : Ptr[Ptr[gchar]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcontenttype.h
  */
  def g_content_types_get_registered(): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gconvert.h
  */
  def g_convert(str : Ptr[gchar], len : gssize, to_codeset : Ptr[gchar], from_codeset : Ptr[gchar], bytes_read : Ptr[gsize], bytes_written : Ptr[gsize], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gconvert.h
  */
  def g_convert_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gconvert.h
  */
  def g_convert_with_fallback(str : Ptr[gchar], len : gssize, to_codeset : Ptr[gchar], from_codeset : Ptr[gchar], fallback : Ptr[gchar], bytes_read : Ptr[gsize], bytes_written : Ptr[gsize], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gconvert.h
  */
  def g_convert_with_iconv(str : Ptr[gchar], len : gssize, converter : GIConv, bytes_read : Ptr[gsize], bytes_written : Ptr[gsize], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gconverter.h
  */
  def g_converter_convert(converter : Ptr[GConverter], inbuf : Ptr[Byte], inbuf_size : gsize, outbuf : Ptr[Byte], outbuf_size : gsize, flags : GConverterFlags, bytes_read : Ptr[gsize], bytes_written : Ptr[gsize], error : Ptr[Ptr[GError]]): GConverterResult = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_converter_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gconverter.h
  */
  def g_converter_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gconverterinputstream.h
  */
  def g_converter_input_stream_get_converter(converter_stream : Ptr[GConverterInputStream]): Ptr[GConverter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gconverterinputstream.h
  */
  def g_converter_input_stream_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gconverterinputstream.h
  */
  def g_converter_input_stream_new(base_stream : Ptr[GInputStream], converter : Ptr[GConverter]): Ptr[GInputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gconverteroutputstream.h
  */
  def g_converter_output_stream_get_converter(converter_stream : Ptr[GConverterOutputStream]): Ptr[GConverter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gconverteroutputstream.h
  */
  def g_converter_output_stream_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gconverteroutputstream.h
  */
  def g_converter_output_stream_new(base_stream : Ptr[GOutputStream], converter : Ptr[GConverter]): Ptr[GOutputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gconverter.h
  */
  def g_converter_reset(converter : Ptr[GConverter]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_converter_result_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcredentials.h
  */
  def g_credentials_get_native(credentials : Ptr[GCredentials], native_type : GCredentialsType): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcredentials.h
  */
  def g_credentials_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcredentials.h
  */
  def g_credentials_get_unix_pid(credentials : Ptr[GCredentials], error : Ptr[Ptr[GError]]): pid_t = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcredentials.h
  */
  def g_credentials_get_unix_user(credentials : Ptr[GCredentials], error : Ptr[Ptr[GError]]): uid_t = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcredentials.h
  */
  def g_credentials_is_same_user(credentials : Ptr[GCredentials], other_credentials : Ptr[GCredentials], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcredentials.h
  */
  def g_credentials_new(): Ptr[GCredentials] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcredentials.h
  */
  def g_credentials_set_native(credentials : Ptr[GCredentials], native_type : GCredentialsType, native : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcredentials.h
  */
  def g_credentials_set_unix_user(credentials : Ptr[GCredentials], uid : uid_t, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gcredentials.h
  */
  def g_credentials_to_string(credentials : Ptr[GCredentials]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_credentials_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_get_byte_order(stream : Ptr[GDataInputStream]): GDataStreamByteOrder = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_get_newline_type(stream : Ptr[GDataInputStream]): GDataStreamNewlineType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_new(base_stream : Ptr[GInputStream]): Ptr[GDataInputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_read_byte(stream : Ptr[GDataInputStream], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): guchar = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_read_int16(stream : Ptr[GDataInputStream], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gint16 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_read_int32(stream : Ptr[GDataInputStream], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_read_int64(stream : Ptr[GDataInputStream], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gint64 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_read_line(stream : Ptr[GDataInputStream], length : Ptr[gsize], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_read_line_async(stream : Ptr[GDataInputStream], io_priority : gint, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_read_line_finish(stream : Ptr[GDataInputStream], result : Ptr[GAsyncResult], length : Ptr[gsize], error : Ptr[Ptr[GError]]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_read_line_finish_utf8(stream : Ptr[GDataInputStream], result : Ptr[GAsyncResult], length : Ptr[gsize], error : Ptr[Ptr[GError]]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_read_line_utf8(stream : Ptr[GDataInputStream], length : Ptr[gsize], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_read_uint16(stream : Ptr[GDataInputStream], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): guint16 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_read_uint32(stream : Ptr[GDataInputStream], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): guint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_read_uint64(stream : Ptr[GDataInputStream], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): guint64 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_read_until(stream : Ptr[GDataInputStream], stop_chars : Ptr[gchar], length : Ptr[gsize], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_read_until_async(stream : Ptr[GDataInputStream], stop_chars : Ptr[gchar], io_priority : gint, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_read_until_finish(stream : Ptr[GDataInputStream], result : Ptr[GAsyncResult], length : Ptr[gsize], error : Ptr[Ptr[GError]]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_read_upto(stream : Ptr[GDataInputStream], stop_chars : Ptr[gchar], stop_chars_len : gssize, length : Ptr[gsize], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_read_upto_async(stream : Ptr[GDataInputStream], stop_chars : Ptr[gchar], stop_chars_len : gssize, io_priority : gint, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_read_upto_finish(stream : Ptr[GDataInputStream], result : Ptr[GAsyncResult], length : Ptr[gsize], error : Ptr[Ptr[GError]]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_set_byte_order(stream : Ptr[GDataInputStream], order : GDataStreamByteOrder): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatainputstream.h
  */
  def g_data_input_stream_set_newline_type(stream : Ptr[GDataInputStream], `type` : GDataStreamNewlineType): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdataoutputstream.h
  */
  def g_data_output_stream_get_byte_order(stream : Ptr[GDataOutputStream]): GDataStreamByteOrder = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdataoutputstream.h
  */
  def g_data_output_stream_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdataoutputstream.h
  */
  def g_data_output_stream_new(base_stream : Ptr[GOutputStream]): Ptr[GDataOutputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdataoutputstream.h
  */
  def g_data_output_stream_put_byte(stream : Ptr[GDataOutputStream], data : guchar, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdataoutputstream.h
  */
  def g_data_output_stream_put_int16(stream : Ptr[GDataOutputStream], data : gint16, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdataoutputstream.h
  */
  def g_data_output_stream_put_int32(stream : Ptr[GDataOutputStream], data : gint32, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdataoutputstream.h
  */
  def g_data_output_stream_put_int64(stream : Ptr[GDataOutputStream], data : gint64, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdataoutputstream.h
  */
  def g_data_output_stream_put_string(stream : Ptr[GDataOutputStream], str : CString, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdataoutputstream.h
  */
  def g_data_output_stream_put_uint16(stream : Ptr[GDataOutputStream], data : guint16, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdataoutputstream.h
  */
  def g_data_output_stream_put_uint32(stream : Ptr[GDataOutputStream], data : guint32, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdataoutputstream.h
  */
  def g_data_output_stream_put_uint64(stream : Ptr[GDataOutputStream], data : guint64, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdataoutputstream.h
  */
  def g_data_output_stream_set_byte_order(stream : Ptr[GDataOutputStream], order : GDataStreamByteOrder): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_data_stream_byte_order_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_data_stream_newline_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatagrambased.h
  */
  def g_datagram_based_condition_check(datagram_based : Ptr[GDatagramBased], condition : GIOCondition): GIOCondition = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatagrambased.h
  */
  def g_datagram_based_condition_wait(datagram_based : Ptr[GDatagramBased], condition : GIOCondition, timeout : gint64, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatagrambased.h
  */
  def g_datagram_based_create_source(datagram_based : Ptr[GDatagramBased], condition : GIOCondition, cancellable : Ptr[GCancellable]): Ptr[GSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatagrambased.h
  */
  def g_datagram_based_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatagrambased.h
  */
  def g_datagram_based_receive_messages(datagram_based : Ptr[GDatagramBased], messages : Ptr[GInputMessage], num_messages : guint, flags : gint, timeout : gint64, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdatagrambased.h
  */
  def g_datagram_based_send_messages(datagram_based : Ptr[GDatagramBased], messages : Ptr[GOutputMessage], num_messages : guint, flags : gint, timeout : gint64, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdataset.h
  */
  def g_datalist_clear(datalist : Ptr[Ptr[GData]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdataset.h
  */
  def g_datalist_foreach(datalist : Ptr[Ptr[GData]], func : GDataForeachFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdataset.h
  */
  def g_datalist_get_data(datalist : Ptr[Ptr[GData]], key : Ptr[gchar]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdataset.h
  */
  def g_datalist_get_flags(datalist : Ptr[Ptr[GData]]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdataset.h
  */
  def g_datalist_id_dup_data(datalist : Ptr[Ptr[GData]], key_id : GQuark, dup_func : GDuplicateFunc, user_data : gpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdataset.h
  */
  def g_datalist_id_get_data(datalist : Ptr[Ptr[GData]], key_id : GQuark): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdataset.h
  */
  def g_datalist_id_remove_no_notify(datalist : Ptr[Ptr[GData]], key_id : GQuark): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdataset.h
  */
  def g_datalist_id_replace_data(datalist : Ptr[Ptr[GData]], key_id : GQuark, oldval : gpointer, newval : gpointer, destroy : GDestroyNotify, old_destroy : Ptr[GDestroyNotify]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdataset.h
  */
  def g_datalist_id_set_data_full(datalist : Ptr[Ptr[GData]], key_id : GQuark, data : gpointer, destroy_func : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdataset.h
  */
  def g_datalist_init(datalist : Ptr[Ptr[GData]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdataset.h
  */
  def g_datalist_set_flags(datalist : Ptr[Ptr[GData]], flags : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdataset.h
  */
  def g_datalist_unset_flags(datalist : Ptr[Ptr[GData]], flags : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdataset.h
  */
  def g_dataset_destroy(dataset_location : gconstpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdataset.h
  */
  def g_dataset_foreach(dataset_location : gconstpointer, func : GDataForeachFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdataset.h
  */
  def g_dataset_id_get_data(dataset_location : gconstpointer, key_id : GQuark): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdataset.h
  */
  def g_dataset_id_remove_no_notify(dataset_location : gconstpointer, key_id : GQuark): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdataset.h
  */
  def g_dataset_id_set_data_full(dataset_location : gconstpointer, key_id : GQuark, data : gpointer, destroy_func : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_add_days(date : Ptr[GDate], n_days : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_add_months(date : Ptr[GDate], n_months : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_add_years(date : Ptr[GDate], n_years : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_clamp(date : Ptr[GDate], min_date : Ptr[GDate], max_date : Ptr[GDate]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_clear(date : Ptr[GDate], n_dates : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_compare(lhs : Ptr[GDate], rhs : Ptr[GDate]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_copy(date : Ptr[GDate]): Ptr[GDate] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_days_between(date1 : Ptr[GDate], date2 : Ptr[GDate]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_free(date : Ptr[GDate]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_get_day(date : Ptr[GDate]): GDateDay = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_get_day_of_year(date : Ptr[GDate]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_get_days_in_month(month : GDateMonth, year : GDateYear): guint8 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_get_iso8601_week_of_year(date : Ptr[GDate]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_get_julian(date : Ptr[GDate]): guint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_get_monday_week_of_year(date : Ptr[GDate]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_get_monday_weeks_in_year(year : GDateYear): guint8 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_get_month(date : Ptr[GDate]): GDateMonth = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_get_sunday_week_of_year(date : Ptr[GDate]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_get_sunday_weeks_in_year(year : GDateYear): guint8 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_date_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_get_weekday(date : Ptr[GDate]): GDateWeekday = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_get_year(date : Ptr[GDate]): GDateYear = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_is_first_of_month(date : Ptr[GDate]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_is_last_of_month(date : Ptr[GDate]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_is_leap_year(year : GDateYear): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_new(): Ptr[GDate] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_new_dmy(day : GDateDay, month : GDateMonth, year : GDateYear): Ptr[GDate] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_new_julian(julian_day : guint32): Ptr[GDate] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_order(date1 : Ptr[GDate], date2 : Ptr[GDate]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_set_day(date : Ptr[GDate], day : GDateDay): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_set_dmy(date : Ptr[GDate], day : GDateDay, month : GDateMonth, y : GDateYear): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_set_julian(date : Ptr[GDate], julian_date : guint32): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_set_month(date : Ptr[GDate], month : GDateMonth): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_set_parse(date : Ptr[GDate], str : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_set_time(date : Ptr[GDate], `time_` : GTime): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_set_time_t(date : Ptr[GDate], timet : time_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_set_time_val(date : Ptr[GDate], timeval : Ptr[GTimeVal]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_set_year(date : Ptr[GDate], year : GDateYear): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_strftime(s : Ptr[gchar], slen : gsize, format : Ptr[gchar], date : Ptr[GDate]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_subtract_days(date : Ptr[GDate], n_days : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_subtract_months(date : Ptr[GDate], n_months : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_subtract_years(date : Ptr[GDate], n_years : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_add(datetime : Ptr[GDateTime], timespan : GTimeSpan): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_add_days(datetime : Ptr[GDateTime], days : gint): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_add_full(datetime : Ptr[GDateTime], years : gint, months : gint, days : gint, hours : gint, minutes : gint, seconds : gdouble): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_add_hours(datetime : Ptr[GDateTime], hours : gint): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_add_minutes(datetime : Ptr[GDateTime], minutes : gint): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_add_months(datetime : Ptr[GDateTime], months : gint): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_add_seconds(datetime : Ptr[GDateTime], seconds : gdouble): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_add_weeks(datetime : Ptr[GDateTime], weeks : gint): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_add_years(datetime : Ptr[GDateTime], years : gint): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_compare(dt1 : gconstpointer, dt2 : gconstpointer): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_difference(end : Ptr[GDateTime], begin : Ptr[GDateTime]): GTimeSpan = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_equal(dt1 : gconstpointer, dt2 : gconstpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_format(datetime : Ptr[GDateTime], format : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_format_iso8601(datetime : Ptr[GDateTime]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_get_day_of_month(datetime : Ptr[GDateTime]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_get_day_of_week(datetime : Ptr[GDateTime]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_get_day_of_year(datetime : Ptr[GDateTime]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_get_hour(datetime : Ptr[GDateTime]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_get_microsecond(datetime : Ptr[GDateTime]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_get_minute(datetime : Ptr[GDateTime]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_get_month(datetime : Ptr[GDateTime]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_get_second(datetime : Ptr[GDateTime]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_get_seconds(datetime : Ptr[GDateTime]): gdouble = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_get_timezone(datetime : Ptr[GDateTime]): Ptr[GTimeZone] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_get_timezone_abbreviation(datetime : Ptr[GDateTime]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_date_time_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_get_utc_offset(datetime : Ptr[GDateTime]): GTimeSpan = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_get_week_numbering_year(datetime : Ptr[GDateTime]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_get_week_of_year(datetime : Ptr[GDateTime]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_get_year(datetime : Ptr[GDateTime]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_get_ymd(datetime : Ptr[GDateTime], year : Ptr[gint], month : Ptr[gint], day : Ptr[gint]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_hash(datetime : gconstpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_is_daylight_savings(datetime : Ptr[GDateTime]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_new(tz : Ptr[GTimeZone], year : gint, month : gint, day : gint, hour : gint, minute : gint, seconds : gdouble): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_new_from_iso8601(text : Ptr[gchar], default_tz : Ptr[GTimeZone]): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_new_from_timeval_local(tv : Ptr[GTimeVal]): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_new_from_timeval_utc(tv : Ptr[GTimeVal]): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_new_from_unix_local(t : gint64): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_new_from_unix_utc(t : gint64): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_new_local(year : gint, month : gint, day : gint, hour : gint, minute : gint, seconds : gdouble): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_new_now(tz : Ptr[GTimeZone]): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_new_now_local(): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_new_now_utc(): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_new_utc(year : gint, month : gint, day : gint, hour : gint, minute : gint, seconds : gdouble): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_ref(datetime : Ptr[GDateTime]): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_to_local(datetime : Ptr[GDateTime]): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_to_timeval(datetime : Ptr[GDateTime], tv : Ptr[GTimeVal]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_to_timezone(datetime : Ptr[GDateTime], tz : Ptr[GTimeZone]): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_to_unix(datetime : Ptr[GDateTime]): gint64 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_to_utc(datetime : Ptr[GDateTime]): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdatetime.h
  */
  def g_date_time_unref(datetime : Ptr[GDateTime]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_to_struct_tm(date : Ptr[GDate], tm : Ptr[tm]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_valid(date : Ptr[GDate]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_valid_day(day : GDateDay): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_valid_dmy(day : GDateDay, month : GDateMonth, year : GDateYear): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_valid_julian(julian_date : guint32): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_valid_month(month : GDateMonth): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_valid_weekday(weekday : GDateWeekday): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdate.h
  */
  def g_date_valid_year(year : GDateYear): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusactiongroup.h
  */
  def g_dbus_action_group_get(connection : Ptr[GDBusConnection], bus_name : Ptr[gchar], object_path : Ptr[gchar]): Ptr[GDBusActionGroup] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusactiongroup.h
  */
  def g_dbus_action_group_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusaddress.h
  */
  def g_dbus_address_escape_value(string : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusaddress.h
  */
  def g_dbus_address_get_for_bus_sync(bus_type : GBusType, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusaddress.h
  */
  def g_dbus_address_get_stream(address : Ptr[gchar], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusaddress.h
  */
  def g_dbus_address_get_stream_finish(res : Ptr[GAsyncResult], out_guid : Ptr[Ptr[gchar]], error : Ptr[Ptr[GError]]): Ptr[GIOStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusaddress.h
  */
  def g_dbus_address_get_stream_sync(address : Ptr[gchar], out_guid : Ptr[Ptr[gchar]], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GIOStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_annotation_info_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_annotation_info_lookup(annotations : Ptr[Ptr[GDBusAnnotationInfo]], name : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_annotation_info_ref(info : Ptr[GDBusAnnotationInfo]): Ptr[GDBusAnnotationInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_annotation_info_unref(info : Ptr[GDBusAnnotationInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_arg_info_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_arg_info_ref(info : Ptr[GDBusArgInfo]): Ptr[GDBusArgInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_arg_info_unref(info : Ptr[GDBusArgInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusauthobserver.h
  */
  def g_dbus_auth_observer_allow_mechanism(observer : Ptr[GDBusAuthObserver], mechanism : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusauthobserver.h
  */
  def g_dbus_auth_observer_authorize_authenticated_peer(observer : Ptr[GDBusAuthObserver], stream : Ptr[GIOStream], credentials : Ptr[GCredentials]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusauthobserver.h
  */
  def g_dbus_auth_observer_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusauthobserver.h
  */
  def g_dbus_auth_observer_new(): Ptr[GDBusAuthObserver] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_dbus_call_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_dbus_capability_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_add_filter(connection : Ptr[GDBusConnection], filter_function : GDBusMessageFilterFunction, user_data : gpointer, user_data_free_func : GDestroyNotify): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_call(connection : Ptr[GDBusConnection], bus_name : Ptr[gchar], object_path : Ptr[gchar], interface_name : Ptr[gchar], method_name : Ptr[gchar], parameters : Ptr[GVariant], reply_type : Ptr[GVariantType], flags : GDBusCallFlags, timeout_msec : gint, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_call_finish(connection : Ptr[GDBusConnection], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_call_sync(connection : Ptr[GDBusConnection], bus_name : Ptr[gchar], object_path : Ptr[gchar], interface_name : Ptr[gchar], method_name : Ptr[gchar], parameters : Ptr[GVariant], reply_type : Ptr[GVariantType], flags : GDBusCallFlags, timeout_msec : gint, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_call_with_unix_fd_list(connection : Ptr[GDBusConnection], bus_name : Ptr[gchar], object_path : Ptr[gchar], interface_name : Ptr[gchar], method_name : Ptr[gchar], parameters : Ptr[GVariant], reply_type : Ptr[GVariantType], flags : GDBusCallFlags, timeout_msec : gint, fd_list : Ptr[GUnixFDList], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_call_with_unix_fd_list_finish(connection : Ptr[GDBusConnection], out_fd_list : Ptr[Ptr[GUnixFDList]], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_call_with_unix_fd_list_sync(connection : Ptr[GDBusConnection], bus_name : Ptr[gchar], object_path : Ptr[gchar], interface_name : Ptr[gchar], method_name : Ptr[gchar], parameters : Ptr[GVariant], reply_type : Ptr[GVariantType], flags : GDBusCallFlags, timeout_msec : gint, fd_list : Ptr[GUnixFDList], out_fd_list : Ptr[Ptr[GUnixFDList]], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_close(connection : Ptr[GDBusConnection], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_close_finish(connection : Ptr[GDBusConnection], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_close_sync(connection : Ptr[GDBusConnection], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_emit_signal(connection : Ptr[GDBusConnection], destination_bus_name : Ptr[gchar], object_path : Ptr[gchar], interface_name : Ptr[gchar], signal_name : Ptr[gchar], parameters : Ptr[GVariant], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactiongroupexporter.h
  */
  def g_dbus_connection_export_action_group(connection : Ptr[GDBusConnection], object_path : Ptr[gchar], action_group : Ptr[GActionGroup], error : Ptr[Ptr[GError]]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenuexporter.h
  */
  def g_dbus_connection_export_menu_model(connection : Ptr[GDBusConnection], object_path : Ptr[gchar], menu : Ptr[GMenuModel], error : Ptr[Ptr[GError]]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_dbus_connection_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_flush(connection : Ptr[GDBusConnection], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_flush_finish(connection : Ptr[GDBusConnection], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_flush_sync(connection : Ptr[GDBusConnection], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_get_capabilities(connection : Ptr[GDBusConnection]): GDBusCapabilityFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_get_exit_on_close(connection : Ptr[GDBusConnection]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_get_flags(connection : Ptr[GDBusConnection]): GDBusConnectionFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_get_guid(connection : Ptr[GDBusConnection]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_get_last_serial(connection : Ptr[GDBusConnection]): guint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_get_peer_credentials(connection : Ptr[GDBusConnection]): Ptr[GCredentials] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_get_stream(connection : Ptr[GDBusConnection]): Ptr[GIOStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_get_unique_name(connection : Ptr[GDBusConnection]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_is_closed(connection : Ptr[GDBusConnection]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_new(stream : Ptr[GIOStream], guid : Ptr[gchar], flags : GDBusConnectionFlags, observer : Ptr[GDBusAuthObserver], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_new_finish(res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GDBusConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_new_for_address(address : Ptr[gchar], flags : GDBusConnectionFlags, observer : Ptr[GDBusAuthObserver], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_new_for_address_finish(res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GDBusConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_new_for_address_sync(address : Ptr[gchar], flags : GDBusConnectionFlags, observer : Ptr[GDBusAuthObserver], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GDBusConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_new_sync(stream : Ptr[GIOStream], guid : Ptr[gchar], flags : GDBusConnectionFlags, observer : Ptr[GDBusAuthObserver], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GDBusConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_register_object(connection : Ptr[GDBusConnection], object_path : Ptr[gchar], interface_info : Ptr[GDBusInterfaceInfo], vtable : Ptr[GDBusInterfaceVTable], user_data : gpointer, user_data_free_func : GDestroyNotify, error : Ptr[Ptr[GError]]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_register_object_with_closures(connection : Ptr[GDBusConnection], object_path : Ptr[gchar], interface_info : Ptr[GDBusInterfaceInfo], method_call_closure : Ptr[GClosure], get_property_closure : Ptr[GClosure], set_property_closure : Ptr[GClosure], error : Ptr[Ptr[GError]]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_register_subtree(connection : Ptr[GDBusConnection], object_path : Ptr[gchar], vtable : Ptr[GDBusSubtreeVTable], flags : GDBusSubtreeFlags, user_data : gpointer, user_data_free_func : GDestroyNotify, error : Ptr[Ptr[GError]]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_remove_filter(connection : Ptr[GDBusConnection], filter_id : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_send_message(connection : Ptr[GDBusConnection], message : Ptr[GDBusMessage], flags : GDBusSendMessageFlags, out_serial : Ptr[guint32], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_send_message_with_reply(connection : Ptr[GDBusConnection], message : Ptr[GDBusMessage], flags : GDBusSendMessageFlags, timeout_msec : gint, out_serial : Ptr[guint32], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_send_message_with_reply_finish(connection : Ptr[GDBusConnection], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GDBusMessage] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_send_message_with_reply_sync(connection : Ptr[GDBusConnection], message : Ptr[GDBusMessage], flags : GDBusSendMessageFlags, timeout_msec : gint, out_serial : Ptr[guint32], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GDBusMessage] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_set_exit_on_close(connection : Ptr[GDBusConnection], exit_on_close : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_signal_subscribe(connection : Ptr[GDBusConnection], sender : Ptr[gchar], interface_name : Ptr[gchar], member : Ptr[gchar], object_path : Ptr[gchar], arg0 : Ptr[gchar], flags : GDBusSignalFlags, callback : GDBusSignalCallback, user_data : gpointer, user_data_free_func : GDestroyNotify): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_signal_unsubscribe(connection : Ptr[GDBusConnection], subscription_id : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_start_message_processing(connection : Ptr[GDBusConnection]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gactiongroupexporter.h
  */
  def g_dbus_connection_unexport_action_group(connection : Ptr[GDBusConnection], export_id : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenuexporter.h
  */
  def g_dbus_connection_unexport_menu_model(connection : Ptr[GDBusConnection], export_id : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_unregister_object(connection : Ptr[GDBusConnection], registration_id : guint): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusconnection.h
  */
  def g_dbus_connection_unregister_subtree(connection : Ptr[GDBusConnection], registration_id : guint): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbuserror.h
  */
  def g_dbus_error_encode_gerror(error : Ptr[GError]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbuserror.h
  */
  def g_dbus_error_get_remote_error(error : Ptr[GError]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_dbus_error_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbuserror.h
  */
  def g_dbus_error_is_remote_error(error : Ptr[GError]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbuserror.h
  */
  def g_dbus_error_new_for_dbus_error(dbus_error_name : Ptr[gchar], dbus_error_message : Ptr[gchar]): Ptr[GError] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbuserror.h
  */
  def g_dbus_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbuserror.h
  */
  def g_dbus_error_register_error(error_domain : GQuark, error_code : gint, dbus_error_name : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbuserror.h
  */
  def g_dbus_error_register_error_domain(error_domain_quark_name : Ptr[gchar], quark_volatile : Ptr[gsize], entries : Ptr[GDBusErrorEntry], num_entries : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbuserror.h
  */
  def g_dbus_error_set_dbus_error(error : Ptr[Ptr[GError]], dbus_error_name : Ptr[gchar], dbus_error_message : Ptr[gchar], format : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbuserror.h
  */
  def g_dbus_error_set_dbus_error_valist(error : Ptr[Ptr[GError]], dbus_error_name : Ptr[gchar], dbus_error_message : Ptr[gchar], format : Ptr[gchar], var_args : va_list): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbuserror.h
  */
  def g_dbus_error_strip_remote_error(error : Ptr[GError]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbuserror.h
  */
  def g_dbus_error_unregister_error(error_domain : GQuark, error_code : gint, dbus_error_name : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusutils.h
  */
  def g_dbus_escape_object_path(s : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusutils.h
  */
  def g_dbus_escape_object_path_bytestring(bytes : Ptr[guint8]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusutils.h
  */
  def g_dbus_generate_guid(): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusutils.h
  */
  def g_dbus_gvalue_to_gvariant(gvalue : Ptr[GValue], `type` : Ptr[GVariantType]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusutils.h
  */
  def g_dbus_gvariant_to_gvalue(value : Ptr[GVariant], out_gvalue : Ptr[GValue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterface.h
  */
  def g_dbus_interface_dup_object(`interface_` : Ptr[GDBusInterface]): Ptr[GDBusObject] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterface.h
  */
  def g_dbus_interface_get_info(`interface_` : Ptr[GDBusInterface]): Ptr[GDBusInterfaceInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterface.h
  */
  def g_dbus_interface_get_object(`interface_` : Ptr[GDBusInterface]): Ptr[GDBusObject] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterface.h
  */
  def g_dbus_interface_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_interface_info_cache_build(info : Ptr[GDBusInterfaceInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_interface_info_cache_release(info : Ptr[GDBusInterfaceInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_interface_info_generate_xml(info : Ptr[GDBusInterfaceInfo], indent : guint, string_builder : Ptr[GString]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_interface_info_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_interface_info_lookup_method(info : Ptr[GDBusInterfaceInfo], name : Ptr[gchar]): Ptr[GDBusMethodInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_interface_info_lookup_property(info : Ptr[GDBusInterfaceInfo], name : Ptr[gchar]): Ptr[GDBusPropertyInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_interface_info_lookup_signal(info : Ptr[GDBusInterfaceInfo], name : Ptr[gchar]): Ptr[GDBusSignalInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_interface_info_ref(info : Ptr[GDBusInterfaceInfo]): Ptr[GDBusInterfaceInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_interface_info_unref(info : Ptr[GDBusInterfaceInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterface.h
  */
  def g_dbus_interface_set_object(`interface_` : Ptr[GDBusInterface], `object` : Ptr[GDBusObject]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
  */
  def g_dbus_interface_skeleton_export(`interface_` : Ptr[GDBusInterfaceSkeleton], connection : Ptr[GDBusConnection], object_path : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_dbus_interface_skeleton_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
  */
  def g_dbus_interface_skeleton_flush(`interface_` : Ptr[GDBusInterfaceSkeleton]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
  */
  def g_dbus_interface_skeleton_get_connection(`interface_` : Ptr[GDBusInterfaceSkeleton]): Ptr[GDBusConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
  */
  def g_dbus_interface_skeleton_get_connections(`interface_` : Ptr[GDBusInterfaceSkeleton]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
  */
  def g_dbus_interface_skeleton_get_flags(`interface_` : Ptr[GDBusInterfaceSkeleton]): GDBusInterfaceSkeletonFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
  */
  def g_dbus_interface_skeleton_get_info(`interface_` : Ptr[GDBusInterfaceSkeleton]): Ptr[GDBusInterfaceInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
  */
  def g_dbus_interface_skeleton_get_object_path(`interface_` : Ptr[GDBusInterfaceSkeleton]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
  */
  def g_dbus_interface_skeleton_get_properties(`interface_` : Ptr[GDBusInterfaceSkeleton]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
  */
  def g_dbus_interface_skeleton_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
  */
  def g_dbus_interface_skeleton_get_vtable(`interface_` : Ptr[GDBusInterfaceSkeleton]): Ptr[GDBusInterfaceVTable] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
  */
  def g_dbus_interface_skeleton_has_connection(`interface_` : Ptr[GDBusInterfaceSkeleton], connection : Ptr[GDBusConnection]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
  */
  def g_dbus_interface_skeleton_set_flags(`interface_` : Ptr[GDBusInterfaceSkeleton], flags : GDBusInterfaceSkeletonFlags): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
  */
  def g_dbus_interface_skeleton_unexport(`interface_` : Ptr[GDBusInterfaceSkeleton]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusinterfaceskeleton.h
  */
  def g_dbus_interface_skeleton_unexport_from_connection(`interface_` : Ptr[GDBusInterfaceSkeleton], connection : Ptr[GDBusConnection]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusaddress.h
  */
  def g_dbus_is_address(string : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusutils.h
  */
  def g_dbus_is_error_name(string : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusutils.h
  */
  def g_dbus_is_guid(string : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusutils.h
  */
  def g_dbus_is_interface_name(string : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusutils.h
  */
  def g_dbus_is_member_name(string : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusutils.h
  */
  def g_dbus_is_name(string : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusaddress.h
  */
  def g_dbus_is_supported_address(string : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusutils.h
  */
  def g_dbus_is_unique_name(string : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmenumodel.h
  */
  def g_dbus_menu_model_get(connection : Ptr[GDBusConnection], bus_name : Ptr[gchar], object_path : Ptr[gchar]): Ptr[GDBusMenuModel] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmenumodel.h
  */
  def g_dbus_menu_model_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_dbus_message_byte_order_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_bytes_needed(blob : Ptr[guchar], blob_len : gsize, error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_copy(message : Ptr[GDBusMessage], error : Ptr[Ptr[GError]]): Ptr[GDBusMessage] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_dbus_message_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_get_arg0(message : Ptr[GDBusMessage]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_get_body(message : Ptr[GDBusMessage]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_get_byte_order(message : Ptr[GDBusMessage]): GDBusMessageByteOrder = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_get_destination(message : Ptr[GDBusMessage]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_get_error_name(message : Ptr[GDBusMessage]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_get_flags(message : Ptr[GDBusMessage]): GDBusMessageFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_get_header(message : Ptr[GDBusMessage], header_field : GDBusMessageHeaderField): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_get_header_fields(message : Ptr[GDBusMessage]): Ptr[guchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_get_interface(message : Ptr[GDBusMessage]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_get_locked(message : Ptr[GDBusMessage]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_get_member(message : Ptr[GDBusMessage]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_get_message_type(message : Ptr[GDBusMessage]): GDBusMessageType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_get_num_unix_fds(message : Ptr[GDBusMessage]): guint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_get_path(message : Ptr[GDBusMessage]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_get_reply_serial(message : Ptr[GDBusMessage]): guint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_get_sender(message : Ptr[GDBusMessage]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_get_serial(message : Ptr[GDBusMessage]): guint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_get_signature(message : Ptr[GDBusMessage]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_get_unix_fd_list(message : Ptr[GDBusMessage]): Ptr[GUnixFDList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_dbus_message_header_field_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_lock(message : Ptr[GDBusMessage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_new(): Ptr[GDBusMessage] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_new_from_blob(blob : Ptr[guchar], blob_len : gsize, capabilities : GDBusCapabilityFlags, error : Ptr[Ptr[GError]]): Ptr[GDBusMessage] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_new_method_call(name : Ptr[gchar], path : Ptr[gchar], `interface_` : Ptr[gchar], method : Ptr[gchar]): Ptr[GDBusMessage] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_new_method_error(method_call_message : Ptr[GDBusMessage], error_name : Ptr[gchar], error_message_format : Ptr[gchar]): Ptr[GDBusMessage] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_new_method_error_literal(method_call_message : Ptr[GDBusMessage], error_name : Ptr[gchar], error_message : Ptr[gchar]): Ptr[GDBusMessage] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_new_method_error_valist(method_call_message : Ptr[GDBusMessage], error_name : Ptr[gchar], error_message_format : Ptr[gchar], var_args : va_list): Ptr[GDBusMessage] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_new_method_reply(method_call_message : Ptr[GDBusMessage]): Ptr[GDBusMessage] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_new_signal(path : Ptr[gchar], `interface_` : Ptr[gchar], signal : Ptr[gchar]): Ptr[GDBusMessage] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_print(message : Ptr[GDBusMessage], indent : guint): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_set_body(message : Ptr[GDBusMessage], body : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_set_byte_order(message : Ptr[GDBusMessage], byte_order : GDBusMessageByteOrder): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_set_destination(message : Ptr[GDBusMessage], value : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_set_error_name(message : Ptr[GDBusMessage], value : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_set_flags(message : Ptr[GDBusMessage], flags : GDBusMessageFlags): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_set_header(message : Ptr[GDBusMessage], header_field : GDBusMessageHeaderField, value : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_set_interface(message : Ptr[GDBusMessage], value : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_set_member(message : Ptr[GDBusMessage], value : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_set_message_type(message : Ptr[GDBusMessage], `type` : GDBusMessageType): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_set_num_unix_fds(message : Ptr[GDBusMessage], value : guint32): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_set_path(message : Ptr[GDBusMessage], value : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_set_reply_serial(message : Ptr[GDBusMessage], value : guint32): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_set_sender(message : Ptr[GDBusMessage], value : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_set_serial(message : Ptr[GDBusMessage], serial : guint32): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_set_signature(message : Ptr[GDBusMessage], value : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_set_unix_fd_list(message : Ptr[GDBusMessage], fd_list : Ptr[GUnixFDList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_to_blob(message : Ptr[GDBusMessage], out_size : Ptr[gsize], capabilities : GDBusCapabilityFlags, error : Ptr[Ptr[GError]]): Ptr[guchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmessage.h
  */
  def g_dbus_message_to_gerror(message : Ptr[GDBusMessage], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_dbus_message_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_method_info_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_method_info_ref(info : Ptr[GDBusMethodInfo]): Ptr[GDBusMethodInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_method_info_unref(info : Ptr[GDBusMethodInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmethodinvocation.h
  */
  def g_dbus_method_invocation_get_connection(invocation : Ptr[GDBusMethodInvocation]): Ptr[GDBusConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmethodinvocation.h
  */
  def g_dbus_method_invocation_get_interface_name(invocation : Ptr[GDBusMethodInvocation]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmethodinvocation.h
  */
  def g_dbus_method_invocation_get_message(invocation : Ptr[GDBusMethodInvocation]): Ptr[GDBusMessage] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmethodinvocation.h
  */
  def g_dbus_method_invocation_get_method_info(invocation : Ptr[GDBusMethodInvocation]): Ptr[GDBusMethodInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmethodinvocation.h
  */
  def g_dbus_method_invocation_get_method_name(invocation : Ptr[GDBusMethodInvocation]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmethodinvocation.h
  */
  def g_dbus_method_invocation_get_object_path(invocation : Ptr[GDBusMethodInvocation]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmethodinvocation.h
  */
  def g_dbus_method_invocation_get_parameters(invocation : Ptr[GDBusMethodInvocation]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmethodinvocation.h
  */
  def g_dbus_method_invocation_get_property_info(invocation : Ptr[GDBusMethodInvocation]): Ptr[GDBusPropertyInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmethodinvocation.h
  */
  def g_dbus_method_invocation_get_sender(invocation : Ptr[GDBusMethodInvocation]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmethodinvocation.h
  */
  def g_dbus_method_invocation_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmethodinvocation.h
  */
  def g_dbus_method_invocation_get_user_data(invocation : Ptr[GDBusMethodInvocation]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmethodinvocation.h
  */
  def g_dbus_method_invocation_return_dbus_error(invocation : Ptr[GDBusMethodInvocation], error_name : Ptr[gchar], error_message : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmethodinvocation.h
  */
  def g_dbus_method_invocation_return_error(invocation : Ptr[GDBusMethodInvocation], domain : GQuark, code : gint, format : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmethodinvocation.h
  */
  def g_dbus_method_invocation_return_error_literal(invocation : Ptr[GDBusMethodInvocation], domain : GQuark, code : gint, message : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmethodinvocation.h
  */
  def g_dbus_method_invocation_return_error_valist(invocation : Ptr[GDBusMethodInvocation], domain : GQuark, code : gint, format : Ptr[gchar], var_args : va_list): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmethodinvocation.h
  */
  def g_dbus_method_invocation_return_gerror(invocation : Ptr[GDBusMethodInvocation], error : Ptr[GError]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmethodinvocation.h
  */
  def g_dbus_method_invocation_return_value(invocation : Ptr[GDBusMethodInvocation], parameters : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmethodinvocation.h
  */
  def g_dbus_method_invocation_return_value_with_unix_fd_list(invocation : Ptr[GDBusMethodInvocation], parameters : Ptr[GVariant], fd_list : Ptr[GUnixFDList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusmethodinvocation.h
  */
  def g_dbus_method_invocation_take_error(invocation : Ptr[GDBusMethodInvocation], error : Ptr[GError]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_node_info_generate_xml(info : Ptr[GDBusNodeInfo], indent : guint, string_builder : Ptr[GString]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_node_info_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_node_info_lookup_interface(info : Ptr[GDBusNodeInfo], name : Ptr[gchar]): Ptr[GDBusInterfaceInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_node_info_new_for_xml(xml_data : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[GDBusNodeInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_node_info_ref(info : Ptr[GDBusNodeInfo]): Ptr[GDBusNodeInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_node_info_unref(info : Ptr[GDBusNodeInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobject.h
  */
  def g_dbus_object_get_interface(`object` : Ptr[GDBusObject], interface_name : Ptr[gchar]): Ptr[GDBusInterface] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobject.h
  */
  def g_dbus_object_get_interfaces(`object` : Ptr[GDBusObject]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobject.h
  */
  def g_dbus_object_get_object_path(`object` : Ptr[GDBusObject]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobject.h
  */
  def g_dbus_object_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_dbus_object_manager_client_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h
  */
  def g_dbus_object_manager_client_get_connection(manager : Ptr[GDBusObjectManagerClient]): Ptr[GDBusConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h
  */
  def g_dbus_object_manager_client_get_flags(manager : Ptr[GDBusObjectManagerClient]): GDBusObjectManagerClientFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h
  */
  def g_dbus_object_manager_client_get_name(manager : Ptr[GDBusObjectManagerClient]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h
  */
  def g_dbus_object_manager_client_get_name_owner(manager : Ptr[GDBusObjectManagerClient]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h
  */
  def g_dbus_object_manager_client_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h
  */
  def g_dbus_object_manager_client_new(connection : Ptr[GDBusConnection], flags : GDBusObjectManagerClientFlags, name : Ptr[gchar], object_path : Ptr[gchar], get_proxy_type_func : GDBusProxyTypeFunc, get_proxy_type_user_data : gpointer, get_proxy_type_destroy_notify : GDestroyNotify, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h
  */
  def g_dbus_object_manager_client_new_finish(res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GDBusObjectManager] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h
  */
  def g_dbus_object_manager_client_new_for_bus(bus_type : GBusType, flags : GDBusObjectManagerClientFlags, name : Ptr[gchar], object_path : Ptr[gchar], get_proxy_type_func : GDBusProxyTypeFunc, get_proxy_type_user_data : gpointer, get_proxy_type_destroy_notify : GDestroyNotify, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h
  */
  def g_dbus_object_manager_client_new_for_bus_finish(res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GDBusObjectManager] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h
  */
  def g_dbus_object_manager_client_new_for_bus_sync(bus_type : GBusType, flags : GDBusObjectManagerClientFlags, name : Ptr[gchar], object_path : Ptr[gchar], get_proxy_type_func : GDBusProxyTypeFunc, get_proxy_type_user_data : gpointer, get_proxy_type_destroy_notify : GDestroyNotify, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GDBusObjectManager] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerclient.h
  */
  def g_dbus_object_manager_client_new_sync(connection : Ptr[GDBusConnection], flags : GDBusObjectManagerClientFlags, name : Ptr[gchar], object_path : Ptr[gchar], get_proxy_type_func : GDBusProxyTypeFunc, get_proxy_type_user_data : gpointer, get_proxy_type_destroy_notify : GDestroyNotify, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GDBusObjectManager] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanager.h
  */
  def g_dbus_object_manager_get_interface(manager : Ptr[GDBusObjectManager], object_path : Ptr[gchar], interface_name : Ptr[gchar]): Ptr[GDBusInterface] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanager.h
  */
  def g_dbus_object_manager_get_object(manager : Ptr[GDBusObjectManager], object_path : Ptr[gchar]): Ptr[GDBusObject] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanager.h
  */
  def g_dbus_object_manager_get_object_path(manager : Ptr[GDBusObjectManager]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanager.h
  */
  def g_dbus_object_manager_get_objects(manager : Ptr[GDBusObjectManager]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanager.h
  */
  def g_dbus_object_manager_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h
  */
  def g_dbus_object_manager_server_export(manager : Ptr[GDBusObjectManagerServer], `object` : Ptr[GDBusObjectSkeleton]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h
  */
  def g_dbus_object_manager_server_export_uniquely(manager : Ptr[GDBusObjectManagerServer], `object` : Ptr[GDBusObjectSkeleton]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h
  */
  def g_dbus_object_manager_server_get_connection(manager : Ptr[GDBusObjectManagerServer]): Ptr[GDBusConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h
  */
  def g_dbus_object_manager_server_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h
  */
  def g_dbus_object_manager_server_is_exported(manager : Ptr[GDBusObjectManagerServer], `object` : Ptr[GDBusObjectSkeleton]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h
  */
  def g_dbus_object_manager_server_new(object_path : Ptr[gchar]): Ptr[GDBusObjectManagerServer] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h
  */
  def g_dbus_object_manager_server_set_connection(manager : Ptr[GDBusObjectManagerServer], connection : Ptr[GDBusConnection]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectmanagerserver.h
  */
  def g_dbus_object_manager_server_unexport(manager : Ptr[GDBusObjectManagerServer], object_path : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectproxy.h
  */
  def g_dbus_object_proxy_get_connection(proxy : Ptr[GDBusObjectProxy]): Ptr[GDBusConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectproxy.h
  */
  def g_dbus_object_proxy_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectproxy.h
  */
  def g_dbus_object_proxy_new(connection : Ptr[GDBusConnection], object_path : Ptr[gchar]): Ptr[GDBusObjectProxy] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectskeleton.h
  */
  def g_dbus_object_skeleton_add_interface(`object` : Ptr[GDBusObjectSkeleton], `interface_` : Ptr[GDBusInterfaceSkeleton]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectskeleton.h
  */
  def g_dbus_object_skeleton_flush(`object` : Ptr[GDBusObjectSkeleton]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectskeleton.h
  */
  def g_dbus_object_skeleton_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectskeleton.h
  */
  def g_dbus_object_skeleton_new(object_path : Ptr[gchar]): Ptr[GDBusObjectSkeleton] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectskeleton.h
  */
  def g_dbus_object_skeleton_remove_interface(`object` : Ptr[GDBusObjectSkeleton], `interface_` : Ptr[GDBusInterfaceSkeleton]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectskeleton.h
  */
  def g_dbus_object_skeleton_remove_interface_by_name(`object` : Ptr[GDBusObjectSkeleton], interface_name : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusobjectskeleton.h
  */
  def g_dbus_object_skeleton_set_object_path(`object` : Ptr[GDBusObjectSkeleton], object_path : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_dbus_property_info_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_property_info_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_property_info_ref(info : Ptr[GDBusPropertyInfo]): Ptr[GDBusPropertyInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_property_info_unref(info : Ptr[GDBusPropertyInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_call(proxy : Ptr[GDBusProxy], method_name : Ptr[gchar], parameters : Ptr[GVariant], flags : GDBusCallFlags, timeout_msec : gint, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_call_finish(proxy : Ptr[GDBusProxy], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_call_sync(proxy : Ptr[GDBusProxy], method_name : Ptr[gchar], parameters : Ptr[GVariant], flags : GDBusCallFlags, timeout_msec : gint, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_call_with_unix_fd_list(proxy : Ptr[GDBusProxy], method_name : Ptr[gchar], parameters : Ptr[GVariant], flags : GDBusCallFlags, timeout_msec : gint, fd_list : Ptr[GUnixFDList], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_call_with_unix_fd_list_finish(proxy : Ptr[GDBusProxy], out_fd_list : Ptr[Ptr[GUnixFDList]], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_call_with_unix_fd_list_sync(proxy : Ptr[GDBusProxy], method_name : Ptr[gchar], parameters : Ptr[GVariant], flags : GDBusCallFlags, timeout_msec : gint, fd_list : Ptr[GUnixFDList], out_fd_list : Ptr[Ptr[GUnixFDList]], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_dbus_proxy_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_get_cached_property(proxy : Ptr[GDBusProxy], property_name : Ptr[gchar]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_get_cached_property_names(proxy : Ptr[GDBusProxy]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_get_connection(proxy : Ptr[GDBusProxy]): Ptr[GDBusConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_get_default_timeout(proxy : Ptr[GDBusProxy]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_get_flags(proxy : Ptr[GDBusProxy]): GDBusProxyFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_get_interface_info(proxy : Ptr[GDBusProxy]): Ptr[GDBusInterfaceInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_get_interface_name(proxy : Ptr[GDBusProxy]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_get_name(proxy : Ptr[GDBusProxy]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_get_name_owner(proxy : Ptr[GDBusProxy]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_get_object_path(proxy : Ptr[GDBusProxy]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_new(connection : Ptr[GDBusConnection], flags : GDBusProxyFlags, info : Ptr[GDBusInterfaceInfo], name : Ptr[gchar], object_path : Ptr[gchar], interface_name : Ptr[gchar], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_new_finish(res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GDBusProxy] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_new_for_bus(bus_type : GBusType, flags : GDBusProxyFlags, info : Ptr[GDBusInterfaceInfo], name : Ptr[gchar], object_path : Ptr[gchar], interface_name : Ptr[gchar], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_new_for_bus_finish(res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GDBusProxy] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_new_for_bus_sync(bus_type : GBusType, flags : GDBusProxyFlags, info : Ptr[GDBusInterfaceInfo], name : Ptr[gchar], object_path : Ptr[gchar], interface_name : Ptr[gchar], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GDBusProxy] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_new_sync(connection : Ptr[GDBusConnection], flags : GDBusProxyFlags, info : Ptr[GDBusInterfaceInfo], name : Ptr[gchar], object_path : Ptr[gchar], interface_name : Ptr[gchar], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GDBusProxy] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_set_cached_property(proxy : Ptr[GDBusProxy], property_name : Ptr[gchar], value : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_set_default_timeout(proxy : Ptr[GDBusProxy], timeout_msec : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusproxy.h
  */
  def g_dbus_proxy_set_interface_info(proxy : Ptr[GDBusProxy], info : Ptr[GDBusInterfaceInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_dbus_send_message_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_dbus_server_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusserver.h
  */
  def g_dbus_server_get_client_address(server : Ptr[GDBusServer]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusserver.h
  */
  def g_dbus_server_get_flags(server : Ptr[GDBusServer]): GDBusServerFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusserver.h
  */
  def g_dbus_server_get_guid(server : Ptr[GDBusServer]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusserver.h
  */
  def g_dbus_server_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusserver.h
  */
  def g_dbus_server_is_active(server : Ptr[GDBusServer]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusserver.h
  */
  def g_dbus_server_new_sync(address : Ptr[gchar], flags : GDBusServerFlags, guid : Ptr[gchar], observer : Ptr[GDBusAuthObserver], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GDBusServer] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusserver.h
  */
  def g_dbus_server_start(server : Ptr[GDBusServer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusserver.h
  */
  def g_dbus_server_stop(server : Ptr[GDBusServer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_dbus_signal_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_signal_info_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_signal_info_ref(info : Ptr[GDBusSignalInfo]): Ptr[GDBusSignalInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusintrospection.h
  */
  def g_dbus_signal_info_unref(info : Ptr[GDBusSignalInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_dbus_subtree_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdbusutils.h
  */
  def g_dbus_unescape_object_path(s : Ptr[gchar]): Ptr[guint8] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ggettext.h
  */
  def g_dcgettext(domain : Ptr[gchar], msgid : Ptr[gchar], category : gint): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontroller.h
  */
  def g_debug_controller(ptr : gpointer): Ptr[GDebugController] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontroller.h
  */
  def g_debug_controller_GET_IFACE(ptr : gpointer): Ptr[GDebugControllerInterface] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
  */
  def g_debug_controller_dbus_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
  */
  def g_debug_controller_dbus_new(connection : Ptr[GDBusConnection], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GDebugControllerDBus] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
  */
  def g_debug_controller_dbus_stop(self : Ptr[GDebugControllerDBus]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontroller.h
  */
  def g_debug_controller_get_debug_enabled(self : Ptr[GDebugController]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontroller.h
  */
  def g_debug_controller_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontroller.h
  */
  def g_debug_controller_set_debug_enabled(self : Ptr[GDebugController], debug_enabled : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ggettext.h
  */
  def g_dgettext(domain : Ptr[gchar], msgid : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdir.h
  */
  def g_dir_close(dir : Ptr[GDir]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_dir_make_tmp(tmpl : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdir.h
  */
  def g_dir_open(path : Ptr[gchar], flags : guint, error : Ptr[Ptr[GError]]): Ptr[GDir] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdir.h
  */
  def g_dir_read_name(dir : Ptr[GDir]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gdir.h
  */
  def g_dir_rewind(dir : Ptr[GDir]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_direct_equal(v1 : gconstpointer, v2 : gconstpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_direct_hash(v : gconstpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ggettext.h
  */
  def g_dngettext(domain : Ptr[gchar], msgid : Ptr[gchar], msgid_plural : Ptr[gchar], n : gulong): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_double_equal(v1 : gconstpointer, v2 : gconstpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_double_hash(v : gconstpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ggettext.h
  */
  def g_dpgettext(domain : Ptr[gchar], msgctxtid : Ptr[gchar], msgidoffset : gsize): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ggettext.h
  */
  def g_dpgettext2(domain : Ptr[gchar], context : Ptr[gchar], msgid : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_can_eject(drive : Ptr[GDrive]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_can_poll_for_media(drive : Ptr[GDrive]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_can_start(drive : Ptr[GDrive]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_can_start_degraded(drive : Ptr[GDrive]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_can_stop(drive : Ptr[GDrive]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_eject(drive : Ptr[GDrive], flags : GMountUnmountFlags, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_eject_finish(drive : Ptr[GDrive], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_eject_with_operation(drive : Ptr[GDrive], flags : GMountUnmountFlags, mount_operation : Ptr[GMountOperation], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_eject_with_operation_finish(drive : Ptr[GDrive], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_enumerate_identifiers(drive : Ptr[GDrive]): Ptr[CString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_get_icon(drive : Ptr[GDrive]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_get_identifier(drive : Ptr[GDrive], kind : CString): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_get_name(drive : Ptr[GDrive]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_get_sort_key(drive : Ptr[GDrive]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_get_start_stop_type(drive : Ptr[GDrive]): GDriveStartStopType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_get_symbolic_icon(drive : Ptr[GDrive]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_get_volumes(drive : Ptr[GDrive]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_has_media(drive : Ptr[GDrive]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_has_volumes(drive : Ptr[GDrive]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_is_media_check_automatic(drive : Ptr[GDrive]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_is_media_removable(drive : Ptr[GDrive]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_is_removable(drive : Ptr[GDrive]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_poll_for_media(drive : Ptr[GDrive], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_poll_for_media_finish(drive : Ptr[GDrive], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_start(drive : Ptr[GDrive], flags : GDriveStartFlags, mount_operation : Ptr[GMountOperation], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_start_finish(drive : Ptr[GDrive], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_drive_start_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_drive_start_stop_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_stop(drive : Ptr[GDrive], flags : GMountUnmountFlags, mount_operation : Ptr[GMountOperation], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdrive.h
  */
  def g_drive_stop_finish(drive : Ptr[GDrive], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsclientconnection.h
  */
  def g_dtls_client_connection_get_accepted_cas(conn : Ptr[GDtlsClientConnection]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsclientconnection.h
  */
  def g_dtls_client_connection_get_server_identity(conn : Ptr[GDtlsClientConnection]): Ptr[GSocketConnectable] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsclientconnection.h
  */
  def g_dtls_client_connection_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsclientconnection.h
  */
  def g_dtls_client_connection_get_validation_flags(conn : Ptr[GDtlsClientConnection]): GTlsCertificateFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsclientconnection.h
  */
  def g_dtls_client_connection_new(base_socket : Ptr[GDatagramBased], server_identity : Ptr[GSocketConnectable], error : Ptr[Ptr[GError]]): Ptr[GDatagramBased] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsclientconnection.h
  */
  def g_dtls_client_connection_set_server_identity(conn : Ptr[GDtlsClientConnection], identity : Ptr[GSocketConnectable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsclientconnection.h
  */
  def g_dtls_client_connection_set_validation_flags(conn : Ptr[GDtlsClientConnection], flags : GTlsCertificateFlags): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_close(conn : Ptr[GDtlsConnection], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_close_async(conn : Ptr[GDtlsConnection], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_close_finish(conn : Ptr[GDtlsConnection], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_emit_accept_certificate(conn : Ptr[GDtlsConnection], peer_cert : Ptr[GTlsCertificate], errors : GTlsCertificateFlags): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_get_certificate(conn : Ptr[GDtlsConnection]): Ptr[GTlsCertificate] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_get_channel_binding_data(conn : Ptr[GDtlsConnection], `type` : GTlsChannelBindingType, data : Ptr[GByteArray], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_get_ciphersuite_name(conn : Ptr[GDtlsConnection]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_get_database(conn : Ptr[GDtlsConnection]): Ptr[GTlsDatabase] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_get_interaction(conn : Ptr[GDtlsConnection]): Ptr[GTlsInteraction] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_get_negotiated_protocol(conn : Ptr[GDtlsConnection]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_get_peer_certificate(conn : Ptr[GDtlsConnection]): Ptr[GTlsCertificate] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_get_peer_certificate_errors(conn : Ptr[GDtlsConnection]): GTlsCertificateFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_get_protocol_version(conn : Ptr[GDtlsConnection]): GTlsProtocolVersion = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_get_rehandshake_mode(conn : Ptr[GDtlsConnection]): GTlsRehandshakeMode = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_get_require_close_notify(conn : Ptr[GDtlsConnection]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_handshake(conn : Ptr[GDtlsConnection], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_handshake_async(conn : Ptr[GDtlsConnection], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_handshake_finish(conn : Ptr[GDtlsConnection], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_set_advertised_protocols(conn : Ptr[GDtlsConnection], protocols : Ptr[Ptr[gchar]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_set_certificate(conn : Ptr[GDtlsConnection], certificate : Ptr[GTlsCertificate]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_set_database(conn : Ptr[GDtlsConnection], database : Ptr[GTlsDatabase]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_set_interaction(conn : Ptr[GDtlsConnection], interaction : Ptr[GTlsInteraction]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_set_rehandshake_mode(conn : Ptr[GDtlsConnection], mode : GTlsRehandshakeMode): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_set_require_close_notify(conn : Ptr[GDtlsConnection], require_close_notify : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_shutdown(conn : Ptr[GDtlsConnection], shutdown_read : gboolean, shutdown_write : gboolean, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_shutdown_async(conn : Ptr[GDtlsConnection], shutdown_read : gboolean, shutdown_write : gboolean, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsconnection.h
  */
  def g_dtls_connection_shutdown_finish(conn : Ptr[GDtlsConnection], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsserverconnection.h
  */
  def g_dtls_server_connection_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdtlsserverconnection.h
  */
  def g_dtls_server_connection_new(base_socket : Ptr[GDatagramBased], certificate : Ptr[GTlsCertificate], error : Ptr[Ptr[GError]]): Ptr[GDatagramBased] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gemblem.h
  */
  def g_emblem_get_icon(emblem : Ptr[GEmblem]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gemblem.h
  */
  def g_emblem_get_origin(emblem : Ptr[GEmblem]): GEmblemOrigin = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gemblem.h
  */
  def g_emblem_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gemblem.h
  */
  def g_emblem_new(icon : Ptr[GIcon]): Ptr[GEmblem] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gemblem.h
  */
  def g_emblem_new_with_origin(icon : Ptr[GIcon], origin : GEmblemOrigin): Ptr[GEmblem] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_emblem_origin_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gemblemedicon.h
  */
  def g_emblemed_icon_add_emblem(emblemed : Ptr[GEmblemedIcon], emblem : Ptr[GEmblem]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gemblemedicon.h
  */
  def g_emblemed_icon_clear_emblems(emblemed : Ptr[GEmblemedIcon]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gemblemedicon.h
  */
  def g_emblemed_icon_get_emblems(emblemed : Ptr[GEmblemedIcon]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gemblemedicon.h
  */
  def g_emblemed_icon_get_icon(emblemed : Ptr[GEmblemedIcon]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gemblemedicon.h
  */
  def g_emblemed_icon_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gemblemedicon.h
  */
  def g_emblemed_icon_new(icon : Ptr[GIcon], emblem : Ptr[GEmblem]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
  */
  def g_enum_complete_type_info(g_enum_type : GType, info : Ptr[GTypeInfo], const_values : Ptr[GEnumValue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
  */
  def g_enum_get_value(enum_class : Ptr[GEnumClass], value : gint): Ptr[GEnumValue] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
  */
  def g_enum_get_value_by_name(enum_class : Ptr[GEnumClass], name : Ptr[gchar]): Ptr[GEnumValue] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
  */
  def g_enum_get_value_by_nick(enum_class : Ptr[GEnumClass], nick : Ptr[gchar]): Ptr[GEnumValue] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
  */
  def g_enum_register_static(name : Ptr[gchar], const_static_values : Ptr[GEnumValue]): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
  */
  def g_enum_to_string(g_enum_type : GType, value : gint): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/genviron.h
  */
  def g_environ_getenv(envp : Ptr[Ptr[gchar]], variable : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/genviron.h
  */
  def g_environ_setenv(envp : Ptr[Ptr[gchar]], variable : Ptr[gchar], value : Ptr[gchar], overwrite : gboolean): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/genviron.h
  */
  def g_environ_unsetenv(envp : Ptr[Ptr[gchar]], variable : Ptr[gchar]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gerror.h
  */
  def g_error_copy(error : Ptr[GError]): Ptr[GError] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gerror.h
  */
  def g_error_domain_register(error_type_name : CString, error_type_private_size : gsize, error_type_init : GErrorInitFunc, error_type_copy : GErrorCopyFunc, error_type_clear : GErrorClearFunc): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gerror.h
  */
  def g_error_domain_register_static(error_type_name : CString, error_type_private_size : gsize, error_type_init : GErrorInitFunc, error_type_copy : GErrorCopyFunc, error_type_clear : GErrorClearFunc): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gerror.h
  */
  def g_error_free(error : Ptr[GError]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_error_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gerror.h
  */
  def g_error_matches(error : Ptr[GError], domain : GQuark, code : gint): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gerror.h
  */
  def g_error_new(domain : GQuark, code : gint, format : Ptr[gchar]): Ptr[GError] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gerror.h
  */
  def g_error_new_literal(domain : GQuark, code : gint, message : Ptr[gchar]): Ptr[GError] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gerror.h
  */
  def g_error_new_valist(domain : GQuark, code : gint, format : Ptr[gchar], args : va_list): Ptr[GError] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_append_to(file : Ptr[GFile], flags : GFileCreateFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GFileOutputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_append_to_async(file : Ptr[GFile], flags : GFileCreateFlags, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_append_to_finish(file : Ptr[GFile], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GFileOutputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_file_attribute_info_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileattribute.h
  */
  def g_file_attribute_info_list_add(list : Ptr[GFileAttributeInfoList], name : CString, `type` : GFileAttributeType, flags : GFileAttributeInfoFlags): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileattribute.h
  */
  def g_file_attribute_info_list_dup(list : Ptr[GFileAttributeInfoList]): Ptr[GFileAttributeInfoList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileattribute.h
  */
  def g_file_attribute_info_list_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileattribute.h
  */
  def g_file_attribute_info_list_lookup(list : Ptr[GFileAttributeInfoList], name : CString): Ptr[GFileAttributeInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileattribute.h
  */
  def g_file_attribute_info_list_new(): Ptr[GFileAttributeInfoList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileattribute.h
  */
  def g_file_attribute_info_list_ref(list : Ptr[GFileAttributeInfoList]): Ptr[GFileAttributeInfoList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileattribute.h
  */
  def g_file_attribute_info_list_unref(list : Ptr[GFileAttributeInfoList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_attribute_matcher_enumerate_namespace(matcher : Ptr[GFileAttributeMatcher], ns : CString): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_attribute_matcher_enumerate_next(matcher : Ptr[GFileAttributeMatcher]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_attribute_matcher_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_attribute_matcher_matches(matcher : Ptr[GFileAttributeMatcher], attribute : CString): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_attribute_matcher_matches_only(matcher : Ptr[GFileAttributeMatcher], attribute : CString): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_attribute_matcher_new(attributes : CString): Ptr[GFileAttributeMatcher] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_attribute_matcher_ref(matcher : Ptr[GFileAttributeMatcher]): Ptr[GFileAttributeMatcher] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_attribute_matcher_subtract(matcher : Ptr[GFileAttributeMatcher], subtract : Ptr[GFileAttributeMatcher]): Ptr[GFileAttributeMatcher] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_attribute_matcher_to_string(matcher : Ptr[GFileAttributeMatcher]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_attribute_matcher_unref(matcher : Ptr[GFileAttributeMatcher]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_file_attribute_status_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_file_attribute_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_build_attribute_list_for_copy(file : Ptr[GFile], flags : GFileCopyFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_copy(source : Ptr[GFile], destination : Ptr[GFile], flags : GFileCopyFlags, cancellable : Ptr[GCancellable], progress_callback : GFileProgressCallback, progress_callback_data : gpointer, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_copy_async(source : Ptr[GFile], destination : Ptr[GFile], flags : GFileCopyFlags, io_priority : CInt, cancellable : Ptr[GCancellable], progress_callback : GFileProgressCallback, progress_callback_data : gpointer, callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_copy_attributes(source : Ptr[GFile], destination : Ptr[GFile], flags : GFileCopyFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_copy_finish(file : Ptr[GFile], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_file_copy_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_create(file : Ptr[GFile], flags : GFileCreateFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GFileOutputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_create_async(file : Ptr[GFile], flags : GFileCreateFlags, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_create_finish(file : Ptr[GFile], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GFileOutputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_file_create_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_create_readwrite(file : Ptr[GFile], flags : GFileCreateFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GFileIOStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_create_readwrite_async(file : Ptr[GFile], flags : GFileCreateFlags, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_create_readwrite_finish(file : Ptr[GFile], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GFileIOStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_delete(file : Ptr[GFile], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_delete_async(file : Ptr[GFile], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_delete_finish(file : Ptr[GFile], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_dup(file : Ptr[GFile]): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_eject_mountable(file : Ptr[GFile], flags : GMountUnmountFlags, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_eject_mountable_finish(file : Ptr[GFile], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_eject_mountable_with_operation(file : Ptr[GFile], flags : GMountUnmountFlags, mount_operation : Ptr[GMountOperation], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_eject_mountable_with_operation_finish(file : Ptr[GFile], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_enumerate_children(file : Ptr[GFile], attributes : CString, flags : GFileQueryInfoFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GFileEnumerator] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_enumerate_children_async(file : Ptr[GFile], attributes : CString, flags : GFileQueryInfoFlags, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_enumerate_children_finish(file : Ptr[GFile], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GFileEnumerator] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileenumerator.h
  */
  def g_file_enumerator_close(enumerator : Ptr[GFileEnumerator], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileenumerator.h
  */
  def g_file_enumerator_close_async(enumerator : Ptr[GFileEnumerator], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileenumerator.h
  */
  def g_file_enumerator_close_finish(enumerator : Ptr[GFileEnumerator], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileenumerator.h
  */
  def g_file_enumerator_get_child(enumerator : Ptr[GFileEnumerator], info : Ptr[GFileInfo]): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileenumerator.h
  */
  def g_file_enumerator_get_container(enumerator : Ptr[GFileEnumerator]): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileenumerator.h
  */
  def g_file_enumerator_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileenumerator.h
  */
  def g_file_enumerator_has_pending(enumerator : Ptr[GFileEnumerator]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileenumerator.h
  */
  def g_file_enumerator_is_closed(enumerator : Ptr[GFileEnumerator]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileenumerator.h
  */
  def g_file_enumerator_iterate(direnum : Ptr[GFileEnumerator], out_info : Ptr[Ptr[GFileInfo]], out_child : Ptr[Ptr[GFile]], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileenumerator.h
  */
  def g_file_enumerator_next_file(enumerator : Ptr[GFileEnumerator], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GFileInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileenumerator.h
  */
  def g_file_enumerator_next_files_async(enumerator : Ptr[GFileEnumerator], num_files : CInt, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileenumerator.h
  */
  def g_file_enumerator_next_files_finish(enumerator : Ptr[GFileEnumerator], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileenumerator.h
  */
  def g_file_enumerator_set_pending(enumerator : Ptr[GFileEnumerator], pending : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_equal(file1 : Ptr[GFile], file2 : Ptr[GFile]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_file_error_from_errno(err_no : gint): GFileError = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_file_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_find_enclosing_mount(file : Ptr[GFile], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GMount] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_find_enclosing_mount_async(file : Ptr[GFile], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_find_enclosing_mount_finish(file : Ptr[GFile], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GMount] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_get_basename(file : Ptr[GFile]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_get_child(file : Ptr[GFile], name : CString): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_get_child_for_display_name(file : Ptr[GFile], display_name : CString, error : Ptr[Ptr[GError]]): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_file_get_contents(filename : Ptr[gchar], contents : Ptr[Ptr[gchar]], length : Ptr[gsize], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_get_parent(file : Ptr[GFile]): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_get_parse_name(file : Ptr[GFile]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_get_path(file : Ptr[GFile]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_get_relative_path(parent : Ptr[GFile], descendant : Ptr[GFile]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_get_uri(file : Ptr[GFile]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_get_uri_scheme(file : Ptr[GFile]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_has_parent(file : Ptr[GFile], parent : Ptr[GFile]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_has_prefix(file : Ptr[GFile], prefix : Ptr[GFile]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_has_uri_scheme(file : Ptr[GFile], uri_scheme : CString): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_hash(file : gconstpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileicon.h
  */
  def g_file_icon_get_file(icon : Ptr[GFileIcon]): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileicon.h
  */
  def g_file_icon_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileicon.h
  */
  def g_file_icon_new(file : Ptr[GFile]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_clear_status(info : Ptr[GFileInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_copy_into(src_info : Ptr[GFileInfo], dest_info : Ptr[GFileInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_dup(other : Ptr[GFileInfo]): Ptr[GFileInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_access_date_time(info : Ptr[GFileInfo]): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_attribute_as_string(info : Ptr[GFileInfo], attribute : CString): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_attribute_boolean(info : Ptr[GFileInfo], attribute : CString): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_attribute_byte_string(info : Ptr[GFileInfo], attribute : CString): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_attribute_data(info : Ptr[GFileInfo], attribute : CString, `type` : Ptr[GFileAttributeType], value_pp : Ptr[gpointer], status : Ptr[GFileAttributeStatus]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_attribute_int32(info : Ptr[GFileInfo], attribute : CString): gint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_attribute_int64(info : Ptr[GFileInfo], attribute : CString): gint64 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_attribute_object(info : Ptr[GFileInfo], attribute : CString): Ptr[GObject] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_attribute_status(info : Ptr[GFileInfo], attribute : CString): GFileAttributeStatus = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_attribute_string(info : Ptr[GFileInfo], attribute : CString): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_attribute_stringv(info : Ptr[GFileInfo], attribute : CString): Ptr[CString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_attribute_type(info : Ptr[GFileInfo], attribute : CString): GFileAttributeType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_attribute_uint32(info : Ptr[GFileInfo], attribute : CString): guint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_attribute_uint64(info : Ptr[GFileInfo], attribute : CString): guint64 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_content_type(info : Ptr[GFileInfo]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_creation_date_time(info : Ptr[GFileInfo]): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_deletion_date(info : Ptr[GFileInfo]): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_display_name(info : Ptr[GFileInfo]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_edit_name(info : Ptr[GFileInfo]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_etag(info : Ptr[GFileInfo]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_file_type(info : Ptr[GFileInfo]): GFileType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_icon(info : Ptr[GFileInfo]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_is_backup(info : Ptr[GFileInfo]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_is_hidden(info : Ptr[GFileInfo]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_is_symlink(info : Ptr[GFileInfo]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_modification_date_time(info : Ptr[GFileInfo]): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_modification_time(info : Ptr[GFileInfo], result : Ptr[GTimeVal]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_name(info : Ptr[GFileInfo]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_size(info : Ptr[GFileInfo]): goffset = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_sort_order(info : Ptr[GFileInfo]): gint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_symbolic_icon(info : Ptr[GFileInfo]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_symlink_target(info : Ptr[GFileInfo]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_has_attribute(info : Ptr[GFileInfo], attribute : CString): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_has_namespace(info : Ptr[GFileInfo], name_space : CString): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_list_attributes(info : Ptr[GFileInfo], name_space : CString): Ptr[CString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_new(): Ptr[GFileInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_remove_attribute(info : Ptr[GFileInfo], attribute : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_access_date_time(info : Ptr[GFileInfo], atime : Ptr[GDateTime]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_attribute(info : Ptr[GFileInfo], attribute : CString, `type` : GFileAttributeType, value_p : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_attribute_boolean(info : Ptr[GFileInfo], attribute : CString, attr_value : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_attribute_byte_string(info : Ptr[GFileInfo], attribute : CString, attr_value : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_attribute_int32(info : Ptr[GFileInfo], attribute : CString, attr_value : gint32): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_attribute_int64(info : Ptr[GFileInfo], attribute : CString, attr_value : gint64): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_attribute_mask(info : Ptr[GFileInfo], mask : Ptr[GFileAttributeMatcher]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_attribute_object(info : Ptr[GFileInfo], attribute : CString, attr_value : Ptr[GObject]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_attribute_status(info : Ptr[GFileInfo], attribute : CString, status : GFileAttributeStatus): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_attribute_string(info : Ptr[GFileInfo], attribute : CString, attr_value : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_attribute_stringv(info : Ptr[GFileInfo], attribute : CString, attr_value : Ptr[CString]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_attribute_uint32(info : Ptr[GFileInfo], attribute : CString, attr_value : guint32): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_attribute_uint64(info : Ptr[GFileInfo], attribute : CString, attr_value : guint64): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_content_type(info : Ptr[GFileInfo], content_type : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_creation_date_time(info : Ptr[GFileInfo], creation_time : Ptr[GDateTime]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_display_name(info : Ptr[GFileInfo], display_name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_edit_name(info : Ptr[GFileInfo], edit_name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_file_type(info : Ptr[GFileInfo], `type` : GFileType): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_icon(info : Ptr[GFileInfo], icon : Ptr[GIcon]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_is_hidden(info : Ptr[GFileInfo], is_hidden : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_is_symlink(info : Ptr[GFileInfo], is_symlink : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_modification_date_time(info : Ptr[GFileInfo], mtime : Ptr[GDateTime]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_modification_time(info : Ptr[GFileInfo], mtime : Ptr[GTimeVal]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_name(info : Ptr[GFileInfo], name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_size(info : Ptr[GFileInfo], size : goffset): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_sort_order(info : Ptr[GFileInfo], sort_order : gint32): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_symbolic_icon(info : Ptr[GFileInfo], icon : Ptr[GIcon]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_set_symlink_target(info : Ptr[GFileInfo], symlink_target : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinfo.h
  */
  def g_file_info_unset_attribute_mask(info : Ptr[GFileInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinputstream.h
  */
  def g_file_input_stream_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinputstream.h
  */
  def g_file_input_stream_query_info(stream : Ptr[GFileInputStream], attributes : CString, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GFileInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinputstream.h
  */
  def g_file_input_stream_query_info_async(stream : Ptr[GFileInputStream], attributes : CString, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileinputstream.h
  */
  def g_file_input_stream_query_info_finish(stream : Ptr[GFileInputStream], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GFileInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileiostream.h
  */
  def g_file_io_stream_get_etag(stream : Ptr[GFileIOStream]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileiostream.h
  */
  def g_file_io_stream_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileiostream.h
  */
  def g_file_io_stream_query_info(stream : Ptr[GFileIOStream], attributes : CString, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GFileInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileiostream.h
  */
  def g_file_io_stream_query_info_async(stream : Ptr[GFileIOStream], attributes : CString, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileiostream.h
  */
  def g_file_io_stream_query_info_finish(stream : Ptr[GFileIOStream], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GFileInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_is_native(file : Ptr[GFile]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_load_bytes(file : Ptr[GFile], cancellable : Ptr[GCancellable], etag_out : Ptr[Ptr[gchar]], error : Ptr[Ptr[GError]]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_load_bytes_async(file : Ptr[GFile], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_load_bytes_finish(file : Ptr[GFile], result : Ptr[GAsyncResult], etag_out : Ptr[Ptr[gchar]], error : Ptr[Ptr[GError]]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_load_contents(file : Ptr[GFile], cancellable : Ptr[GCancellable], contents : Ptr[CString], length : Ptr[gsize], etag_out : Ptr[CString], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_load_contents_async(file : Ptr[GFile], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_load_contents_finish(file : Ptr[GFile], res : Ptr[GAsyncResult], contents : Ptr[CString], length : Ptr[gsize], etag_out : Ptr[CString], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_load_partial_contents_async(file : Ptr[GFile], cancellable : Ptr[GCancellable], read_more_callback : GFileReadMoreCallback, callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_load_partial_contents_finish(file : Ptr[GFile], res : Ptr[GAsyncResult], contents : Ptr[CString], length : Ptr[gsize], etag_out : Ptr[CString], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_make_directory(file : Ptr[GFile], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_make_directory_async(file : Ptr[GFile], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_make_directory_finish(file : Ptr[GFile], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_make_directory_with_parents(file : Ptr[GFile], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_make_symbolic_link(file : Ptr[GFile], symlink_value : CString, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_measure_disk_usage(file : Ptr[GFile], flags : GFileMeasureFlags, cancellable : Ptr[GCancellable], progress_callback : GFileMeasureProgressCallback, progress_data : gpointer, disk_usage : Ptr[guint64], num_dirs : Ptr[guint64], num_files : Ptr[guint64], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_measure_disk_usage_async(file : Ptr[GFile], flags : GFileMeasureFlags, io_priority : gint, cancellable : Ptr[GCancellable], progress_callback : GFileMeasureProgressCallback, progress_data : gpointer, callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_measure_disk_usage_finish(file : Ptr[GFile], result : Ptr[GAsyncResult], disk_usage : Ptr[guint64], num_dirs : Ptr[guint64], num_files : Ptr[guint64], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_file_measure_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_monitor(file : Ptr[GFile], flags : GFileMonitorFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GFileMonitor] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfilemonitor.h
  */
  def g_file_monitor_cancel(monitor : Ptr[GFileMonitor]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_monitor_directory(file : Ptr[GFile], flags : GFileMonitorFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GFileMonitor] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfilemonitor.h
  */
  def g_file_monitor_emit_event(monitor : Ptr[GFileMonitor], child : Ptr[GFile], other_file : Ptr[GFile], event_type : GFileMonitorEvent): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_file_monitor_event_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_monitor_file(file : Ptr[GFile], flags : GFileMonitorFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GFileMonitor] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_file_monitor_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfilemonitor.h
  */
  def g_file_monitor_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfilemonitor.h
  */
  def g_file_monitor_is_cancelled(monitor : Ptr[GFileMonitor]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfilemonitor.h
  */
  def g_file_monitor_set_rate_limit(monitor : Ptr[GFileMonitor], limit_msecs : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_mount_enclosing_volume(location : Ptr[GFile], flags : GMountMountFlags, mount_operation : Ptr[GMountOperation], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_mount_enclosing_volume_finish(location : Ptr[GFile], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_mount_mountable(file : Ptr[GFile], flags : GMountMountFlags, mount_operation : Ptr[GMountOperation], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_mount_mountable_finish(file : Ptr[GFile], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_move(source : Ptr[GFile], destination : Ptr[GFile], flags : GFileCopyFlags, cancellable : Ptr[GCancellable], progress_callback : GFileProgressCallback, progress_callback_data : gpointer, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_move_async(source : Ptr[GFile], destination : Ptr[GFile], flags : GFileCopyFlags, io_priority : CInt, cancellable : Ptr[GCancellable], progress_callback : GFileProgressCallback, progress_callback_data : gpointer, callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_move_finish(file : Ptr[GFile], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_new_build_filename(first_element : Ptr[gchar]): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_new_for_commandline_arg(arg : CString): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_new_for_commandline_arg_and_cwd(arg : Ptr[gchar], cwd : Ptr[gchar]): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_new_for_path(path : CString): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_new_for_uri(uri : CString): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_new_tmp(tmpl : CString, iostream : Ptr[Ptr[GFileIOStream]], error : Ptr[Ptr[GError]]): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_open_readwrite(file : Ptr[GFile], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GFileIOStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_open_readwrite_async(file : Ptr[GFile], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_open_readwrite_finish(file : Ptr[GFile], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GFileIOStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_file_open_tmp(tmpl : Ptr[gchar], name_used : Ptr[Ptr[gchar]], error : Ptr[Ptr[GError]]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileoutputstream.h
  */
  def g_file_output_stream_get_etag(stream : Ptr[GFileOutputStream]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileoutputstream.h
  */
  def g_file_output_stream_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileoutputstream.h
  */
  def g_file_output_stream_query_info(stream : Ptr[GFileOutputStream], attributes : CString, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GFileInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileoutputstream.h
  */
  def g_file_output_stream_query_info_async(stream : Ptr[GFileOutputStream], attributes : CString, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfileoutputstream.h
  */
  def g_file_output_stream_query_info_finish(stream : Ptr[GFileOutputStream], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GFileInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_parse_name(parse_name : CString): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_peek_path(file : Ptr[GFile]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_poll_mountable(file : Ptr[GFile], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_poll_mountable_finish(file : Ptr[GFile], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_query_default_handler(file : Ptr[GFile], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GAppInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_query_default_handler_async(file : Ptr[GFile], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_query_default_handler_finish(file : Ptr[GFile], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GAppInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_query_exists(file : Ptr[GFile], cancellable : Ptr[GCancellable]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_query_file_type(file : Ptr[GFile], flags : GFileQueryInfoFlags, cancellable : Ptr[GCancellable]): GFileType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_query_filesystem_info(file : Ptr[GFile], attributes : CString, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GFileInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_query_filesystem_info_async(file : Ptr[GFile], attributes : CString, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_query_filesystem_info_finish(file : Ptr[GFile], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GFileInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_query_info(file : Ptr[GFile], attributes : CString, flags : GFileQueryInfoFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GFileInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_query_info_async(file : Ptr[GFile], attributes : CString, flags : GFileQueryInfoFlags, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_query_info_finish(file : Ptr[GFile], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GFileInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_file_query_info_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_query_settable_attributes(file : Ptr[GFile], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GFileAttributeInfoList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_query_writable_namespaces(file : Ptr[GFile], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GFileAttributeInfoList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_read(file : Ptr[GFile], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GFileInputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_read_async(file : Ptr[GFile], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_read_finish(file : Ptr[GFile], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GFileInputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_file_read_link(filename : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_replace(file : Ptr[GFile], etag : CString, make_backup : gboolean, flags : GFileCreateFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GFileOutputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_replace_async(file : Ptr[GFile], etag : CString, make_backup : gboolean, flags : GFileCreateFlags, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_replace_contents(file : Ptr[GFile], contents : CString, length : gsize, etag : CString, make_backup : gboolean, flags : GFileCreateFlags, new_etag : Ptr[CString], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_replace_contents_async(file : Ptr[GFile], contents : CString, length : gsize, etag : CString, make_backup : gboolean, flags : GFileCreateFlags, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_replace_contents_bytes_async(file : Ptr[GFile], contents : Ptr[GBytes], etag : CString, make_backup : gboolean, flags : GFileCreateFlags, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_replace_contents_finish(file : Ptr[GFile], res : Ptr[GAsyncResult], new_etag : Ptr[CString], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_replace_finish(file : Ptr[GFile], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GFileOutputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_replace_readwrite(file : Ptr[GFile], etag : CString, make_backup : gboolean, flags : GFileCreateFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GFileIOStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_replace_readwrite_async(file : Ptr[GFile], etag : CString, make_backup : gboolean, flags : GFileCreateFlags, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_replace_readwrite_finish(file : Ptr[GFile], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GFileIOStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_resolve_relative_path(file : Ptr[GFile], relative_path : CString): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_set_attribute(file : Ptr[GFile], attribute : CString, `type` : GFileAttributeType, value_p : gpointer, flags : GFileQueryInfoFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_set_attribute_byte_string(file : Ptr[GFile], attribute : CString, value : CString, flags : GFileQueryInfoFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_set_attribute_int32(file : Ptr[GFile], attribute : CString, value : gint32, flags : GFileQueryInfoFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_set_attribute_int64(file : Ptr[GFile], attribute : CString, value : gint64, flags : GFileQueryInfoFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_set_attribute_string(file : Ptr[GFile], attribute : CString, value : CString, flags : GFileQueryInfoFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_set_attribute_uint32(file : Ptr[GFile], attribute : CString, value : guint32, flags : GFileQueryInfoFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_set_attribute_uint64(file : Ptr[GFile], attribute : CString, value : guint64, flags : GFileQueryInfoFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_set_attributes_async(file : Ptr[GFile], info : Ptr[GFileInfo], flags : GFileQueryInfoFlags, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_set_attributes_finish(file : Ptr[GFile], result : Ptr[GAsyncResult], info : Ptr[Ptr[GFileInfo]], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_set_attributes_from_info(file : Ptr[GFile], info : Ptr[GFileInfo], flags : GFileQueryInfoFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_file_set_contents(filename : Ptr[gchar], contents : Ptr[gchar], length : gssize, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_file_set_contents_full(filename : Ptr[gchar], contents : Ptr[gchar], length : gssize, flags : GFileSetContentsFlags, mode : CInt, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_set_display_name(file : Ptr[GFile], display_name : CString, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_set_display_name_async(file : Ptr[GFile], display_name : CString, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_set_display_name_finish(file : Ptr[GFile], res : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_start_mountable(file : Ptr[GFile], flags : GDriveStartFlags, start_operation : Ptr[GMountOperation], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_start_mountable_finish(file : Ptr[GFile], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_stop_mountable(file : Ptr[GFile], flags : GMountUnmountFlags, mount_operation : Ptr[GMountOperation], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_stop_mountable_finish(file : Ptr[GFile], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_supports_thread_contexts(file : Ptr[GFile]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_file_test(filename : Ptr[gchar], test : GFileTest): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_trash(file : Ptr[GFile], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_trash_async(file : Ptr[GFile], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_trash_finish(file : Ptr[GFile], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_file_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_unmount_mountable(file : Ptr[GFile], flags : GMountUnmountFlags, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_unmount_mountable_finish(file : Ptr[GFile], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_unmount_mountable_with_operation(file : Ptr[GFile], flags : GMountUnmountFlags, mount_operation : Ptr[GMountOperation], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfile.h
  */
  def g_file_unmount_mountable_with_operation_finish(file : Ptr[GFile], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfilenamecompleter.h
  */
  def g_filename_completer_get_completion_suffix(completer : Ptr[GFilenameCompleter], initial_text : CString): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfilenamecompleter.h
  */
  def g_filename_completer_get_completions(completer : Ptr[GFilenameCompleter], initial_text : CString): Ptr[CString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfilenamecompleter.h
  */
  def g_filename_completer_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfilenamecompleter.h
  */
  def g_filename_completer_new(): Ptr[GFilenameCompleter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfilenamecompleter.h
  */
  def g_filename_completer_set_dirs_only(completer : Ptr[GFilenameCompleter], dirs_only : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gconvert.h
  */
  def g_filename_display_basename(filename : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gconvert.h
  */
  def g_filename_display_name(filename : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gconvert.h
  */
  def g_filename_from_uri(uri : Ptr[gchar], hostname : Ptr[Ptr[gchar]], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gconvert.h
  */
  def g_filename_from_utf8(utf8string : Ptr[gchar], len : gssize, bytes_read : Ptr[gsize], bytes_written : Ptr[gsize], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gconvert.h
  */
  def g_filename_to_uri(filename : Ptr[gchar], hostname : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gconvert.h
  */
  def g_filename_to_utf8(opsysstring : Ptr[gchar], len : gssize, bytes_read : Ptr[gsize], bytes_written : Ptr[gsize], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_filesystem_preview_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfilterinputstream.h
  */
  def g_filter_input_stream_get_base_stream(stream : Ptr[GFilterInputStream]): Ptr[GInputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfilterinputstream.h
  */
  def g_filter_input_stream_get_close_base_stream(stream : Ptr[GFilterInputStream]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfilterinputstream.h
  */
  def g_filter_input_stream_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfilterinputstream.h
  */
  def g_filter_input_stream_set_close_base_stream(stream : Ptr[GFilterInputStream], close_base : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfilteroutputstream.h
  */
  def g_filter_output_stream_get_base_stream(stream : Ptr[GFilterOutputStream]): Ptr[GOutputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfilteroutputstream.h
  */
  def g_filter_output_stream_get_close_base_stream(stream : Ptr[GFilterOutputStream]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfilteroutputstream.h
  */
  def g_filter_output_stream_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gfilteroutputstream.h
  */
  def g_filter_output_stream_set_close_base_stream(stream : Ptr[GFilterOutputStream], close_base : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_find_program_in_path(program : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
  */
  def g_flags_complete_type_info(g_flags_type : GType, info : Ptr[GTypeInfo], const_values : Ptr[GFlagsValue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
  */
  def g_flags_get_first_value(flags_class : Ptr[GFlagsClass], value : guint): Ptr[GFlagsValue] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
  */
  def g_flags_get_value_by_name(flags_class : Ptr[GFlagsClass], name : Ptr[gchar]): Ptr[GFlagsValue] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
  */
  def g_flags_get_value_by_nick(flags_class : Ptr[GFlagsClass], nick : Ptr[gchar]): Ptr[GFlagsValue] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
  */
  def g_flags_register_static(name : Ptr[gchar], const_static_values : Ptr[GFlagsValue]): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
  */
  def g_flags_to_string(flags_type : GType, value : guint): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_format_size(size : guint64): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_format_size_for_display(size : goffset): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_format_size_full(size : guint64, flags : GFormatSizeFlags): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_free(mem : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_get_application_name(): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gcharset.h
  */
  def g_get_charset(charset : Ptr[CString]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gcharset.h
  */
  def g_get_codeset(): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gcharset.h
  */
  def g_get_console_charset(charset : Ptr[CString]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_get_current_dir(): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_get_current_time(result : Ptr[GTimeVal]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/genviron.h
  */
  def g_get_environ(): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gconvert.h
  */
  def g_get_filename_charsets(filename_charsets : Ptr[Ptr[Ptr[gchar]]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_get_home_dir(): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_get_host_name(): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gcharset.h
  */
  def g_get_language_names(): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gcharset.h
  */
  def g_get_language_names_with_category(category_name : Ptr[gchar]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gcharset.h
  */
  def g_get_locale_variants(locale : Ptr[gchar]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_get_monotonic_time(): gint64 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_get_num_processors(): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_get_os_info(key_name : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_get_prgname(): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_get_real_name(): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_get_real_time(): gint64 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_get_system_config_dirs(): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_get_system_data_dirs(): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_get_tmp_dir(): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_get_user_cache_dir(): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_get_user_config_dir(): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_get_user_data_dir(): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_get_user_name(): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_get_user_runtime_dir(): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_get_user_special_dir(directory : GUserDirectory): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_get_user_state_dir(): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/genviron.h
  */
  def g_getenv(variable : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_gstring_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_gtype_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_add(hash_table : Ptr[GHashTable], key : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_contains(hash_table : Ptr[GHashTable], key : gconstpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_destroy(hash_table : Ptr[GHashTable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_find(hash_table : Ptr[GHashTable], predicate : GHRFunc, user_data : gpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_foreach(hash_table : Ptr[GHashTable], func : GHFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_foreach_remove(hash_table : Ptr[GHashTable], func : GHRFunc, user_data : gpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_foreach_steal(hash_table : Ptr[GHashTable], func : GHRFunc, user_data : gpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_get_keys(hash_table : Ptr[GHashTable]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_get_keys_as_array(hash_table : Ptr[GHashTable], length : Ptr[guint]): Ptr[gpointer] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_hash_table_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_get_values(hash_table : Ptr[GHashTable]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_insert(hash_table : Ptr[GHashTable], key : gpointer, value : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_iter_get_hash_table(iter : Ptr[GHashTableIter]): Ptr[GHashTable] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_iter_init(iter : Ptr[GHashTableIter], hash_table : Ptr[GHashTable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_iter_next(iter : Ptr[GHashTableIter], key : Ptr[gpointer], value : Ptr[gpointer]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_iter_remove(iter : Ptr[GHashTableIter]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_iter_replace(iter : Ptr[GHashTableIter], value : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_iter_steal(iter : Ptr[GHashTableIter]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_lookup(hash_table : Ptr[GHashTable], key : gconstpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_lookup_extended(hash_table : Ptr[GHashTable], lookup_key : gconstpointer, orig_key : Ptr[gpointer], value : Ptr[gpointer]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_new(hash_func : GHashFunc, key_equal_func : GEqualFunc): Ptr[GHashTable] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_new_full(hash_func : GHashFunc, key_equal_func : GEqualFunc, key_destroy_func : GDestroyNotify, value_destroy_func : GDestroyNotify): Ptr[GHashTable] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_new_similar(other_hash_table : Ptr[GHashTable]): Ptr[GHashTable] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_ref(hash_table : Ptr[GHashTable]): Ptr[GHashTable] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_remove(hash_table : Ptr[GHashTable], key : gconstpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_remove_all(hash_table : Ptr[GHashTable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_replace(hash_table : Ptr[GHashTable], key : gpointer, value : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_size(hash_table : Ptr[GHashTable]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_steal(hash_table : Ptr[GHashTable], key : gconstpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_steal_all(hash_table : Ptr[GHashTable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_steal_extended(hash_table : Ptr[GHashTable], lookup_key : gconstpointer, stolen_key : Ptr[gpointer], stolen_value : Ptr[gpointer]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_hash_table_unref(hash_table : Ptr[GHashTable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghmac.h
  */
  def g_hmac_copy(hmac : Ptr[GHmac]): Ptr[GHmac] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghmac.h
  */
  def g_hmac_get_digest(hmac : Ptr[GHmac], buffer : Ptr[guint8], digest_len : Ptr[gsize]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghmac.h
  */
  def g_hmac_get_string(hmac : Ptr[GHmac]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghmac.h
  */
  def g_hmac_new(digest_type : GChecksumType, key : Ptr[guchar], key_len : gsize): Ptr[GHmac] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghmac.h
  */
  def g_hmac_ref(hmac : Ptr[GHmac]): Ptr[GHmac] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghmac.h
  */
  def g_hmac_unref(hmac : Ptr[GHmac]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghmac.h
  */
  def g_hmac_update(hmac : Ptr[GHmac], data : Ptr[guchar], length : gssize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_alloc(hook_list : Ptr[GHookList]): Ptr[GHook] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_compare_ids(new_hook : Ptr[GHook], sibling : Ptr[GHook]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_destroy(hook_list : Ptr[GHookList], hook_id : gulong): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_destroy_link(hook_list : Ptr[GHookList], hook : Ptr[GHook]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_find(hook_list : Ptr[GHookList], need_valids : gboolean, func : GHookFindFunc, data : gpointer): Ptr[GHook] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_find_data(hook_list : Ptr[GHookList], need_valids : gboolean, data : gpointer): Ptr[GHook] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_find_func(hook_list : Ptr[GHookList], need_valids : gboolean, func : gpointer): Ptr[GHook] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_find_func_data(hook_list : Ptr[GHookList], need_valids : gboolean, func : gpointer, data : gpointer): Ptr[GHook] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_first_valid(hook_list : Ptr[GHookList], may_be_in_call : gboolean): Ptr[GHook] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_free(hook_list : Ptr[GHookList], hook : Ptr[GHook]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_get(hook_list : Ptr[GHookList], hook_id : gulong): Ptr[GHook] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_insert_before(hook_list : Ptr[GHookList], sibling : Ptr[GHook], hook : Ptr[GHook]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_insert_sorted(hook_list : Ptr[GHookList], hook : Ptr[GHook], func : GHookCompareFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_list_clear(hook_list : Ptr[GHookList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_list_init(hook_list : Ptr[GHookList], hook_size : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_list_invoke(hook_list : Ptr[GHookList], may_recurse : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_list_invoke_check(hook_list : Ptr[GHookList], may_recurse : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_list_marshal(hook_list : Ptr[GHookList], may_recurse : gboolean, marshaller : GHookMarshaller, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_list_marshal_check(hook_list : Ptr[GHookList], may_recurse : gboolean, marshaller : GHookCheckMarshaller, marshal_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_next_valid(hook_list : Ptr[GHookList], hook : Ptr[GHook], may_be_in_call : gboolean): Ptr[GHook] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_prepend(hook_list : Ptr[GHookList], hook : Ptr[GHook]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_ref(hook_list : Ptr[GHookList], hook : Ptr[GHook]): Ptr[GHook] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghook.h
  */
  def g_hook_unref(hook_list : Ptr[GHookList], hook : Ptr[GHook]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghostutils.h
  */
  def g_hostname_is_ascii_encoded(hostname : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghostutils.h
  */
  def g_hostname_is_ip_address(hostname : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghostutils.h
  */
  def g_hostname_is_non_ascii(hostname : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghostutils.h
  */
  def g_hostname_to_ascii(hostname : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghostutils.h
  */
  def g_hostname_to_unicode(hostname : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gicon.h
  */
  def g_icon_deserialize(value : Ptr[GVariant]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gicon.h
  */
  def g_icon_equal(icon1 : Ptr[GIcon], icon2 : Ptr[GIcon]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gicon.h
  */
  def g_icon_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gicon.h
  */
  def g_icon_hash(icon : gconstpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gicon.h
  */
  def g_icon_new_for_string(str : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gicon.h
  */
  def g_icon_serialize(icon : Ptr[GIcon]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gicon.h
  */
  def g_icon_to_string(icon : Ptr[GIcon]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gconvert.h
  */
  def g_iconv(converter : GIConv, inbuf : Ptr[Ptr[gchar]], inbytes_left : Ptr[gsize], outbuf : Ptr[Ptr[gchar]], outbytes_left : Ptr[gsize]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gconvert.h
  */
  def g_iconv_close(converter : GIConv): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gconvert.h
  */
  def g_iconv_open(to_codeset : Ptr[gchar], from_codeset : Ptr[gchar]): GIConv = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_idle_add(function : GSourceFunc, data : gpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_idle_add_full(priority : gint, function : GSourceFunc, data : gpointer, notify : GDestroyNotify): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_idle_remove_by_data(data : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_idle_source_new(): Ptr[GSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
  */
  def g_inet_address_equal(address : Ptr[GInetAddress], other_address : Ptr[GInetAddress]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
  */
  def g_inet_address_get_family(address : Ptr[GInetAddress]): GSocketFamily = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
  */
  def g_inet_address_get_is_any(address : Ptr[GInetAddress]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
  */
  def g_inet_address_get_is_link_local(address : Ptr[GInetAddress]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
  */
  def g_inet_address_get_is_loopback(address : Ptr[GInetAddress]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
  */
  def g_inet_address_get_is_mc_global(address : Ptr[GInetAddress]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
  */
  def g_inet_address_get_is_mc_link_local(address : Ptr[GInetAddress]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
  */
  def g_inet_address_get_is_mc_node_local(address : Ptr[GInetAddress]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
  */
  def g_inet_address_get_is_mc_org_local(address : Ptr[GInetAddress]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
  */
  def g_inet_address_get_is_mc_site_local(address : Ptr[GInetAddress]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
  */
  def g_inet_address_get_is_multicast(address : Ptr[GInetAddress]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
  */
  def g_inet_address_get_is_site_local(address : Ptr[GInetAddress]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
  */
  def g_inet_address_get_native_size(address : Ptr[GInetAddress]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
  */
  def g_inet_address_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddressmask.h
  */
  def g_inet_address_mask_equal(mask : Ptr[GInetAddressMask], mask2 : Ptr[GInetAddressMask]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddressmask.h
  */
  def g_inet_address_mask_get_address(mask : Ptr[GInetAddressMask]): Ptr[GInetAddress] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddressmask.h
  */
  def g_inet_address_mask_get_family(mask : Ptr[GInetAddressMask]): GSocketFamily = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddressmask.h
  */
  def g_inet_address_mask_get_length(mask : Ptr[GInetAddressMask]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddressmask.h
  */
  def g_inet_address_mask_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddressmask.h
  */
  def g_inet_address_mask_matches(mask : Ptr[GInetAddressMask], address : Ptr[GInetAddress]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddressmask.h
  */
  def g_inet_address_mask_new(addr : Ptr[GInetAddress], length : guint, error : Ptr[Ptr[GError]]): Ptr[GInetAddressMask] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddressmask.h
  */
  def g_inet_address_mask_new_from_string(mask_string : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[GInetAddressMask] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddressmask.h
  */
  def g_inet_address_mask_to_string(mask : Ptr[GInetAddressMask]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
  */
  def g_inet_address_new_any(family : GSocketFamily): Ptr[GInetAddress] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
  */
  def g_inet_address_new_from_bytes(bytes : Ptr[guint8], family : GSocketFamily): Ptr[GInetAddress] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
  */
  def g_inet_address_new_from_string(string : Ptr[gchar]): Ptr[GInetAddress] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
  */
  def g_inet_address_new_loopback(family : GSocketFamily): Ptr[GInetAddress] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
  */
  def g_inet_address_to_bytes(address : Ptr[GInetAddress]): Ptr[guint8] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetaddress.h
  */
  def g_inet_address_to_string(address : Ptr[GInetAddress]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetsocketaddress.h
  */
  def g_inet_socket_address_get_address(address : Ptr[GInetSocketAddress]): Ptr[GInetAddress] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetsocketaddress.h
  */
  def g_inet_socket_address_get_flowinfo(address : Ptr[GInetSocketAddress]): guint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetsocketaddress.h
  */
  def g_inet_socket_address_get_port(address : Ptr[GInetSocketAddress]): guint16 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetsocketaddress.h
  */
  def g_inet_socket_address_get_scope_id(address : Ptr[GInetSocketAddress]): guint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetsocketaddress.h
  */
  def g_inet_socket_address_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetsocketaddress.h
  */
  def g_inet_socket_address_new(address : Ptr[GInetAddress], port : guint16): Ptr[GSocketAddress] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginetsocketaddress.h
  */
  def g_inet_socket_address_new_from_string(address : CString, port : guint): Ptr[GSocketAddress] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginitable.h
  */
  def g_initable_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginitable.h
  */
  def g_initable_init(initable : Ptr[GInitable], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginitable.h
  */
  def g_initable_new(object_type : GType, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]], first_property_name : Ptr[gchar]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginitable.h
  */
  def g_initable_new_valist(object_type : GType, first_property_name : Ptr[gchar], var_args : va_list, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GObject] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginitable.h
  */
  def g_initable_newv(object_type : GType, n_parameters : guint, parameters : Ptr[GParameter], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gpointer = extern

  /**
   * GInitiallyUnowned:
  
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_initially_unowned_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
  */
  def g_input_stream_clear_pending(stream : Ptr[GInputStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
  */
  def g_input_stream_close(stream : Ptr[GInputStream], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
  */
  def g_input_stream_close_async(stream : Ptr[GInputStream], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
  */
  def g_input_stream_close_finish(stream : Ptr[GInputStream], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
  */
  def g_input_stream_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
  */
  def g_input_stream_has_pending(stream : Ptr[GInputStream]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
  */
  def g_input_stream_is_closed(stream : Ptr[GInputStream]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
  */
  def g_input_stream_read(stream : Ptr[GInputStream], buffer : Ptr[Byte], count : gsize, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
  */
  def g_input_stream_read_all(stream : Ptr[GInputStream], buffer : Ptr[Byte], count : gsize, bytes_read : Ptr[gsize], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
  */
  def g_input_stream_read_all_async(stream : Ptr[GInputStream], buffer : Ptr[Byte], count : gsize, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
  */
  def g_input_stream_read_all_finish(stream : Ptr[GInputStream], result : Ptr[GAsyncResult], bytes_read : Ptr[gsize], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
  */
  def g_input_stream_read_async(stream : Ptr[GInputStream], buffer : Ptr[Byte], count : gsize, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
  */
  def g_input_stream_read_bytes(stream : Ptr[GInputStream], count : gsize, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
  */
  def g_input_stream_read_bytes_async(stream : Ptr[GInputStream], count : gsize, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
  */
  def g_input_stream_read_bytes_finish(stream : Ptr[GInputStream], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
  */
  def g_input_stream_read_finish(stream : Ptr[GInputStream], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
  */
  def g_input_stream_set_pending(stream : Ptr[GInputStream], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
  */
  def g_input_stream_skip(stream : Ptr[GInputStream], count : gsize, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
  */
  def g_input_stream_skip_async(stream : Ptr[GInputStream], count : gsize, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/ginputstream.h
  */
  def g_input_stream_skip_finish(stream : Ptr[GInputStream], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_int64_equal(v1 : gconstpointer, v2 : gconstpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_int64_hash(v : gconstpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_int_equal(v1 : gconstpointer, v2 : gconstpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_int_hash(v : gconstpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gquark.h
  */
  def g_intern_static_string(string : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gquark.h
  */
  def g_intern_string(string : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_add_watch(channel : Ptr[GIOChannel], condition : GIOCondition, func : GIOFunc, user_data : gpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_add_watch_full(channel : Ptr[GIOChannel], priority : gint, condition : GIOCondition, func : GIOFunc, user_data : gpointer, notify : GDestroyNotify): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_close(channel : Ptr[GIOChannel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_error_from_errno(en : gint): GIOChannelError = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_flush(channel : Ptr[GIOChannel], error : Ptr[Ptr[GError]]): GIOStatus = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_get_buffer_condition(channel : Ptr[GIOChannel]): GIOCondition = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_get_buffer_size(channel : Ptr[GIOChannel]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_get_buffered(channel : Ptr[GIOChannel]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_get_close_on_unref(channel : Ptr[GIOChannel]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_get_encoding(channel : Ptr[GIOChannel]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_get_flags(channel : Ptr[GIOChannel]): GIOFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_get_line_term(channel : Ptr[GIOChannel], length : Ptr[gint]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_io_channel_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_init(channel : Ptr[GIOChannel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_new_file(filename : Ptr[gchar], mode : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[GIOChannel] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_read(channel : Ptr[GIOChannel], buf : Ptr[gchar], count : gsize, bytes_read : Ptr[gsize]): GIOError = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_read_chars(channel : Ptr[GIOChannel], buf : Ptr[gchar], count : gsize, bytes_read : Ptr[gsize], error : Ptr[Ptr[GError]]): GIOStatus = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_read_line(channel : Ptr[GIOChannel], str_return : Ptr[Ptr[gchar]], length : Ptr[gsize], terminator_pos : Ptr[gsize], error : Ptr[Ptr[GError]]): GIOStatus = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_read_line_string(channel : Ptr[GIOChannel], buffer : Ptr[GString], terminator_pos : Ptr[gsize], error : Ptr[Ptr[GError]]): GIOStatus = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_read_to_end(channel : Ptr[GIOChannel], str_return : Ptr[Ptr[gchar]], length : Ptr[gsize], error : Ptr[Ptr[GError]]): GIOStatus = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_read_unichar(channel : Ptr[GIOChannel], thechar : Ptr[gunichar], error : Ptr[Ptr[GError]]): GIOStatus = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_ref(channel : Ptr[GIOChannel]): Ptr[GIOChannel] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_seek(channel : Ptr[GIOChannel], offset : gint64, `type` : GSeekType): GIOError = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_seek_position(channel : Ptr[GIOChannel], offset : gint64, `type` : GSeekType, error : Ptr[Ptr[GError]]): GIOStatus = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_set_buffer_size(channel : Ptr[GIOChannel], size : gsize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_set_buffered(channel : Ptr[GIOChannel], buffered : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_set_close_on_unref(channel : Ptr[GIOChannel], do_close : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_set_encoding(channel : Ptr[GIOChannel], encoding : Ptr[gchar], error : Ptr[Ptr[GError]]): GIOStatus = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_set_flags(channel : Ptr[GIOChannel], flags : GIOFlags, error : Ptr[Ptr[GError]]): GIOStatus = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_set_line_term(channel : Ptr[GIOChannel], line_term : Ptr[gchar], length : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_shutdown(channel : Ptr[GIOChannel], flush : gboolean, err : Ptr[Ptr[GError]]): GIOStatus = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_unix_get_fd(channel : Ptr[GIOChannel]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_unix_new(fd : CInt): Ptr[GIOChannel] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_unref(channel : Ptr[GIOChannel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_write(channel : Ptr[GIOChannel], buf : Ptr[gchar], count : gsize, bytes_written : Ptr[gsize]): GIOError = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_write_chars(channel : Ptr[GIOChannel], buf : Ptr[gchar], count : gssize, bytes_written : Ptr[gsize], error : Ptr[Ptr[GError]]): GIOStatus = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_channel_write_unichar(channel : Ptr[GIOChannel], thechar : gunichar, error : Ptr[Ptr[GError]]): GIOStatus = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_io_condition_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/giochannel.h
  */
  def g_io_create_watch(channel : Ptr[GIOChannel], condition : GIOCondition): Ptr[GSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_io_error_enum_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioerror.h
  */
  def g_io_error_from_errno(err_no : gint): GIOErrorEnum = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioerror.h
  */
  def g_io_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_extension_get_name(extension : Ptr[GIOExtension]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_extension_get_priority(extension : Ptr[GIOExtension]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_extension_get_type(extension : Ptr[GIOExtension]): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_extension_point_get_extension_by_name(extension_point : Ptr[GIOExtensionPoint], name : CString): Ptr[GIOExtension] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_extension_point_get_extensions(extension_point : Ptr[GIOExtensionPoint]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_extension_point_get_required_type(extension_point : Ptr[GIOExtensionPoint]): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_extension_point_implement(extension_point_name : CString, `type` : GType, extension_name : CString, priority : gint): Ptr[GIOExtension] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_extension_point_lookup(name : CString): Ptr[GIOExtensionPoint] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_extension_point_register(name : CString): Ptr[GIOExtensionPoint] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_extension_point_set_required_type(extension_point : Ptr[GIOExtensionPoint], `type` : GType): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_extension_ref_class(extension : Ptr[GIOExtension]): Ptr[GTypeClass] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_module_get_type(): GType = extern

  /**
   * g_io_module_load: (skip) : a #GIOModule.
  
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_module_load(module : Ptr[GIOModule]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_module_new(filename : Ptr[gchar]): Ptr[GIOModule] = extern

  /**
   * g_io_module_query:
  
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_module_query(): Ptr[CString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_module_scope_block(scope : Ptr[GIOModuleScope], basename : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_io_module_scope_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_module_scope_free(scope : Ptr[GIOModuleScope]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_module_scope_new(flags : GIOModuleScopeFlags): Ptr[GIOModuleScope] = extern

  /**
   * g_io_module_unload: (skip) : a #GIOModule.
  
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_module_unload(module : Ptr[GIOModule]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_modules_load_all_in_directory(dirname : Ptr[gchar]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_modules_load_all_in_directory_with_scope(dirname : Ptr[gchar], scope : Ptr[GIOModuleScope]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_modules_scan_all_in_directory(dirname : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giomodule.h
  */
  def g_io_modules_scan_all_in_directory_with_scope(dirname : Ptr[gchar], scope : Ptr[GIOModuleScope]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioscheduler.h
  */
  def g_io_scheduler_cancel_all_jobs(): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioscheduler.h
  */
  def g_io_scheduler_job_send_to_mainloop(job : Ptr[GIOSchedulerJob], func : GSourceFunc, user_data : gpointer, notify : GDestroyNotify): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioscheduler.h
  */
  def g_io_scheduler_job_send_to_mainloop_async(job : Ptr[GIOSchedulerJob], func : GSourceFunc, user_data : gpointer, notify : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioscheduler.h
  */
  def g_io_scheduler_push_job(job_func : GIOSchedulerJobFunc, user_data : gpointer, notify : GDestroyNotify, io_priority : gint, cancellable : Ptr[GCancellable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giostream.h
  */
  def g_io_stream_clear_pending(stream : Ptr[GIOStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giostream.h
  */
  def g_io_stream_close(stream : Ptr[GIOStream], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giostream.h
  */
  def g_io_stream_close_async(stream : Ptr[GIOStream], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giostream.h
  */
  def g_io_stream_close_finish(stream : Ptr[GIOStream], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giostream.h
  */
  def g_io_stream_get_input_stream(stream : Ptr[GIOStream]): Ptr[GInputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giostream.h
  */
  def g_io_stream_get_output_stream(stream : Ptr[GIOStream]): Ptr[GOutputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giostream.h
  */
  def g_io_stream_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giostream.h
  */
  def g_io_stream_has_pending(stream : Ptr[GIOStream]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giostream.h
  */
  def g_io_stream_is_closed(stream : Ptr[GIOStream]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giostream.h
  */
  def g_io_stream_set_pending(stream : Ptr[GIOStream], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giostream.h
  */
  def g_io_stream_splice_async(stream1 : Ptr[GIOStream], stream2 : Ptr[GIOStream], flags : GIOStreamSpliceFlags, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/giostream.h
  */
  def g_io_stream_splice_finish(result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_io_stream_splice_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_free(key_file : Ptr[GKeyFile]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_get_boolean(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_get_boolean_list(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], length : Ptr[gsize], error : Ptr[Ptr[GError]]): Ptr[gboolean] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_get_comment(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_get_double(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], error : Ptr[Ptr[GError]]): gdouble = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_get_double_list(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], length : Ptr[gsize], error : Ptr[Ptr[GError]]): Ptr[gdouble] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_get_groups(key_file : Ptr[GKeyFile], length : Ptr[gsize]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_get_int64(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], error : Ptr[Ptr[GError]]): gint64 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_get_integer(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], error : Ptr[Ptr[GError]]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_get_integer_list(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], length : Ptr[gsize], error : Ptr[Ptr[GError]]): Ptr[gint] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_get_keys(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], length : Ptr[gsize], error : Ptr[Ptr[GError]]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_get_locale_for_key(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], locale : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_get_locale_string(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], locale : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_get_locale_string_list(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], locale : Ptr[gchar], length : Ptr[gsize], error : Ptr[Ptr[GError]]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_get_start_group(key_file : Ptr[GKeyFile]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_get_string(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_get_string_list(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], length : Ptr[gsize], error : Ptr[Ptr[GError]]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_key_file_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_get_uint64(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], error : Ptr[Ptr[GError]]): guint64 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_get_value(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_has_group(key_file : Ptr[GKeyFile], group_name : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_has_key(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_load_from_bytes(key_file : Ptr[GKeyFile], bytes : Ptr[GBytes], flags : GKeyFileFlags, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_load_from_data(key_file : Ptr[GKeyFile], data : Ptr[gchar], length : gsize, flags : GKeyFileFlags, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_load_from_data_dirs(key_file : Ptr[GKeyFile], file : Ptr[gchar], full_path : Ptr[Ptr[gchar]], flags : GKeyFileFlags, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_load_from_dirs(key_file : Ptr[GKeyFile], file : Ptr[gchar], search_dirs : Ptr[Ptr[gchar]], full_path : Ptr[Ptr[gchar]], flags : GKeyFileFlags, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_load_from_file(key_file : Ptr[GKeyFile], file : Ptr[gchar], flags : GKeyFileFlags, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_new(): Ptr[GKeyFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_ref(key_file : Ptr[GKeyFile]): Ptr[GKeyFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_remove_comment(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_remove_group(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_remove_key(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_save_to_file(key_file : Ptr[GKeyFile], filename : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_set_boolean(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], value : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_set_boolean_list(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], list : Ptr[gboolean], length : gsize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_set_comment(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], comment : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_set_double(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], value : gdouble): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_set_double_list(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], list : Ptr[gdouble], length : gsize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_set_int64(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], value : gint64): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_set_integer(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], value : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_set_integer_list(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], list : Ptr[gint], length : gsize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_set_list_separator(key_file : Ptr[GKeyFile], separator : gchar): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_set_locale_string(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], locale : Ptr[gchar], string : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_set_locale_string_list(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], locale : Ptr[gchar], list : Ptr[Ptr[gchar]], length : gsize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_set_string(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], string : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_set_string_list(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], list : Ptr[Ptr[gchar]], length : gsize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_set_uint64(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], value : guint64): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_set_value(key_file : Ptr[GKeyFile], group_name : Ptr[gchar], key : Ptr[gchar], value : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_to_data(key_file : Ptr[GKeyFile], length : Ptr[gsize], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gkeyfile.h
  */
  def g_key_file_unref(key_file : Ptr[GKeyFile]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_alloc(): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_append(list : Ptr[GList], data : gpointer): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_concat(list1 : Ptr[GList], list2 : Ptr[GList]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_copy(list : Ptr[GList]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_copy_deep(list : Ptr[GList], func : GCopyFunc, user_data : gpointer): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_delete_link(list : Ptr[GList], `link_` : Ptr[GList]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_find(list : Ptr[GList], data : gconstpointer): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_find_custom(list : Ptr[GList], data : gconstpointer, func : GCompareFunc): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_first(list : Ptr[GList]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_foreach(list : Ptr[GList], func : GFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_free(list : Ptr[GList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_free_1(list : Ptr[GList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_free_full(list : Ptr[GList], free_func : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_index(list : Ptr[GList], data : gconstpointer): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_insert(list : Ptr[GList], data : gpointer, position : gint): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_insert_before(list : Ptr[GList], sibling : Ptr[GList], data : gpointer): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_insert_before_link(list : Ptr[GList], sibling : Ptr[GList], `link_` : Ptr[GList]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_insert_sorted(list : Ptr[GList], data : gpointer, func : GCompareFunc): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_insert_sorted_with_data(list : Ptr[GList], data : gpointer, func : GCompareDataFunc, user_data : gpointer): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_last(list : Ptr[GList]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_length(list : Ptr[GList]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/glistmodel.h
  */
  def g_list_model_get_item(list : Ptr[GListModel], position : guint): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/glistmodel.h
  */
  def g_list_model_get_item_type(list : Ptr[GListModel]): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/glistmodel.h
  */
  def g_list_model_get_n_items(list : Ptr[GListModel]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/glistmodel.h
  */
  def g_list_model_get_object(list : Ptr[GListModel], position : guint): Ptr[GObject] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/glistmodel.h
  */
  def g_list_model_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/glistmodel.h
  */
  def g_list_model_items_changed(list : Ptr[GListModel], position : guint, removed : guint, added : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_nth(list : Ptr[GList], n : guint): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_nth_data(list : Ptr[GList], n : guint): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_nth_prev(list : Ptr[GList], n : guint): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
  */
  def g_list_pop_allocator(): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_position(list : Ptr[GList], llink : Ptr[GList]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_prepend(list : Ptr[GList], data : gpointer): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
  */
  def g_list_push_allocator(allocator : Ptr[GAllocator]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_remove(list : Ptr[GList], data : gconstpointer): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_remove_all(list : Ptr[GList], data : gconstpointer): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_remove_link(list : Ptr[GList], llink : Ptr[GList]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_reverse(list : Ptr[GList]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_sort(list : Ptr[GList], compare_func : GCompareFunc): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glist.h
  */
  def g_list_sort_with_data(list : Ptr[GList], compare_func : GCompareDataFunc, user_data : gpointer): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def g_list_store_append(store : Ptr[GListStore], item : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def g_list_store_find(store : Ptr[GListStore], item : gpointer, position : Ptr[guint]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def g_list_store_find_with_equal_func(store : Ptr[GListStore], item : gpointer, equal_func : GEqualFunc, position : Ptr[guint]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def g_list_store_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def g_list_store_insert(store : Ptr[GListStore], position : guint, item : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def g_list_store_insert_sorted(store : Ptr[GListStore], item : gpointer, compare_func : GCompareDataFunc, user_data : gpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def g_list_store_new(item_type : GType): Ptr[GListStore] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def g_list_store_remove(store : Ptr[GListStore], position : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def g_list_store_remove_all(store : Ptr[GListStore]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def g_list_store_sort(store : Ptr[GListStore], compare_func : GCompareDataFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def g_list_store_splice(store : Ptr[GListStore], position : guint, n_removals : guint, additions : Ptr[gpointer], n_additions : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/genviron.h
  */
  def g_listenv(): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gloadableicon.h
  */
  def g_loadable_icon_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gloadableicon.h
  */
  def g_loadable_icon_load(icon : Ptr[GLoadableIcon], size : CInt, `type` : Ptr[CString], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GInputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gloadableicon.h
  */
  def g_loadable_icon_load_async(icon : Ptr[GLoadableIcon], size : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gloadableicon.h
  */
  def g_loadable_icon_load_finish(icon : Ptr[GLoadableIcon], res : Ptr[GAsyncResult], `type` : Ptr[CString], error : Ptr[Ptr[GError]]): Ptr[GInputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gconvert.h
  */
  def g_locale_from_utf8(utf8string : Ptr[gchar], len : gssize, bytes_read : Ptr[gsize], bytes_written : Ptr[gsize], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gconvert.h
  */
  def g_locale_to_utf8(opsysstring : Ptr[gchar], len : gssize, bytes_read : Ptr[gsize], bytes_written : Ptr[gsize], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log(log_domain : Ptr[gchar], log_level : GLogLevelFlags, format : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_default_handler(log_domain : Ptr[gchar], log_level : GLogLevelFlags, message : Ptr[gchar], unused_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_get_debug_enabled(): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_remove_handler(log_domain : Ptr[gchar], handler_id : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_set_always_fatal(fatal_mask : GLogLevelFlags): GLogLevelFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_set_debug_enabled(enabled : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_set_default_handler(log_func : GLogFunc, user_data : gpointer): GLogFunc = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_set_fatal_mask(log_domain : Ptr[gchar], fatal_mask : GLogLevelFlags): GLogLevelFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_set_handler(log_domain : Ptr[gchar], log_levels : GLogLevelFlags, log_func : GLogFunc, user_data : gpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_set_handler_full(log_domain : Ptr[gchar], log_levels : GLogLevelFlags, log_func : GLogFunc, user_data : gpointer, destroy : GDestroyNotify): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_set_writer_func(func : GLogWriterFunc, user_data : gpointer, user_data_free : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_structured(log_domain : Ptr[gchar], log_level : GLogLevelFlags): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_structured_array(log_level : GLogLevelFlags, fields : Ptr[GLogField], n_fields : gsize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_structured_standard(log_domain : Ptr[gchar], log_level : GLogLevelFlags, file : Ptr[gchar], line : Ptr[gchar], func : Ptr[gchar], message_format : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_variant(log_domain : Ptr[gchar], log_level : GLogLevelFlags, fields : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_writer_default(log_level : GLogLevelFlags, fields : Ptr[GLogField], n_fields : gsize, user_data : gpointer): GLogWriterOutput = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_writer_default_set_use_stderr(use_stderr : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_writer_default_would_drop(log_level : GLogLevelFlags, log_domain : CString): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_writer_format_fields(log_level : GLogLevelFlags, fields : Ptr[GLogField], n_fields : gsize, use_color : gboolean): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_writer_is_journald(output_fd : gint): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_writer_journald(log_level : GLogLevelFlags, fields : Ptr[GLogField], n_fields : gsize, user_data : gpointer): GLogWriterOutput = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_writer_standard_streams(log_level : GLogLevelFlags, fields : Ptr[GLogField], n_fields : gsize, user_data : gpointer): GLogWriterOutput = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_log_writer_supports_color(output_fd : gint): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_logv(log_domain : Ptr[gchar], log_level : GLogLevelFlags, format : Ptr[gchar], args : va_list): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_acquire(context : Ptr[GMainContext]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_add_poll(context : Ptr[GMainContext], fd : Ptr[GPollFD], priority : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_check(context : Ptr[GMainContext], max_priority : gint, fds : Ptr[GPollFD], n_fds : gint): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_default(): Ptr[GMainContext] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_dispatch(context : Ptr[GMainContext]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_find_source_by_funcs_user_data(context : Ptr[GMainContext], funcs : Ptr[GSourceFuncs], user_data : gpointer): Ptr[GSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_find_source_by_id(context : Ptr[GMainContext], source_id : guint): Ptr[GSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_find_source_by_user_data(context : Ptr[GMainContext], user_data : gpointer): Ptr[GSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_get_poll_func(context : Ptr[GMainContext]): GPollFunc = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_get_thread_default(): Ptr[GMainContext] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_main_context_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_invoke(context : Ptr[GMainContext], function : GSourceFunc, data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_invoke_full(context : Ptr[GMainContext], priority : gint, function : GSourceFunc, data : gpointer, notify : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_is_owner(context : Ptr[GMainContext]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_iteration(context : Ptr[GMainContext], may_block : gboolean): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_new(): Ptr[GMainContext] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_new_with_flags(flags : GMainContextFlags): Ptr[GMainContext] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_pending(context : Ptr[GMainContext]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_pop_thread_default(context : Ptr[GMainContext]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_prepare(context : Ptr[GMainContext], priority : Ptr[gint]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_push_thread_default(context : Ptr[GMainContext]): Unit = extern

  /**
   * g_main_context_pusher_free: : (transfer full): a #GMainContextPusher
  
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_pusher_free(pusher : Ptr[GMainContextPusher]): Unit = extern

  /**
   * g_main_context_pusher_new: _context: (transfer none): a main context to push
  
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_pusher_new(main_context : Ptr[GMainContext]): Ptr[GMainContextPusher] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_query(context : Ptr[GMainContext], max_priority : gint, `timeout_` : Ptr[gint], fds : Ptr[GPollFD], n_fds : gint): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_ref(context : Ptr[GMainContext]): Ptr[GMainContext] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_ref_thread_default(): Ptr[GMainContext] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_release(context : Ptr[GMainContext]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_remove_poll(context : Ptr[GMainContext], fd : Ptr[GPollFD]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_set_poll_func(context : Ptr[GMainContext], func : GPollFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_unref(context : Ptr[GMainContext]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_wait(context : Ptr[GMainContext], cond : Ptr[GCond], mutex : Ptr[GMutex]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_context_wakeup(context : Ptr[GMainContext]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_current_source(): Ptr[GSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_depth(): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_loop_get_context(loop : Ptr[GMainLoop]): Ptr[GMainContext] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_main_loop_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_loop_is_running(loop : Ptr[GMainLoop]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_loop_new(context : Ptr[GMainContext], is_running : gboolean): Ptr[GMainLoop] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_loop_quit(loop : Ptr[GMainLoop]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_loop_ref(loop : Ptr[GMainLoop]): Ptr[GMainLoop] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_loop_run(loop : Ptr[GMainLoop]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_main_loop_unref(loop : Ptr[GMainLoop]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_malloc(n_bytes : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_malloc0(n_bytes : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_malloc0_n(n_blocks : gsize, n_block_bytes : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_malloc_n(n_blocks : gsize, n_block_bytes : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmappedfile.h
  */
  def g_mapped_file_free(file : Ptr[GMappedFile]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmappedfile.h
  */
  def g_mapped_file_get_bytes(file : Ptr[GMappedFile]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmappedfile.h
  */
  def g_mapped_file_get_contents(file : Ptr[GMappedFile]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmappedfile.h
  */
  def g_mapped_file_get_length(file : Ptr[GMappedFile]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_mapped_file_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmappedfile.h
  */
  def g_mapped_file_new(filename : Ptr[gchar], writable : gboolean, error : Ptr[Ptr[GError]]): Ptr[GMappedFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmappedfile.h
  */
  def g_mapped_file_new_from_fd(fd : gint, writable : gboolean, error : Ptr[Ptr[GError]]): Ptr[GMappedFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmappedfile.h
  */
  def g_mapped_file_ref(file : Ptr[GMappedFile]): Ptr[GMappedFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmappedfile.h
  */
  def g_mapped_file_unref(file : Ptr[GMappedFile]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
  */
  def g_markup_collect_attributes(element_name : Ptr[gchar], attribute_names : Ptr[Ptr[gchar]], attribute_values : Ptr[Ptr[gchar]], error : Ptr[Ptr[GError]], first_type : GMarkupCollectType, first_attr : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
  */
  def g_markup_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
  */
  def g_markup_escape_text(text : Ptr[gchar], length : gssize): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
  */
  def g_markup_parse_context_end_parse(context : Ptr[GMarkupParseContext], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
  */
  def g_markup_parse_context_free(context : Ptr[GMarkupParseContext]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
  */
  def g_markup_parse_context_get_element(context : Ptr[GMarkupParseContext]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
  */
  def g_markup_parse_context_get_element_stack(context : Ptr[GMarkupParseContext]): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
  */
  def g_markup_parse_context_get_position(context : Ptr[GMarkupParseContext], line_number : Ptr[gint], char_number : Ptr[gint]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_markup_parse_context_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
  */
  def g_markup_parse_context_get_user_data(context : Ptr[GMarkupParseContext]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
  */
  def g_markup_parse_context_new(parser : Ptr[GMarkupParser], flags : GMarkupParseFlags, user_data : gpointer, user_data_dnotify : GDestroyNotify): Ptr[GMarkupParseContext] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
  */
  def g_markup_parse_context_parse(context : Ptr[GMarkupParseContext], text : Ptr[gchar], text_len : gssize, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
  */
  def g_markup_parse_context_pop(context : Ptr[GMarkupParseContext]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
  */
  def g_markup_parse_context_push(context : Ptr[GMarkupParseContext], parser : Ptr[GMarkupParser], user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
  */
  def g_markup_parse_context_ref(context : Ptr[GMarkupParseContext]): Ptr[GMarkupParseContext] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
  */
  def g_markup_parse_context_unref(context : Ptr[GMarkupParseContext]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
  */
  def g_markup_printf_escaped(format : CString): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmarkup.h
  */
  def g_markup_vprintf_escaped(format : CString, args : va_list): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_match_info_expand_references(match_info : Ptr[GMatchInfo], string_to_expand : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_match_info_fetch(match_info : Ptr[GMatchInfo], match_num : gint): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_match_info_fetch_all(match_info : Ptr[GMatchInfo]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_match_info_fetch_named(match_info : Ptr[GMatchInfo], name : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_match_info_fetch_named_pos(match_info : Ptr[GMatchInfo], name : Ptr[gchar], start_pos : Ptr[gint], end_pos : Ptr[gint]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_match_info_fetch_pos(match_info : Ptr[GMatchInfo], match_num : gint, start_pos : Ptr[gint], end_pos : Ptr[gint]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_match_info_free(match_info : Ptr[GMatchInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_match_info_get_match_count(match_info : Ptr[GMatchInfo]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_match_info_get_regex(match_info : Ptr[GMatchInfo]): Ptr[GRegex] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_match_info_get_string(match_info : Ptr[GMatchInfo]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_match_info_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_match_info_is_partial_match(match_info : Ptr[GMatchInfo]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_match_info_matches(match_info : Ptr[GMatchInfo]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_match_info_next(match_info : Ptr[GMatchInfo], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_match_info_ref(match_info : Ptr[GMatchInfo]): Ptr[GMatchInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_match_info_unref(match_info : Ptr[GMatchInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
  */
  def g_mem_chunk_alloc(mem_chunk : Ptr[GMemChunk]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
  */
  def g_mem_chunk_alloc0(mem_chunk : Ptr[GMemChunk]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
  */
  def g_mem_chunk_clean(mem_chunk : Ptr[GMemChunk]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
  */
  def g_mem_chunk_destroy(mem_chunk : Ptr[GMemChunk]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
  */
  def g_mem_chunk_free(mem_chunk : Ptr[GMemChunk], mem : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
  */
  def g_mem_chunk_info(): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
  */
  def g_mem_chunk_new(name : Ptr[gchar], atom_size : gint, area_size : gsize, `type` : gint): Ptr[GMemChunk] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
  */
  def g_mem_chunk_print(mem_chunk : Ptr[GMemChunk]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
  */
  def g_mem_chunk_reset(mem_chunk : Ptr[GMemChunk]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_mem_is_system_malloc(): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_mem_profile(): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_mem_set_vtable(vtable : Ptr[GMemVTable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_memdup(mem : gconstpointer, byte_size : guint): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_memdup2(mem : gconstpointer, byte_size : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryinputstream.h
  */
  def g_memory_input_stream_add_bytes(stream : Ptr[GMemoryInputStream], bytes : Ptr[GBytes]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryinputstream.h
  */
  def g_memory_input_stream_add_data(stream : Ptr[GMemoryInputStream], data : Ptr[Byte], len : gssize, destroy : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryinputstream.h
  */
  def g_memory_input_stream_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryinputstream.h
  */
  def g_memory_input_stream_new(): Ptr[GInputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryinputstream.h
  */
  def g_memory_input_stream_new_from_bytes(bytes : Ptr[GBytes]): Ptr[GInputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryinputstream.h
  */
  def g_memory_input_stream_new_from_data(data : Ptr[Byte], len : gssize, destroy : GDestroyNotify): Ptr[GInputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemorymonitor.h
  */
  def g_memory_monitor(ptr : gpointer): Ptr[GMemoryMonitor] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemorymonitor.h
  */
  def g_memory_monitor_GET_IFACE(ptr : gpointer): Ptr[GMemoryMonitorInterface] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemorymonitor.h
  */
  def g_memory_monitor_dup_default(): Ptr[GMemoryMonitor] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemorymonitor.h
  */
  def g_memory_monitor_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_memory_monitor_warning_level_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryoutputstream.h
  */
  def g_memory_output_stream_get_data(ostream : Ptr[GMemoryOutputStream]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryoutputstream.h
  */
  def g_memory_output_stream_get_data_size(ostream : Ptr[GMemoryOutputStream]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryoutputstream.h
  */
  def g_memory_output_stream_get_size(ostream : Ptr[GMemoryOutputStream]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryoutputstream.h
  */
  def g_memory_output_stream_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryoutputstream.h
  */
  def g_memory_output_stream_new(data : gpointer, size : gsize, realloc_function : GReallocFunc, destroy_function : GDestroyNotify): Ptr[GOutputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryoutputstream.h
  */
  def g_memory_output_stream_new_resizable(): Ptr[GOutputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryoutputstream.h
  */
  def g_memory_output_stream_steal_as_bytes(ostream : Ptr[GMemoryOutputStream]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemoryoutputstream.h
  */
  def g_memory_output_stream_steal_data(ostream : Ptr[GMemoryOutputStream]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_append(menu : Ptr[GMenu], label : Ptr[gchar], detailed_action : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_append_item(menu : Ptr[GMenu], item : Ptr[GMenuItem]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_append_section(menu : Ptr[GMenu], label : Ptr[gchar], section : Ptr[GMenuModel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_append_submenu(menu : Ptr[GMenu], label : Ptr[gchar], submenu : Ptr[GMenuModel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
  */
  def g_menu_attribute_iter_get_name(iter : Ptr[GMenuAttributeIter]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
  */
  def g_menu_attribute_iter_get_next(iter : Ptr[GMenuAttributeIter], out_name : Ptr[Ptr[gchar]], value : Ptr[Ptr[GVariant]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
  */
  def g_menu_attribute_iter_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
  */
  def g_menu_attribute_iter_get_value(iter : Ptr[GMenuAttributeIter]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
  */
  def g_menu_attribute_iter_next(iter : Ptr[GMenuAttributeIter]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_freeze(menu : Ptr[GMenu]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_insert(menu : Ptr[GMenu], position : gint, label : Ptr[gchar], detailed_action : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_insert_item(menu : Ptr[GMenu], position : gint, item : Ptr[GMenuItem]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_insert_section(menu : Ptr[GMenu], position : gint, label : Ptr[gchar], section : Ptr[GMenuModel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_insert_submenu(menu : Ptr[GMenu], position : gint, label : Ptr[gchar], submenu : Ptr[GMenuModel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_item_get_attribute(menu_item : Ptr[GMenuItem], attribute : Ptr[gchar], format_string : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_item_get_attribute_value(menu_item : Ptr[GMenuItem], attribute : Ptr[gchar], expected_type : Ptr[GVariantType]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_item_get_link(menu_item : Ptr[GMenuItem], link : Ptr[gchar]): Ptr[GMenuModel] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_item_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_item_new(label : Ptr[gchar], detailed_action : Ptr[gchar]): Ptr[GMenuItem] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_item_new_from_model(model : Ptr[GMenuModel], item_index : gint): Ptr[GMenuItem] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_item_new_section(label : Ptr[gchar], section : Ptr[GMenuModel]): Ptr[GMenuItem] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_item_new_submenu(label : Ptr[gchar], submenu : Ptr[GMenuModel]): Ptr[GMenuItem] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_item_set_action_and_target(menu_item : Ptr[GMenuItem], action : Ptr[gchar], format_string : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_item_set_action_and_target_value(menu_item : Ptr[GMenuItem], action : Ptr[gchar], target_value : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_item_set_attribute(menu_item : Ptr[GMenuItem], attribute : Ptr[gchar], format_string : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_item_set_attribute_value(menu_item : Ptr[GMenuItem], attribute : Ptr[gchar], value : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_item_set_detailed_action(menu_item : Ptr[GMenuItem], detailed_action : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_item_set_icon(menu_item : Ptr[GMenuItem], icon : Ptr[GIcon]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_item_set_label(menu_item : Ptr[GMenuItem], label : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_item_set_link(menu_item : Ptr[GMenuItem], link : Ptr[gchar], model : Ptr[GMenuModel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_item_set_section(menu_item : Ptr[GMenuItem], section : Ptr[GMenuModel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_item_set_submenu(menu_item : Ptr[GMenuItem], submenu : Ptr[GMenuModel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
  */
  def g_menu_link_iter_get_name(iter : Ptr[GMenuLinkIter]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
  */
  def g_menu_link_iter_get_next(iter : Ptr[GMenuLinkIter], out_link : Ptr[Ptr[gchar]], value : Ptr[Ptr[GMenuModel]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
  */
  def g_menu_link_iter_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
  */
  def g_menu_link_iter_get_value(iter : Ptr[GMenuLinkIter]): Ptr[GMenuModel] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
  */
  def g_menu_link_iter_next(iter : Ptr[GMenuLinkIter]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
  */
  def g_menu_model_get_item_attribute(model : Ptr[GMenuModel], item_index : gint, attribute : Ptr[gchar], format_string : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
  */
  def g_menu_model_get_item_attribute_value(model : Ptr[GMenuModel], item_index : gint, attribute : Ptr[gchar], expected_type : Ptr[GVariantType]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
  */
  def g_menu_model_get_item_link(model : Ptr[GMenuModel], item_index : gint, link : Ptr[gchar]): Ptr[GMenuModel] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
  */
  def g_menu_model_get_n_items(model : Ptr[GMenuModel]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
  */
  def g_menu_model_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
  */
  def g_menu_model_is_mutable(model : Ptr[GMenuModel]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
  */
  def g_menu_model_items_changed(model : Ptr[GMenuModel], position : gint, removed : gint, added : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
  */
  def g_menu_model_iterate_item_attributes(model : Ptr[GMenuModel], item_index : gint): Ptr[GMenuAttributeIter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenumodel.h
  */
  def g_menu_model_iterate_item_links(model : Ptr[GMenuModel], item_index : gint): Ptr[GMenuLinkIter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_new(): Ptr[GMenu] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_prepend(menu : Ptr[GMenu], label : Ptr[gchar], detailed_action : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_prepend_item(menu : Ptr[GMenu], item : Ptr[GMenuItem]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_prepend_section(menu : Ptr[GMenu], label : Ptr[gchar], section : Ptr[GMenuModel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_prepend_submenu(menu : Ptr[GMenu], label : Ptr[gchar], submenu : Ptr[GMenuModel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_remove(menu : Ptr[GMenu], position : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmenu.h
  */
  def g_menu_remove_all(menu : Ptr[GMenu]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_mkdir_with_parents(pathname : Ptr[gchar], mode : gint): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_mkdtemp(tmpl : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_mkdtemp_full(tmpl : Ptr[gchar], mode : gint): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_mkstemp(tmpl : Ptr[gchar]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_mkstemp_full(tmpl : Ptr[gchar], flags : gint, mode : gint): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gmodule.h
  */
  def g_module_build_path(directory : Ptr[gchar], module_name : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gmodule.h
  */
  def g_module_close(module : Ptr[GModule]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gmodule.h
  */
  def g_module_error(): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gmodule.h
  */
  def g_module_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gmodule.h
  */
  def g_module_make_resident(module : Ptr[GModule]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gmodule.h
  */
  def g_module_name(module : Ptr[GModule]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gmodule.h
  */
  def g_module_open(file_name : Ptr[gchar], flags : GModuleFlags): Ptr[GModule] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gmodule.h
  */
  def g_module_open_full(file_name : Ptr[gchar], flags : GModuleFlags, error : Ptr[Ptr[GError]]): Ptr[GModule] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gmodule.h
  */
  def g_module_supported(): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gmodule.h
  */
  def g_module_symbol(module : Ptr[GModule], symbol_name : Ptr[gchar], symbol : Ptr[gpointer]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_can_eject(mount : Ptr[GMount]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_can_unmount(mount : Ptr[GMount]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_eject(mount : Ptr[GMount], flags : GMountUnmountFlags, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_eject_finish(mount : Ptr[GMount], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_eject_with_operation(mount : Ptr[GMount], flags : GMountUnmountFlags, mount_operation : Ptr[GMountOperation], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_eject_with_operation_finish(mount : Ptr[GMount], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_get_default_location(mount : Ptr[GMount]): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_get_drive(mount : Ptr[GMount]): Ptr[GDrive] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_get_icon(mount : Ptr[GMount]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_get_name(mount : Ptr[GMount]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_get_root(mount : Ptr[GMount]): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_get_sort_key(mount : Ptr[GMount]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_get_symbolic_icon(mount : Ptr[GMount]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_get_uuid(mount : Ptr[GMount]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_get_volume(mount : Ptr[GMount]): Ptr[GVolume] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_guess_content_type(mount : Ptr[GMount], force_rescan : gboolean, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_guess_content_type_finish(mount : Ptr[GMount], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_guess_content_type_sync(mount : Ptr[GMount], force_rescan : gboolean, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_is_shadowed(mount : Ptr[GMount]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_mount_mount_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_get_anonymous(op : Ptr[GMountOperation]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_get_choice(op : Ptr[GMountOperation]): CInt = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_get_domain(op : Ptr[GMountOperation]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_get_is_tcrypt_hidden_volume(op : Ptr[GMountOperation]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_get_is_tcrypt_system_volume(op : Ptr[GMountOperation]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_get_password(op : Ptr[GMountOperation]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_get_password_save(op : Ptr[GMountOperation]): GPasswordSave = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_get_pim(op : Ptr[GMountOperation]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_get_username(op : Ptr[GMountOperation]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_new(): Ptr[GMountOperation] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_reply(op : Ptr[GMountOperation], result : GMountOperationResult): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_mount_operation_result_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_set_anonymous(op : Ptr[GMountOperation], anonymous : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_set_choice(op : Ptr[GMountOperation], choice : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_set_domain(op : Ptr[GMountOperation], domain : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_set_is_tcrypt_hidden_volume(op : Ptr[GMountOperation], hidden_volume : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_set_is_tcrypt_system_volume(op : Ptr[GMountOperation], system_volume : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_set_password(op : Ptr[GMountOperation], password : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_set_password_save(op : Ptr[GMountOperation], save : GPasswordSave): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_set_pim(op : Ptr[GMountOperation], pim : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmountoperation.h
  */
  def g_mount_operation_set_username(op : Ptr[GMountOperation], username : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_remount(mount : Ptr[GMount], flags : GMountMountFlags, mount_operation : Ptr[GMountOperation], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_remount_finish(mount : Ptr[GMount], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_shadow(mount : Ptr[GMount]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_unmount(mount : Ptr[GMount], flags : GMountUnmountFlags, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_unmount_finish(mount : Ptr[GMount], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_mount_unmount_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_unmount_with_operation(mount : Ptr[GMount], flags : GMountUnmountFlags, mount_operation : Ptr[GMountOperation], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_unmount_with_operation_finish(mount : Ptr[GMount], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmount.h
  */
  def g_mount_unshadow(mount : Ptr[GMount]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_mutex_clear(mutex : Ptr[GMutex]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_mutex_free(mutex : Ptr[GMutex]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_mutex_init(mutex : Ptr[GMutex]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_mutex_lock(mutex : Ptr[GMutex]): Unit = extern

  /**
   * g_mutex_locker_free: : a GMutexLocker
  
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_mutex_locker_free(locker : Ptr[GMutexLocker]): Unit = extern

  /**
   * g_mutex_locker_new: : a mutex to lock
  
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_mutex_locker_new(mutex : Ptr[GMutex]): Ptr[GMutexLocker] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_mutex_new(): Ptr[GMutex] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_mutex_trylock(mutex : Ptr[GMutex]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_mutex_unlock(mutex : Ptr[GMutex]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnativesocketaddress.h
  */
  def g_native_socket_address_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnativesocketaddress.h
  */
  def g_native_socket_address_new(native : gpointer, len : gsize): Ptr[GSocketAddress] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnativevolumemonitor.h
  */
  def g_native_volume_monitor_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkaddress.h
  */
  def g_network_address_get_hostname(addr : Ptr[GNetworkAddress]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkaddress.h
  */
  def g_network_address_get_port(addr : Ptr[GNetworkAddress]): guint16 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkaddress.h
  */
  def g_network_address_get_scheme(addr : Ptr[GNetworkAddress]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkaddress.h
  */
  def g_network_address_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkaddress.h
  */
  def g_network_address_new(hostname : Ptr[gchar], port : guint16): Ptr[GSocketConnectable] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkaddress.h
  */
  def g_network_address_new_loopback(port : guint16): Ptr[GSocketConnectable] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkaddress.h
  */
  def g_network_address_parse(host_and_port : Ptr[gchar], default_port : guint16, error : Ptr[Ptr[GError]]): Ptr[GSocketConnectable] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkaddress.h
  */
  def g_network_address_parse_uri(uri : Ptr[gchar], default_port : guint16, error : Ptr[Ptr[GError]]): Ptr[GSocketConnectable] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_network_connectivity_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkmonitor.h
  */
  def g_network_monitor_can_reach(monitor : Ptr[GNetworkMonitor], connectable : Ptr[GSocketConnectable], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkmonitor.h
  */
  def g_network_monitor_can_reach_async(monitor : Ptr[GNetworkMonitor], connectable : Ptr[GSocketConnectable], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkmonitor.h
  */
  def g_network_monitor_can_reach_finish(monitor : Ptr[GNetworkMonitor], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkmonitor.h
  */
  def g_network_monitor_get_connectivity(monitor : Ptr[GNetworkMonitor]): GNetworkConnectivity = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkmonitor.h
  */
  def g_network_monitor_get_default(): Ptr[GNetworkMonitor] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkmonitor.h
  */
  def g_network_monitor_get_network_available(monitor : Ptr[GNetworkMonitor]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkmonitor.h
  */
  def g_network_monitor_get_network_metered(monitor : Ptr[GNetworkMonitor]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkmonitor.h
  */
  def g_network_monitor_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkservice.h
  */
  def g_network_service_get_domain(srv : Ptr[GNetworkService]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkservice.h
  */
  def g_network_service_get_protocol(srv : Ptr[GNetworkService]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkservice.h
  */
  def g_network_service_get_scheme(srv : Ptr[GNetworkService]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkservice.h
  */
  def g_network_service_get_service(srv : Ptr[GNetworkService]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkservice.h
  */
  def g_network_service_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkservice.h
  */
  def g_network_service_new(service : Ptr[gchar], protocol : Ptr[gchar], domain : Ptr[gchar]): Ptr[GSocketConnectable] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnetworkservice.h
  */
  def g_network_service_set_scheme(srv : Ptr[GNetworkService], scheme : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_child_index(node : Ptr[GNode], data : gpointer): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_child_position(node : Ptr[GNode], child : Ptr[GNode]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_children_foreach(node : Ptr[GNode], flags : GTraverseFlags, func : GNodeForeachFunc, data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_copy(node : Ptr[GNode]): Ptr[GNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_copy_deep(node : Ptr[GNode], copy_func : GCopyFunc, data : gpointer): Ptr[GNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_depth(node : Ptr[GNode]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_destroy(root : Ptr[GNode]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_find(root : Ptr[GNode], order : GTraverseType, flags : GTraverseFlags, data : gpointer): Ptr[GNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_find_child(node : Ptr[GNode], flags : GTraverseFlags, data : gpointer): Ptr[GNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_first_sibling(node : Ptr[GNode]): Ptr[GNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_get_root(node : Ptr[GNode]): Ptr[GNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_insert(parent : Ptr[GNode], position : gint, node : Ptr[GNode]): Ptr[GNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_insert_after(parent : Ptr[GNode], sibling : Ptr[GNode], node : Ptr[GNode]): Ptr[GNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_insert_before(parent : Ptr[GNode], sibling : Ptr[GNode], node : Ptr[GNode]): Ptr[GNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_is_ancestor(node : Ptr[GNode], descendant : Ptr[GNode]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_last_child(node : Ptr[GNode]): Ptr[GNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_last_sibling(node : Ptr[GNode]): Ptr[GNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_max_height(root : Ptr[GNode]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_n_children(node : Ptr[GNode]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_n_nodes(root : Ptr[GNode], flags : GTraverseFlags): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_new(data : gpointer): Ptr[GNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_nth_child(node : Ptr[GNode], n : guint): Ptr[GNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
  */
  def g_node_pop_allocator(): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_prepend(parent : Ptr[GNode], node : Ptr[GNode]): Ptr[GNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
  */
  def g_node_push_allocator(allocator : Ptr[GAllocator]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_reverse_children(node : Ptr[GNode]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_traverse(root : Ptr[GNode], order : GTraverseType, flags : GTraverseFlags, max_depth : gint, func : GNodeTraverseFunc, data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gnode.h
  */
  def g_node_unlink(node : Ptr[GNode]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-enumtypes.h
  */
  def g_normalize_mode_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnotification.h
  */
  def g_notification_add_button(notification : Ptr[GNotification], label : Ptr[gchar], detailed_action : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnotification.h
  */
  def g_notification_add_button_with_target(notification : Ptr[GNotification], label : Ptr[gchar], action : Ptr[gchar], target_format : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnotification.h
  */
  def g_notification_add_button_with_target_value(notification : Ptr[GNotification], label : Ptr[gchar], action : Ptr[gchar], target : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnotification.h
  */
  def g_notification_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnotification.h
  */
  def g_notification_new(title : Ptr[gchar]): Ptr[GNotification] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_notification_priority_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnotification.h
  */
  def g_notification_set_body(notification : Ptr[GNotification], body : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnotification.h
  */
  def g_notification_set_category(notification : Ptr[GNotification], category : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnotification.h
  */
  def g_notification_set_default_action(notification : Ptr[GNotification], detailed_action : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnotification.h
  */
  def g_notification_set_default_action_and_target(notification : Ptr[GNotification], action : Ptr[gchar], target_format : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnotification.h
  */
  def g_notification_set_default_action_and_target_value(notification : Ptr[GNotification], action : Ptr[gchar], target : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnotification.h
  */
  def g_notification_set_icon(notification : Ptr[GNotification], icon : Ptr[GIcon]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnotification.h
  */
  def g_notification_set_priority(notification : Ptr[GNotification], priority : GNotificationPriority): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnotification.h
  */
  def g_notification_set_title(notification : Ptr[GNotification], title : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gnotification.h
  */
  def g_notification_set_urgent(notification : Ptr[GNotification], urgent : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_nullify_pointer(nullify_location : Ptr[gpointer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_number_parser_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_add_toggle_ref(`object` : Ptr[GObject], notify : GToggleNotify, data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_add_weak_pointer(`object` : Ptr[GObject], weak_pointer_location : Ptr[gpointer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gbinding.h
  */
  def g_object_bind_property(source : gpointer, source_property : Ptr[gchar], target : gpointer, target_property : Ptr[gchar], flags : GBindingFlags): Ptr[GBinding] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gbinding.h
  */
  def g_object_bind_property_full(source : gpointer, source_property : Ptr[gchar], target : gpointer, target_property : Ptr[gchar], flags : GBindingFlags, transform_to : GBindingTransformFunc, transform_from : GBindingTransformFunc, user_data : gpointer, notify : GDestroyNotify): Ptr[GBinding] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gbinding.h
  */
  def g_object_bind_property_with_closures(source : gpointer, source_property : Ptr[gchar], target : gpointer, target_property : Ptr[gchar], flags : GBindingFlags, transform_to : Ptr[GClosure], transform_from : Ptr[GClosure]): Ptr[GBinding] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_class_find_property(oclass : Ptr[GObjectClass], property_name : Ptr[gchar]): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_class_install_properties(oclass : Ptr[GObjectClass], n_pspecs : guint, pspecs : Ptr[Ptr[GParamSpec]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_class_install_property(oclass : Ptr[GObjectClass], property_id : guint, pspec : Ptr[GParamSpec]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_class_list_properties(oclass : Ptr[GObjectClass], n_properties : Ptr[guint]): Ptr[Ptr[GParamSpec]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_class_override_property(oclass : Ptr[GObjectClass], property_id : guint, name : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_compat_control(what : gsize, data : gpointer): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_connect(`object` : gpointer, signal_spec : Ptr[gchar]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_disconnect(`object` : gpointer, signal_spec : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_dup_data(`object` : Ptr[GObject], key : Ptr[gchar], dup_func : GDuplicateFunc, user_data : gpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_dup_qdata(`object` : Ptr[GObject], quark : GQuark, dup_func : GDuplicateFunc, user_data : gpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_force_floating(`object` : Ptr[GObject]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_freeze_notify(`object` : Ptr[GObject]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_get(`object` : gpointer, first_property_name : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_get_data(`object` : Ptr[GObject], key : Ptr[gchar]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_get_property(`object` : Ptr[GObject], property_name : Ptr[gchar], value : Ptr[GValue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_get_qdata(`object` : Ptr[GObject], quark : GQuark): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_get_valist(`object` : Ptr[GObject], first_property_name : Ptr[gchar], var_args : va_list): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_getv(`object` : Ptr[GObject], n_properties : guint, names : Ptr[Ptr[gchar]], values : Ptr[GValue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_interface_find_property(g_iface : gpointer, property_name : Ptr[gchar]): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_interface_install_property(g_iface : gpointer, pspec : Ptr[GParamSpec]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_interface_list_properties(g_iface : gpointer, n_properties_p : Ptr[guint]): Ptr[Ptr[GParamSpec]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_is_floating(`object` : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_new(object_type : GType, first_property_name : Ptr[gchar]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_new_valist(object_type : GType, first_property_name : Ptr[gchar], var_args : va_list): Ptr[GObject] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_new_with_properties(object_type : GType, n_properties : guint, names : Ptr[CString], values : Ptr[GValue]): Ptr[GObject] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_newv(object_type : GType, n_parameters : guint, parameters : Ptr[GParameter]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_notify(`object` : Ptr[GObject], property_name : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_notify_by_pspec(`object` : Ptr[GObject], pspec : Ptr[GParamSpec]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_ref(`object` : gpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_ref_sink(`object` : gpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_remove_toggle_ref(`object` : Ptr[GObject], notify : GToggleNotify, data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_remove_weak_pointer(`object` : Ptr[GObject], weak_pointer_location : Ptr[gpointer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_replace_data(`object` : Ptr[GObject], key : Ptr[gchar], oldval : gpointer, newval : gpointer, destroy : GDestroyNotify, old_destroy : Ptr[GDestroyNotify]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_replace_qdata(`object` : Ptr[GObject], quark : GQuark, oldval : gpointer, newval : gpointer, destroy : GDestroyNotify, old_destroy : Ptr[GDestroyNotify]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_run_dispose(`object` : Ptr[GObject]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_set(`object` : gpointer, first_property_name : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_set_data(`object` : Ptr[GObject], key : Ptr[gchar], data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_set_data_full(`object` : Ptr[GObject], key : Ptr[gchar], data : gpointer, destroy : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_set_property(`object` : Ptr[GObject], property_name : Ptr[gchar], value : Ptr[GValue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_set_qdata(`object` : Ptr[GObject], quark : GQuark, data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_set_qdata_full(`object` : Ptr[GObject], quark : GQuark, data : gpointer, destroy : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_set_valist(`object` : Ptr[GObject], first_property_name : Ptr[gchar], var_args : va_list): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_setv(`object` : Ptr[GObject], n_properties : guint, names : Ptr[Ptr[gchar]], values : Ptr[GValue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_steal_data(`object` : Ptr[GObject], key : Ptr[gchar]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_steal_qdata(`object` : Ptr[GObject], quark : GQuark): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_take_ref(`object` : gpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_thaw_notify(`object` : Ptr[GObject]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_unref(`object` : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_watch_closure(`object` : Ptr[GObject], closure : Ptr[GClosure]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_weak_ref(`object` : Ptr[GObject], notify : GWeakNotify, data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_object_weak_unref(`object` : Ptr[GObject], notify : GWeakNotify, data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbacktrace.h
  */
  def g_on_error_query(prg_name : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbacktrace.h
  */
  def g_on_error_stack_trace(prg_name : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_once_impl(once : Ptr[GOnce], func : GThreadFunc, arg : gpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_once_init_enter(location : Ptr[Byte]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_once_init_enter_impl(location : Ptr[gsize]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_once_init_leave(location : Ptr[Byte], result : gsize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_add_group(context : Ptr[GOptionContext], group : Ptr[GOptionGroup]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_add_main_entries(context : Ptr[GOptionContext], entries : Ptr[GOptionEntry], translation_domain : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_free(context : Ptr[GOptionContext]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_get_description(context : Ptr[GOptionContext]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_get_help(context : Ptr[GOptionContext], main_help : gboolean, group : Ptr[GOptionGroup]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_get_help_enabled(context : Ptr[GOptionContext]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_get_ignore_unknown_options(context : Ptr[GOptionContext]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_get_main_group(context : Ptr[GOptionContext]): Ptr[GOptionGroup] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_get_strict_posix(context : Ptr[GOptionContext]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_get_summary(context : Ptr[GOptionContext]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_new(parameter_string : Ptr[gchar]): Ptr[GOptionContext] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_parse(context : Ptr[GOptionContext], argc : Ptr[gint], argv : Ptr[Ptr[Ptr[gchar]]], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_parse_strv(context : Ptr[GOptionContext], arguments : Ptr[Ptr[Ptr[gchar]]], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_set_description(context : Ptr[GOptionContext], description : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_set_help_enabled(context : Ptr[GOptionContext], help_enabled : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_set_ignore_unknown_options(context : Ptr[GOptionContext], ignore_unknown : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_set_main_group(context : Ptr[GOptionContext], group : Ptr[GOptionGroup]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_set_strict_posix(context : Ptr[GOptionContext], strict_posix : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_set_summary(context : Ptr[GOptionContext], summary : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_set_translate_func(context : Ptr[GOptionContext], func : GTranslateFunc, data : gpointer, destroy_notify : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_context_set_translation_domain(context : Ptr[GOptionContext], domain : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_group_add_entries(group : Ptr[GOptionGroup], entries : Ptr[GOptionEntry]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_group_free(group : Ptr[GOptionGroup]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_option_group_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_group_new(name : Ptr[gchar], description : Ptr[gchar], help_description : Ptr[gchar], user_data : gpointer, destroy : GDestroyNotify): Ptr[GOptionGroup] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_group_ref(group : Ptr[GOptionGroup]): Ptr[GOptionGroup] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_group_set_error_hook(group : Ptr[GOptionGroup], error_func : GOptionErrorFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_group_set_parse_hooks(group : Ptr[GOptionGroup], pre_parse_func : GOptionParseFunc, post_parse_func : GOptionParseFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_group_set_translate_func(group : Ptr[GOptionGroup], func : GTranslateFunc, data : gpointer, destroy_notify : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_group_set_translation_domain(group : Ptr[GOptionGroup], domain : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/goption.h
  */
  def g_option_group_unref(group : Ptr[GOptionGroup]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_clear_pending(stream : Ptr[GOutputStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_close(stream : Ptr[GOutputStream], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_close_async(stream : Ptr[GOutputStream], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_close_finish(stream : Ptr[GOutputStream], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_flush(stream : Ptr[GOutputStream], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_flush_async(stream : Ptr[GOutputStream], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_flush_finish(stream : Ptr[GOutputStream], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_has_pending(stream : Ptr[GOutputStream]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_is_closed(stream : Ptr[GOutputStream]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_is_closing(stream : Ptr[GOutputStream]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_printf(stream : Ptr[GOutputStream], bytes_written : Ptr[gsize], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]], format : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_set_pending(stream : Ptr[GOutputStream], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_splice(stream : Ptr[GOutputStream], source : Ptr[GInputStream], flags : GOutputStreamSpliceFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_splice_async(stream : Ptr[GOutputStream], source : Ptr[GInputStream], flags : GOutputStreamSpliceFlags, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_splice_finish(stream : Ptr[GOutputStream], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_output_stream_splice_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_vprintf(stream : Ptr[GOutputStream], bytes_written : Ptr[gsize], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]], format : Ptr[gchar], args : va_list): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_write(stream : Ptr[GOutputStream], buffer : Ptr[Byte], count : gsize, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_write_all(stream : Ptr[GOutputStream], buffer : Ptr[Byte], count : gsize, bytes_written : Ptr[gsize], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_write_all_async(stream : Ptr[GOutputStream], buffer : Ptr[Byte], count : gsize, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_write_all_finish(stream : Ptr[GOutputStream], result : Ptr[GAsyncResult], bytes_written : Ptr[gsize], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_write_async(stream : Ptr[GOutputStream], buffer : Ptr[Byte], count : gsize, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_write_bytes(stream : Ptr[GOutputStream], bytes : Ptr[GBytes], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_write_bytes_async(stream : Ptr[GOutputStream], bytes : Ptr[GBytes], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_write_bytes_finish(stream : Ptr[GOutputStream], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_write_finish(stream : Ptr[GOutputStream], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_writev(stream : Ptr[GOutputStream], vectors : Ptr[GOutputVector], n_vectors : gsize, bytes_written : Ptr[gsize], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_writev_all(stream : Ptr[GOutputStream], vectors : Ptr[GOutputVector], n_vectors : gsize, bytes_written : Ptr[gsize], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_writev_all_async(stream : Ptr[GOutputStream], vectors : Ptr[GOutputVector], n_vectors : gsize, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_writev_all_finish(stream : Ptr[GOutputStream], result : Ptr[GAsyncResult], bytes_written : Ptr[gsize], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_writev_async(stream : Ptr[GOutputStream], vectors : Ptr[GOutputVector], n_vectors : gsize, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/goutputstream.h
  */
  def g_output_stream_writev_finish(stream : Ptr[GOutputStream], result : Ptr[GAsyncResult], bytes_written : Ptr[gsize], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_boolean(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], default_value : gboolean, flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_boxed(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], boxed_type : GType, flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_char(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], minimum : gint8, maximum : gint8, default_value : gint8, flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_double(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], minimum : gdouble, maximum : gdouble, default_value : gdouble, flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_enum(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], enum_type : GType, default_value : gint, flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_flags(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], flags_type : GType, default_value : guint, flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_float(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], minimum : gfloat, maximum : gfloat, default_value : gfloat, flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_get_blurb(pspec : Ptr[GParamSpec]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_get_default_value(pspec : Ptr[GParamSpec]): Ptr[GValue] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_get_name(pspec : Ptr[GParamSpec]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_get_name_quark(pspec : Ptr[GParamSpec]): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_get_nick(pspec : Ptr[GParamSpec]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_get_qdata(pspec : Ptr[GParamSpec], quark : GQuark): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_get_redirect_target(pspec : Ptr[GParamSpec]): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_gtype(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], is_a_type : GType, flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_int(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], minimum : gint, maximum : gint, default_value : gint, flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_int64(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], minimum : gint64, maximum : gint64, default_value : gint64, flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_internal(param_type : GType, name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], flags : GParamFlags): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_is_valid_name(name : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_long(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], minimum : glong, maximum : glong, default_value : glong, flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_object(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], object_type : GType, flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_override(name : Ptr[gchar], overridden : Ptr[GParamSpec]): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_param(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], param_type : GType, flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_pointer(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_pool_insert(pool : Ptr[GParamSpecPool], pspec : Ptr[GParamSpec], owner_type : GType): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_pool_list(pool : Ptr[GParamSpecPool], owner_type : GType, n_pspecs_p : Ptr[guint]): Ptr[Ptr[GParamSpec]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_pool_list_owned(pool : Ptr[GParamSpecPool], owner_type : GType): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_pool_lookup(pool : Ptr[GParamSpecPool], param_name : Ptr[gchar], owner_type : GType, walk_ancestors : gboolean): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_pool_new(type_prefixing : gboolean): Ptr[GParamSpecPool] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_pool_remove(pool : Ptr[GParamSpecPool], pspec : Ptr[GParamSpec]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_ref(pspec : Ptr[GParamSpec]): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_ref_sink(pspec : Ptr[GParamSpec]): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_set_qdata(pspec : Ptr[GParamSpec], quark : GQuark, data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_set_qdata_full(pspec : Ptr[GParamSpec], quark : GQuark, data : gpointer, destroy : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_sink(pspec : Ptr[GParamSpec]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_steal_qdata(pspec : Ptr[GParamSpec], quark : GQuark): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_string(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], default_value : Ptr[gchar], flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_uchar(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], minimum : guint8, maximum : guint8, default_value : guint8, flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_uint(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], minimum : guint, maximum : guint, default_value : guint, flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_uint64(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], minimum : guint64, maximum : guint64, default_value : guint64, flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_ulong(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], minimum : gulong, maximum : gulong, default_value : gulong, flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_unichar(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], default_value : gunichar, flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_spec_unref(pspec : Ptr[GParamSpec]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_value_array(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], element_spec : Ptr[GParamSpec], flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparamspecs.h
  */
  def g_param_spec_variant(name : Ptr[gchar], nick : Ptr[gchar], blurb : Ptr[gchar], `type` : Ptr[GVariantType], default_value : Ptr[GVariant], flags : GParamFlags): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_type_register_static(name : Ptr[gchar], pspec_info : Ptr[GParamSpecTypeInfo]): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_value_convert(pspec : Ptr[GParamSpec], src_value : Ptr[GValue], dest_value : Ptr[GValue], strict_validation : gboolean): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_value_defaults(pspec : Ptr[GParamSpec], value : Ptr[GValue]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_value_set_default(pspec : Ptr[GParamSpec], value : Ptr[GValue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_value_validate(pspec : Ptr[GParamSpec], value : Ptr[GValue]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_param_values_cmp(pspec : Ptr[GParamSpec], value1 : Ptr[GValue], value2 : Ptr[GValue]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_parse_debug_string(string : Ptr[gchar], keys : Ptr[GDebugKey], nkeys : guint): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_password_save_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_path_get_basename(file_name : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_path_get_dirname(file_name : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_path_is_absolute(file_name : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gfileutils.h
  */
  def g_path_skip_root(file_name : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gpattern.h
  */
  def g_pattern_match(pspec : Ptr[GPatternSpec], string_length : guint, string : Ptr[gchar], string_reversed : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gpattern.h
  */
  def g_pattern_match_simple(pattern : Ptr[gchar], string : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gpattern.h
  */
  def g_pattern_match_string(pspec : Ptr[GPatternSpec], string : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gpattern.h
  */
  def g_pattern_spec_copy(pspec : Ptr[GPatternSpec]): Ptr[GPatternSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gpattern.h
  */
  def g_pattern_spec_equal(pspec1 : Ptr[GPatternSpec], pspec2 : Ptr[GPatternSpec]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gpattern.h
  */
  def g_pattern_spec_free(pspec : Ptr[GPatternSpec]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_pattern_spec_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gpattern.h
  */
  def g_pattern_spec_match(pspec : Ptr[GPatternSpec], string_length : gsize, string : Ptr[gchar], string_reversed : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gpattern.h
  */
  def g_pattern_spec_match_string(pspec : Ptr[GPatternSpec], string : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gpattern.h
  */
  def g_pattern_spec_new(pattern : Ptr[gchar]): Ptr[GPatternSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpermission.h
  */
  def g_permission_acquire(permission : Ptr[GPermission], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpermission.h
  */
  def g_permission_acquire_async(permission : Ptr[GPermission], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpermission.h
  */
  def g_permission_acquire_finish(permission : Ptr[GPermission], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpermission.h
  */
  def g_permission_get_allowed(permission : Ptr[GPermission]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpermission.h
  */
  def g_permission_get_can_acquire(permission : Ptr[GPermission]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpermission.h
  */
  def g_permission_get_can_release(permission : Ptr[GPermission]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpermission.h
  */
  def g_permission_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpermission.h
  */
  def g_permission_impl_update(permission : Ptr[GPermission], allowed : gboolean, can_acquire : gboolean, can_release : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpermission.h
  */
  def g_permission_release(permission : Ptr[GPermission], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpermission.h
  */
  def g_permission_release_async(permission : Ptr[GPermission], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpermission.h
  */
  def g_permission_release_finish(permission : Ptr[GPermission], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbitlock.h
  */
  def g_pointer_bit_lock(address : Ptr[Byte], lock_bit : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbitlock.h
  */
  def g_pointer_bit_trylock(address : Ptr[Byte], lock_bit : gint): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gbitlock.h
  */
  def g_pointer_bit_unlock(address : Ptr[Byte], lock_bit : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_pointer_type_register_static(name : Ptr[gchar]): GType = extern

  /**
   * G_POLLFD_FORMAT:
  
   * [bindgen] header: /usr/include/glib-2.0/glib/gpoll.h
  */
  def g_poll(fds : Ptr[GPollFD], nfds : guint, timeout : gint): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpollableinputstream.h
  */
  def g_pollable_input_stream_can_poll(stream : Ptr[GPollableInputStream]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpollableinputstream.h
  */
  def g_pollable_input_stream_create_source(stream : Ptr[GPollableInputStream], cancellable : Ptr[GCancellable]): Ptr[GSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpollableinputstream.h
  */
  def g_pollable_input_stream_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpollableinputstream.h
  */
  def g_pollable_input_stream_is_readable(stream : Ptr[GPollableInputStream]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpollableinputstream.h
  */
  def g_pollable_input_stream_read_nonblocking(stream : Ptr[GPollableInputStream], buffer : Ptr[Byte], count : gsize, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpollableoutputstream.h
  */
  def g_pollable_output_stream_can_poll(stream : Ptr[GPollableOutputStream]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpollableoutputstream.h
  */
  def g_pollable_output_stream_create_source(stream : Ptr[GPollableOutputStream], cancellable : Ptr[GCancellable]): Ptr[GSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpollableoutputstream.h
  */
  def g_pollable_output_stream_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpollableoutputstream.h
  */
  def g_pollable_output_stream_is_writable(stream : Ptr[GPollableOutputStream]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpollableoutputstream.h
  */
  def g_pollable_output_stream_write_nonblocking(stream : Ptr[GPollableOutputStream], buffer : Ptr[Byte], count : gsize, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpollableoutputstream.h
  */
  def g_pollable_output_stream_writev_nonblocking(stream : Ptr[GPollableOutputStream], vectors : Ptr[GOutputVector], n_vectors : gsize, bytes_written : Ptr[gsize], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): GPollableReturn = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_pollable_return_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpollableutils.h
  */
  def g_pollable_source_new(pollable_stream : Ptr[GObject]): Ptr[GSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpollableutils.h
  */
  def g_pollable_source_new_full(pollable_stream : gpointer, child_source : Ptr[GSource], cancellable : Ptr[GCancellable]): Ptr[GSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpollableutils.h
  */
  def g_pollable_stream_read(stream : Ptr[GInputStream], buffer : Ptr[Byte], count : gsize, blocking : gboolean, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpollableutils.h
  */
  def g_pollable_stream_write(stream : Ptr[GOutputStream], buffer : Ptr[Byte], count : gsize, blocking : gboolean, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpollableutils.h
  */
  def g_pollable_stream_write_all(stream : Ptr[GOutputStream], buffer : Ptr[Byte], count : gsize, blocking : gboolean, bytes_written : Ptr[gsize], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_pollfd_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpowerprofilemonitor.h
  */
  def g_power_profile_monitor(ptr : gpointer): Ptr[GPowerProfileMonitor] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpowerprofilemonitor.h
  */
  def g_power_profile_monitor_GET_IFACE(ptr : gpointer): Ptr[GPowerProfileMonitorInterface] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpowerprofilemonitor.h
  */
  def g_power_profile_monitor_dup_default(): Ptr[GPowerProfileMonitor] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpowerprofilemonitor.h
  */
  def g_power_profile_monitor_get_power_saver_enabled(monitor : Ptr[GPowerProfileMonitor]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpowerprofilemonitor.h
  */
  def g_power_profile_monitor_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gerror.h
  */
  def g_prefix_error(err : Ptr[Ptr[GError]], format : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gerror.h
  */
  def g_prefix_error_literal(err : Ptr[Ptr[GError]], prefix : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_print(format : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_printerr(format : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_printf_string_upper_bound(format : Ptr[gchar], args : va_list): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_private_get(key : Ptr[GPrivate]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_private_new(notify : GDestroyNotify): Ptr[GPrivate] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_private_replace(key : Ptr[GPrivate], value : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_private_set(key : Ptr[GPrivate], value : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gerror.h
  */
  def g_propagate_error(dest : Ptr[Ptr[GError]], src : Ptr[GError]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gerror.h
  */
  def g_propagate_prefixed_error(dest : Ptr[Ptr[GError]], src : Ptr[GError], format : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpropertyaction.h
  */
  def g_property_action_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpropertyaction.h
  */
  def g_property_action_new(name : Ptr[gchar], `object` : gpointer, property_name : Ptr[gchar]): Ptr[GPropertyAction] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddressenumerator.h
  */
  def g_proxy_address_enumerator_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddress.h
  */
  def g_proxy_address_get_destination_hostname(proxy : Ptr[GProxyAddress]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddress.h
  */
  def g_proxy_address_get_destination_port(proxy : Ptr[GProxyAddress]): guint16 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddress.h
  */
  def g_proxy_address_get_destination_protocol(proxy : Ptr[GProxyAddress]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddress.h
  */
  def g_proxy_address_get_password(proxy : Ptr[GProxyAddress]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddress.h
  */
  def g_proxy_address_get_protocol(proxy : Ptr[GProxyAddress]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddress.h
  */
  def g_proxy_address_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddress.h
  */
  def g_proxy_address_get_uri(proxy : Ptr[GProxyAddress]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddress.h
  */
  def g_proxy_address_get_username(proxy : Ptr[GProxyAddress]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxyaddress.h
  */
  def g_proxy_address_new(inetaddr : Ptr[GInetAddress], port : guint16, protocol : Ptr[gchar], dest_hostname : Ptr[gchar], dest_port : guint16, username : Ptr[gchar], password : Ptr[gchar]): Ptr[GSocketAddress] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxy.h
  */
  def g_proxy_connect(proxy : Ptr[GProxy], connection : Ptr[GIOStream], proxy_address : Ptr[GProxyAddress], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GIOStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxy.h
  */
  def g_proxy_connect_async(proxy : Ptr[GProxy], connection : Ptr[GIOStream], proxy_address : Ptr[GProxyAddress], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxy.h
  */
  def g_proxy_connect_finish(proxy : Ptr[GProxy], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GIOStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxy.h
  */
  def g_proxy_get_default_for_protocol(protocol : Ptr[gchar]): Ptr[GProxy] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxy.h
  */
  def g_proxy_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxyresolver.h
  */
  def g_proxy_resolver_get_default(): Ptr[GProxyResolver] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxyresolver.h
  */
  def g_proxy_resolver_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxyresolver.h
  */
  def g_proxy_resolver_is_supported(resolver : Ptr[GProxyResolver]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxyresolver.h
  */
  def g_proxy_resolver_lookup(resolver : Ptr[GProxyResolver], uri : Ptr[gchar], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxyresolver.h
  */
  def g_proxy_resolver_lookup_async(resolver : Ptr[GProxyResolver], uri : Ptr[gchar], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxyresolver.h
  */
  def g_proxy_resolver_lookup_finish(resolver : Ptr[GProxyResolver], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gproxy.h
  */
  def g_proxy_supports_hostname(proxy : Ptr[GProxy]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_add(array : Ptr[GPtrArray], data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_copy(array : Ptr[GPtrArray], func : GCopyFunc, user_data : gpointer): Ptr[GPtrArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_extend(array_to_extend : Ptr[GPtrArray], array : Ptr[GPtrArray], func : GCopyFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_extend_and_steal(array_to_extend : Ptr[GPtrArray], array : Ptr[GPtrArray]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_find(haystack : Ptr[GPtrArray], needle : gconstpointer, `index_` : Ptr[guint]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_find_with_equal_func(haystack : Ptr[GPtrArray], needle : gconstpointer, equal_func : GEqualFunc, `index_` : Ptr[guint]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_foreach(array : Ptr[GPtrArray], func : GFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_free(array : Ptr[GPtrArray], free_seg : gboolean): Ptr[gpointer] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_ptr_array_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_insert(array : Ptr[GPtrArray], `index_` : gint, data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_new(): Ptr[GPtrArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_new_full(reserved_size : guint, element_free_func : GDestroyNotify): Ptr[GPtrArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_new_with_free_func(element_free_func : GDestroyNotify): Ptr[GPtrArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_ref(array : Ptr[GPtrArray]): Ptr[GPtrArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_remove(array : Ptr[GPtrArray], data : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_remove_fast(array : Ptr[GPtrArray], data : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_remove_index(array : Ptr[GPtrArray], `index_` : guint): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_remove_index_fast(array : Ptr[GPtrArray], `index_` : guint): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_remove_range(array : Ptr[GPtrArray], `index_` : guint, length : guint): Ptr[GPtrArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_set_free_func(array : Ptr[GPtrArray], element_free_func : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_set_size(array : Ptr[GPtrArray], length : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_sized_new(reserved_size : guint): Ptr[GPtrArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_sort(array : Ptr[GPtrArray], compare_func : GCompareFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_sort_with_data(array : Ptr[GPtrArray], compare_func : GCompareDataFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_steal(array : Ptr[GPtrArray], len : Ptr[gsize]): Ptr[gpointer] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_steal_index(array : Ptr[GPtrArray], `index_` : guint): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_steal_index_fast(array : Ptr[GPtrArray], `index_` : guint): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/garray.h
  */
  def g_ptr_array_unref(array : Ptr[GPtrArray]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqsort.h
  */
  def g_qsort_with_data(pbase : gconstpointer, total_elems : gint, size : gsize, compare_func : GCompareDataFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gquark.h
  */
  def g_quark_from_static_string(string : Ptr[gchar]): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gquark.h
  */
  def g_quark_from_string(string : Ptr[gchar]): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gquark.h
  */
  def g_quark_to_string(quark : GQuark): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gquark.h
  */
  def g_quark_try_string(string : Ptr[gchar]): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_clear(queue : Ptr[GQueue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_clear_full(queue : Ptr[GQueue], free_func : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_copy(queue : Ptr[GQueue]): Ptr[GQueue] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_delete_link(queue : Ptr[GQueue], `link_` : Ptr[GList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_find(queue : Ptr[GQueue], data : gconstpointer): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_find_custom(queue : Ptr[GQueue], data : gconstpointer, func : GCompareFunc): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_foreach(queue : Ptr[GQueue], func : GFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_free(queue : Ptr[GQueue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_free_full(queue : Ptr[GQueue], free_func : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_get_length(queue : Ptr[GQueue]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_index(queue : Ptr[GQueue], data : gconstpointer): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_init(queue : Ptr[GQueue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_insert_after(queue : Ptr[GQueue], sibling : Ptr[GList], data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_insert_after_link(queue : Ptr[GQueue], sibling : Ptr[GList], `link_` : Ptr[GList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_insert_before(queue : Ptr[GQueue], sibling : Ptr[GList], data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_insert_before_link(queue : Ptr[GQueue], sibling : Ptr[GList], `link_` : Ptr[GList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_insert_sorted(queue : Ptr[GQueue], data : gpointer, func : GCompareDataFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_is_empty(queue : Ptr[GQueue]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_link_index(queue : Ptr[GQueue], `link_` : Ptr[GList]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_new(): Ptr[GQueue] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_peek_head(queue : Ptr[GQueue]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_peek_head_link(queue : Ptr[GQueue]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_peek_nth(queue : Ptr[GQueue], n : guint): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_peek_nth_link(queue : Ptr[GQueue], n : guint): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_peek_tail(queue : Ptr[GQueue]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_peek_tail_link(queue : Ptr[GQueue]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_pop_head(queue : Ptr[GQueue]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_pop_head_link(queue : Ptr[GQueue]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_pop_nth(queue : Ptr[GQueue], n : guint): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_pop_nth_link(queue : Ptr[GQueue], n : guint): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_pop_tail(queue : Ptr[GQueue]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_pop_tail_link(queue : Ptr[GQueue]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_push_head(queue : Ptr[GQueue], data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_push_head_link(queue : Ptr[GQueue], `link_` : Ptr[GList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_push_nth(queue : Ptr[GQueue], data : gpointer, n : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_push_nth_link(queue : Ptr[GQueue], n : gint, `link_` : Ptr[GList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_push_tail(queue : Ptr[GQueue], data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_push_tail_link(queue : Ptr[GQueue], `link_` : Ptr[GList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_remove(queue : Ptr[GQueue], data : gconstpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_remove_all(queue : Ptr[GQueue], data : gconstpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_reverse(queue : Ptr[GQueue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_sort(queue : Ptr[GQueue], compare_func : GCompareDataFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gqueue.h
  */
  def g_queue_unlink(queue : Ptr[GQueue], `link_` : Ptr[GList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grand.h
  */
  def g_rand_copy(`rand_` : Ptr[GRand]): Ptr[GRand] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grand.h
  */
  def g_rand_double(`rand_` : Ptr[GRand]): gdouble = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grand.h
  */
  def g_rand_double_range(`rand_` : Ptr[GRand], begin : gdouble, end : gdouble): gdouble = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grand.h
  */
  def g_rand_free(`rand_` : Ptr[GRand]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grand.h
  */
  def g_rand_int(`rand_` : Ptr[GRand]): guint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grand.h
  */
  def g_rand_int_range(`rand_` : Ptr[GRand], begin : gint32, end : gint32): gint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grand.h
  */
  def g_rand_new(): Ptr[GRand] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grand.h
  */
  def g_rand_new_with_seed(seed : guint32): Ptr[GRand] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grand.h
  */
  def g_rand_new_with_seed_array(seed : Ptr[guint32], seed_length : guint): Ptr[GRand] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grand.h
  */
  def g_rand_set_seed(`rand_` : Ptr[GRand], seed : guint32): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grand.h
  */
  def g_rand_set_seed_array(`rand_` : Ptr[GRand], seed : Ptr[guint32], seed_length : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grand.h
  */
  def g_random_double(): gdouble = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grand.h
  */
  def g_random_double_range(begin : gdouble, end : gdouble): gdouble = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grand.h
  */
  def g_random_int(): guint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grand.h
  */
  def g_random_int_range(begin : gint32, end : gint32): gint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grand.h
  */
  def g_random_set_seed(seed : guint32): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grcbox.h
  */
  def g_rc_box_acquire(mem_block : gpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grcbox.h
  */
  def g_rc_box_alloc(block_size : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grcbox.h
  */
  def g_rc_box_alloc0(block_size : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grcbox.h
  */
  def g_rc_box_dup(block_size : gsize, mem_block : gconstpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grcbox.h
  */
  def g_rc_box_get_size(mem_block : gpointer): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grcbox.h
  */
  def g_rc_box_release(mem_block : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grcbox.h
  */
  def g_rc_box_release_full(mem_block : gpointer, clear_func : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_realloc(mem : gpointer, n_bytes : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_realloc_n(mem : gpointer, n_blocks : gsize, n_block_bytes : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_rec_mutex_clear(rec_mutex : Ptr[GRecMutex]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_rec_mutex_init(rec_mutex : Ptr[GRecMutex]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_rec_mutex_lock(rec_mutex : Ptr[GRecMutex]): Unit = extern

  /**
   * g_rec_mutex_locker_free: : a GRecMutexLocker
  
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_rec_mutex_locker_free(locker : Ptr[GRecMutexLocker]): Unit = extern

  /**
   * g_rec_mutex_locker_new: _mutex: a recursive mutex to lock
  
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_rec_mutex_locker_new(rec_mutex : Ptr[GRecMutex]): Ptr[GRecMutexLocker] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_rec_mutex_trylock(rec_mutex : Ptr[GRecMutex]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_rec_mutex_unlock(rec_mutex : Ptr[GRecMutex]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grefcount.h
  */
  def g_ref_count_compare(rc : Ptr[grefcount], `val` : gint): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grefcount.h
  */
  def g_ref_count_dec(rc : Ptr[grefcount]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grefcount.h
  */
  def g_ref_count_inc(rc : Ptr[grefcount]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grefcount.h
  */
  def g_ref_count_init(rc : Ptr[grefcount]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grefstring.h
  */
  def g_ref_string_acquire(str : CString): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grefstring.h
  */
  def g_ref_string_length(str : CString): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grefstring.h
  */
  def g_ref_string_new(str : CString): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grefstring.h
  */
  def g_ref_string_new_intern(str : CString): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grefstring.h
  */
  def g_ref_string_new_len(str : CString, len : gssize): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/grefstring.h
  */
  def g_ref_string_release(str : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_check_replacement(replacement : Ptr[gchar], has_references : Ptr[gboolean], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_escape_nul(string : Ptr[gchar], length : gint): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_escape_string(string : Ptr[gchar], length : gint): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_get_capture_count(regex : Ptr[GRegex]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_get_compile_flags(regex : Ptr[GRegex]): GRegexCompileFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_get_has_cr_or_lf(regex : Ptr[GRegex]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_get_match_flags(regex : Ptr[GRegex]): GRegexMatchFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_get_max_backref(regex : Ptr[GRegex]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_get_max_lookbehind(regex : Ptr[GRegex]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_get_pattern(regex : Ptr[GRegex]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_get_string_number(regex : Ptr[GRegex], name : Ptr[gchar]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_regex_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_match(regex : Ptr[GRegex], string : Ptr[gchar], match_options : GRegexMatchFlags, match_info : Ptr[Ptr[GMatchInfo]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_match_all(regex : Ptr[GRegex], string : Ptr[gchar], match_options : GRegexMatchFlags, match_info : Ptr[Ptr[GMatchInfo]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_match_all_full(regex : Ptr[GRegex], string : Ptr[gchar], string_len : gssize, start_position : gint, match_options : GRegexMatchFlags, match_info : Ptr[Ptr[GMatchInfo]], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_match_full(regex : Ptr[GRegex], string : Ptr[gchar], string_len : gssize, start_position : gint, match_options : GRegexMatchFlags, match_info : Ptr[Ptr[GMatchInfo]], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_match_simple(pattern : Ptr[gchar], string : Ptr[gchar], compile_options : GRegexCompileFlags, match_options : GRegexMatchFlags): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_new(pattern : Ptr[gchar], compile_options : GRegexCompileFlags, match_options : GRegexMatchFlags, error : Ptr[Ptr[GError]]): Ptr[GRegex] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_ref(regex : Ptr[GRegex]): Ptr[GRegex] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_replace(regex : Ptr[GRegex], string : Ptr[gchar], string_len : gssize, start_position : gint, replacement : Ptr[gchar], match_options : GRegexMatchFlags, error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_replace_eval(regex : Ptr[GRegex], string : Ptr[gchar], string_len : gssize, start_position : gint, match_options : GRegexMatchFlags, eval : GRegexEvalCallback, user_data : gpointer, error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_replace_literal(regex : Ptr[GRegex], string : Ptr[gchar], string_len : gssize, start_position : gint, replacement : Ptr[gchar], match_options : GRegexMatchFlags, error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_split(regex : Ptr[GRegex], string : Ptr[gchar], match_options : GRegexMatchFlags): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_split_full(regex : Ptr[GRegex], string : Ptr[gchar], string_len : gssize, start_position : gint, match_options : GRegexMatchFlags, max_tokens : gint, error : Ptr[Ptr[GError]]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_split_simple(pattern : Ptr[gchar], string : Ptr[gchar], compile_options : GRegexCompileFlags, match_options : GRegexMatchFlags): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gregex.h
  */
  def g_regex_unref(regex : Ptr[GRegex]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/grel.h
  */
  def g_relation_count(relation : Ptr[GRelation], key : gconstpointer, field : gint): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/grel.h
  */
  def g_relation_delete(relation : Ptr[GRelation], key : gconstpointer, field : gint): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/grel.h
  */
  def g_relation_destroy(relation : Ptr[GRelation]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/grel.h
  */
  def g_relation_exists(relation : Ptr[GRelation]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/grel.h
  */
  def g_relation_index(relation : Ptr[GRelation], field : gint, hash_func : GHashFunc, key_equal_func : GEqualFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/grel.h
  */
  def g_relation_insert(relation : Ptr[GRelation]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/grel.h
  */
  def g_relation_new(fields : gint): Ptr[GRelation] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/grel.h
  */
  def g_relation_print(relation : Ptr[GRelation]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/grel.h
  */
  def g_relation_select(relation : Ptr[GRelation], key : gconstpointer, field : gint): Ptr[GTuples] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_reload_user_special_dirs_cache(): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gremoteactiongroup.h
  */
  def g_remote_action_group_activate_action_full(remote : Ptr[GRemoteActionGroup], action_name : Ptr[gchar], parameter : Ptr[GVariant], platform_data : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gremoteactiongroup.h
  */
  def g_remote_action_group_change_action_state_full(remote : Ptr[GRemoteActionGroup], action_name : Ptr[gchar], value : Ptr[GVariant], platform_data : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gremoteactiongroup.h
  */
  def g_remote_action_group_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_resolver_error_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_free_addresses(addresses : Ptr[GList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_free_targets(targets : Ptr[GList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_get_default(): Ptr[GResolver] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_lookup_by_address(resolver : Ptr[GResolver], address : Ptr[GInetAddress], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_lookup_by_address_async(resolver : Ptr[GResolver], address : Ptr[GInetAddress], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_lookup_by_address_finish(resolver : Ptr[GResolver], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_lookup_by_name(resolver : Ptr[GResolver], hostname : Ptr[gchar], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_lookup_by_name_async(resolver : Ptr[GResolver], hostname : Ptr[gchar], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_lookup_by_name_finish(resolver : Ptr[GResolver], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_lookup_by_name_with_flags(resolver : Ptr[GResolver], hostname : Ptr[gchar], flags : GResolverNameLookupFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_lookup_by_name_with_flags_async(resolver : Ptr[GResolver], hostname : Ptr[gchar], flags : GResolverNameLookupFlags, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_lookup_by_name_with_flags_finish(resolver : Ptr[GResolver], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_lookup_records(resolver : Ptr[GResolver], rrname : Ptr[gchar], record_type : GResolverRecordType, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_lookup_records_async(resolver : Ptr[GResolver], rrname : Ptr[gchar], record_type : GResolverRecordType, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_lookup_records_finish(resolver : Ptr[GResolver], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_lookup_service(resolver : Ptr[GResolver], service : Ptr[gchar], protocol : Ptr[gchar], domain : Ptr[gchar], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_lookup_service_async(resolver : Ptr[GResolver], service : Ptr[gchar], protocol : Ptr[gchar], domain : Ptr[gchar], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_lookup_service_finish(resolver : Ptr[GResolver], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_resolver_name_lookup_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_resolver_record_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresolver.h
  */
  def g_resolver_set_default(resolver : Ptr[GResolver]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
  */
  def g_resource_enumerate_children(resource : Ptr[GResource], path : CString, lookup_flags : GResourceLookupFlags, error : Ptr[Ptr[GError]]): Ptr[CString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_resource_error_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
  */
  def g_resource_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_resource_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
  */
  def g_resource_get_info(resource : Ptr[GResource], path : CString, lookup_flags : GResourceLookupFlags, size : Ptr[gsize], flags : Ptr[guint32], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
  */
  def g_resource_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
  */
  def g_resource_load(filename : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[GResource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
  */
  def g_resource_lookup_data(resource : Ptr[GResource], path : CString, lookup_flags : GResourceLookupFlags, error : Ptr[Ptr[GError]]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_resource_lookup_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
  */
  def g_resource_new_from_data(data : Ptr[GBytes], error : Ptr[Ptr[GError]]): Ptr[GResource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
  */
  def g_resource_open_stream(resource : Ptr[GResource], path : CString, lookup_flags : GResourceLookupFlags, error : Ptr[Ptr[GError]]): Ptr[GInputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
  */
  def g_resource_ref(resource : Ptr[GResource]): Ptr[GResource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
  */
  def g_resource_unref(resource : Ptr[GResource]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
  */
  def g_resources_enumerate_children(path : CString, lookup_flags : GResourceLookupFlags, error : Ptr[Ptr[GError]]): Ptr[CString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
  */
  def g_resources_get_info(path : CString, lookup_flags : GResourceLookupFlags, size : Ptr[gsize], flags : Ptr[guint32], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
  */
  def g_resources_lookup_data(path : CString, lookup_flags : GResourceLookupFlags, error : Ptr[Ptr[GError]]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
  */
  def g_resources_open_stream(path : CString, lookup_flags : GResourceLookupFlags, error : Ptr[Ptr[GError]]): Ptr[GInputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
  */
  def g_resources_register(resource : Ptr[GResource]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
  */
  def g_resources_unregister(resource : Ptr[GResource]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_return_if_fail_warning(log_domain : CString, pretty_function : CString, expression : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_rw_lock_clear(rw_lock : Ptr[GRWLock]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_rw_lock_init(rw_lock : Ptr[GRWLock]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_rw_lock_reader_lock(rw_lock : Ptr[GRWLock]): Unit = extern

  /**
   * g_rw_lock_reader_locker_free: : a GRWLockReaderLocker
  
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_rw_lock_reader_locker_free(locker : Ptr[GRWLockReaderLocker]): Unit = extern

  /**
   * g_rw_lock_reader_locker_new: _lock: a #GRWLock
  
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_rw_lock_reader_locker_new(rw_lock : Ptr[GRWLock]): Ptr[GRWLockReaderLocker] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_rw_lock_reader_trylock(rw_lock : Ptr[GRWLock]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_rw_lock_reader_unlock(rw_lock : Ptr[GRWLock]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_rw_lock_writer_lock(rw_lock : Ptr[GRWLock]): Unit = extern

  /**
   * g_rw_lock_writer_locker_free: : a GRWLockWriterLocker
  
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_rw_lock_writer_locker_free(locker : Ptr[GRWLockWriterLocker]): Unit = extern

  /**
   * g_rw_lock_writer_locker_new: _lock: a #GRWLock
  
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_rw_lock_writer_locker_new(rw_lock : Ptr[GRWLock]): Ptr[GRWLockWriterLocker] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_rw_lock_writer_trylock(rw_lock : Ptr[GRWLock]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_rw_lock_writer_unlock(rw_lock : Ptr[GRWLock]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_cur_line(scanner : Ptr[GScanner]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_cur_position(scanner : Ptr[GScanner]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_cur_token(scanner : Ptr[GScanner]): GTokenType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_cur_value(scanner : Ptr[GScanner]): GTokenValue = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_destroy(scanner : Ptr[GScanner]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_eof(scanner : Ptr[GScanner]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_error(scanner : Ptr[GScanner], format : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_get_next_token(scanner : Ptr[GScanner]): GTokenType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_input_file(scanner : Ptr[GScanner], input_fd : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_input_text(scanner : Ptr[GScanner], text : Ptr[gchar], text_len : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_lookup_symbol(scanner : Ptr[GScanner], symbol : Ptr[gchar]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_new(config_templ : Ptr[GScannerConfig]): Ptr[GScanner] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_peek_next_token(scanner : Ptr[GScanner]): GTokenType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_scope_add_symbol(scanner : Ptr[GScanner], scope_id : guint, symbol : Ptr[gchar], value : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_scope_foreach_symbol(scanner : Ptr[GScanner], scope_id : guint, func : GHFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_scope_lookup_symbol(scanner : Ptr[GScanner], scope_id : guint, symbol : Ptr[gchar]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_scope_remove_symbol(scanner : Ptr[GScanner], scope_id : guint, symbol : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_set_scope(scanner : Ptr[GScanner], scope_id : guint): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_sync_file_offset(scanner : Ptr[GScanner]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_unexp_token(scanner : Ptr[GScanner], expected_token : GTokenType, identifier_spec : Ptr[gchar], symbol_spec : Ptr[gchar], symbol_name : Ptr[gchar], message : Ptr[gchar], is_error : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gscanner.h
  */
  def g_scanner_warn(scanner : Ptr[GScanner], format : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gseekable.h
  */
  def g_seekable_can_seek(seekable : Ptr[GSeekable]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gseekable.h
  */
  def g_seekable_can_truncate(seekable : Ptr[GSeekable]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gseekable.h
  */
  def g_seekable_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gseekable.h
  */
  def g_seekable_seek(seekable : Ptr[GSeekable], offset : goffset, `type` : GSeekType, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gseekable.h
  */
  def g_seekable_tell(seekable : Ptr[GSeekable]): goffset = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gseekable.h
  */
  def g_seekable_truncate(seekable : Ptr[GSeekable], offset : goffset, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_append(seq : Ptr[GSequence], data : gpointer): Ptr[GSequenceIter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_foreach(seq : Ptr[GSequence], func : GFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_foreach_range(begin : Ptr[GSequenceIter], end : Ptr[GSequenceIter], func : GFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_free(seq : Ptr[GSequence]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_get(iter : Ptr[GSequenceIter]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_get_begin_iter(seq : Ptr[GSequence]): Ptr[GSequenceIter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_get_end_iter(seq : Ptr[GSequence]): Ptr[GSequenceIter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_get_iter_at_pos(seq : Ptr[GSequence], pos : gint): Ptr[GSequenceIter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_get_length(seq : Ptr[GSequence]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_insert_before(iter : Ptr[GSequenceIter], data : gpointer): Ptr[GSequenceIter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_insert_sorted(seq : Ptr[GSequence], data : gpointer, cmp_func : GCompareDataFunc, cmp_data : gpointer): Ptr[GSequenceIter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_insert_sorted_iter(seq : Ptr[GSequence], data : gpointer, iter_cmp : GSequenceIterCompareFunc, cmp_data : gpointer): Ptr[GSequenceIter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_is_empty(seq : Ptr[GSequence]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_iter_compare(a : Ptr[GSequenceIter], b : Ptr[GSequenceIter]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_iter_get_position(iter : Ptr[GSequenceIter]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_iter_get_sequence(iter : Ptr[GSequenceIter]): Ptr[GSequence] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_iter_is_begin(iter : Ptr[GSequenceIter]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_iter_is_end(iter : Ptr[GSequenceIter]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_iter_move(iter : Ptr[GSequenceIter], delta : gint): Ptr[GSequenceIter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_iter_next(iter : Ptr[GSequenceIter]): Ptr[GSequenceIter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_iter_prev(iter : Ptr[GSequenceIter]): Ptr[GSequenceIter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_lookup(seq : Ptr[GSequence], data : gpointer, cmp_func : GCompareDataFunc, cmp_data : gpointer): Ptr[GSequenceIter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_lookup_iter(seq : Ptr[GSequence], data : gpointer, iter_cmp : GSequenceIterCompareFunc, cmp_data : gpointer): Ptr[GSequenceIter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_move(src : Ptr[GSequenceIter], dest : Ptr[GSequenceIter]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_move_range(dest : Ptr[GSequenceIter], begin : Ptr[GSequenceIter], end : Ptr[GSequenceIter]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_new(data_destroy : GDestroyNotify): Ptr[GSequence] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_prepend(seq : Ptr[GSequence], data : gpointer): Ptr[GSequenceIter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_range_get_midpoint(begin : Ptr[GSequenceIter], end : Ptr[GSequenceIter]): Ptr[GSequenceIter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_remove(iter : Ptr[GSequenceIter]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_remove_range(begin : Ptr[GSequenceIter], end : Ptr[GSequenceIter]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_search(seq : Ptr[GSequence], data : gpointer, cmp_func : GCompareDataFunc, cmp_data : gpointer): Ptr[GSequenceIter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_search_iter(seq : Ptr[GSequence], data : gpointer, iter_cmp : GSequenceIterCompareFunc, cmp_data : gpointer): Ptr[GSequenceIter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_set(iter : Ptr[GSequenceIter], data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_sort(seq : Ptr[GSequence], cmp_func : GCompareDataFunc, cmp_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_sort_changed(iter : Ptr[GSequenceIter], cmp_func : GCompareDataFunc, cmp_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_sort_changed_iter(iter : Ptr[GSequenceIter], iter_cmp : GSequenceIterCompareFunc, cmp_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_sort_iter(seq : Ptr[GSequence], cmp_func : GSequenceIterCompareFunc, cmp_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gsequence.h
  */
  def g_sequence_swap(a : Ptr[GSequenceIter], b : Ptr[GSequenceIter]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_set_application_name(application_name : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gerror.h
  */
  def g_set_error(err : Ptr[Ptr[GError]], domain : GQuark, code : gint, format : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gerror.h
  */
  def g_set_error_literal(err : Ptr[Ptr[GError]], domain : GQuark, code : gint, message : Ptr[gchar]): Unit = extern

  /**
   * g_set_object: (skip) _ptr: (inout) (not optional) (nullable): a pointer to a #GObject reference _object: (nullable) (transfer none): a pointer to the new #GObject to assign to _ptr, or %NULL to clear the pointer
  
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_set_object(object_ptr : Ptr[Ptr[GObject]], new_object : Ptr[GObject]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_set_prgname(prgname : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_set_print_handler(func : GPrintFunc): GPrintFunc = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_set_printerr_handler(func : GPrintFunc): GPrintFunc = extern

  /**
   * g_set_weak_pointer: (skip) _pointer_location: the memory address of a pointer _object: (nullable) (transfer none): a pointer to the new #GObject to assign to it, or %NULL to clear the pointer
  
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_set_weak_pointer(weak_pointer_location : Ptr[gpointer], new_object : Ptr[GObject]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/genviron.h
  */
  def g_setenv(variable : Ptr[gchar], value : Ptr[gchar], overwrite : gboolean): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_apply(settings : Ptr[GSettings]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_bind(settings : Ptr[GSettings], key : Ptr[gchar], `object` : gpointer, property : Ptr[gchar], flags : GSettingsBindFlags): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_settings_bind_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_bind_with_mapping(settings : Ptr[GSettings], key : Ptr[gchar], `object` : gpointer, property : Ptr[gchar], flags : GSettingsBindFlags, get_mapping : GSettingsBindGetMapping, set_mapping : GSettingsBindSetMapping, user_data : gpointer, destroy : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_bind_writable(settings : Ptr[GSettings], key : Ptr[gchar], `object` : gpointer, property : Ptr[gchar], inverted : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_create_action(settings : Ptr[GSettings], key : Ptr[gchar]): Ptr[GAction] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_delay(settings : Ptr[GSettings]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_get(settings : Ptr[GSettings], key : Ptr[gchar], format : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_get_boolean(settings : Ptr[GSettings], key : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_get_child(settings : Ptr[GSettings], name : Ptr[gchar]): Ptr[GSettings] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_get_default_value(settings : Ptr[GSettings], key : Ptr[gchar]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_get_double(settings : Ptr[GSettings], key : Ptr[gchar]): gdouble = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_get_enum(settings : Ptr[GSettings], key : Ptr[gchar]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_get_flags(settings : Ptr[GSettings], key : Ptr[gchar]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_get_has_unapplied(settings : Ptr[GSettings]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_get_int(settings : Ptr[GSettings], key : Ptr[gchar]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_get_int64(settings : Ptr[GSettings], key : Ptr[gchar]): gint64 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_get_mapped(settings : Ptr[GSettings], key : Ptr[gchar], mapping : GSettingsGetMapping, user_data : gpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_get_range(settings : Ptr[GSettings], key : Ptr[gchar]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_get_string(settings : Ptr[GSettings], key : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_get_strv(settings : Ptr[GSettings], key : Ptr[gchar]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_get_uint(settings : Ptr[GSettings], key : Ptr[gchar]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_get_uint64(settings : Ptr[GSettings], key : Ptr[gchar]): guint64 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_get_user_value(settings : Ptr[GSettings], key : Ptr[gchar]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_get_value(settings : Ptr[GSettings], key : Ptr[gchar]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_is_writable(settings : Ptr[GSettings], name : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_list_children(settings : Ptr[GSettings]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_list_keys(settings : Ptr[GSettings]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_list_relocatable_schemas(): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_list_schemas(): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_new(schema_id : Ptr[gchar]): Ptr[GSettings] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_new_full(schema : Ptr[GSettingsSchema], backend : Ptr[GSettingsBackend], path : Ptr[gchar]): Ptr[GSettings] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_new_with_backend(schema_id : Ptr[gchar], backend : Ptr[GSettingsBackend]): Ptr[GSettings] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_new_with_backend_and_path(schema_id : Ptr[gchar], backend : Ptr[GSettingsBackend], path : Ptr[gchar]): Ptr[GSettings] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_new_with_path(schema_id : Ptr[gchar], path : Ptr[gchar]): Ptr[GSettings] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_range_check(settings : Ptr[GSettings], key : Ptr[gchar], value : Ptr[GVariant]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_reset(settings : Ptr[GSettings], key : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_revert(settings : Ptr[GSettings]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_get_id(schema : Ptr[GSettingsSchema]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_get_key(schema : Ptr[GSettingsSchema], name : Ptr[gchar]): Ptr[GSettingsSchemaKey] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_get_path(schema : Ptr[GSettingsSchema]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_has_key(schema : Ptr[GSettingsSchema], name : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_key_get_default_value(key : Ptr[GSettingsSchemaKey]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_key_get_description(key : Ptr[GSettingsSchemaKey]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_key_get_name(key : Ptr[GSettingsSchemaKey]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_key_get_range(key : Ptr[GSettingsSchemaKey]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_key_get_summary(key : Ptr[GSettingsSchemaKey]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_key_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_key_get_value_type(key : Ptr[GSettingsSchemaKey]): Ptr[GVariantType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_key_range_check(key : Ptr[GSettingsSchemaKey], value : Ptr[GVariant]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_key_ref(key : Ptr[GSettingsSchemaKey]): Ptr[GSettingsSchemaKey] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_key_unref(key : Ptr[GSettingsSchemaKey]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_list_children(schema : Ptr[GSettingsSchema]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_list_keys(schema : Ptr[GSettingsSchema]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_ref(schema : Ptr[GSettingsSchema]): Ptr[GSettingsSchema] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_source_get_default(): Ptr[GSettingsSchemaSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_source_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_source_list_schemas(source : Ptr[GSettingsSchemaSource], recursive : gboolean, non_relocatable : Ptr[Ptr[Ptr[gchar]]], relocatable : Ptr[Ptr[Ptr[gchar]]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_source_lookup(source : Ptr[GSettingsSchemaSource], schema_id : Ptr[gchar], recursive : gboolean): Ptr[GSettingsSchema] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_source_new_from_directory(directory : Ptr[gchar], parent : Ptr[GSettingsSchemaSource], trusted : gboolean, error : Ptr[Ptr[GError]]): Ptr[GSettingsSchemaSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_source_ref(source : Ptr[GSettingsSchemaSource]): Ptr[GSettingsSchemaSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_source_unref(source : Ptr[GSettingsSchemaSource]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettingsschema.h
  */
  def g_settings_schema_unref(schema : Ptr[GSettingsSchema]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_set(settings : Ptr[GSettings], key : Ptr[gchar], format : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_set_boolean(settings : Ptr[GSettings], key : Ptr[gchar], value : gboolean): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_set_double(settings : Ptr[GSettings], key : Ptr[gchar], value : gdouble): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_set_enum(settings : Ptr[GSettings], key : Ptr[gchar], value : gint): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_set_flags(settings : Ptr[GSettings], key : Ptr[gchar], value : guint): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_set_int(settings : Ptr[GSettings], key : Ptr[gchar], value : gint): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_set_int64(settings : Ptr[GSettings], key : Ptr[gchar], value : gint64): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_set_string(settings : Ptr[GSettings], key : Ptr[gchar], value : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_set_strv(settings : Ptr[GSettings], key : Ptr[gchar], value : Ptr[Ptr[gchar]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_set_uint(settings : Ptr[GSettings], key : Ptr[gchar], value : guint): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_set_uint64(settings : Ptr[GSettings], key : Ptr[gchar], value : guint64): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_set_value(settings : Ptr[GSettings], key : Ptr[gchar], value : Ptr[GVariant]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_sync(): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsettings.h
  */
  def g_settings_unbind(`object` : gpointer, property : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gshell.h
  */
  def g_shell_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gshell.h
  */
  def g_shell_parse_argv(command_line : Ptr[gchar], argcp : Ptr[gint], argvp : Ptr[Ptr[Ptr[gchar]]], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gshell.h
  */
  def g_shell_quote(unquoted_string : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gshell.h
  */
  def g_shell_unquote(quoted_string : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_accumulator_first_wins(ihint : Ptr[GSignalInvocationHint], return_accu : Ptr[GValue], handler_return : Ptr[GValue], dummy : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_accumulator_true_handled(ihint : Ptr[GSignalInvocationHint], return_accu : Ptr[GValue], handler_return : Ptr[GValue], dummy : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_add_emission_hook(signal_id : guint, detail : GQuark, hook_func : GSignalEmissionHook, hook_data : gpointer, data_destroy : GDestroyNotify): gulong = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_chain_from_overridden(instance_and_params : Ptr[GValue], return_value : Ptr[GValue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_chain_from_overridden_handler(instance : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_connect_closure(instance : gpointer, detailed_signal : Ptr[gchar], closure : Ptr[GClosure], after : gboolean): gulong = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_connect_closure_by_id(instance : gpointer, signal_id : guint, detail : GQuark, closure : Ptr[GClosure], after : gboolean): gulong = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_connect_data(instance : gpointer, detailed_signal : Ptr[gchar], c_handler : GCallback, data : gpointer, destroy_data : GClosureNotify, connect_flags : GConnectFlags): gulong = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_signal_connect_object(instance : gpointer, detailed_signal : Ptr[gchar], c_handler : GCallback, gobject : gpointer, connect_flags : GConnectFlags): gulong = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_emit(instance : gpointer, signal_id : guint, detail : GQuark): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_emit_by_name(instance : gpointer, detailed_signal : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_emit_valist(instance : gpointer, signal_id : guint, detail : GQuark, var_args : va_list): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_emitv(instance_and_params : Ptr[GValue], signal_id : guint, detail : GQuark, return_value : Ptr[GValue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_get_invocation_hint(instance : gpointer): Ptr[GSignalInvocationHint] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignalgroup.h
  */
  def g_signal_group_block(self : Ptr[GSignalGroup]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignalgroup.h
  */
  def g_signal_group_connect(self : Ptr[GSignalGroup], detailed_signal : Ptr[gchar], c_handler : GCallback, data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignalgroup.h
  */
  def g_signal_group_connect_after(self : Ptr[GSignalGroup], detailed_signal : Ptr[gchar], c_handler : GCallback, data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignalgroup.h
  */
  def g_signal_group_connect_data(self : Ptr[GSignalGroup], detailed_signal : Ptr[gchar], c_handler : GCallback, data : gpointer, notify : GClosureNotify, flags : GConnectFlags): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignalgroup.h
  */
  def g_signal_group_connect_object(self : Ptr[GSignalGroup], detailed_signal : Ptr[gchar], c_handler : GCallback, `object` : gpointer, flags : GConnectFlags): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignalgroup.h
  */
  def g_signal_group_connect_swapped(self : Ptr[GSignalGroup], detailed_signal : Ptr[gchar], c_handler : GCallback, data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignalgroup.h
  */
  def g_signal_group_dup_target(self : Ptr[GSignalGroup]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignalgroup.h
  */
  def g_signal_group_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignalgroup.h
  */
  def g_signal_group_new(target_type : GType): Ptr[GSignalGroup] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignalgroup.h
  */
  def g_signal_group_set_target(self : Ptr[GSignalGroup], target : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignalgroup.h
  */
  def g_signal_group_unblock(self : Ptr[GSignalGroup]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_handler_block(instance : gpointer, handler_id : gulong): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_handler_disconnect(instance : gpointer, handler_id : gulong): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_handler_find(instance : gpointer, mask : GSignalMatchType, signal_id : guint, detail : GQuark, closure : Ptr[GClosure], func : gpointer, data : gpointer): gulong = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_handler_is_connected(instance : gpointer, handler_id : gulong): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_handler_unblock(instance : gpointer, handler_id : gulong): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_handlers_block_matched(instance : gpointer, mask : GSignalMatchType, signal_id : guint, detail : GQuark, closure : Ptr[GClosure], func : gpointer, data : gpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_handlers_destroy(instance : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_handlers_disconnect_matched(instance : gpointer, mask : GSignalMatchType, signal_id : guint, detail : GQuark, closure : Ptr[GClosure], func : gpointer, data : gpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_handlers_unblock_matched(instance : gpointer, mask : GSignalMatchType, signal_id : guint, detail : GQuark, closure : Ptr[GClosure], func : gpointer, data : gpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_has_handler_pending(instance : gpointer, signal_id : guint, detail : GQuark, may_be_blocked : gboolean): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_is_valid_name(name : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_list_ids(itype : GType, n_ids : Ptr[guint]): Ptr[guint] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_lookup(name : Ptr[gchar], itype : GType): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_name(signal_id : guint): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_new(signal_name : Ptr[gchar], itype : GType, signal_flags : GSignalFlags, class_offset : guint, accumulator : GSignalAccumulator, accu_data : gpointer, c_marshaller : GSignalCMarshaller, return_type : GType, n_params : guint): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_new_class_handler(signal_name : Ptr[gchar], itype : GType, signal_flags : GSignalFlags, class_handler : GCallback, accumulator : GSignalAccumulator, accu_data : gpointer, c_marshaller : GSignalCMarshaller, return_type : GType, n_params : guint): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_new_valist(signal_name : Ptr[gchar], itype : GType, signal_flags : GSignalFlags, class_closure : Ptr[GClosure], accumulator : GSignalAccumulator, accu_data : gpointer, c_marshaller : GSignalCMarshaller, return_type : GType, n_params : guint, args : va_list): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_newv(signal_name : Ptr[gchar], itype : GType, signal_flags : GSignalFlags, class_closure : Ptr[GClosure], accumulator : GSignalAccumulator, accu_data : gpointer, c_marshaller : GSignalCMarshaller, return_type : GType, n_params : guint, param_types : Ptr[GType]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_override_class_closure(signal_id : guint, instance_type : GType, class_closure : Ptr[GClosure]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_override_class_handler(signal_name : Ptr[gchar], instance_type : GType, class_handler : GCallback): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_parse_name(detailed_signal : Ptr[gchar], itype : GType, signal_id_p : Ptr[guint], detail_p : Ptr[GQuark], force_detail_quark : gboolean): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_query(signal_id : guint, query : Ptr[GSignalQuery]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_remove_emission_hook(signal_id : guint, hook_id : gulong): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_set_va_marshaller(signal_id : guint, instance_type : GType, va_marshaller : GSignalCVaMarshaller): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_stop_emission(instance : gpointer, signal_id : guint, detail : GQuark): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsignal.h
  */
  def g_signal_stop_emission_by_name(instance : gpointer, detailed_signal : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gclosure.h
  */
  def g_signal_type_cclosure_new(itype : GType, struct_offset : guint): Ptr[GClosure] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleaction.h
  */
  def g_simple_action_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleactiongroup.h
  */
  def g_simple_action_group_add_entries(simple : Ptr[GSimpleActionGroup], entries : Ptr[GActionEntry], n_entries : gint, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleactiongroup.h
  */
  def g_simple_action_group_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleactiongroup.h
  */
  def g_simple_action_group_insert(simple : Ptr[GSimpleActionGroup], action : Ptr[GAction]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleactiongroup.h
  */
  def g_simple_action_group_lookup(simple : Ptr[GSimpleActionGroup], action_name : Ptr[gchar]): Ptr[GAction] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleactiongroup.h
  */
  def g_simple_action_group_new(): Ptr[GSimpleActionGroup] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleactiongroup.h
  */
  def g_simple_action_group_remove(simple : Ptr[GSimpleActionGroup], action_name : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleaction.h
  */
  def g_simple_action_new(name : Ptr[gchar], parameter_type : Ptr[GVariantType]): Ptr[GSimpleAction] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleaction.h
  */
  def g_simple_action_new_stateful(name : Ptr[gchar], parameter_type : Ptr[GVariantType], state : Ptr[GVariant]): Ptr[GSimpleAction] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleaction.h
  */
  def g_simple_action_set_enabled(simple : Ptr[GSimpleAction], enabled : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleaction.h
  */
  def g_simple_action_set_state(simple : Ptr[GSimpleAction], value : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleaction.h
  */
  def g_simple_action_set_state_hint(simple : Ptr[GSimpleAction], state_hint : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_report_error_in_idle(`object` : Ptr[GObject], callback : GAsyncReadyCallback, user_data : gpointer, domain : GQuark, code : gint, format : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_report_gerror_in_idle(`object` : Ptr[GObject], callback : GAsyncReadyCallback, user_data : gpointer, error : Ptr[GError]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_report_take_gerror_in_idle(`object` : Ptr[GObject], callback : GAsyncReadyCallback, user_data : gpointer, error : Ptr[GError]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_complete(simple : Ptr[GSimpleAsyncResult]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_complete_in_idle(simple : Ptr[GSimpleAsyncResult]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_get_op_res_gboolean(simple : Ptr[GSimpleAsyncResult]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_get_op_res_gpointer(simple : Ptr[GSimpleAsyncResult]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_get_op_res_gssize(simple : Ptr[GSimpleAsyncResult]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_get_source_tag(simple : Ptr[GSimpleAsyncResult]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_is_valid(result : Ptr[GAsyncResult], source : Ptr[GObject], source_tag : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_new(source_object : Ptr[GObject], callback : GAsyncReadyCallback, user_data : gpointer, source_tag : gpointer): Ptr[GSimpleAsyncResult] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_new_error(source_object : Ptr[GObject], callback : GAsyncReadyCallback, user_data : gpointer, domain : GQuark, code : gint, format : CString): Ptr[GSimpleAsyncResult] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_new_from_error(source_object : Ptr[GObject], callback : GAsyncReadyCallback, user_data : gpointer, error : Ptr[GError]): Ptr[GSimpleAsyncResult] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_new_take_error(source_object : Ptr[GObject], callback : GAsyncReadyCallback, user_data : gpointer, error : Ptr[GError]): Ptr[GSimpleAsyncResult] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_propagate_error(simple : Ptr[GSimpleAsyncResult], dest : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_run_in_thread(simple : Ptr[GSimpleAsyncResult], func : GSimpleAsyncThreadFunc, io_priority : CInt, cancellable : Ptr[GCancellable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_set_check_cancellable(simple : Ptr[GSimpleAsyncResult], check_cancellable : Ptr[GCancellable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_set_error(simple : Ptr[GSimpleAsyncResult], domain : GQuark, code : gint, format : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_set_error_va(simple : Ptr[GSimpleAsyncResult], domain : GQuark, code : gint, format : CString, args : va_list): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_set_from_error(simple : Ptr[GSimpleAsyncResult], error : Ptr[GError]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_set_handle_cancellation(simple : Ptr[GSimpleAsyncResult], handle_cancellation : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_set_op_res_gboolean(simple : Ptr[GSimpleAsyncResult], op_res : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_set_op_res_gpointer(simple : Ptr[GSimpleAsyncResult], op_res : gpointer, destroy_op_res : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_set_op_res_gssize(simple : Ptr[GSimpleAsyncResult], op_res : gssize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleasyncresult.h
  */
  def g_simple_async_result_take_error(simple : Ptr[GSimpleAsyncResult], error : Ptr[GError]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleiostream.h
  */
  def g_simple_io_stream_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleiostream.h
  */
  def g_simple_io_stream_new(input_stream : Ptr[GInputStream], output_stream : Ptr[GOutputStream]): Ptr[GIOStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimplepermission.h
  */
  def g_simple_permission_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimplepermission.h
  */
  def g_simple_permission_new(allowed : gboolean): Ptr[GPermission] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleproxyresolver.h
  */
  def g_simple_proxy_resolver_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleproxyresolver.h
  */
  def g_simple_proxy_resolver_new(default_proxy : Ptr[gchar], ignore_hosts : Ptr[Ptr[gchar]]): Ptr[GProxyResolver] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleproxyresolver.h
  */
  def g_simple_proxy_resolver_set_default_proxy(resolver : Ptr[GSimpleProxyResolver], default_proxy : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleproxyresolver.h
  */
  def g_simple_proxy_resolver_set_ignore_hosts(resolver : Ptr[GSimpleProxyResolver], ignore_hosts : Ptr[Ptr[gchar]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsimpleproxyresolver.h
  */
  def g_simple_proxy_resolver_set_uri_proxy(resolver : Ptr[GSimpleProxyResolver], uri_scheme : Ptr[gchar], proxy : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslice.h
  */
  def g_slice_alloc(block_size : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslice.h
  */
  def g_slice_alloc0(block_size : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslice.h
  */
  def g_slice_copy(block_size : gsize, mem_block : gconstpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslice.h
  */
  def g_slice_free1(block_size : gsize, mem_block : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslice.h
  */
  def g_slice_free_chain_with_offset(block_size : gsize, mem_chain : gpointer, next_offset : gsize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslice.h
  */
  def g_slice_get_config(ckey : GSliceConfig): gint64 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslice.h
  */
  def g_slice_get_config_state(ckey : GSliceConfig, address : gint64, n_values : Ptr[guint]): Ptr[gint64] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslice.h
  */
  def g_slice_set_config(ckey : GSliceConfig, value : gint64): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_alloc(): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_append(list : Ptr[GSList], data : gpointer): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_concat(list1 : Ptr[GSList], list2 : Ptr[GSList]): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_copy(list : Ptr[GSList]): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_copy_deep(list : Ptr[GSList], func : GCopyFunc, user_data : gpointer): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_delete_link(list : Ptr[GSList], `link_` : Ptr[GSList]): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_find(list : Ptr[GSList], data : gconstpointer): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_find_custom(list : Ptr[GSList], data : gconstpointer, func : GCompareFunc): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_foreach(list : Ptr[GSList], func : GFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_free(list : Ptr[GSList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_free_1(list : Ptr[GSList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_free_full(list : Ptr[GSList], free_func : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_index(list : Ptr[GSList], data : gconstpointer): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_insert(list : Ptr[GSList], data : gpointer, position : gint): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_insert_before(slist : Ptr[GSList], sibling : Ptr[GSList], data : gpointer): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_insert_sorted(list : Ptr[GSList], data : gpointer, func : GCompareFunc): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_insert_sorted_with_data(list : Ptr[GSList], data : gpointer, func : GCompareDataFunc, user_data : gpointer): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_last(list : Ptr[GSList]): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_length(list : Ptr[GSList]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_nth(list : Ptr[GSList], n : guint): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_nth_data(list : Ptr[GSList], n : guint): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
  */
  def g_slist_pop_allocator(): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_position(list : Ptr[GSList], llink : Ptr[GSList]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_prepend(list : Ptr[GSList], data : gpointer): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gallocator.h
  */
  def g_slist_push_allocator(allocator : Ptr[GAllocator]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_remove(list : Ptr[GSList], data : gconstpointer): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_remove_all(list : Ptr[GSList], data : gconstpointer): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_remove_link(list : Ptr[GSList], `link_` : Ptr[GSList]): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_reverse(list : Ptr[GSList]): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_sort(list : Ptr[GSList], compare_func : GCompareFunc): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gslist.h
  */
  def g_slist_sort_with_data(list : Ptr[GSList], compare_func : GCompareDataFunc, user_data : gpointer): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_snprintf(string : Ptr[gchar], n : gulong, format : Ptr[gchar]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_accept(socket : Ptr[GSocket], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GSocket] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketaddressenumerator.h
  */
  def g_socket_address_enumerator_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketaddressenumerator.h
  */
  def g_socket_address_enumerator_next(enumerator : Ptr[GSocketAddressEnumerator], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GSocketAddress] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketaddressenumerator.h
  */
  def g_socket_address_enumerator_next_async(enumerator : Ptr[GSocketAddressEnumerator], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketaddressenumerator.h
  */
  def g_socket_address_enumerator_next_finish(enumerator : Ptr[GSocketAddressEnumerator], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GSocketAddress] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketaddress.h
  */
  def g_socket_address_get_family(address : Ptr[GSocketAddress]): GSocketFamily = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketaddress.h
  */
  def g_socket_address_get_native_size(address : Ptr[GSocketAddress]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketaddress.h
  */
  def g_socket_address_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketaddress.h
  */
  def g_socket_address_new_from_native(native : gpointer, len : gsize): Ptr[GSocketAddress] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketaddress.h
  */
  def g_socket_address_to_native(address : Ptr[GSocketAddress], dest : gpointer, destlen : gsize, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_bind(socket : Ptr[GSocket], address : Ptr[GSocketAddress], allow_reuse : gboolean, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_check_connect_result(socket : Ptr[GSocket], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_add_application_proxy(client : Ptr[GSocketClient], protocol : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_connect(client : Ptr[GSocketClient], connectable : Ptr[GSocketConnectable], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GSocketConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_connect_async(client : Ptr[GSocketClient], connectable : Ptr[GSocketConnectable], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_connect_finish(client : Ptr[GSocketClient], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GSocketConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_connect_to_host(client : Ptr[GSocketClient], host_and_port : Ptr[gchar], default_port : guint16, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GSocketConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_connect_to_host_async(client : Ptr[GSocketClient], host_and_port : Ptr[gchar], default_port : guint16, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_connect_to_host_finish(client : Ptr[GSocketClient], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GSocketConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_connect_to_service(client : Ptr[GSocketClient], domain : Ptr[gchar], service : Ptr[gchar], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GSocketConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_connect_to_service_async(client : Ptr[GSocketClient], domain : Ptr[gchar], service : Ptr[gchar], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_connect_to_service_finish(client : Ptr[GSocketClient], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GSocketConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_connect_to_uri(client : Ptr[GSocketClient], uri : Ptr[gchar], default_port : guint16, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GSocketConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_connect_to_uri_async(client : Ptr[GSocketClient], uri : Ptr[gchar], default_port : guint16, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_connect_to_uri_finish(client : Ptr[GSocketClient], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GSocketConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_socket_client_event_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_get_enable_proxy(client : Ptr[GSocketClient]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_get_family(client : Ptr[GSocketClient]): GSocketFamily = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_get_local_address(client : Ptr[GSocketClient]): Ptr[GSocketAddress] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_get_protocol(client : Ptr[GSocketClient]): GSocketProtocol = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_get_proxy_resolver(client : Ptr[GSocketClient]): Ptr[GProxyResolver] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_get_socket_type(client : Ptr[GSocketClient]): GSocketType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_get_timeout(client : Ptr[GSocketClient]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_get_tls(client : Ptr[GSocketClient]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_get_tls_validation_flags(client : Ptr[GSocketClient]): GTlsCertificateFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_new(): Ptr[GSocketClient] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_set_enable_proxy(client : Ptr[GSocketClient], enable : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_set_family(client : Ptr[GSocketClient], family : GSocketFamily): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_set_local_address(client : Ptr[GSocketClient], address : Ptr[GSocketAddress]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_set_protocol(client : Ptr[GSocketClient], protocol : GSocketProtocol): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_set_proxy_resolver(client : Ptr[GSocketClient], proxy_resolver : Ptr[GProxyResolver]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_set_socket_type(client : Ptr[GSocketClient], `type` : GSocketType): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_set_timeout(client : Ptr[GSocketClient], timeout : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_set_tls(client : Ptr[GSocketClient], tls : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketclient.h
  */
  def g_socket_client_set_tls_validation_flags(client : Ptr[GSocketClient], flags : GTlsCertificateFlags): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_close(socket : Ptr[GSocket], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_condition_check(socket : Ptr[GSocket], condition : GIOCondition): GIOCondition = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_condition_timed_wait(socket : Ptr[GSocket], condition : GIOCondition, timeout_us : gint64, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_condition_wait(socket : Ptr[GSocket], condition : GIOCondition, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_connect(socket : Ptr[GSocket], address : Ptr[GSocketAddress], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnectable.h
  */
  def g_socket_connectable_enumerate(connectable : Ptr[GSocketConnectable]): Ptr[GSocketAddressEnumerator] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnectable.h
  */
  def g_socket_connectable_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnectable.h
  */
  def g_socket_connectable_proxy_enumerate(connectable : Ptr[GSocketConnectable]): Ptr[GSocketAddressEnumerator] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnectable.h
  */
  def g_socket_connectable_to_string(connectable : Ptr[GSocketConnectable]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnection.h
  */
  def g_socket_connection_connect(connection : Ptr[GSocketConnection], address : Ptr[GSocketAddress], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnection.h
  */
  def g_socket_connection_connect_async(connection : Ptr[GSocketConnection], address : Ptr[GSocketAddress], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnection.h
  */
  def g_socket_connection_connect_finish(connection : Ptr[GSocketConnection], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnection.h
  */
  def g_socket_connection_factory_create_connection(socket : Ptr[GSocket]): Ptr[GSocketConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnection.h
  */
  def g_socket_connection_factory_lookup_type(family : GSocketFamily, `type` : GSocketType, protocol_id : gint): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnection.h
  */
  def g_socket_connection_factory_register_type(g_type : GType, family : GSocketFamily, `type` : GSocketType, protocol : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnection.h
  */
  def g_socket_connection_get_local_address(connection : Ptr[GSocketConnection], error : Ptr[Ptr[GError]]): Ptr[GSocketAddress] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnection.h
  */
  def g_socket_connection_get_remote_address(connection : Ptr[GSocketConnection], error : Ptr[Ptr[GError]]): Ptr[GSocketAddress] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnection.h
  */
  def g_socket_connection_get_socket(connection : Ptr[GSocketConnection]): Ptr[GSocket] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnection.h
  */
  def g_socket_connection_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketconnection.h
  */
  def g_socket_connection_is_connected(connection : Ptr[GSocketConnection]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketcontrolmessage.h
  */
  def g_socket_control_message_deserialize(level : CInt, `type` : CInt, size : gsize, data : gpointer): Ptr[GSocketControlMessage] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketcontrolmessage.h
  */
  def g_socket_control_message_get_level(message : Ptr[GSocketControlMessage]): CInt = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketcontrolmessage.h
  */
  def g_socket_control_message_get_msg_type(message : Ptr[GSocketControlMessage]): CInt = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketcontrolmessage.h
  */
  def g_socket_control_message_get_size(message : Ptr[GSocketControlMessage]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketcontrolmessage.h
  */
  def g_socket_control_message_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketcontrolmessage.h
  */
  def g_socket_control_message_serialize(message : Ptr[GSocketControlMessage], data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_create_source(socket : Ptr[GSocket], condition : GIOCondition, cancellable : Ptr[GCancellable]): Ptr[GSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_socket_family_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_get_available_bytes(socket : Ptr[GSocket]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_get_blocking(socket : Ptr[GSocket]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_get_broadcast(socket : Ptr[GSocket]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_get_credentials(socket : Ptr[GSocket], error : Ptr[Ptr[GError]]): Ptr[GCredentials] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_get_family(socket : Ptr[GSocket]): GSocketFamily = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_get_fd(socket : Ptr[GSocket]): CInt = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_get_keepalive(socket : Ptr[GSocket]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_get_listen_backlog(socket : Ptr[GSocket]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_get_local_address(socket : Ptr[GSocket], error : Ptr[Ptr[GError]]): Ptr[GSocketAddress] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_get_multicast_loopback(socket : Ptr[GSocket]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_get_multicast_ttl(socket : Ptr[GSocket]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_get_option(socket : Ptr[GSocket], level : gint, optname : gint, value : Ptr[gint], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_get_protocol(socket : Ptr[GSocket]): GSocketProtocol = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_get_remote_address(socket : Ptr[GSocket], error : Ptr[Ptr[GError]]): Ptr[GSocketAddress] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_get_socket_type(socket : Ptr[GSocket]): GSocketType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_get_timeout(socket : Ptr[GSocket]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_get_ttl(socket : Ptr[GSocket]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_is_closed(socket : Ptr[GSocket]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_is_connected(socket : Ptr[GSocket]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_join_multicast_group(socket : Ptr[GSocket], group : Ptr[GInetAddress], source_specific : gboolean, iface : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_join_multicast_group_ssm(socket : Ptr[GSocket], group : Ptr[GInetAddress], source_specific : Ptr[GInetAddress], iface : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_leave_multicast_group(socket : Ptr[GSocket], group : Ptr[GInetAddress], source_specific : gboolean, iface : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_leave_multicast_group_ssm(socket : Ptr[GSocket], group : Ptr[GInetAddress], source_specific : Ptr[GInetAddress], iface : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_listen(socket : Ptr[GSocket], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketlistener.h
  */
  def g_socket_listener_accept(listener : Ptr[GSocketListener], source_object : Ptr[Ptr[GObject]], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GSocketConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketlistener.h
  */
  def g_socket_listener_accept_async(listener : Ptr[GSocketListener], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketlistener.h
  */
  def g_socket_listener_accept_finish(listener : Ptr[GSocketListener], result : Ptr[GAsyncResult], source_object : Ptr[Ptr[GObject]], error : Ptr[Ptr[GError]]): Ptr[GSocketConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketlistener.h
  */
  def g_socket_listener_accept_socket(listener : Ptr[GSocketListener], source_object : Ptr[Ptr[GObject]], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GSocket] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketlistener.h
  */
  def g_socket_listener_accept_socket_async(listener : Ptr[GSocketListener], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketlistener.h
  */
  def g_socket_listener_accept_socket_finish(listener : Ptr[GSocketListener], result : Ptr[GAsyncResult], source_object : Ptr[Ptr[GObject]], error : Ptr[Ptr[GError]]): Ptr[GSocket] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketlistener.h
  */
  def g_socket_listener_add_address(listener : Ptr[GSocketListener], address : Ptr[GSocketAddress], `type` : GSocketType, protocol : GSocketProtocol, source_object : Ptr[GObject], effective_address : Ptr[Ptr[GSocketAddress]], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketlistener.h
  */
  def g_socket_listener_add_any_inet_port(listener : Ptr[GSocketListener], source_object : Ptr[GObject], error : Ptr[Ptr[GError]]): guint16 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketlistener.h
  */
  def g_socket_listener_add_inet_port(listener : Ptr[GSocketListener], port : guint16, source_object : Ptr[GObject], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketlistener.h
  */
  def g_socket_listener_add_socket(listener : Ptr[GSocketListener], socket : Ptr[GSocket], source_object : Ptr[GObject], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketlistener.h
  */
  def g_socket_listener_close(listener : Ptr[GSocketListener]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_socket_listener_event_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketlistener.h
  */
  def g_socket_listener_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketlistener.h
  */
  def g_socket_listener_new(): Ptr[GSocketListener] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketlistener.h
  */
  def g_socket_listener_set_backlog(listener : Ptr[GSocketListener], listen_backlog : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_socket_msg_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_new(family : GSocketFamily, `type` : GSocketType, protocol : GSocketProtocol, error : Ptr[Ptr[GError]]): Ptr[GSocket] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_new_from_fd(fd : gint, error : Ptr[Ptr[GError]]): Ptr[GSocket] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_socket_protocol_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_receive(socket : Ptr[GSocket], buffer : Ptr[gchar], size : gsize, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_receive_from(socket : Ptr[GSocket], address : Ptr[Ptr[GSocketAddress]], buffer : Ptr[gchar], size : gsize, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_receive_message(socket : Ptr[GSocket], address : Ptr[Ptr[GSocketAddress]], vectors : Ptr[GInputVector], num_vectors : gint, messages : Ptr[Ptr[Ptr[GSocketControlMessage]]], num_messages : Ptr[gint], flags : Ptr[gint], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_receive_messages(socket : Ptr[GSocket], messages : Ptr[GInputMessage], num_messages : guint, flags : gint, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_receive_with_blocking(socket : Ptr[GSocket], buffer : Ptr[gchar], size : gsize, blocking : gboolean, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_send(socket : Ptr[GSocket], buffer : Ptr[gchar], size : gsize, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_send_message(socket : Ptr[GSocket], address : Ptr[GSocketAddress], vectors : Ptr[GOutputVector], num_vectors : gint, messages : Ptr[Ptr[GSocketControlMessage]], num_messages : gint, flags : gint, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_send_message_with_timeout(socket : Ptr[GSocket], address : Ptr[GSocketAddress], vectors : Ptr[GOutputVector], num_vectors : gint, messages : Ptr[Ptr[GSocketControlMessage]], num_messages : gint, flags : gint, timeout_us : gint64, bytes_written : Ptr[gsize], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): GPollableReturn = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_send_messages(socket : Ptr[GSocket], messages : Ptr[GOutputMessage], num_messages : guint, flags : gint, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_send_to(socket : Ptr[GSocket], address : Ptr[GSocketAddress], buffer : Ptr[gchar], size : gsize, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_send_with_blocking(socket : Ptr[GSocket], buffer : Ptr[gchar], size : gsize, blocking : gboolean, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketservice.h
  */
  def g_socket_service_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketservice.h
  */
  def g_socket_service_is_active(service : Ptr[GSocketService]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketservice.h
  */
  def g_socket_service_new(): Ptr[GSocketService] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketservice.h
  */
  def g_socket_service_start(service : Ptr[GSocketService]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocketservice.h
  */
  def g_socket_service_stop(service : Ptr[GSocketService]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_set_blocking(socket : Ptr[GSocket], blocking : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_set_broadcast(socket : Ptr[GSocket], broadcast : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_set_keepalive(socket : Ptr[GSocket], keepalive : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_set_listen_backlog(socket : Ptr[GSocket], backlog : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_set_multicast_loopback(socket : Ptr[GSocket], loopback : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_set_multicast_ttl(socket : Ptr[GSocket], ttl : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_set_option(socket : Ptr[GSocket], level : gint, optname : gint, value : gint, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_set_timeout(socket : Ptr[GSocket], timeout : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_set_ttl(socket : Ptr[GSocket], ttl : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_shutdown(socket : Ptr[GSocket], shutdown_read : gboolean, shutdown_write : gboolean, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsocket.h
  */
  def g_socket_speaks_ipv4(socket : Ptr[GSocket]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_socket_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_add_child_source(source : Ptr[GSource], child_source : Ptr[GSource]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_add_poll(source : Ptr[GSource], fd : Ptr[GPollFD]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_add_unix_fd(source : Ptr[GSource], fd : gint, events : GIOCondition): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_attach(source : Ptr[GSource], context : Ptr[GMainContext]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_destroy(source : Ptr[GSource]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_get_can_recurse(source : Ptr[GSource]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_get_context(source : Ptr[GSource]): Ptr[GMainContext] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_get_current_time(source : Ptr[GSource], timeval : Ptr[GTimeVal]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_get_id(source : Ptr[GSource]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_get_name(source : Ptr[GSource]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_get_priority(source : Ptr[GSource]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_get_ready_time(source : Ptr[GSource]): gint64 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_get_time(source : Ptr[GSource]): gint64 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_source_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_is_destroyed(source : Ptr[GSource]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_modify_unix_fd(source : Ptr[GSource], tag : gpointer, new_events : GIOCondition): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_new(source_funcs : Ptr[GSourceFuncs], struct_size : guint): Ptr[GSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_query_unix_fd(source : Ptr[GSource], tag : gpointer): GIOCondition = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_ref(source : Ptr[GSource]): Ptr[GSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_remove(tag : guint): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_remove_by_funcs_user_data(funcs : Ptr[GSourceFuncs], user_data : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_remove_by_user_data(user_data : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_remove_child_source(source : Ptr[GSource], child_source : Ptr[GSource]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_remove_poll(source : Ptr[GSource], fd : Ptr[GPollFD]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_remove_unix_fd(source : Ptr[GSource], tag : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_set_callback(source : Ptr[GSource], func : GSourceFunc, data : gpointer, notify : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_set_callback_indirect(source : Ptr[GSource], callback_data : gpointer, callback_funcs : Ptr[GSourceCallbackFuncs]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_set_can_recurse(source : Ptr[GSource], can_recurse : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsourceclosure.h
  */
  def g_source_set_closure(source : Ptr[GSource], closure : Ptr[GClosure]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_set_dispose_function(source : Ptr[GSource], dispose : GSourceDisposeFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gsourceclosure.h
  */
  def g_source_set_dummy_callback(source : Ptr[GSource]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_set_funcs(source : Ptr[GSource], funcs : Ptr[GSourceFuncs]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_set_name(source : Ptr[GSource], name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_set_name_by_id(tag : guint, name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_set_priority(source : Ptr[GSource], priority : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_set_ready_time(source : Ptr[GSource], ready_time : gint64): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_set_static_name(source : Ptr[GSource], name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_source_unref(source : Ptr[GSource]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gprimes.h
  */
  def g_spaced_primes_closest(num : guint): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gspawn.h
  */
  def g_spawn_async(working_directory : Ptr[gchar], argv : Ptr[Ptr[gchar]], envp : Ptr[Ptr[gchar]], flags : GSpawnFlags, child_setup : GSpawnChildSetupFunc, user_data : gpointer, child_pid : Ptr[GPid], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gspawn.h
  */
  def g_spawn_async_with_fds(working_directory : Ptr[gchar], argv : Ptr[Ptr[gchar]], envp : Ptr[Ptr[gchar]], flags : GSpawnFlags, child_setup : GSpawnChildSetupFunc, user_data : gpointer, child_pid : Ptr[GPid], stdin_fd : gint, stdout_fd : gint, stderr_fd : gint, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gspawn.h
  */
  def g_spawn_async_with_pipes(working_directory : Ptr[gchar], argv : Ptr[Ptr[gchar]], envp : Ptr[Ptr[gchar]], flags : GSpawnFlags, child_setup : GSpawnChildSetupFunc, user_data : gpointer, child_pid : Ptr[GPid], standard_input : Ptr[gint], standard_output : Ptr[gint], standard_error : Ptr[gint], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gspawn.h
  */
  def g_spawn_async_with_pipes_and_fds(working_directory : Ptr[gchar], argv : Ptr[Ptr[gchar]], envp : Ptr[Ptr[gchar]], flags : GSpawnFlags, child_setup : GSpawnChildSetupFunc, user_data : gpointer, stdin_fd : gint, stdout_fd : gint, stderr_fd : gint, source_fds : Ptr[gint], target_fds : Ptr[gint], n_fds : gsize, child_pid_out : Ptr[GPid], stdin_pipe_out : Ptr[gint], stdout_pipe_out : Ptr[gint], stderr_pipe_out : Ptr[gint], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gspawn.h
  */
  def g_spawn_check_exit_status(wait_status : gint, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gspawn.h
  */
  def g_spawn_check_wait_status(wait_status : gint, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gspawn.h
  */
  def g_spawn_close_pid(pid : GPid): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gspawn.h
  */
  def g_spawn_command_line_async(command_line : Ptr[gchar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gspawn.h
  */
  def g_spawn_command_line_sync(command_line : Ptr[gchar], standard_output : Ptr[Ptr[gchar]], standard_error : Ptr[Ptr[gchar]], wait_status : Ptr[gint], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gspawn.h
  */
  def g_spawn_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gspawn.h
  */
  def g_spawn_exit_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gspawn.h
  */
  def g_spawn_sync(working_directory : Ptr[gchar], argv : Ptr[Ptr[gchar]], envp : Ptr[Ptr[gchar]], flags : GSpawnFlags, child_setup : GSpawnChildSetupFunc, user_data : gpointer, standard_output : Ptr[Ptr[gchar]], standard_error : Ptr[Ptr[gchar]], wait_status : Ptr[gint], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsrvtarget.h
  */
  def g_srv_target_copy(target : Ptr[GSrvTarget]): Ptr[GSrvTarget] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsrvtarget.h
  */
  def g_srv_target_free(target : Ptr[GSrvTarget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsrvtarget.h
  */
  def g_srv_target_get_hostname(target : Ptr[GSrvTarget]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsrvtarget.h
  */
  def g_srv_target_get_port(target : Ptr[GSrvTarget]): guint16 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsrvtarget.h
  */
  def g_srv_target_get_priority(target : Ptr[GSrvTarget]): guint16 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsrvtarget.h
  */
  def g_srv_target_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsrvtarget.h
  */
  def g_srv_target_get_weight(target : Ptr[GSrvTarget]): guint16 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsrvtarget.h
  */
  def g_srv_target_list_sort(targets : Ptr[GList]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsrvtarget.h
  */
  def g_srv_target_new(hostname : Ptr[gchar], port : guint16, priority : guint16, weight : guint16): Ptr[GSrvTarget] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_mutex_free(mutex : Ptr[GStaticMutex]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_mutex_get_mutex_impl(mutex : Ptr[GStaticMutex]): Ptr[GMutex] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_mutex_init(mutex : Ptr[GStaticMutex]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_private_free(private_key : Ptr[GStaticPrivate]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_private_get(private_key : Ptr[GStaticPrivate]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_private_init(private_key : Ptr[GStaticPrivate]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_private_set(private_key : Ptr[GStaticPrivate], data : gpointer, notify : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_rec_mutex_free(mutex : Ptr[GStaticRecMutex]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_rec_mutex_init(mutex : Ptr[GStaticRecMutex]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_rec_mutex_lock(mutex : Ptr[GStaticRecMutex]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_rec_mutex_lock_full(mutex : Ptr[GStaticRecMutex], depth : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_rec_mutex_trylock(mutex : Ptr[GStaticRecMutex]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_rec_mutex_unlock(mutex : Ptr[GStaticRecMutex]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_rec_mutex_unlock_full(mutex : Ptr[GStaticRecMutex]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
  */
  def g_static_resource_fini(static_resource : Ptr[GStaticResource]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
  */
  def g_static_resource_get_resource(static_resource : Ptr[GStaticResource]): Ptr[GResource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gresource.h
  */
  def g_static_resource_init(static_resource : Ptr[GStaticResource]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_rw_lock_free(lock : Ptr[GStaticRWLock]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_rw_lock_init(lock : Ptr[GStaticRWLock]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_rw_lock_reader_lock(lock : Ptr[GStaticRWLock]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_rw_lock_reader_trylock(lock : Ptr[GStaticRWLock]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_rw_lock_reader_unlock(lock : Ptr[GStaticRWLock]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_rw_lock_writer_lock(lock : Ptr[GStaticRWLock]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_rw_lock_writer_trylock(lock : Ptr[GStaticRWLock]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_static_rw_lock_writer_unlock(lock : Ptr[GStaticRWLock]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_steal_fd(fd_ptr : Ptr[CInt]): CInt = extern

  /**
   * g_steal_pointer: : (not nullable): a pointer to a pointer
  
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_steal_pointer(pp : gpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_stpcpy(dest : Ptr[gchar], src : CString): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_str_equal(v1 : gconstpointer, v2 : gconstpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_str_has_prefix(str : Ptr[gchar], prefix : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_str_has_suffix(str : Ptr[gchar], suffix : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ghash.h
  */
  def g_str_hash(v : gconstpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_str_is_ascii(str : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_str_match_string(search_term : Ptr[gchar], potential_hit : Ptr[gchar], accept_alternates : gboolean): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_str_to_ascii(str : Ptr[gchar], from_locale : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_str_tokenize_and_fold(string : Ptr[gchar], translit_locale : Ptr[gchar], ascii_alternates : Ptr[Ptr[Ptr[gchar]]]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strcanon(string : Ptr[gchar], valid_chars : Ptr[gchar], substitutor : gchar): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strcasecmp(s1 : Ptr[gchar], s2 : Ptr[gchar]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strchomp(string : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strchug(string : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_strcmp0(str1 : CString, str2 : CString): CInt = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strcompress(source : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strconcat(string1 : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strdelimit(string : Ptr[gchar], delimiters : Ptr[gchar], new_delimiter : gchar): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strdown(string : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strdup(str : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strdup_printf(format : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_strdup_value_contents(value : Ptr[GValue]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strdup_vprintf(format : Ptr[gchar], args : va_list): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strdupv(str_array : Ptr[Ptr[gchar]]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strerror(errnum : gint): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strescape(source : Ptr[gchar], exceptions : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strfreev(str_array : Ptr[Ptr[gchar]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_append(string : Ptr[GString], `val` : Ptr[gchar]): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_append_c(string : Ptr[GString], c : gchar): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_append_c_inline(gstring : Ptr[GString], c : gchar): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_append_len(string : Ptr[GString], `val` : Ptr[gchar], len : gssize): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_append_printf(string : Ptr[GString], format : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_append_unichar(string : Ptr[GString], wc : gunichar): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_append_uri_escaped(string : Ptr[GString], unescaped : Ptr[gchar], reserved_chars_allowed : Ptr[gchar], allow_utf8 : gboolean): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_append_vprintf(string : Ptr[GString], format : Ptr[gchar], args : va_list): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_ascii_down(string : Ptr[GString]): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_ascii_up(string : Ptr[GString]): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_assign(string : Ptr[GString], rval : Ptr[gchar]): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstringchunk.h
  */
  def g_string_chunk_clear(chunk : Ptr[GStringChunk]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstringchunk.h
  */
  def g_string_chunk_free(chunk : Ptr[GStringChunk]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstringchunk.h
  */
  def g_string_chunk_insert(chunk : Ptr[GStringChunk], string : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstringchunk.h
  */
  def g_string_chunk_insert_const(chunk : Ptr[GStringChunk], string : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstringchunk.h
  */
  def g_string_chunk_insert_len(chunk : Ptr[GStringChunk], string : Ptr[gchar], len : gssize): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstringchunk.h
  */
  def g_string_chunk_new(size : gsize): Ptr[GStringChunk] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_down(string : Ptr[GString]): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_equal(v : Ptr[GString], v2 : Ptr[GString]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_erase(string : Ptr[GString], pos : gssize, len : gssize): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_free(string : Ptr[GString], free_segment : gboolean): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_free_to_bytes(string : Ptr[GString]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_hash(str : Ptr[GString]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_insert(string : Ptr[GString], pos : gssize, `val` : Ptr[gchar]): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_insert_c(string : Ptr[GString], pos : gssize, c : gchar): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_insert_len(string : Ptr[GString], pos : gssize, `val` : Ptr[gchar], len : gssize): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_insert_unichar(string : Ptr[GString], pos : gssize, wc : gunichar): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_new(init : Ptr[gchar]): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_new_len(init : Ptr[gchar], len : gssize): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_overwrite(string : Ptr[GString], pos : gsize, `val` : Ptr[gchar]): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_overwrite_len(string : Ptr[GString], pos : gsize, `val` : Ptr[gchar], len : gssize): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_prepend(string : Ptr[GString], `val` : Ptr[gchar]): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_prepend_c(string : Ptr[GString], c : gchar): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_prepend_len(string : Ptr[GString], `val` : Ptr[gchar], len : gssize): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_prepend_unichar(string : Ptr[GString], wc : gunichar): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_printf(string : Ptr[GString], format : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_replace(string : Ptr[GString], find : Ptr[gchar], replace : Ptr[gchar], limit : guint): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_set_size(string : Ptr[GString], len : gsize): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_sized_new(dfl_size : gsize): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_truncate(string : Ptr[GString], len : gsize): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_up(string : Ptr[GString]): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstring.h
  */
  def g_string_vprintf(string : Ptr[GString], format : Ptr[gchar], args : va_list): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/ggettext.h
  */
  def g_strip_context(msgid : Ptr[gchar], msgval : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strjoin(separator : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strjoinv(separator : Ptr[gchar], str_array : Ptr[Ptr[gchar]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strlcat(dest : Ptr[gchar], src : Ptr[gchar], dest_size : gsize): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strlcpy(dest : Ptr[gchar], src : Ptr[gchar], dest_size : gsize): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strncasecmp(s1 : Ptr[gchar], s2 : Ptr[gchar], n : guint): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strndup(str : Ptr[gchar], n : gsize): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strnfill(length : gsize, fill_char : gchar): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strreverse(string : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strrstr(haystack : Ptr[gchar], needle : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strrstr_len(haystack : Ptr[gchar], haystack_len : gssize, needle : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strsignal(signum : gint): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strsplit(string : Ptr[gchar], delimiter : Ptr[gchar], max_tokens : gint): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strsplit_set(string : Ptr[gchar], delimiters : Ptr[gchar], max_tokens : gint): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strstr_len(haystack : Ptr[gchar], haystack_len : gssize, needle : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strtod(nptr : Ptr[gchar], endptr : Ptr[Ptr[gchar]]): gdouble = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strup(string : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrvbuilder.h
  */
  def g_strv_builder_add(builder : Ptr[GStrvBuilder], value : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrvbuilder.h
  */
  def g_strv_builder_add_many(builder : Ptr[GStrvBuilder]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrvbuilder.h
  */
  def g_strv_builder_addv(builder : Ptr[GStrvBuilder], value : Ptr[CString]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrvbuilder.h
  */
  def g_strv_builder_end(builder : Ptr[GStrvBuilder]): GStrv = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrvbuilder.h
  */
  def g_strv_builder_new(): Ptr[GStrvBuilder] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrvbuilder.h
  */
  def g_strv_builder_ref(builder : Ptr[GStrvBuilder]): Ptr[GStrvBuilder] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrvbuilder.h
  */
  def g_strv_builder_unref(builder : Ptr[GStrvBuilder]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strv_contains(strv : Ptr[Ptr[gchar]], str : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strv_equal(strv1 : Ptr[Ptr[gchar]], strv2 : Ptr[Ptr[gchar]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_strv_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gstrfuncs.h
  */
  def g_strv_length(str_array : Ptr[Ptr[gchar]]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_communicate(subprocess : Ptr[GSubprocess], stdin_buf : Ptr[GBytes], cancellable : Ptr[GCancellable], stdout_buf : Ptr[Ptr[GBytes]], stderr_buf : Ptr[Ptr[GBytes]], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_communicate_async(subprocess : Ptr[GSubprocess], stdin_buf : Ptr[GBytes], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_communicate_finish(subprocess : Ptr[GSubprocess], result : Ptr[GAsyncResult], stdout_buf : Ptr[Ptr[GBytes]], stderr_buf : Ptr[Ptr[GBytes]], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_communicate_utf8(subprocess : Ptr[GSubprocess], stdin_buf : CString, cancellable : Ptr[GCancellable], stdout_buf : Ptr[CString], stderr_buf : Ptr[CString], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_communicate_utf8_async(subprocess : Ptr[GSubprocess], stdin_buf : CString, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_communicate_utf8_finish(subprocess : Ptr[GSubprocess], result : Ptr[GAsyncResult], stdout_buf : Ptr[CString], stderr_buf : Ptr[CString], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_subprocess_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_force_exit(subprocess : Ptr[GSubprocess]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_get_exit_status(subprocess : Ptr[GSubprocess]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_get_identifier(subprocess : Ptr[GSubprocess]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_get_if_exited(subprocess : Ptr[GSubprocess]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_get_if_signaled(subprocess : Ptr[GSubprocess]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_get_status(subprocess : Ptr[GSubprocess]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_get_stderr_pipe(subprocess : Ptr[GSubprocess]): Ptr[GInputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_get_stdin_pipe(subprocess : Ptr[GSubprocess]): Ptr[GOutputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_get_stdout_pipe(subprocess : Ptr[GSubprocess]): Ptr[GInputStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_get_successful(subprocess : Ptr[GSubprocess]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_get_term_sig(subprocess : Ptr[GSubprocess]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocesslauncher.h
  */
  def g_subprocess_launcher_close(self : Ptr[GSubprocessLauncher]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocesslauncher.h
  */
  def g_subprocess_launcher_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocesslauncher.h
  */
  def g_subprocess_launcher_getenv(self : Ptr[GSubprocessLauncher], variable : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocesslauncher.h
  */
  def g_subprocess_launcher_new(flags : GSubprocessFlags): Ptr[GSubprocessLauncher] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocesslauncher.h
  */
  def g_subprocess_launcher_set_child_setup(self : Ptr[GSubprocessLauncher], child_setup : GSpawnChildSetupFunc, user_data : gpointer, destroy_notify : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocesslauncher.h
  */
  def g_subprocess_launcher_set_cwd(self : Ptr[GSubprocessLauncher], cwd : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocesslauncher.h
  */
  def g_subprocess_launcher_set_environ(self : Ptr[GSubprocessLauncher], env : Ptr[Ptr[gchar]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocesslauncher.h
  */
  def g_subprocess_launcher_set_flags(self : Ptr[GSubprocessLauncher], flags : GSubprocessFlags): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocesslauncher.h
  */
  def g_subprocess_launcher_set_stderr_file_path(self : Ptr[GSubprocessLauncher], path : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocesslauncher.h
  */
  def g_subprocess_launcher_set_stdin_file_path(self : Ptr[GSubprocessLauncher], path : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocesslauncher.h
  */
  def g_subprocess_launcher_set_stdout_file_path(self : Ptr[GSubprocessLauncher], path : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocesslauncher.h
  */
  def g_subprocess_launcher_setenv(self : Ptr[GSubprocessLauncher], variable : Ptr[gchar], value : Ptr[gchar], overwrite : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocesslauncher.h
  */
  def g_subprocess_launcher_spawn(self : Ptr[GSubprocessLauncher], error : Ptr[Ptr[GError]], argv0 : Ptr[gchar]): Ptr[GSubprocess] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocesslauncher.h
  */
  def g_subprocess_launcher_spawnv(self : Ptr[GSubprocessLauncher], argv : Ptr[Ptr[gchar]], error : Ptr[Ptr[GError]]): Ptr[GSubprocess] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocesslauncher.h
  */
  def g_subprocess_launcher_take_fd(self : Ptr[GSubprocessLauncher], source_fd : gint, target_fd : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocesslauncher.h
  */
  def g_subprocess_launcher_take_stderr_fd(self : Ptr[GSubprocessLauncher], fd : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocesslauncher.h
  */
  def g_subprocess_launcher_take_stdin_fd(self : Ptr[GSubprocessLauncher], fd : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocesslauncher.h
  */
  def g_subprocess_launcher_take_stdout_fd(self : Ptr[GSubprocessLauncher], fd : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocesslauncher.h
  */
  def g_subprocess_launcher_unsetenv(self : Ptr[GSubprocessLauncher], variable : Ptr[gchar]): Unit = extern

  /**
   * ** Core API ***
  
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_new(flags : GSubprocessFlags, error : Ptr[Ptr[GError]], argv0 : Ptr[gchar]): Ptr[GSubprocess] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_newv(argv : Ptr[Ptr[gchar]], flags : GSubprocessFlags, error : Ptr[Ptr[GError]]): Ptr[GSubprocess] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_send_signal(subprocess : Ptr[GSubprocess], signal_num : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_wait(subprocess : Ptr[GSubprocess], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_wait_async(subprocess : Ptr[GSubprocess], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_wait_check(subprocess : Ptr[GSubprocess], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_wait_check_async(subprocess : Ptr[GSubprocess], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_wait_check_finish(subprocess : Ptr[GSubprocess], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gsubprocess.h
  */
  def g_subprocess_wait_finish(subprocess : Ptr[GSubprocess], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_attach_source(task : Ptr[GTask], source : Ptr[GSource], callback : GSourceFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_get_cancellable(task : Ptr[GTask]): Ptr[GCancellable] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_get_check_cancellable(task : Ptr[GTask]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_get_completed(task : Ptr[GTask]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_get_context(task : Ptr[GTask]): Ptr[GMainContext] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_get_name(task : Ptr[GTask]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_get_priority(task : Ptr[GTask]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_get_return_on_cancel(task : Ptr[GTask]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_get_source_object(task : Ptr[GTask]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_get_source_tag(task : Ptr[GTask]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_get_task_data(task : Ptr[GTask]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_had_error(task : Ptr[GTask]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_is_valid(result : gpointer, source_object : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_new(source_object : gpointer, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, callback_data : gpointer): Ptr[GTask] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_propagate_boolean(task : Ptr[GTask], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_propagate_int(task : Ptr[GTask], error : Ptr[Ptr[GError]]): gssize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_propagate_pointer(task : Ptr[GTask], error : Ptr[Ptr[GError]]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_propagate_value(task : Ptr[GTask], value : Ptr[GValue], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_report_error(source_object : gpointer, callback : GAsyncReadyCallback, callback_data : gpointer, source_tag : gpointer, error : Ptr[GError]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_report_new_error(source_object : gpointer, callback : GAsyncReadyCallback, callback_data : gpointer, source_tag : gpointer, domain : GQuark, code : gint, format : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_return_boolean(task : Ptr[GTask], result : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_return_error(task : Ptr[GTask], error : Ptr[GError]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_return_error_if_cancelled(task : Ptr[GTask]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_return_int(task : Ptr[GTask], result : gssize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_return_new_error(task : Ptr[GTask], domain : GQuark, code : gint, format : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_return_pointer(task : Ptr[GTask], result : gpointer, result_destroy : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_return_value(task : Ptr[GTask], result : Ptr[GValue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_run_in_thread(task : Ptr[GTask], task_func : GTaskThreadFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_run_in_thread_sync(task : Ptr[GTask], task_func : GTaskThreadFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_set_check_cancellable(task : Ptr[GTask], check_cancellable : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_set_name(task : Ptr[GTask], name : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_set_priority(task : Ptr[GTask], priority : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_set_return_on_cancel(task : Ptr[GTask], return_on_cancel : gboolean): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_set_source_tag(task : Ptr[GTask], source_tag : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtask.h
  */
  def g_task_set_task_data(task : Ptr[GTask], task_data : gpointer, task_data_destroy : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtcpconnection.h
  */
  def g_tcp_connection_get_graceful_disconnect(connection : Ptr[GTcpConnection]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtcpconnection.h
  */
  def g_tcp_connection_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtcpconnection.h
  */
  def g_tcp_connection_set_graceful_disconnect(connection : Ptr[GTcpConnection], graceful_disconnect : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtcpwrapperconnection.h
  */
  def g_tcp_wrapper_connection_get_base_io_stream(conn : Ptr[GTcpWrapperConnection]): Ptr[GIOStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtcpwrapperconnection.h
  */
  def g_tcp_wrapper_connection_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtcpwrapperconnection.h
  */
  def g_tcp_wrapper_connection_new(base_io_stream : Ptr[GIOStream], socket : Ptr[GSocket]): Ptr[GSocketConnection] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_add_data_func(testpath : CString, test_data : gconstpointer, test_func : GTestDataFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_add_data_func_full(testpath : CString, test_data : gpointer, test_func : GTestDataFunc, data_free_func : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_add_func(testpath : CString, test_func : GTestFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_add_vtable(testpath : CString, data_size : gsize, test_data : gconstpointer, data_setup : GTestFixtureFunc, data_test : GTestFixtureFunc, data_teardown : GTestFixtureFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_assert_expected_messages_internal(domain : CString, file : CString, line : CInt, func : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_bug(bug_uri_snippet : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_bug_base(uri_pattern : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_build_filename(file_type : GTestFileType, first_path : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_case_free(test_case : Ptr[GTestCase]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_create_case(test_name : CString, data_size : gsize, test_data : gconstpointer, data_setup : GTestFixtureFunc, data_test : GTestFixtureFunc, data_teardown : GTestFixtureFunc): Ptr[GTestCase] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_create_suite(suite_name : CString): Ptr[GTestSuite] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtestdbus.h
  */
  def g_test_dbus_add_service_dir(self : Ptr[GTestDBus], path : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtestdbus.h
  */
  def g_test_dbus_down(self : Ptr[GTestDBus]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_test_dbus_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtestdbus.h
  */
  def g_test_dbus_get_bus_address(self : Ptr[GTestDBus]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtestdbus.h
  */
  def g_test_dbus_get_flags(self : Ptr[GTestDBus]): GTestDBusFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtestdbus.h
  */
  def g_test_dbus_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtestdbus.h
  */
  def g_test_dbus_new(flags : GTestDBusFlags): Ptr[GTestDBus] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtestdbus.h
  */
  def g_test_dbus_stop(self : Ptr[GTestDBus]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtestdbus.h
  */
  def g_test_dbus_unset(): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtestdbus.h
  */
  def g_test_dbus_up(self : Ptr[GTestDBus]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_expect_message(log_domain : Ptr[gchar], log_level : GLogLevelFlags, pattern : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_fail(): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_fail_printf(format : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_failed(): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_get_dir(file_type : GTestFileType): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_get_filename(file_type : GTestFileType, first_path : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_get_path(): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_get_root(): Ptr[GTestSuite] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_incomplete(msg : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_incomplete_printf(format : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_init(argc : Ptr[CInt], argv : Ptr[Ptr[CString]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_log_buffer_free(tbuffer : Ptr[GTestLogBuffer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_log_buffer_new(): Ptr[GTestLogBuffer] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_log_buffer_pop(tbuffer : Ptr[GTestLogBuffer]): Ptr[GTestLogMsg] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_log_buffer_push(tbuffer : Ptr[GTestLogBuffer], n_bytes : guint, bytes : Ptr[guint8]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_log_msg_free(tmsg : Ptr[GTestLogMsg]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_log_set_fatal_handler(log_func : GTestLogFatalFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_log_type_name(log_type : GTestLogType): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_maximized_result(maximized_quantity : Double, format : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_message(format : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_minimized_result(minimized_quantity : Double, format : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_queue_destroy(destroy_func : GDestroyNotify, destroy_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_queue_free(gfree_pointer : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_rand_double(): Double = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_rand_double_range(range_start : Double, range_end : Double): Double = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_rand_int(): gint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_rand_int_range(begin : gint32, end : gint32): gint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_run(): CInt = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_run_suite(suite : Ptr[GTestSuite]): CInt = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_set_nonfatal_assertions(): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_skip(msg : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_skip_printf(format : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_subprocess(): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_suite_add(suite : Ptr[GTestSuite], test_case : Ptr[GTestCase]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_suite_add_suite(suite : Ptr[GTestSuite], nestedsuite : Ptr[GTestSuite]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_suite_free(suite : Ptr[GTestSuite]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_summary(summary : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_timer_elapsed(): Double = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_timer_last(): Double = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_timer_start(): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_trap_assertions(domain : CString, file : CString, line : CInt, func : CString, assertion_flags : guint64, pattern : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_trap_fork(usec_timeout : guint64, test_trap_flags : GTestTrapFlags): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_trap_has_passed(): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_trap_reached_timeout(): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtestutils.h
  */
  def g_test_trap_subprocess(test_path : CString, usec_timeout : guint64, test_flags : GTestSubprocessFlags): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gthemedicon.h
  */
  def g_themed_icon_append_name(icon : Ptr[GThemedIcon], iconname : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gthemedicon.h
  */
  def g_themed_icon_get_names(icon : Ptr[GThemedIcon]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gthemedicon.h
  */
  def g_themed_icon_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gthemedicon.h
  */
  def g_themed_icon_new(iconname : CString): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gthemedicon.h
  */
  def g_themed_icon_new_from_names(iconnames : Ptr[CString], len : CInt): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gthemedicon.h
  */
  def g_themed_icon_new_with_default_fallbacks(iconname : CString): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gthemedicon.h
  */
  def g_themed_icon_prepend_name(icon : Ptr[GThemedIcon], iconname : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_thread_create(func : GThreadFunc, data : gpointer, joinable : gboolean, error : Ptr[Ptr[GError]]): Ptr[GThread] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_thread_create_full(func : GThreadFunc, data : gpointer, stack_size : gulong, joinable : gboolean, bound : gboolean, priority : GThreadPriority, error : Ptr[Ptr[GError]]): Ptr[GThread] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_thread_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_thread_exit(retval : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_thread_foreach(thread_func : GFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_thread_get_initialized(): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_thread_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_thread_init(vtable : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_thread_init_with_errorcheck_mutexes(vtable : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_thread_join(thread : Ptr[GThread]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_thread_new(name : Ptr[gchar], func : GThreadFunc, data : gpointer): Ptr[GThread] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthreadpool.h
  */
  def g_thread_pool_free(pool : Ptr[GThreadPool], immediate : gboolean, `wait_` : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthreadpool.h
  */
  def g_thread_pool_get_max_idle_time(): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthreadpool.h
  */
  def g_thread_pool_get_max_threads(pool : Ptr[GThreadPool]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthreadpool.h
  */
  def g_thread_pool_get_max_unused_threads(): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthreadpool.h
  */
  def g_thread_pool_get_num_threads(pool : Ptr[GThreadPool]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthreadpool.h
  */
  def g_thread_pool_get_num_unused_threads(): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthreadpool.h
  */
  def g_thread_pool_move_to_front(pool : Ptr[GThreadPool], data : gpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthreadpool.h
  */
  def g_thread_pool_new(func : GFunc, user_data : gpointer, max_threads : gint, exclusive : gboolean, error : Ptr[Ptr[GError]]): Ptr[GThreadPool] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthreadpool.h
  */
  def g_thread_pool_new_full(func : GFunc, user_data : gpointer, item_free_func : GDestroyNotify, max_threads : gint, exclusive : gboolean, error : Ptr[Ptr[GError]]): Ptr[GThreadPool] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthreadpool.h
  */
  def g_thread_pool_push(pool : Ptr[GThreadPool], data : gpointer, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthreadpool.h
  */
  def g_thread_pool_set_max_idle_time(interval : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthreadpool.h
  */
  def g_thread_pool_set_max_threads(pool : Ptr[GThreadPool], max_threads : gint, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthreadpool.h
  */
  def g_thread_pool_set_max_unused_threads(max_threads : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthreadpool.h
  */
  def g_thread_pool_set_sort_function(pool : Ptr[GThreadPool], func : GCompareDataFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthreadpool.h
  */
  def g_thread_pool_stop_unused_threads(): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthreadpool.h
  */
  def g_thread_pool_unprocessed(pool : Ptr[GThreadPool]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_thread_ref(thread : Ptr[GThread]): Ptr[GThread] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_thread_self(): Ptr[GThread] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/gthread.h
  */
  def g_thread_set_priority(thread : Ptr[GThread], priority : GThreadPriority): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_thread_try_new(name : Ptr[gchar], func : GThreadFunc, data : gpointer, error : Ptr[Ptr[GError]]): Ptr[GThread] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_thread_unref(thread : Ptr[GThread]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gthread.h
  */
  def g_thread_yield(): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gthreadedsocketservice.h
  */
  def g_threaded_socket_service_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gthreadedsocketservice.h
  */
  def g_threaded_socket_service_new(max_threads : CInt): Ptr[GSocketService] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimer.h
  */
  def g_time_val_add(`time_` : Ptr[GTimeVal], microseconds : glong): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimer.h
  */
  def g_time_val_from_iso8601(iso_date : Ptr[gchar], `time_` : Ptr[GTimeVal]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimer.h
  */
  def g_time_val_to_iso8601(`time_` : Ptr[GTimeVal]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimezone.h
  */
  def g_time_zone_adjust_time(tz : Ptr[GTimeZone], `type` : GTimeType, `time_` : Ptr[gint64]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimezone.h
  */
  def g_time_zone_find_interval(tz : Ptr[GTimeZone], `type` : GTimeType, `time_` : gint64): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimezone.h
  */
  def g_time_zone_get_abbreviation(tz : Ptr[GTimeZone], interval : gint): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimezone.h
  */
  def g_time_zone_get_identifier(tz : Ptr[GTimeZone]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimezone.h
  */
  def g_time_zone_get_offset(tz : Ptr[GTimeZone], interval : gint): gint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_time_zone_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimezone.h
  */
  def g_time_zone_is_dst(tz : Ptr[GTimeZone], interval : gint): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimezone.h
  */
  def g_time_zone_new(identifier : Ptr[gchar]): Ptr[GTimeZone] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimezone.h
  */
  def g_time_zone_new_identifier(identifier : Ptr[gchar]): Ptr[GTimeZone] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimezone.h
  */
  def g_time_zone_new_local(): Ptr[GTimeZone] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimezone.h
  */
  def g_time_zone_new_offset(seconds : gint32): Ptr[GTimeZone] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimezone.h
  */
  def g_time_zone_new_utc(): Ptr[GTimeZone] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimezone.h
  */
  def g_time_zone_ref(tz : Ptr[GTimeZone]): Ptr[GTimeZone] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimezone.h
  */
  def g_time_zone_unref(tz : Ptr[GTimeZone]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_timeout_add(interval : guint, function : GSourceFunc, data : gpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_timeout_add_full(priority : gint, interval : guint, function : GSourceFunc, data : gpointer, notify : GDestroyNotify): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_timeout_add_seconds(interval : guint, function : GSourceFunc, data : gpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_timeout_add_seconds_full(priority : gint, interval : guint, function : GSourceFunc, data : gpointer, notify : GDestroyNotify): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_timeout_source_new(interval : guint): Ptr[GSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmain.h
  */
  def g_timeout_source_new_seconds(interval : guint): Ptr[GSource] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimer.h
  */
  def g_timer_continue(timer : Ptr[GTimer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimer.h
  */
  def g_timer_destroy(timer : Ptr[GTimer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimer.h
  */
  def g_timer_elapsed(timer : Ptr[GTimer], microseconds : Ptr[gulong]): gdouble = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimer.h
  */
  def g_timer_is_active(timer : Ptr[GTimer]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimer.h
  */
  def g_timer_new(): Ptr[GTimer] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimer.h
  */
  def g_timer_reset(timer : Ptr[GTimer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimer.h
  */
  def g_timer_start(timer : Ptr[GTimer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimer.h
  */
  def g_timer_stop(timer : Ptr[GTimer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_tls_authentication_mode_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsbackend.h
  */
  def g_tls_backend_get_certificate_type(backend : Ptr[GTlsBackend]): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsbackend.h
  */
  def g_tls_backend_get_client_connection_type(backend : Ptr[GTlsBackend]): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsbackend.h
  */
  def g_tls_backend_get_default(): Ptr[GTlsBackend] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsbackend.h
  */
  def g_tls_backend_get_default_database(backend : Ptr[GTlsBackend]): Ptr[GTlsDatabase] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsbackend.h
  */
  def g_tls_backend_get_dtls_client_connection_type(backend : Ptr[GTlsBackend]): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsbackend.h
  */
  def g_tls_backend_get_dtls_server_connection_type(backend : Ptr[GTlsBackend]): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsbackend.h
  */
  def g_tls_backend_get_file_database_type(backend : Ptr[GTlsBackend]): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsbackend.h
  */
  def g_tls_backend_get_server_connection_type(backend : Ptr[GTlsBackend]): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsbackend.h
  */
  def g_tls_backend_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsbackend.h
  */
  def g_tls_backend_set_default_database(backend : Ptr[GTlsBackend], database : Ptr[GTlsDatabase]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsbackend.h
  */
  def g_tls_backend_supports_dtls(backend : Ptr[GTlsBackend]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsbackend.h
  */
  def g_tls_backend_supports_tls(backend : Ptr[GTlsBackend]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_tls_certificate_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
  */
  def g_tls_certificate_get_dns_names(cert : Ptr[GTlsCertificate]): Ptr[GPtrArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
  */
  def g_tls_certificate_get_ip_addresses(cert : Ptr[GTlsCertificate]): Ptr[GPtrArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
  */
  def g_tls_certificate_get_issuer(cert : Ptr[GTlsCertificate]): Ptr[GTlsCertificate] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
  */
  def g_tls_certificate_get_issuer_name(cert : Ptr[GTlsCertificate]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
  */
  def g_tls_certificate_get_not_valid_after(cert : Ptr[GTlsCertificate]): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
  */
  def g_tls_certificate_get_not_valid_before(cert : Ptr[GTlsCertificate]): Ptr[GDateTime] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
  */
  def g_tls_certificate_get_subject_name(cert : Ptr[GTlsCertificate]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
  */
  def g_tls_certificate_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
  */
  def g_tls_certificate_is_same(cert_one : Ptr[GTlsCertificate], cert_two : Ptr[GTlsCertificate]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
  */
  def g_tls_certificate_list_new_from_file(file : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
  */
  def g_tls_certificate_new_from_file(file : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[GTlsCertificate] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
  */
  def g_tls_certificate_new_from_file_with_password(file : Ptr[gchar], password : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[GTlsCertificate] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
  */
  def g_tls_certificate_new_from_files(cert_file : Ptr[gchar], key_file : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[GTlsCertificate] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
  */
  def g_tls_certificate_new_from_pem(data : Ptr[gchar], length : gssize, error : Ptr[Ptr[GError]]): Ptr[GTlsCertificate] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
  */
  def g_tls_certificate_new_from_pkcs11_uris(pkcs11_uri : Ptr[gchar], private_key_pkcs11_uri : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[GTlsCertificate] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
  */
  def g_tls_certificate_new_from_pkcs12(data : Ptr[guint8], length : gsize, password : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[GTlsCertificate] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_tls_certificate_request_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlscertificate.h
  */
  def g_tls_certificate_verify(cert : Ptr[GTlsCertificate], identity : Ptr[GSocketConnectable], trusted_ca : Ptr[GTlsCertificate]): GTlsCertificateFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_tls_channel_binding_error_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_channel_binding_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_tls_channel_binding_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsclientconnection.h
  */
  def g_tls_client_connection_copy_session_state(conn : Ptr[GTlsClientConnection], source : Ptr[GTlsClientConnection]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsclientconnection.h
  */
  def g_tls_client_connection_get_accepted_cas(conn : Ptr[GTlsClientConnection]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsclientconnection.h
  */
  def g_tls_client_connection_get_server_identity(conn : Ptr[GTlsClientConnection]): Ptr[GSocketConnectable] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsclientconnection.h
  */
  def g_tls_client_connection_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsclientconnection.h
  */
  def g_tls_client_connection_get_use_ssl3(conn : Ptr[GTlsClientConnection]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsclientconnection.h
  */
  def g_tls_client_connection_get_validation_flags(conn : Ptr[GTlsClientConnection]): GTlsCertificateFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsclientconnection.h
  */
  def g_tls_client_connection_new(base_io_stream : Ptr[GIOStream], server_identity : Ptr[GSocketConnectable], error : Ptr[Ptr[GError]]): Ptr[GIOStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsclientconnection.h
  */
  def g_tls_client_connection_set_server_identity(conn : Ptr[GTlsClientConnection], identity : Ptr[GSocketConnectable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsclientconnection.h
  */
  def g_tls_client_connection_set_use_ssl3(conn : Ptr[GTlsClientConnection], use_ssl3 : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsclientconnection.h
  */
  def g_tls_client_connection_set_validation_flags(conn : Ptr[GTlsClientConnection], flags : GTlsCertificateFlags): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_emit_accept_certificate(conn : Ptr[GTlsConnection], peer_cert : Ptr[GTlsCertificate], errors : GTlsCertificateFlags): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_get_certificate(conn : Ptr[GTlsConnection]): Ptr[GTlsCertificate] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_get_channel_binding_data(conn : Ptr[GTlsConnection], `type` : GTlsChannelBindingType, data : Ptr[GByteArray], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_get_ciphersuite_name(conn : Ptr[GTlsConnection]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_get_database(conn : Ptr[GTlsConnection]): Ptr[GTlsDatabase] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_get_interaction(conn : Ptr[GTlsConnection]): Ptr[GTlsInteraction] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_get_negotiated_protocol(conn : Ptr[GTlsConnection]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_get_peer_certificate(conn : Ptr[GTlsConnection]): Ptr[GTlsCertificate] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_get_peer_certificate_errors(conn : Ptr[GTlsConnection]): GTlsCertificateFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_get_protocol_version(conn : Ptr[GTlsConnection]): GTlsProtocolVersion = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_get_rehandshake_mode(conn : Ptr[GTlsConnection]): GTlsRehandshakeMode = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_get_require_close_notify(conn : Ptr[GTlsConnection]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_get_use_system_certdb(conn : Ptr[GTlsConnection]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_handshake(conn : Ptr[GTlsConnection], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_handshake_async(conn : Ptr[GTlsConnection], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_handshake_finish(conn : Ptr[GTlsConnection], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_set_advertised_protocols(conn : Ptr[GTlsConnection], protocols : Ptr[Ptr[gchar]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_set_certificate(conn : Ptr[GTlsConnection], certificate : Ptr[GTlsCertificate]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_set_database(conn : Ptr[GTlsConnection], database : Ptr[GTlsDatabase]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_set_interaction(conn : Ptr[GTlsConnection], interaction : Ptr[GTlsInteraction]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_set_rehandshake_mode(conn : Ptr[GTlsConnection], mode : GTlsRehandshakeMode): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_set_require_close_notify(conn : Ptr[GTlsConnection], require_close_notify : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_connection_set_use_system_certdb(conn : Ptr[GTlsConnection], use_system_certdb : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsdatabase.h
  */
  def g_tls_database_create_certificate_handle(self : Ptr[GTlsDatabase], certificate : Ptr[GTlsCertificate]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsdatabase.h
  */
  def g_tls_database_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsdatabase.h
  */
  def g_tls_database_lookup_certificate_for_handle(self : Ptr[GTlsDatabase], handle : Ptr[gchar], interaction : Ptr[GTlsInteraction], flags : GTlsDatabaseLookupFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GTlsCertificate] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsdatabase.h
  */
  def g_tls_database_lookup_certificate_for_handle_async(self : Ptr[GTlsDatabase], handle : Ptr[gchar], interaction : Ptr[GTlsInteraction], flags : GTlsDatabaseLookupFlags, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsdatabase.h
  */
  def g_tls_database_lookup_certificate_for_handle_finish(self : Ptr[GTlsDatabase], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GTlsCertificate] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsdatabase.h
  */
  def g_tls_database_lookup_certificate_issuer(self : Ptr[GTlsDatabase], certificate : Ptr[GTlsCertificate], interaction : Ptr[GTlsInteraction], flags : GTlsDatabaseLookupFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GTlsCertificate] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsdatabase.h
  */
  def g_tls_database_lookup_certificate_issuer_async(self : Ptr[GTlsDatabase], certificate : Ptr[GTlsCertificate], interaction : Ptr[GTlsInteraction], flags : GTlsDatabaseLookupFlags, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsdatabase.h
  */
  def g_tls_database_lookup_certificate_issuer_finish(self : Ptr[GTlsDatabase], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GTlsCertificate] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsdatabase.h
  */
  def g_tls_database_lookup_certificates_issued_by(self : Ptr[GTlsDatabase], issuer_raw_dn : Ptr[GByteArray], interaction : Ptr[GTlsInteraction], flags : GTlsDatabaseLookupFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsdatabase.h
  */
  def g_tls_database_lookup_certificates_issued_by_async(self : Ptr[GTlsDatabase], issuer_raw_dn : Ptr[GByteArray], interaction : Ptr[GTlsInteraction], flags : GTlsDatabaseLookupFlags, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsdatabase.h
  */
  def g_tls_database_lookup_certificates_issued_by_finish(self : Ptr[GTlsDatabase], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_tls_database_lookup_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsdatabase.h
  */
  def g_tls_database_verify_chain(self : Ptr[GTlsDatabase], chain : Ptr[GTlsCertificate], purpose : Ptr[gchar], identity : Ptr[GSocketConnectable], interaction : Ptr[GTlsInteraction], flags : GTlsDatabaseVerifyFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): GTlsCertificateFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsdatabase.h
  */
  def g_tls_database_verify_chain_async(self : Ptr[GTlsDatabase], chain : Ptr[GTlsCertificate], purpose : Ptr[gchar], identity : Ptr[GSocketConnectable], interaction : Ptr[GTlsInteraction], flags : GTlsDatabaseVerifyFlags, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsdatabase.h
  */
  def g_tls_database_verify_chain_finish(self : Ptr[GTlsDatabase], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): GTlsCertificateFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_tls_database_verify_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_tls_error_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsconnection.h
  */
  def g_tls_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsfiledatabase.h
  */
  def g_tls_file_database_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsfiledatabase.h
  */
  def g_tls_file_database_new(anchors : Ptr[gchar], error : Ptr[Ptr[GError]]): Ptr[GTlsDatabase] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsinteraction.h
  */
  def g_tls_interaction_ask_password(interaction : Ptr[GTlsInteraction], password : Ptr[GTlsPassword], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): GTlsInteractionResult = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsinteraction.h
  */
  def g_tls_interaction_ask_password_async(interaction : Ptr[GTlsInteraction], password : Ptr[GTlsPassword], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsinteraction.h
  */
  def g_tls_interaction_ask_password_finish(interaction : Ptr[GTlsInteraction], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): GTlsInteractionResult = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsinteraction.h
  */
  def g_tls_interaction_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsinteraction.h
  */
  def g_tls_interaction_invoke_ask_password(interaction : Ptr[GTlsInteraction], password : Ptr[GTlsPassword], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): GTlsInteractionResult = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsinteraction.h
  */
  def g_tls_interaction_invoke_request_certificate(interaction : Ptr[GTlsInteraction], connection : Ptr[GTlsConnection], flags : GTlsCertificateRequestFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): GTlsInteractionResult = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsinteraction.h
  */
  def g_tls_interaction_request_certificate(interaction : Ptr[GTlsInteraction], connection : Ptr[GTlsConnection], flags : GTlsCertificateRequestFlags, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): GTlsInteractionResult = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsinteraction.h
  */
  def g_tls_interaction_request_certificate_async(interaction : Ptr[GTlsInteraction], connection : Ptr[GTlsConnection], flags : GTlsCertificateRequestFlags, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsinteraction.h
  */
  def g_tls_interaction_request_certificate_finish(interaction : Ptr[GTlsInteraction], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): GTlsInteractionResult = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_tls_interaction_result_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_tls_password_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlspassword.h
  */
  def g_tls_password_get_description(password : Ptr[GTlsPassword]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlspassword.h
  */
  def g_tls_password_get_flags(password : Ptr[GTlsPassword]): GTlsPasswordFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlspassword.h
  */
  def g_tls_password_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlspassword.h
  */
  def g_tls_password_get_value(password : Ptr[GTlsPassword], length : Ptr[gsize]): Ptr[guchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlspassword.h
  */
  def g_tls_password_get_warning(password : Ptr[GTlsPassword]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlspassword.h
  */
  def g_tls_password_new(flags : GTlsPasswordFlags, description : Ptr[gchar]): Ptr[GTlsPassword] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlspassword.h
  */
  def g_tls_password_set_description(password : Ptr[GTlsPassword], description : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlspassword.h
  */
  def g_tls_password_set_flags(password : Ptr[GTlsPassword], flags : GTlsPasswordFlags): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlspassword.h
  */
  def g_tls_password_set_value(password : Ptr[GTlsPassword], value : Ptr[guchar], length : gssize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlspassword.h
  */
  def g_tls_password_set_value_full(password : Ptr[GTlsPassword], value : Ptr[guchar], length : gssize, destroy : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlspassword.h
  */
  def g_tls_password_set_warning(password : Ptr[GTlsPassword], warning : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_tls_protocol_version_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_tls_rehandshake_mode_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsserverconnection.h
  */
  def g_tls_server_connection_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gtlsserverconnection.h
  */
  def g_tls_server_connection_new(base_io_stream : Ptr[GIOStream], certificate : Ptr[GTlsCertificate], error : Ptr[Ptr[GError]]): Ptr[GIOStream] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtrashstack.h
  */
  def g_trash_stack_height(stack_p : Ptr[Ptr[GTrashStack]]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtrashstack.h
  */
  def g_trash_stack_peek(stack_p : Ptr[Ptr[GTrashStack]]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtrashstack.h
  */
  def g_trash_stack_pop(stack_p : Ptr[Ptr[GTrashStack]]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtrashstack.h
  */
  def g_trash_stack_push(stack_p : Ptr[Ptr[GTrashStack]], data_p : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_destroy(tree : Ptr[GTree]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_foreach(tree : Ptr[GTree], func : GTraverseFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_foreach_node(tree : Ptr[GTree], func : GTraverseNodeFunc, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_tree_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_height(tree : Ptr[GTree]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_insert(tree : Ptr[GTree], key : gpointer, value : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_insert_node(tree : Ptr[GTree], key : gpointer, value : gpointer): Ptr[GTreeNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_lookup(tree : Ptr[GTree], key : gconstpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_lookup_extended(tree : Ptr[GTree], lookup_key : gconstpointer, orig_key : Ptr[gpointer], value : Ptr[gpointer]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_lookup_node(tree : Ptr[GTree], key : gconstpointer): Ptr[GTreeNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_lower_bound(tree : Ptr[GTree], key : gconstpointer): Ptr[GTreeNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_new(key_compare_func : GCompareFunc): Ptr[GTree] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_new_full(key_compare_func : GCompareDataFunc, key_compare_data : gpointer, key_destroy_func : GDestroyNotify, value_destroy_func : GDestroyNotify): Ptr[GTree] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_new_with_data(key_compare_func : GCompareDataFunc, key_compare_data : gpointer): Ptr[GTree] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_nnodes(tree : Ptr[GTree]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_node_first(tree : Ptr[GTree]): Ptr[GTreeNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_node_key(node : Ptr[GTreeNode]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_node_last(tree : Ptr[GTree]): Ptr[GTreeNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_node_next(node : Ptr[GTreeNode]): Ptr[GTreeNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_node_previous(node : Ptr[GTreeNode]): Ptr[GTreeNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_node_value(node : Ptr[GTreeNode]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_ref(tree : Ptr[GTree]): Ptr[GTree] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_remove(tree : Ptr[GTree], key : gconstpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_remove_all(tree : Ptr[GTree]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_replace(tree : Ptr[GTree], key : gpointer, value : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_replace_node(tree : Ptr[GTree], key : gpointer, value : gpointer): Ptr[GTreeNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_search(tree : Ptr[GTree], search_func : GCompareFunc, user_data : gconstpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_search_node(tree : Ptr[GTree], search_func : GCompareFunc, user_data : gconstpointer): Ptr[GTreeNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_steal(tree : Ptr[GTree], key : gconstpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_traverse(tree : Ptr[GTree], traverse_func : GTraverseFunc, traverse_type : GTraverseType, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_unref(tree : Ptr[GTree]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtree.h
  */
  def g_tree_upper_bound(tree : Ptr[GTree], key : gconstpointer): Ptr[GTreeNode] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_try_malloc(n_bytes : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_try_malloc0(n_bytes : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_try_malloc0_n(n_blocks : gsize, n_block_bytes : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_try_malloc_n(n_blocks : gsize, n_block_bytes : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_try_realloc(mem : gpointer, n_bytes : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmem.h
  */
  def g_try_realloc_n(mem : gpointer, n_blocks : gsize, n_block_bytes : gsize): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/grel.h
  */
  def g_tuples_destroy(tuples : Ptr[GTuples]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/deprecated/grel.h
  */
  def g_tuples_index(tuples : Ptr[GTuples], `index_` : gint, field : gint): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_add_class_cache_func(cache_data : gpointer, cache_func : GTypeClassCacheFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_add_class_private(class_type : GType, private_size : gsize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_add_instance_private(class_type : GType, private_size : gsize): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_add_interface_check(check_data : gpointer, check_func : GTypeInterfaceCheckFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_add_interface_dynamic(instance_type : GType, interface_type : GType, plugin : Ptr[GTypePlugin]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_add_interface_static(instance_type : GType, interface_type : GType, info : Ptr[GInterfaceInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_check_class_cast(g_class : Ptr[GTypeClass], is_a_type : GType): Ptr[GTypeClass] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_check_class_is_a(g_class : Ptr[GTypeClass], is_a_type : GType): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_check_instance(instance : Ptr[GTypeInstance]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_check_instance_cast(instance : Ptr[GTypeInstance], iface_type : GType): Ptr[GTypeInstance] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_check_instance_is_a(instance : Ptr[GTypeInstance], iface_type : GType): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_check_instance_is_fundamentally_a(instance : Ptr[GTypeInstance], fundamental_type : GType): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_check_is_value_type(`type` : GType): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_check_value(value : Ptr[GValue]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_check_value_holds(value : Ptr[GValue], `type` : GType): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_children(`type` : GType, n_children : Ptr[guint]): Ptr[GType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_class_add_private(g_class : gpointer, private_size : gsize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_class_adjust_private_offset(g_class : gpointer, private_size_or_offset : Ptr[gint]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_class_get_instance_private_offset(g_class : gpointer): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_class_get_private(klass : Ptr[GTypeClass], private_type : GType): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_class_peek(`type` : GType): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_class_peek_parent(g_class : gpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_class_peek_static(`type` : GType): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_class_ref(`type` : GType): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_class_unref(g_class : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_class_unref_uncached(g_class : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_create_instance(`type` : GType): Ptr[GTypeInstance] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_default_interface_peek(g_type : GType): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_default_interface_ref(g_type : GType): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_default_interface_unref(g_iface : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_depth(`type` : GType): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_ensure(`type` : GType): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_free_instance(instance : Ptr[GTypeInstance]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_from_name(name : Ptr[gchar]): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_fundamental(type_id : GType): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_fundamental_next(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_get_instance_count(`type` : GType): CInt = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_get_plugin(`type` : GType): Ptr[GTypePlugin] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_get_qdata(`type` : GType, quark : GQuark): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_get_type_registration_serial(): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_init(): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_init_with_debug_flags(debug_flags : GTypeDebugFlags): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_instance_get_private(instance : Ptr[GTypeInstance], private_type : GType): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_interface_add_prerequisite(interface_type : GType, prerequisite_type : GType): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_interface_get_plugin(instance_type : GType, interface_type : GType): Ptr[GTypePlugin] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_interface_instantiatable_prerequisite(interface_type : GType): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_interface_peek(instance_class : gpointer, iface_type : GType): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_interface_peek_parent(g_iface : gpointer): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_interface_prerequisites(interface_type : GType, n_prerequisites : Ptr[guint]): Ptr[GType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_interfaces(`type` : GType, n_interfaces : Ptr[guint]): Ptr[GType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_is_a(`type` : GType, is_a_type : GType): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtypemodule.h
  */
  def g_type_module_add_interface(module : Ptr[GTypeModule], instance_type : GType, interface_type : GType, interface_info : Ptr[GInterfaceInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtypemodule.h
  */
  def g_type_module_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtypemodule.h
  */
  def g_type_module_register_enum(module : Ptr[GTypeModule], name : Ptr[gchar], const_static_values : Ptr[GEnumValue]): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtypemodule.h
  */
  def g_type_module_register_flags(module : Ptr[GTypeModule], name : Ptr[gchar], const_static_values : Ptr[GFlagsValue]): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtypemodule.h
  */
  def g_type_module_register_type(module : Ptr[GTypeModule], parent_type : GType, type_name : Ptr[gchar], type_info : Ptr[GTypeInfo], flags : GTypeFlags): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtypemodule.h
  */
  def g_type_module_set_name(module : Ptr[GTypeModule], name : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtypemodule.h
  */
  def g_type_module_unuse(module : Ptr[GTypeModule]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtypemodule.h
  */
  def g_type_module_use(module : Ptr[GTypeModule]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_name(`type` : GType): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_name_from_class(g_class : Ptr[GTypeClass]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_name_from_instance(instance : Ptr[GTypeInstance]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_next_base(leaf_type : GType, root_type : GType): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_parent(`type` : GType): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtypeplugin.h
  */
  def g_type_plugin_complete_interface_info(plugin : Ptr[GTypePlugin], instance_type : GType, interface_type : GType, info : Ptr[GInterfaceInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtypeplugin.h
  */
  def g_type_plugin_complete_type_info(plugin : Ptr[GTypePlugin], g_type : GType, info : Ptr[GTypeInfo], value_table : Ptr[GTypeValueTable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtypeplugin.h
  */
  def g_type_plugin_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtypeplugin.h
  */
  def g_type_plugin_unuse(plugin : Ptr[GTypePlugin]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtypeplugin.h
  */
  def g_type_plugin_use(plugin : Ptr[GTypePlugin]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_qname(`type` : GType): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_query(`type` : GType, query : Ptr[GTypeQuery]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_register_dynamic(parent_type : GType, type_name : Ptr[gchar], plugin : Ptr[GTypePlugin], flags : GTypeFlags): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_register_fundamental(type_id : GType, type_name : Ptr[gchar], info : Ptr[GTypeInfo], finfo : Ptr[GTypeFundamentalInfo], flags : GTypeFlags): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_register_static(parent_type : GType, type_name : Ptr[gchar], info : Ptr[GTypeInfo], flags : GTypeFlags): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_register_static_simple(parent_type : GType, type_name : Ptr[gchar], class_size : guint, class_init : GClassInitFunc, instance_size : guint, instance_init : GInstanceInitFunc, flags : GTypeFlags): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_remove_class_cache_func(cache_data : gpointer, cache_func : GTypeClassCacheFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_remove_interface_check(check_data : gpointer, check_func : GTypeInterfaceCheckFunc): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_set_qdata(`type` : GType, quark : GQuark, data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_test_flags(`type` : GType, flags : guint): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtype.h
  */
  def g_type_value_table_peek(`type` : GType): Ptr[GTypeValueTable] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_ucs4_to_utf16(str : Ptr[gunichar], len : glong, items_read : Ptr[glong], items_written : Ptr[glong], error : Ptr[Ptr[GError]]): Ptr[gunichar2] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_ucs4_to_utf8(str : Ptr[gunichar], len : glong, items_read : Ptr[glong], items_written : Ptr[glong], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_break_type(c : gunichar): GUnicodeBreakType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_combining_class(uc : gunichar): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_compose(a : gunichar, b : gunichar, ch : Ptr[gunichar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_decompose(ch : gunichar, a : Ptr[gunichar], b : Ptr[gunichar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_digit_value(c : gunichar): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_fully_decompose(ch : gunichar, compat : gboolean, result : Ptr[gunichar], result_len : gsize): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_get_mirror_char(ch : gunichar, mirrored_ch : Ptr[gunichar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_get_script(ch : gunichar): GUnicodeScript = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_isalnum(c : gunichar): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_isalpha(c : gunichar): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_iscntrl(c : gunichar): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_isdefined(c : gunichar): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_isdigit(c : gunichar): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_isgraph(c : gunichar): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_islower(c : gunichar): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_ismark(c : gunichar): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_isprint(c : gunichar): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_ispunct(c : gunichar): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_isspace(c : gunichar): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_istitle(c : gunichar): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_isupper(c : gunichar): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_iswide(c : gunichar): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_iswide_cjk(c : gunichar): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_isxdigit(c : gunichar): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_iszerowidth(c : gunichar): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_to_utf8(c : gunichar, outbuf : Ptr[gchar]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_tolower(c : gunichar): gunichar = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_totitle(c : gunichar): gunichar = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_toupper(c : gunichar): gunichar = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_type(c : gunichar): GUnicodeType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_validate(ch : gunichar): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unichar_xdigit_value(c : gunichar): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-enumtypes.h
  */
  def g_unicode_break_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unicode_canonical_decomposition(ch : gunichar, result_len : Ptr[gsize]): Ptr[gunichar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unicode_canonical_ordering(string : Ptr[gunichar], len : gsize): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unicode_script_from_iso15924(iso15924 : guint32): GUnicodeScript = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-enumtypes.h
  */
  def g_unicode_script_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_unicode_script_to_iso15924(script : GUnicodeScript): guint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-enumtypes.h
  */
  def g_unicode_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_unix_socket_address_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/genviron.h
  */
  def g_unsetenv(variable : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_build(flags : GUriFlags, scheme : Ptr[gchar], userinfo : Ptr[gchar], host : Ptr[gchar], port : gint, path : Ptr[gchar], query : Ptr[gchar], fragment : Ptr[gchar]): Ptr[GUri] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_build_with_user(flags : GUriFlags, scheme : Ptr[gchar], user : Ptr[gchar], password : Ptr[gchar], auth_params : Ptr[gchar], host : Ptr[gchar], port : gint, path : Ptr[gchar], query : Ptr[gchar], fragment : Ptr[gchar]): Ptr[GUri] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_escape_bytes(unescaped : Ptr[guint8], length : gsize, reserved_chars_allowed : CString): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_escape_string(unescaped : CString, reserved_chars_allowed : CString, allow_utf8 : gboolean): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_get_auth_params(uri : Ptr[GUri]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_get_flags(uri : Ptr[GUri]): GUriFlags = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_get_fragment(uri : Ptr[GUri]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_get_host(uri : Ptr[GUri]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_get_password(uri : Ptr[GUri]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_get_path(uri : Ptr[GUri]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_get_port(uri : Ptr[GUri]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_get_query(uri : Ptr[GUri]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_get_scheme(uri : Ptr[GUri]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_uri_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_get_user(uri : Ptr[GUri]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_get_userinfo(uri : Ptr[GUri]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_is_valid(uri_string : Ptr[gchar], flags : GUriFlags, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_join(flags : GUriFlags, scheme : Ptr[gchar], userinfo : Ptr[gchar], host : Ptr[gchar], port : gint, path : Ptr[gchar], query : Ptr[gchar], fragment : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_join_with_user(flags : GUriFlags, scheme : Ptr[gchar], user : Ptr[gchar], password : Ptr[gchar], auth_params : Ptr[gchar], host : Ptr[gchar], port : gint, path : Ptr[gchar], query : Ptr[gchar], fragment : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gconvert.h
  */
  def g_uri_list_extract_uris(uri_list : Ptr[gchar]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_params_iter_init(iter : Ptr[GUriParamsIter], params : Ptr[gchar], length : gssize, separators : Ptr[gchar], flags : GUriParamsFlags): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_params_iter_next(iter : Ptr[GUriParamsIter], attribute : Ptr[Ptr[gchar]], value : Ptr[Ptr[gchar]], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_parse(uri_string : Ptr[gchar], flags : GUriFlags, error : Ptr[Ptr[GError]]): Ptr[GUri] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_parse_params(params : Ptr[gchar], length : gssize, separators : Ptr[gchar], flags : GUriParamsFlags, error : Ptr[Ptr[GError]]): Ptr[GHashTable] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_parse_relative(base_uri : Ptr[GUri], uri_ref : Ptr[gchar], flags : GUriFlags, error : Ptr[Ptr[GError]]): Ptr[GUri] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_parse_scheme(uri : CString): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_peek_scheme(uri : CString): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_ref(uri : Ptr[GUri]): Ptr[GUri] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_resolve_relative(base_uri_string : Ptr[gchar], uri_ref : Ptr[gchar], flags : GUriFlags, error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_split(uri_ref : Ptr[gchar], flags : GUriFlags, scheme : Ptr[Ptr[gchar]], userinfo : Ptr[Ptr[gchar]], host : Ptr[Ptr[gchar]], port : Ptr[gint], path : Ptr[Ptr[gchar]], query : Ptr[Ptr[gchar]], fragment : Ptr[Ptr[gchar]], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_split_network(uri_string : Ptr[gchar], flags : GUriFlags, scheme : Ptr[Ptr[gchar]], host : Ptr[Ptr[gchar]], port : Ptr[gint], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_split_with_user(uri_ref : Ptr[gchar], flags : GUriFlags, scheme : Ptr[Ptr[gchar]], user : Ptr[Ptr[gchar]], password : Ptr[Ptr[gchar]], auth_params : Ptr[Ptr[gchar]], host : Ptr[Ptr[gchar]], port : Ptr[gint], path : Ptr[Ptr[gchar]], query : Ptr[Ptr[gchar]], fragment : Ptr[Ptr[gchar]], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_to_string(uri : Ptr[GUri]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_to_string_partial(uri : Ptr[GUri], flags : GUriHideFlags): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_unescape_bytes(escaped_string : CString, length : gssize, illegal_characters : CString, error : Ptr[Ptr[GError]]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_unescape_segment(escaped_string : CString, escaped_string_end : CString, illegal_characters : CString): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_unescape_string(escaped_string : CString, illegal_characters : CString): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guri.h
  */
  def g_uri_unref(uri : Ptr[GUri]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gtimer.h
  */
  def g_usleep(microseconds : gulong): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf16_to_ucs4(str : Ptr[gunichar2], len : glong, items_read : Ptr[glong], items_written : Ptr[glong], error : Ptr[Ptr[GError]]): Ptr[gunichar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf16_to_utf8(str : Ptr[gunichar2], len : glong, items_read : Ptr[glong], items_written : Ptr[glong], error : Ptr[Ptr[GError]]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_casefold(str : Ptr[gchar], len : gssize): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_collate(str1 : Ptr[gchar], str2 : Ptr[gchar]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_collate_key(str : Ptr[gchar], len : gssize): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_collate_key_for_filename(str : Ptr[gchar], len : gssize): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_find_next_char(p : Ptr[gchar], end : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_find_prev_char(str : Ptr[gchar], p : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_get_char(p : Ptr[gchar]): gunichar = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_get_char_validated(p : Ptr[gchar], max_len : gssize): gunichar = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_make_valid(str : Ptr[gchar], len : gssize): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_normalize(str : Ptr[gchar], len : gssize, mode : GNormalizeMode): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_offset_to_pointer(str : Ptr[gchar], offset : glong): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_pointer_to_offset(str : Ptr[gchar], pos : Ptr[gchar]): glong = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_prev_char(p : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_strchr(p : Ptr[gchar], len : gssize, c : gunichar): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_strdown(str : Ptr[gchar], len : gssize): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_strlen(p : Ptr[gchar], max : gssize): glong = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_strncpy(dest : Ptr[gchar], src : Ptr[gchar], n : gsize): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_strrchr(p : Ptr[gchar], len : gssize, c : gunichar): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_strreverse(str : Ptr[gchar], len : gssize): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_strup(str : Ptr[gchar], len : gssize): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_substring(str : Ptr[gchar], start_pos : glong, end_pos : glong): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_to_ucs4(str : Ptr[gchar], len : glong, items_read : Ptr[glong], items_written : Ptr[glong], error : Ptr[Ptr[GError]]): Ptr[gunichar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_to_ucs4_fast(str : Ptr[gchar], len : glong, items_written : Ptr[glong]): Ptr[gunichar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_to_utf16(str : Ptr[gchar], len : glong, items_read : Ptr[glong], items_written : Ptr[glong], error : Ptr[Ptr[GError]]): Ptr[gunichar2] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_validate(str : Ptr[gchar], max_len : gssize, end : Ptr[Ptr[gchar]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gunicode.h
  */
  def g_utf8_validate_len(str : Ptr[gchar], max_len : gsize, end : Ptr[Ptr[gchar]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guuid.h
  */
  def g_uuid_string_is_valid(str : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/guuid.h
  */
  def g_uuid_string_random(): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluearray.h
  */
  def g_value_array_append(value_array : Ptr[GValueArray], value : Ptr[GValue]): Ptr[GValueArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluearray.h
  */
  def g_value_array_copy(value_array : Ptr[GValueArray]): Ptr[GValueArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluearray.h
  */
  def g_value_array_free(value_array : Ptr[GValueArray]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluearray.h
  */
  def g_value_array_get_nth(value_array : Ptr[GValueArray], `index_` : guint): Ptr[GValue] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluearray.h
  */
  def g_value_array_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluearray.h
  */
  def g_value_array_insert(value_array : Ptr[GValueArray], `index_` : guint, value : Ptr[GValue]): Ptr[GValueArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluearray.h
  */
  def g_value_array_new(n_prealloced : guint): Ptr[GValueArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluearray.h
  */
  def g_value_array_prepend(value_array : Ptr[GValueArray], value : Ptr[GValue]): Ptr[GValueArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluearray.h
  */
  def g_value_array_remove(value_array : Ptr[GValueArray], `index_` : guint): Ptr[GValueArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluearray.h
  */
  def g_value_array_sort(value_array : Ptr[GValueArray], compare_func : GCompareFunc): Ptr[GValueArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluearray.h
  */
  def g_value_array_sort_with_data(value_array : Ptr[GValueArray], compare_func : GCompareDataFunc, user_data : gpointer): Ptr[GValueArray] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvalue.h
  */
  def g_value_copy(src_value : Ptr[GValue], dest_value : Ptr[GValue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gboxed.h
  */
  def g_value_dup_boxed(value : Ptr[GValue]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_value_dup_object(value : Ptr[GValue]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_value_dup_param(value : Ptr[GValue]): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_dup_string(value : Ptr[GValue]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_dup_variant(value : Ptr[GValue]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvalue.h
  */
  def g_value_fits_pointer(value : Ptr[GValue]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_get_boolean(value : Ptr[GValue]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gboxed.h
  */
  def g_value_get_boxed(value : Ptr[GValue]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_get_char(value : Ptr[GValue]): gchar = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_get_double(value : Ptr[GValue]): gdouble = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
  */
  def g_value_get_enum(value : Ptr[GValue]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
  */
  def g_value_get_flags(value : Ptr[GValue]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_get_float(value : Ptr[GValue]): gfloat = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_get_gtype(value : Ptr[GValue]): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_get_int(value : Ptr[GValue]): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_get_int64(value : Ptr[GValue]): gint64 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_get_long(value : Ptr[GValue]): glong = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_value_get_object(value : Ptr[GValue]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_value_get_param(value : Ptr[GValue]): Ptr[GParamSpec] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_get_pointer(value : Ptr[GValue]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_get_schar(value : Ptr[GValue]): gint8 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_get_string(value : Ptr[GValue]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gboxed.h
  */
  def g_value_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_get_uchar(value : Ptr[GValue]): guchar = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_get_uint(value : Ptr[GValue]): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_get_uint64(value : Ptr[GValue]): guint64 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_get_ulong(value : Ptr[GValue]): gulong = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_get_variant(value : Ptr[GValue]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvalue.h
  */
  def g_value_init(value : Ptr[GValue], g_type : GType): Ptr[GValue] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvalue.h
  */
  def g_value_init_from_instance(value : Ptr[GValue], instance : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvalue.h
  */
  def g_value_peek_pointer(value : Ptr[GValue]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvalue.h
  */
  def g_value_register_transform_func(src_type : GType, dest_type : GType, transform_func : GValueTransform): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvalue.h
  */
  def g_value_reset(value : Ptr[GValue]): Ptr[GValue] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_set_boolean(value : Ptr[GValue], v_boolean : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gboxed.h
  */
  def g_value_set_boxed(value : Ptr[GValue], v_boxed : gconstpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gboxed.h
  */
  def g_value_set_boxed_take_ownership(value : Ptr[GValue], v_boxed : gconstpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_set_char(value : Ptr[GValue], v_char : gchar): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_set_double(value : Ptr[GValue], v_double : gdouble): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
  */
  def g_value_set_enum(value : Ptr[GValue], v_enum : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/genums.h
  */
  def g_value_set_flags(value : Ptr[GValue], v_flags : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_set_float(value : Ptr[GValue], v_float : gfloat): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_set_gtype(value : Ptr[GValue], v_gtype : GType): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvalue.h
  */
  def g_value_set_instance(value : Ptr[GValue], instance : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_set_int(value : Ptr[GValue], v_int : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_set_int64(value : Ptr[GValue], v_int64 : gint64): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_set_interned_string(value : Ptr[GValue], v_string : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_set_long(value : Ptr[GValue], v_long : glong): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_value_set_object(value : Ptr[GValue], v_object : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_value_set_object_take_ownership(value : Ptr[GValue], v_object : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_value_set_param(value : Ptr[GValue], param : Ptr[GParamSpec]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_value_set_param_take_ownership(value : Ptr[GValue], param : Ptr[GParamSpec]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_set_pointer(value : Ptr[GValue], v_pointer : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_set_schar(value : Ptr[GValue], v_char : gint8): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gboxed.h
  */
  def g_value_set_static_boxed(value : Ptr[GValue], v_boxed : gconstpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_set_static_string(value : Ptr[GValue], v_string : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_set_string(value : Ptr[GValue], v_string : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_set_string_take_ownership(value : Ptr[GValue], v_string : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_set_uchar(value : Ptr[GValue], v_uchar : guchar): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_set_uint(value : Ptr[GValue], v_uint : guint): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_set_uint64(value : Ptr[GValue], v_uint64 : guint64): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_set_ulong(value : Ptr[GValue], v_ulong : gulong): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_set_variant(value : Ptr[GValue], variant : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gboxed.h
  */
  def g_value_take_boxed(value : Ptr[GValue], v_boxed : gconstpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_value_take_object(value : Ptr[GValue], v_object : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gparam.h
  */
  def g_value_take_param(value : Ptr[GValue], param : Ptr[GParamSpec]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_take_string(value : Ptr[GValue], v_string : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvaluetypes.h
  */
  def g_value_take_variant(value : Ptr[GValue], variant : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvalue.h
  */
  def g_value_transform(src_value : Ptr[GValue], dest_value : Ptr[GValue]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvalue.h
  */
  def g_value_type_compatible(src_type : GType, dest_type : GType): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvalue.h
  */
  def g_value_type_transformable(src_type : GType, dest_type : GType): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gvalue.h
  */
  def g_value_unset(value : Ptr[GValue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_builder_add(builder : Ptr[GVariantBuilder], format_string : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_builder_add_parsed(builder : Ptr[GVariantBuilder], format : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_builder_add_value(builder : Ptr[GVariantBuilder], value : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_builder_clear(builder : Ptr[GVariantBuilder]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_builder_close(builder : Ptr[GVariantBuilder]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_builder_end(builder : Ptr[GVariantBuilder]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_variant_builder_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_builder_init(builder : Ptr[GVariantBuilder], `type` : Ptr[GVariantType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_builder_new(`type` : Ptr[GVariantType]): Ptr[GVariantBuilder] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_builder_open(builder : Ptr[GVariantBuilder], `type` : Ptr[GVariantType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_builder_ref(builder : Ptr[GVariantBuilder]): Ptr[GVariantBuilder] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_builder_unref(builder : Ptr[GVariantBuilder]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_byteswap(value : Ptr[GVariant]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_check_format_string(value : Ptr[GVariant], format_string : Ptr[gchar], copy_only : gboolean): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_classify(value : Ptr[GVariant]): GVariantClass = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_compare(one : gconstpointer, two : gconstpointer): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_dict_clear(dict : Ptr[GVariantDict]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_dict_contains(dict : Ptr[GVariantDict], key : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_dict_end(dict : Ptr[GVariantDict]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_variant_dict_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_dict_init(dict : Ptr[GVariantDict], from_asv : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_dict_insert(dict : Ptr[GVariantDict], key : Ptr[gchar], format_string : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_dict_insert_value(dict : Ptr[GVariantDict], key : Ptr[gchar], value : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_dict_lookup(dict : Ptr[GVariantDict], key : Ptr[gchar], format_string : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_dict_lookup_value(dict : Ptr[GVariantDict], key : Ptr[gchar], expected_type : Ptr[GVariantType]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_dict_new(from_asv : Ptr[GVariant]): Ptr[GVariantDict] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_dict_ref(dict : Ptr[GVariantDict]): Ptr[GVariantDict] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_dict_remove(dict : Ptr[GVariantDict], key : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_dict_unref(dict : Ptr[GVariantDict]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_dup_bytestring(value : Ptr[GVariant], length : Ptr[gsize]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_dup_bytestring_array(value : Ptr[GVariant], length : Ptr[gsize]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_dup_objv(value : Ptr[GVariant], length : Ptr[gsize]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_dup_string(value : Ptr[GVariant], length : Ptr[gsize]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_dup_strv(value : Ptr[GVariant], length : Ptr[gsize]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_equal(one : gconstpointer, two : gconstpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get(value : Ptr[GVariant], format_string : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_boolean(value : Ptr[GVariant]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_byte(value : Ptr[GVariant]): guint8 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_bytestring(value : Ptr[GVariant]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_bytestring_array(value : Ptr[GVariant], length : Ptr[gsize]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_child(value : Ptr[GVariant], `index_` : gsize, format_string : Ptr[gchar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_child_value(value : Ptr[GVariant], `index_` : gsize): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_data(value : Ptr[GVariant]): gconstpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_data_as_bytes(value : Ptr[GVariant]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_double(value : Ptr[GVariant]): gdouble = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_fixed_array(value : Ptr[GVariant], n_elements : Ptr[gsize], element_size : gsize): gconstpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_variant_get_gtype(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_handle(value : Ptr[GVariant]): gint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_int16(value : Ptr[GVariant]): gint16 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_int32(value : Ptr[GVariant]): gint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_int64(value : Ptr[GVariant]): gint64 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_maybe(value : Ptr[GVariant]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_normal_form(value : Ptr[GVariant]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_objv(value : Ptr[GVariant], length : Ptr[gsize]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_size(value : Ptr[GVariant]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_string(value : Ptr[GVariant], length : Ptr[gsize]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_strv(value : Ptr[GVariant], length : Ptr[gsize]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_type(value : Ptr[GVariant]): Ptr[GVariantType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_type_string(value : Ptr[GVariant]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_uint16(value : Ptr[GVariant]): guint16 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_uint32(value : Ptr[GVariant]): guint32 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_uint64(value : Ptr[GVariant]): guint64 = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_va(value : Ptr[GVariant], format_string : Ptr[gchar], endptr : Ptr[Ptr[gchar]], app : Ptr[va_list]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_get_variant(value : Ptr[GVariant]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_hash(value : gconstpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_is_container(value : Ptr[GVariant]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_is_floating(value : Ptr[GVariant]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_is_normal_form(value : Ptr[GVariant]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_is_object_path(string : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_is_of_type(value : Ptr[GVariant], `type` : Ptr[GVariantType]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_is_signature(string : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_iter_copy(iter : Ptr[GVariantIter]): Ptr[GVariantIter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_iter_free(iter : Ptr[GVariantIter]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_iter_init(iter : Ptr[GVariantIter], value : Ptr[GVariant]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_iter_loop(iter : Ptr[GVariantIter], format_string : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_iter_n_children(iter : Ptr[GVariantIter]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_iter_new(value : Ptr[GVariant]): Ptr[GVariantIter] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_iter_next(iter : Ptr[GVariantIter], format_string : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_iter_next_value(iter : Ptr[GVariantIter]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_lookup(dictionary : Ptr[GVariant], key : Ptr[gchar], format_string : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_lookup_value(dictionary : Ptr[GVariant], key : Ptr[gchar], expected_type : Ptr[GVariantType]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_n_children(value : Ptr[GVariant]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new(format_string : Ptr[gchar]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_array(child_type : Ptr[GVariantType], children : Ptr[Ptr[GVariant]], n_children : gsize): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_boolean(value : gboolean): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_byte(value : guint8): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_bytestring(string : Ptr[gchar]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_bytestring_array(strv : Ptr[Ptr[gchar]], length : gssize): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_dict_entry(key : Ptr[GVariant], value : Ptr[GVariant]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_double(value : gdouble): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_fixed_array(element_type : Ptr[GVariantType], elements : gconstpointer, n_elements : gsize, element_size : gsize): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_from_bytes(`type` : Ptr[GVariantType], bytes : Ptr[GBytes], trusted : gboolean): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_from_data(`type` : Ptr[GVariantType], data : gconstpointer, size : gsize, trusted : gboolean, notify : GDestroyNotify, user_data : gpointer): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_handle(value : gint32): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_int16(value : gint16): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_int32(value : gint32): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_int64(value : gint64): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_maybe(child_type : Ptr[GVariantType], child : Ptr[GVariant]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_object_path(object_path : Ptr[gchar]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_objv(strv : Ptr[Ptr[gchar]], length : gssize): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_parsed(format : Ptr[gchar]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_parsed_va(format : Ptr[gchar], app : Ptr[va_list]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_printf(format_string : Ptr[gchar]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_signature(signature : Ptr[gchar]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_string(string : Ptr[gchar]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_strv(strv : Ptr[Ptr[gchar]], length : gssize): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_take_string(string : Ptr[gchar]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_tuple(children : Ptr[Ptr[GVariant]], n_children : gsize): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_uint16(value : guint16): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_uint32(value : guint32): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_uint64(value : guint64): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_va(format_string : Ptr[gchar], endptr : Ptr[Ptr[gchar]], app : Ptr[va_list]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_new_variant(value : Ptr[GVariant]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_parse(`type` : Ptr[GVariantType], text : Ptr[gchar], limit : Ptr[gchar], endptr : Ptr[Ptr[gchar]], error : Ptr[Ptr[GError]]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_parse_error_print_context(error : Ptr[GError], source_str : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_parse_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_parser_get_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_print(value : Ptr[GVariant], type_annotate : gboolean): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_print_string(value : Ptr[GVariant], string : Ptr[GString], type_annotate : gboolean): Ptr[GString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_ref(value : Ptr[GVariant]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_ref_sink(value : Ptr[GVariant]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_store(value : Ptr[GVariant], data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_take_ref(value : Ptr[GVariant]): Ptr[GVariant] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_checked_(_0 : Ptr[gchar]): Ptr[GVariantType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_copy(`type` : Ptr[GVariantType]): Ptr[GVariantType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_dup_string(`type` : Ptr[GVariantType]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_element(`type` : Ptr[GVariantType]): Ptr[GVariantType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_equal(type1 : gconstpointer, type2 : gconstpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_first(`type` : Ptr[GVariantType]): Ptr[GVariantType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_free(`type` : Ptr[GVariantType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/glib-types.h
  */
  def g_variant_type_get_gtype(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_get_string_length(`type` : Ptr[GVariantType]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_hash(`type` : gconstpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_is_array(`type` : Ptr[GVariantType]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_is_basic(`type` : Ptr[GVariantType]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_is_container(`type` : Ptr[GVariantType]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_is_definite(`type` : Ptr[GVariantType]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_is_dict_entry(`type` : Ptr[GVariantType]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_is_maybe(`type` : Ptr[GVariantType]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_is_subtype_of(`type` : Ptr[GVariantType], supertype : Ptr[GVariantType]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_is_tuple(`type` : Ptr[GVariantType]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_is_variant(`type` : Ptr[GVariantType]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_key(`type` : Ptr[GVariantType]): Ptr[GVariantType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_n_items(`type` : Ptr[GVariantType]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_new(type_string : Ptr[gchar]): Ptr[GVariantType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_new_array(element : Ptr[GVariantType]): Ptr[GVariantType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_new_dict_entry(key : Ptr[GVariantType], value : Ptr[GVariantType]): Ptr[GVariantType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_new_maybe(element : Ptr[GVariantType]): Ptr[GVariantType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_new_tuple(items : Ptr[Ptr[GVariantType]], length : gint): Ptr[GVariantType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_next(`type` : Ptr[GVariantType]): Ptr[GVariantType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_peek_string(`type` : Ptr[GVariantType]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_string_get_depth_(type_string : Ptr[gchar]): gsize = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_string_is_valid(type_string : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_string_scan(string : Ptr[gchar], limit : Ptr[gchar], endptr : Ptr[Ptr[gchar]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvarianttype.h
  */
  def g_variant_type_value(`type` : Ptr[GVariantType]): Ptr[GVariantType] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gvariant.h
  */
  def g_variant_unref(value : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvfs.h
  */
  def g_vfs_get_default(): Ptr[GVfs] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvfs.h
  */
  def g_vfs_get_file_for_path(vfs : Ptr[GVfs], path : CString): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvfs.h
  */
  def g_vfs_get_file_for_uri(vfs : Ptr[GVfs], uri : CString): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvfs.h
  */
  def g_vfs_get_local(): Ptr[GVfs] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvfs.h
  */
  def g_vfs_get_supported_uri_schemes(vfs : Ptr[GVfs]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvfs.h
  */
  def g_vfs_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvfs.h
  */
  def g_vfs_is_active(vfs : Ptr[GVfs]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvfs.h
  */
  def g_vfs_parse_name(vfs : Ptr[GVfs], parse_name : CString): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvfs.h
  */
  def g_vfs_register_uri_scheme(vfs : Ptr[GVfs], scheme : CString, uri_func : GVfsFileLookupFunc, uri_data : gpointer, uri_destroy : GDestroyNotify, parse_name_func : GVfsFileLookupFunc, parse_name_data : gpointer, parse_name_destroy : GDestroyNotify): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvfs.h
  */
  def g_vfs_unregister_uri_scheme(vfs : Ptr[GVfs], scheme : CString): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
  */
  def g_volume_can_eject(volume : Ptr[GVolume]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
  */
  def g_volume_can_mount(volume : Ptr[GVolume]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
  */
  def g_volume_eject(volume : Ptr[GVolume], flags : GMountUnmountFlags, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
  */
  def g_volume_eject_finish(volume : Ptr[GVolume], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
  */
  def g_volume_eject_with_operation(volume : Ptr[GVolume], flags : GMountUnmountFlags, mount_operation : Ptr[GMountOperation], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
  */
  def g_volume_eject_with_operation_finish(volume : Ptr[GVolume], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
  */
  def g_volume_enumerate_identifiers(volume : Ptr[GVolume]): Ptr[CString] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
  */
  def g_volume_get_activation_root(volume : Ptr[GVolume]): Ptr[GFile] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
  */
  def g_volume_get_drive(volume : Ptr[GVolume]): Ptr[GDrive] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
  */
  def g_volume_get_icon(volume : Ptr[GVolume]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
  */
  def g_volume_get_identifier(volume : Ptr[GVolume], kind : CString): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
  */
  def g_volume_get_mount(volume : Ptr[GVolume]): Ptr[GMount] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
  */
  def g_volume_get_name(volume : Ptr[GVolume]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
  */
  def g_volume_get_sort_key(volume : Ptr[GVolume]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
  */
  def g_volume_get_symbolic_icon(volume : Ptr[GVolume]): Ptr[GIcon] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
  */
  def g_volume_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
  */
  def g_volume_get_uuid(volume : Ptr[GVolume]): CString = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolumemonitor.h
  */
  def g_volume_monitor_adopt_orphan_mount(mount : Ptr[GMount]): Ptr[GVolume] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolumemonitor.h
  */
  def g_volume_monitor_get(): Ptr[GVolumeMonitor] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolumemonitor.h
  */
  def g_volume_monitor_get_connected_drives(volume_monitor : Ptr[GVolumeMonitor]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolumemonitor.h
  */
  def g_volume_monitor_get_mount_for_uuid(volume_monitor : Ptr[GVolumeMonitor], uuid : CString): Ptr[GMount] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolumemonitor.h
  */
  def g_volume_monitor_get_mounts(volume_monitor : Ptr[GVolumeMonitor]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolumemonitor.h
  */
  def g_volume_monitor_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolumemonitor.h
  */
  def g_volume_monitor_get_volume_for_uuid(volume_monitor : Ptr[GVolumeMonitor], uuid : CString): Ptr[GVolume] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolumemonitor.h
  */
  def g_volume_monitor_get_volumes(volume_monitor : Ptr[GVolumeMonitor]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
  */
  def g_volume_mount(volume : Ptr[GVolume], flags : GMountMountFlags, mount_operation : Ptr[GMountOperation], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
  */
  def g_volume_mount_finish(volume : Ptr[GVolume], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gvolume.h
  */
  def g_volume_should_automount(volume : Ptr[GVolume]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gutils.h
  */
  def g_vsnprintf(string : Ptr[gchar], n : gulong, format : Ptr[gchar], args : va_list): gint = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gmessages.h
  */
  def g_warn_message(domain : CString, file : CString, line : CInt, func : CString, warnexpr : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_weak_ref_clear(weak_ref : Ptr[GWeakRef]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_weak_ref_get(weak_ref : Ptr[GWeakRef]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_weak_ref_init(weak_ref : Ptr[GWeakRef], `object` : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject.h
  */
  def g_weak_ref_set(weak_ref : Ptr[GWeakRef], `object` : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gioenumtypes.h
  */
  def g_zlib_compressor_format_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gzlibcompressor.h
  */
  def g_zlib_compressor_get_file_info(compressor : Ptr[GZlibCompressor]): Ptr[GFileInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gzlibcompressor.h
  */
  def g_zlib_compressor_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gzlibcompressor.h
  */
  def g_zlib_compressor_new(format : GZlibCompressorFormat, level : CInt): Ptr[GZlibCompressor] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gzlibcompressor.h
  */
  def g_zlib_compressor_set_file_info(compressor : Ptr[GZlibCompressor], file_info : Ptr[GFileInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gzlibdecompressor.h
  */
  def g_zlib_decompressor_get_file_info(decompressor : Ptr[GZlibDecompressor]): Ptr[GFileInfo] = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gzlibdecompressor.h
  */
  def g_zlib_decompressor_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gzlibdecompressor.h
  */
  def g_zlib_decompressor_new(format : GZlibCompressorFormat): Ptr[GZlibDecompressor] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_anchor_hints_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkapplaunchcontext.h
  */
  def gdk_app_launch_context_get_display(context : Ptr[GdkAppLaunchContext]): Ptr[GdkDisplay] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkapplaunchcontext.h
  */
  def gdk_app_launch_context_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkapplaunchcontext.h
  */
  def gdk_app_launch_context_set_desktop(context : Ptr[GdkAppLaunchContext], desktop : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkapplaunchcontext.h
  */
  def gdk_app_launch_context_set_icon(context : Ptr[GdkAppLaunchContext], icon : Ptr[GIcon]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkapplaunchcontext.h
  */
  def gdk_app_launch_context_set_icon_name(context : Ptr[GdkAppLaunchContext], icon_name : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkapplaunchcontext.h
  */
  def gdk_app_launch_context_set_timestamp(context : Ptr[GdkAppLaunchContext], timestamp : guint32): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_axis_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_axis_use_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_button_event_get_button(event : Ptr[GdkEvent]): guint = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_button_event_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcairocontext.h
  */
  def gdk_cairo_context_cairo_create(self : Ptr[GdkCairoContext]): Ptr[cairo_t] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcairocontext.h
  */
  def gdk_cairo_context_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcairo.h
  */
  def gdk_cairo_draw_from_gl(cr : Ptr[cairo_t], surface : Ptr[GdkSurface], source : CInt, source_type : CInt, buffer_scale : CInt, x : CInt, y : CInt, width : CInt, height : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcairo.h
  */
  def gdk_cairo_rectangle(cr : Ptr[cairo_t], rectangle : Ptr[GdkRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcairo.h
  */
  def gdk_cairo_region(cr : Ptr[cairo_t], region : Ptr[cairo_region_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcairo.h
  */
  def gdk_cairo_region_create_from_surface(surface : Ptr[cairo_surface_t]): Ptr[cairo_region_t] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcairo.h
  */
  def gdk_cairo_set_source_pixbuf(cr : Ptr[cairo_t], pixbuf : Ptr[GdkPixbuf], pixbuf_x : Double, pixbuf_y : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcairo.h
  */
  def gdk_cairo_set_source_rgba(cr : Ptr[cairo_t], rgba : Ptr[GdkRGBA]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_get_content(clipboard : Ptr[GdkClipboard]): Ptr[GdkContentProvider] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_get_display(clipboard : Ptr[GdkClipboard]): Ptr[GdkDisplay] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_get_formats(clipboard : Ptr[GdkClipboard]): Ptr[GdkContentFormats] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_is_local(clipboard : Ptr[GdkClipboard]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_read_async(clipboard : Ptr[GdkClipboard], mime_types : Ptr[CString], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_read_finish(clipboard : Ptr[GdkClipboard], result : Ptr[GAsyncResult], out_mime_type : Ptr[CString], error : Ptr[Ptr[GError]]): Ptr[GInputStream] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_read_text_async(clipboard : Ptr[GdkClipboard], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_read_text_finish(clipboard : Ptr[GdkClipboard], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): CString = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_read_texture_async(clipboard : Ptr[GdkClipboard], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_read_texture_finish(clipboard : Ptr[GdkClipboard], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GdkTexture] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_read_value_async(clipboard : Ptr[GdkClipboard], `type` : GType, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_read_value_finish(clipboard : Ptr[GdkClipboard], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GValue] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_set(clipboard : Ptr[GdkClipboard], `type` : GType): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_set_content(clipboard : Ptr[GdkClipboard], provider : Ptr[GdkContentProvider]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_set_text(clipboard : Ptr[GdkClipboard], text : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_set_texture(clipboard : Ptr[GdkClipboard], texture : Ptr[GdkTexture]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_set_valist(clipboard : Ptr[GdkClipboard], `type` : GType, args : va_list): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_set_value(clipboard : Ptr[GdkClipboard], value : Ptr[GValue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_store_async(clipboard : Ptr[GdkClipboard], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkclipboard.h
  */
  def gdk_clipboard_store_finish(clipboard : Ptr[GdkClipboard], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h
  */
  def gdk_colorspace_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentdeserializer.h
  */
  def gdk_content_deserialize_async(stream : Ptr[GInputStream], mime_type : CString, `type` : GType, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentdeserializer.h
  */
  def gdk_content_deserialize_finish(result : Ptr[GAsyncResult], value : Ptr[GValue], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentdeserializer.h
  */
  def gdk_content_deserializer_get_cancellable(deserializer : Ptr[GdkContentDeserializer]): Ptr[GCancellable] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentdeserializer.h
  */
  def gdk_content_deserializer_get_gtype(deserializer : Ptr[GdkContentDeserializer]): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentdeserializer.h
  */
  def gdk_content_deserializer_get_input_stream(deserializer : Ptr[GdkContentDeserializer]): Ptr[GInputStream] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentdeserializer.h
  */
  def gdk_content_deserializer_get_mime_type(deserializer : Ptr[GdkContentDeserializer]): CString = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentdeserializer.h
  */
  def gdk_content_deserializer_get_priority(deserializer : Ptr[GdkContentDeserializer]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentdeserializer.h
  */
  def gdk_content_deserializer_get_task_data(deserializer : Ptr[GdkContentDeserializer]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentdeserializer.h
  */
  def gdk_content_deserializer_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentdeserializer.h
  */
  def gdk_content_deserializer_get_user_data(deserializer : Ptr[GdkContentDeserializer]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentdeserializer.h
  */
  def gdk_content_deserializer_get_value(deserializer : Ptr[GdkContentDeserializer]): Ptr[GValue] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentdeserializer.h
  */
  def gdk_content_deserializer_return_error(deserializer : Ptr[GdkContentDeserializer], error : Ptr[GError]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentdeserializer.h
  */
  def gdk_content_deserializer_return_success(deserializer : Ptr[GdkContentDeserializer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentdeserializer.h
  */
  def gdk_content_deserializer_set_task_data(deserializer : Ptr[GdkContentDeserializer], data : gpointer, notify : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_builder_add_formats(builder : Ptr[GdkContentFormatsBuilder], formats : Ptr[GdkContentFormats]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_builder_add_gtype(builder : Ptr[GdkContentFormatsBuilder], `type` : GType): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_builder_add_mime_type(builder : Ptr[GdkContentFormatsBuilder], mime_type : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_builder_free_to_formats(builder : Ptr[GdkContentFormatsBuilder]): Ptr[GdkContentFormats] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_builder_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_builder_new(): Ptr[GdkContentFormatsBuilder] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_builder_ref(builder : Ptr[GdkContentFormatsBuilder]): Ptr[GdkContentFormatsBuilder] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_builder_to_formats(builder : Ptr[GdkContentFormatsBuilder]): Ptr[GdkContentFormats] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_builder_unref(builder : Ptr[GdkContentFormatsBuilder]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_contain_gtype(formats : Ptr[GdkContentFormats], `type` : GType): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_contain_mime_type(formats : Ptr[GdkContentFormats], mime_type : CString): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_get_gtypes(formats : Ptr[GdkContentFormats], n_gtypes : Ptr[gsize]): Ptr[GType] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_get_mime_types(formats : Ptr[GdkContentFormats], n_mime_types : Ptr[gsize]): Ptr[CString] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_match(first : Ptr[GdkContentFormats], second : Ptr[GdkContentFormats]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_match_gtype(first : Ptr[GdkContentFormats], second : Ptr[GdkContentFormats]): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_match_mime_type(first : Ptr[GdkContentFormats], second : Ptr[GdkContentFormats]): CString = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_new(mime_types : Ptr[CString], n_mime_types : guint): Ptr[GdkContentFormats] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_new_for_gtype(`type` : GType): Ptr[GdkContentFormats] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_parse(string : CString): Ptr[GdkContentFormats] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_print(formats : Ptr[GdkContentFormats], string : Ptr[GString]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_ref(formats : Ptr[GdkContentFormats]): Ptr[GdkContentFormats] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_to_string(formats : Ptr[GdkContentFormats]): CString = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_union(first : Ptr[GdkContentFormats], second : Ptr[GdkContentFormats]): Ptr[GdkContentFormats] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentdeserializer.h
  */
  def gdk_content_formats_union_deserialize_gtypes(formats : Ptr[GdkContentFormats]): Ptr[GdkContentFormats] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentdeserializer.h
  */
  def gdk_content_formats_union_deserialize_mime_types(formats : Ptr[GdkContentFormats]): Ptr[GdkContentFormats] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentserializer.h
  */
  def gdk_content_formats_union_serialize_gtypes(formats : Ptr[GdkContentFormats]): Ptr[GdkContentFormats] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentserializer.h
  */
  def gdk_content_formats_union_serialize_mime_types(formats : Ptr[GdkContentFormats]): Ptr[GdkContentFormats] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_content_formats_unref(formats : Ptr[GdkContentFormats]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentprovider.h
  */
  def gdk_content_provider_content_changed(provider : Ptr[GdkContentProvider]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentprovider.h
  */
  def gdk_content_provider_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentprovider.h
  */
  def gdk_content_provider_get_value(provider : Ptr[GdkContentProvider], value : Ptr[GValue], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentproviderimpl.h
  */
  def gdk_content_provider_new_for_bytes(mime_type : CString, bytes : Ptr[GBytes]): Ptr[GdkContentProvider] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentproviderimpl.h
  */
  def gdk_content_provider_new_for_value(value : Ptr[GValue]): Ptr[GdkContentProvider] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentproviderimpl.h
  */
  def gdk_content_provider_new_typed(`type` : GType): Ptr[GdkContentProvider] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentproviderimpl.h
  */
  def gdk_content_provider_new_union(providers : Ptr[Ptr[GdkContentProvider]], n_providers : gsize): Ptr[GdkContentProvider] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentprovider.h
  */
  def gdk_content_provider_ref_formats(provider : Ptr[GdkContentProvider]): Ptr[GdkContentFormats] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentprovider.h
  */
  def gdk_content_provider_ref_storable_formats(provider : Ptr[GdkContentProvider]): Ptr[GdkContentFormats] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentprovider.h
  */
  def gdk_content_provider_write_mime_type_async(provider : Ptr[GdkContentProvider], mime_type : CString, stream : Ptr[GOutputStream], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentprovider.h
  */
  def gdk_content_provider_write_mime_type_finish(provider : Ptr[GdkContentProvider], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentdeserializer.h
  */
  def gdk_content_register_deserializer(mime_type : CString, `type` : GType, deserialize : GdkContentDeserializeFunc, data : gpointer, notify : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentserializer.h
  */
  def gdk_content_register_serializer(`type` : GType, mime_type : CString, serialize : GdkContentSerializeFunc, data : gpointer, notify : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentserializer.h
  */
  def gdk_content_serialize_async(stream : Ptr[GOutputStream], mime_type : CString, value : Ptr[GValue], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentserializer.h
  */
  def gdk_content_serialize_finish(result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentserializer.h
  */
  def gdk_content_serializer_get_cancellable(serializer : Ptr[GdkContentSerializer]): Ptr[GCancellable] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentserializer.h
  */
  def gdk_content_serializer_get_gtype(serializer : Ptr[GdkContentSerializer]): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentserializer.h
  */
  def gdk_content_serializer_get_mime_type(serializer : Ptr[GdkContentSerializer]): CString = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentserializer.h
  */
  def gdk_content_serializer_get_output_stream(serializer : Ptr[GdkContentSerializer]): Ptr[GOutputStream] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentserializer.h
  */
  def gdk_content_serializer_get_priority(serializer : Ptr[GdkContentSerializer]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentserializer.h
  */
  def gdk_content_serializer_get_task_data(serializer : Ptr[GdkContentSerializer]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentserializer.h
  */
  def gdk_content_serializer_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentserializer.h
  */
  def gdk_content_serializer_get_user_data(serializer : Ptr[GdkContentSerializer]): gpointer = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentserializer.h
  */
  def gdk_content_serializer_get_value(serializer : Ptr[GdkContentSerializer]): Ptr[GValue] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentserializer.h
  */
  def gdk_content_serializer_return_error(serializer : Ptr[GdkContentSerializer], error : Ptr[GError]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentserializer.h
  */
  def gdk_content_serializer_return_success(serializer : Ptr[GdkContentSerializer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentserializer.h
  */
  def gdk_content_serializer_set_task_data(serializer : Ptr[GdkContentSerializer], data : gpointer, notify : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_crossing_event_get_detail(event : Ptr[GdkEvent]): GdkNotifyType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_crossing_event_get_focus(event : Ptr[GdkEvent]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_crossing_event_get_mode(event : Ptr[GdkEvent]): GdkCrossingMode = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_crossing_event_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_crossing_mode_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcursor.h
  */
  def gdk_cursor_get_fallback(cursor : Ptr[GdkCursor]): Ptr[GdkCursor] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcursor.h
  */
  def gdk_cursor_get_hotspot_x(cursor : Ptr[GdkCursor]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcursor.h
  */
  def gdk_cursor_get_hotspot_y(cursor : Ptr[GdkCursor]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcursor.h
  */
  def gdk_cursor_get_name(cursor : Ptr[GdkCursor]): CString = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcursor.h
  */
  def gdk_cursor_get_texture(cursor : Ptr[GdkCursor]): Ptr[GdkTexture] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcursor.h
  */
  def gdk_cursor_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcursor.h
  */
  def gdk_cursor_new_from_name(name : CString, fallback : Ptr[GdkCursor]): Ptr[GdkCursor] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcursor.h
  */
  def gdk_cursor_new_from_texture(texture : Ptr[GdkTexture], hotspot_x : CInt, hotspot_y : CInt, fallback : Ptr[GdkCursor]): Ptr[GdkCursor] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_delete_event_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevice.h
  */
  def gdk_device_get_caps_lock_state(device : Ptr[GdkDevice]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevice.h
  */
  def gdk_device_get_device_tool(device : Ptr[GdkDevice]): Ptr[GdkDeviceTool] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevice.h
  */
  def gdk_device_get_direction(device : Ptr[GdkDevice]): PangoDirection = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevice.h
  */
  def gdk_device_get_display(device : Ptr[GdkDevice]): Ptr[GdkDisplay] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevice.h
  */
  def gdk_device_get_has_cursor(device : Ptr[GdkDevice]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevice.h
  */
  def gdk_device_get_modifier_state(device : Ptr[GdkDevice]): GdkModifierType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevice.h
  */
  def gdk_device_get_name(device : Ptr[GdkDevice]): CString = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevice.h
  */
  def gdk_device_get_num_lock_state(device : Ptr[GdkDevice]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevice.h
  */
  def gdk_device_get_num_touches(device : Ptr[GdkDevice]): guint = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevice.h
  */
  def gdk_device_get_product_id(device : Ptr[GdkDevice]): CString = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevice.h
  */
  def gdk_device_get_scroll_lock_state(device : Ptr[GdkDevice]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevice.h
  */
  def gdk_device_get_seat(device : Ptr[GdkDevice]): Ptr[GdkSeat] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevice.h
  */
  def gdk_device_get_source(device : Ptr[GdkDevice]): GdkInputSource = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevice.h
  */
  def gdk_device_get_surface_at_position(device : Ptr[GdkDevice], win_x : Ptr[Double], win_y : Ptr[Double]): Ptr[GdkSurface] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevice.h
  */
  def gdk_device_get_timestamp(device : Ptr[GdkDevice]): guint32 = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevice.h
  */
  def gdk_device_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevice.h
  */
  def gdk_device_get_vendor_id(device : Ptr[GdkDevice]): CString = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevice.h
  */
  def gdk_device_has_bidi_layouts(device : Ptr[GdkDevice]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_device_pad_feature_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevicepad.h
  */
  def gdk_device_pad_get_feature_group(pad : Ptr[GdkDevicePad], feature : GdkDevicePadFeature, feature_idx : CInt): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevicepad.h
  */
  def gdk_device_pad_get_group_n_modes(pad : Ptr[GdkDevicePad], group_idx : CInt): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevicepad.h
  */
  def gdk_device_pad_get_n_features(pad : Ptr[GdkDevicePad], feature : GdkDevicePadFeature): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevicepad.h
  */
  def gdk_device_pad_get_n_groups(pad : Ptr[GdkDevicePad]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevicepad.h
  */
  def gdk_device_pad_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevicetool.h
  */
  def gdk_device_tool_get_axes(tool : Ptr[GdkDeviceTool]): GdkAxisFlags = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevicetool.h
  */
  def gdk_device_tool_get_hardware_id(tool : Ptr[GdkDeviceTool]): guint64 = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevicetool.h
  */
  def gdk_device_tool_get_serial(tool : Ptr[GdkDeviceTool]): guint64 = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevicetool.h
  */
  def gdk_device_tool_get_tool_type(tool : Ptr[GdkDeviceTool]): GdkDeviceToolType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdevicetool.h
  */
  def gdk_device_tool_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_device_tool_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_beep(display : Ptr[GdkDisplay]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_close(display : Ptr[GdkDisplay]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_create_gl_context(self : Ptr[GdkDisplay], error : Ptr[Ptr[GError]]): Ptr[GdkGLContext] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_device_is_grabbed(display : Ptr[GdkDisplay], device : Ptr[GdkDevice]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_flush(display : Ptr[GdkDisplay]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_get_app_launch_context(display : Ptr[GdkDisplay]): Ptr[GdkAppLaunchContext] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_get_clipboard(display : Ptr[GdkDisplay]): Ptr[GdkClipboard] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_get_default(): Ptr[GdkDisplay] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_get_default_seat(display : Ptr[GdkDisplay]): Ptr[GdkSeat] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_get_monitor_at_surface(display : Ptr[GdkDisplay], surface : Ptr[GdkSurface]): Ptr[GdkMonitor] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_get_monitors(self : Ptr[GdkDisplay]): Ptr[GListModel] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_get_name(display : Ptr[GdkDisplay]): CString = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_get_primary_clipboard(display : Ptr[GdkDisplay]): Ptr[GdkClipboard] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_get_setting(display : Ptr[GdkDisplay], name : CString, value : Ptr[GValue]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_get_startup_notification_id(display : Ptr[GdkDisplay]): CString = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_is_closed(display : Ptr[GdkDisplay]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_is_composited(display : Ptr[GdkDisplay]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_is_rgba(display : Ptr[GdkDisplay]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_list_seats(display : Ptr[GdkDisplay]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplaymanager.h
  */
  def gdk_display_manager_get(): Ptr[GdkDisplayManager] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplaymanager.h
  */
  def gdk_display_manager_get_default_display(manager : Ptr[GdkDisplayManager]): Ptr[GdkDisplay] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplaymanager.h
  */
  def gdk_display_manager_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplaymanager.h
  */
  def gdk_display_manager_list_displays(manager : Ptr[GdkDisplayManager]): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplaymanager.h
  */
  def gdk_display_manager_open_display(manager : Ptr[GdkDisplayManager], name : CString): Ptr[GdkDisplay] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplaymanager.h
  */
  def gdk_display_manager_set_default_display(manager : Ptr[GdkDisplayManager], display : Ptr[GdkDisplay]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_map_keycode(display : Ptr[GdkDisplay], keycode : guint, keys : Ptr[Ptr[GdkKeymapKey]], keyvals : Ptr[Ptr[guint]], n_entries : Ptr[CInt]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_map_keyval(display : Ptr[GdkDisplay], keyval : guint, keys : Ptr[Ptr[GdkKeymapKey]], n_keys : Ptr[CInt]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_notify_startup_complete(display : Ptr[GdkDisplay], startup_id : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_open(display_name : CString): Ptr[GdkDisplay] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_prepare_gl(self : Ptr[GdkDisplay], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_put_event(display : Ptr[GdkDisplay], event : Ptr[GdkEvent]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_supports_input_shapes(display : Ptr[GdkDisplay]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_sync(display : Ptr[GdkDisplay]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplay.h
  */
  def gdk_display_translate_key(display : Ptr[GdkDisplay], keycode : guint, state : GdkModifierType, group : CInt, keyval : Ptr[guint], effective_group : Ptr[CInt], level : Ptr[CInt], consumed : Ptr[GdkModifierType]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_dnd_event_get_drop(event : Ptr[GdkEvent]): Ptr[GdkDrop] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_dnd_event_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_drag_action_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrag.h
  */
  def gdk_drag_action_is_unique(action : GdkDragAction): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrag.h
  */
  def gdk_drag_begin(surface : Ptr[GdkSurface], device : Ptr[GdkDevice], content : Ptr[GdkContentProvider], actions : GdkDragAction, dx : Double, dy : Double): Ptr[GdkDrag] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_drag_cancel_reason_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrag.h
  */
  def gdk_drag_drop_done(drag : Ptr[GdkDrag], success : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrag.h
  */
  def gdk_drag_get_actions(drag : Ptr[GdkDrag]): GdkDragAction = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrag.h
  */
  def gdk_drag_get_content(drag : Ptr[GdkDrag]): Ptr[GdkContentProvider] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrag.h
  */
  def gdk_drag_get_device(drag : Ptr[GdkDrag]): Ptr[GdkDevice] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrag.h
  */
  def gdk_drag_get_display(drag : Ptr[GdkDrag]): Ptr[GdkDisplay] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrag.h
  */
  def gdk_drag_get_drag_surface(drag : Ptr[GdkDrag]): Ptr[GdkSurface] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrag.h
  */
  def gdk_drag_get_formats(drag : Ptr[GdkDrag]): Ptr[GdkContentFormats] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrag.h
  */
  def gdk_drag_get_selected_action(drag : Ptr[GdkDrag]): GdkDragAction = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrag.h
  */
  def gdk_drag_get_surface(drag : Ptr[GdkDrag]): Ptr[GdkSurface] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrag.h
  */
  def gdk_drag_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrag.h
  */
  def gdk_drag_set_hotspot(drag : Ptr[GdkDrag], hot_x : CInt, hot_y : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdragsurface.h
  */
  def gdk_drag_surface_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdragsurface.h
  */
  def gdk_drag_surface_present(drag_surface : Ptr[GdkDragSurface], width : CInt, height : CInt): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrawcontext.h
  */
  def gdk_draw_context_begin_frame(context : Ptr[GdkDrawContext], region : Ptr[cairo_region_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrawcontext.h
  */
  def gdk_draw_context_end_frame(context : Ptr[GdkDrawContext]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrawcontext.h
  */
  def gdk_draw_context_get_display(context : Ptr[GdkDrawContext]): Ptr[GdkDisplay] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrawcontext.h
  */
  def gdk_draw_context_get_frame_region(context : Ptr[GdkDrawContext]): Ptr[cairo_region_t] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrawcontext.h
  */
  def gdk_draw_context_get_surface(context : Ptr[GdkDrawContext]): Ptr[GdkSurface] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrawcontext.h
  */
  def gdk_draw_context_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrawcontext.h
  */
  def gdk_draw_context_is_in_frame(context : Ptr[GdkDrawContext]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrop.h
  */
  def gdk_drop_finish(self : Ptr[GdkDrop], action : GdkDragAction): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrop.h
  */
  def gdk_drop_get_actions(self : Ptr[GdkDrop]): GdkDragAction = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrop.h
  */
  def gdk_drop_get_device(self : Ptr[GdkDrop]): Ptr[GdkDevice] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrop.h
  */
  def gdk_drop_get_display(self : Ptr[GdkDrop]): Ptr[GdkDisplay] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrop.h
  */
  def gdk_drop_get_drag(self : Ptr[GdkDrop]): Ptr[GdkDrag] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrop.h
  */
  def gdk_drop_get_formats(self : Ptr[GdkDrop]): Ptr[GdkContentFormats] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrop.h
  */
  def gdk_drop_get_surface(self : Ptr[GdkDrop]): Ptr[GdkSurface] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrop.h
  */
  def gdk_drop_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrop.h
  */
  def gdk_drop_read_async(self : Ptr[GdkDrop], mime_types : Ptr[CString], io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrop.h
  */
  def gdk_drop_read_finish(self : Ptr[GdkDrop], result : Ptr[GAsyncResult], out_mime_type : Ptr[CString], error : Ptr[Ptr[GError]]): Ptr[GInputStream] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrop.h
  */
  def gdk_drop_read_value_async(self : Ptr[GdkDrop], `type` : GType, io_priority : CInt, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrop.h
  */
  def gdk_drop_read_value_finish(self : Ptr[GdkDrop], result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GValue] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrop.h
  */
  def gdk_drop_status(self : Ptr[GdkDrop], actions : GdkDragAction, preferred : GdkDragAction): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_event_get_axes(event : Ptr[GdkEvent], axes : Ptr[Ptr[Double]], n_axes : Ptr[guint]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_event_get_axis(event : Ptr[GdkEvent], axis_use : GdkAxisUse, value : Ptr[Double]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_event_get_device(event : Ptr[GdkEvent]): Ptr[GdkDevice] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_event_get_device_tool(event : Ptr[GdkEvent]): Ptr[GdkDeviceTool] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_event_get_display(event : Ptr[GdkEvent]): Ptr[GdkDisplay] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_event_get_event_sequence(event : Ptr[GdkEvent]): Ptr[GdkEventSequence] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_event_get_event_type(event : Ptr[GdkEvent]): GdkEventType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_event_get_history(event : Ptr[GdkEvent], out_n_coords : Ptr[guint]): Ptr[GdkTimeCoord] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_event_get_modifier_state(event : Ptr[GdkEvent]): GdkModifierType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_event_get_pointer_emulated(event : Ptr[GdkEvent]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_event_get_position(event : Ptr[GdkEvent], x : Ptr[Double], y : Ptr[Double]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_event_get_seat(event : Ptr[GdkEvent]): Ptr[GdkSeat] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_event_get_surface(event : Ptr[GdkEvent]): Ptr[GdkSurface] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_event_get_time(event : Ptr[GdkEvent]): guint32 = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_event_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_event_ref(event : Ptr[GdkEvent]): Ptr[GdkEvent] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_event_sequence_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_event_triggers_context_menu(event : Ptr[GdkEvent]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_event_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_event_unref(event : Ptr[GdkEvent]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_events_get_angle(event1 : Ptr[GdkEvent], event2 : Ptr[GdkEvent], angle : Ptr[Double]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_events_get_center(event1 : Ptr[GdkEvent], event2 : Ptr[GdkEvent], x : Ptr[Double], y : Ptr[Double]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_events_get_distance(event1 : Ptr[GdkEvent], event2 : Ptr[GdkEvent], distance : Ptr[Double]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_file_list_get_files(file_list : Ptr[GdkFileList]): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_file_list_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_focus_event_get_in(event : Ptr[GdkEvent]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_focus_event_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframeclock.h
  */
  def gdk_frame_clock_begin_updating(frame_clock : Ptr[GdkFrameClock]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframeclock.h
  */
  def gdk_frame_clock_end_updating(frame_clock : Ptr[GdkFrameClock]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframeclock.h
  */
  def gdk_frame_clock_get_current_timings(frame_clock : Ptr[GdkFrameClock]): Ptr[GdkFrameTimings] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframeclock.h
  */
  def gdk_frame_clock_get_fps(frame_clock : Ptr[GdkFrameClock]): Double = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframeclock.h
  */
  def gdk_frame_clock_get_frame_counter(frame_clock : Ptr[GdkFrameClock]): gint64 = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframeclock.h
  */
  def gdk_frame_clock_get_frame_time(frame_clock : Ptr[GdkFrameClock]): gint64 = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframeclock.h
  */
  def gdk_frame_clock_get_history_start(frame_clock : Ptr[GdkFrameClock]): gint64 = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframeclock.h
  */
  def gdk_frame_clock_get_refresh_info(frame_clock : Ptr[GdkFrameClock], base_time : gint64, refresh_interval_return : Ptr[gint64], presentation_time_return : Ptr[gint64]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframeclock.h
  */
  def gdk_frame_clock_get_timings(frame_clock : Ptr[GdkFrameClock], frame_counter : gint64): Ptr[GdkFrameTimings] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframeclock.h
  */
  def gdk_frame_clock_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_frame_clock_phase_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframeclock.h
  */
  def gdk_frame_clock_request_phase(frame_clock : Ptr[GdkFrameClock], phase : GdkFrameClockPhase): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframetimings.h
  */
  def gdk_frame_timings_get_complete(timings : Ptr[GdkFrameTimings]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframetimings.h
  */
  def gdk_frame_timings_get_frame_counter(timings : Ptr[GdkFrameTimings]): gint64 = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframetimings.h
  */
  def gdk_frame_timings_get_frame_time(timings : Ptr[GdkFrameTimings]): gint64 = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframetimings.h
  */
  def gdk_frame_timings_get_predicted_presentation_time(timings : Ptr[GdkFrameTimings]): gint64 = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframetimings.h
  */
  def gdk_frame_timings_get_presentation_time(timings : Ptr[GdkFrameTimings]): gint64 = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframetimings.h
  */
  def gdk_frame_timings_get_refresh_interval(timings : Ptr[GdkFrameTimings]): gint64 = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframetimings.h
  */
  def gdk_frame_timings_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframetimings.h
  */
  def gdk_frame_timings_ref(timings : Ptr[GdkFrameTimings]): Ptr[GdkFrameTimings] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkframetimings.h
  */
  def gdk_frame_timings_unref(timings : Ptr[GdkFrameTimings]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_fullscreen_mode_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_gl_api_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_clear_current(): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_get_allowed_apis(self : Ptr[GdkGLContext]): GdkGLAPI = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_get_api(self : Ptr[GdkGLContext]): GdkGLAPI = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_get_current(): Ptr[GdkGLContext] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_get_debug_enabled(context : Ptr[GdkGLContext]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_get_display(context : Ptr[GdkGLContext]): Ptr[GdkDisplay] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_get_forward_compatible(context : Ptr[GdkGLContext]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_get_required_version(context : Ptr[GdkGLContext], major : Ptr[CInt], minor : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_get_shared_context(context : Ptr[GdkGLContext]): Ptr[GdkGLContext] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_get_surface(context : Ptr[GdkGLContext]): Ptr[GdkSurface] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_get_use_es(context : Ptr[GdkGLContext]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_get_version(context : Ptr[GdkGLContext], major : Ptr[CInt], minor : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_is_legacy(context : Ptr[GdkGLContext]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_is_shared(self : Ptr[GdkGLContext], other : Ptr[GdkGLContext]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_make_current(context : Ptr[GdkGLContext]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_realize(context : Ptr[GdkGLContext], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_set_allowed_apis(self : Ptr[GdkGLContext], apis : GdkGLAPI): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_set_debug_enabled(context : Ptr[GdkGLContext], enabled : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_set_forward_compatible(context : Ptr[GdkGLContext], compatible : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_set_required_version(context : Ptr[GdkGLContext], major : CInt, minor : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_context_set_use_es(context : Ptr[GdkGLContext], use_es : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_gl_error_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkglcontext.h
  */
  def gdk_gl_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkgltexture.h
  */
  def gdk_gl_texture_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkgltexture.h
  */
  def gdk_gl_texture_new(context : Ptr[GdkGLContext], id : guint, width : CInt, height : CInt, destroy : GDestroyNotify, data : gpointer): Ptr[GdkTexture] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkgltexture.h
  */
  def gdk_gl_texture_release(self : Ptr[GdkGLTexture]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_grab_broken_event_get_grab_surface(event : Ptr[GdkEvent]): Ptr[GdkSurface] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_grab_broken_event_get_implicit(event : Ptr[GdkEvent]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_grab_broken_event_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_gravity_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_input_source_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkcontentformats.h
  */
  def gdk_intern_mime_type(string : CString): CString = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h
  */
  def gdk_interp_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_key_event_get_consumed_modifiers(event : Ptr[GdkEvent]): GdkModifierType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_key_event_get_keycode(event : Ptr[GdkEvent]): guint = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_key_event_get_keyval(event : Ptr[GdkEvent]): guint = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_key_event_get_layout(event : Ptr[GdkEvent]): guint = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_key_event_get_level(event : Ptr[GdkEvent]): guint = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_key_event_get_match(event : Ptr[GdkEvent], keyval : Ptr[guint], modifiers : Ptr[GdkModifierType]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_key_event_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_key_event_is_modifier(event : Ptr[GdkEvent]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_key_event_matches(event : Ptr[GdkEvent], keyval : guint, modifiers : GdkModifierType): GdkKeyMatch = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_key_match_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkkeys.h
  */
  def gdk_keyval_convert_case(symbol : guint, lower : Ptr[guint], upper : Ptr[guint]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkkeys.h
  */
  def gdk_keyval_from_name(keyval_name : CString): guint = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkkeys.h
  */
  def gdk_keyval_is_lower(keyval : guint): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkkeys.h
  */
  def gdk_keyval_is_upper(keyval : guint): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkkeys.h
  */
  def gdk_keyval_name(keyval : guint): CString = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkkeys.h
  */
  def gdk_keyval_to_lower(keyval : guint): guint = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkkeys.h
  */
  def gdk_keyval_to_unicode(keyval : guint): guint32 = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkkeys.h
  */
  def gdk_keyval_to_upper(keyval : guint): guint = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_memory_format_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmemorytexture.h
  */
  def gdk_memory_texture_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmemorytexture.h
  */
  def gdk_memory_texture_new(width : CInt, height : CInt, format : GdkMemoryFormat, bytes : Ptr[GBytes], stride : gsize): Ptr[GdkTexture] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_modifier_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmonitor.h
  */
  def gdk_monitor_get_connector(monitor : Ptr[GdkMonitor]): CString = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmonitor.h
  */
  def gdk_monitor_get_display(monitor : Ptr[GdkMonitor]): Ptr[GdkDisplay] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmonitor.h
  */
  def gdk_monitor_get_geometry(monitor : Ptr[GdkMonitor], geometry : Ptr[GdkRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmonitor.h
  */
  def gdk_monitor_get_height_mm(monitor : Ptr[GdkMonitor]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmonitor.h
  */
  def gdk_monitor_get_manufacturer(monitor : Ptr[GdkMonitor]): CString = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmonitor.h
  */
  def gdk_monitor_get_model(monitor : Ptr[GdkMonitor]): CString = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmonitor.h
  */
  def gdk_monitor_get_refresh_rate(monitor : Ptr[GdkMonitor]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmonitor.h
  */
  def gdk_monitor_get_scale_factor(monitor : Ptr[GdkMonitor]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmonitor.h
  */
  def gdk_monitor_get_subpixel_layout(monitor : Ptr[GdkMonitor]): GdkSubpixelLayout = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmonitor.h
  */
  def gdk_monitor_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmonitor.h
  */
  def gdk_monitor_get_width_mm(monitor : Ptr[GdkMonitor]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmonitor.h
  */
  def gdk_monitor_is_valid(monitor : Ptr[GdkMonitor]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_motion_event_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_notify_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_pad_event_get_axis_value(event : Ptr[GdkEvent], index : Ptr[guint], value : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_pad_event_get_button(event : Ptr[GdkEvent]): guint = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_pad_event_get_group_mode(event : Ptr[GdkEvent], group : Ptr[guint], mode : Ptr[guint]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_pad_event_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
  */
  def gdk_paintable_compute_concrete_size(paintable : Ptr[GdkPaintable], specified_width : Double, specified_height : Double, default_width : Double, default_height : Double, concrete_width : Ptr[Double], concrete_height : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_paintable_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
  */
  def gdk_paintable_get_current_image(paintable : Ptr[GdkPaintable]): Ptr[GdkPaintable] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
  */
  def gdk_paintable_get_flags(paintable : Ptr[GdkPaintable]): GdkPaintableFlags = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
  */
  def gdk_paintable_get_intrinsic_aspect_ratio(paintable : Ptr[GdkPaintable]): Double = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
  */
  def gdk_paintable_get_intrinsic_height(paintable : Ptr[GdkPaintable]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
  */
  def gdk_paintable_get_intrinsic_width(paintable : Ptr[GdkPaintable]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
  */
  def gdk_paintable_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
  */
  def gdk_paintable_invalidate_contents(paintable : Ptr[GdkPaintable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
  */
  def gdk_paintable_invalidate_size(paintable : Ptr[GdkPaintable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
  */
  def gdk_paintable_new_empty(intrinsic_width : CInt, intrinsic_height : CInt): Ptr[GdkPaintable] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
  */
  def gdk_paintable_snapshot(paintable : Ptr[GdkPaintable], snapshot : Ptr[GdkSnapshot], width : Double, height : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpango.h
  */
  def gdk_pango_layout_get_clip_region(layout : Ptr[PangoLayout], x_origin : CInt, y_origin : CInt, index_ranges : Ptr[CInt], n_ranges : CInt): Ptr[cairo_region_t] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpango.h
  */
  def gdk_pango_layout_line_get_clip_region(line : Ptr[PangoLayoutLine], x_origin : CInt, y_origin : CInt, index_ranges : Ptr[CInt], n_ranges : CInt): Ptr[cairo_region_t] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_add_alpha(pixbuf : Ptr[GdkPixbuf], substitute_color : gboolean, r : guchar, g : guchar, b : guchar): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h
  */
  def gdk_pixbuf_alpha_mode_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
  */
  def gdk_pixbuf_animation_get_height(animation : Ptr[GdkPixbufAnimation]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
  */
  def gdk_pixbuf_animation_get_iter(animation : Ptr[GdkPixbufAnimation], start_time : Ptr[GTimeVal]): Ptr[GdkPixbufAnimationIter] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
  */
  def gdk_pixbuf_animation_get_static_image(animation : Ptr[GdkPixbufAnimation]): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
  */
  def gdk_pixbuf_animation_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
  */
  def gdk_pixbuf_animation_get_width(animation : Ptr[GdkPixbufAnimation]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
  */
  def gdk_pixbuf_animation_is_static_image(animation : Ptr[GdkPixbufAnimation]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
  */
  def gdk_pixbuf_animation_iter_advance(iter : Ptr[GdkPixbufAnimationIter], current_time : Ptr[GTimeVal]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
  */
  def gdk_pixbuf_animation_iter_get_delay_time(iter : Ptr[GdkPixbufAnimationIter]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
  */
  def gdk_pixbuf_animation_iter_get_pixbuf(iter : Ptr[GdkPixbufAnimationIter]): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
  */
  def gdk_pixbuf_animation_iter_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
  */
  def gdk_pixbuf_animation_iter_on_currently_loading_frame(iter : Ptr[GdkPixbufAnimationIter]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
  */
  def gdk_pixbuf_animation_new_from_file(filename : CString, error : Ptr[Ptr[GError]]): Ptr[GdkPixbufAnimation] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
  */
  def gdk_pixbuf_animation_new_from_resource(resource_path : CString, error : Ptr[Ptr[GError]]): Ptr[GdkPixbufAnimation] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
  */
  def gdk_pixbuf_animation_new_from_stream(stream : Ptr[GInputStream], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GdkPixbufAnimation] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
  */
  def gdk_pixbuf_animation_new_from_stream_async(stream : Ptr[GInputStream], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
  */
  def gdk_pixbuf_animation_new_from_stream_finish(async_result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GdkPixbufAnimation] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
  */
  def gdk_pixbuf_animation_ref(animation : Ptr[GdkPixbufAnimation]): Ptr[GdkPixbufAnimation] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-animation.h
  */
  def gdk_pixbuf_animation_unref(animation : Ptr[GdkPixbufAnimation]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_apply_embedded_orientation(src : Ptr[GdkPixbuf]): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_calculate_rowstride(colorspace : GdkColorspace, has_alpha : gboolean, bits_per_sample : CInt, width : CInt, height : CInt): gint = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h
  */
  def gdk_pixbuf_composite(src : Ptr[GdkPixbuf], dest : Ptr[GdkPixbuf], dest_x : CInt, dest_y : CInt, dest_width : CInt, dest_height : CInt, offset_x : Double, offset_y : Double, scale_x : Double, scale_y : Double, interp_type : GdkInterpType, overall_alpha : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h
  */
  def gdk_pixbuf_composite_color(src : Ptr[GdkPixbuf], dest : Ptr[GdkPixbuf], dest_x : CInt, dest_y : CInt, dest_width : CInt, dest_height : CInt, offset_x : Double, offset_y : Double, scale_x : Double, scale_y : Double, interp_type : GdkInterpType, overall_alpha : CInt, check_x : CInt, check_y : CInt, check_size : CInt, color1 : guint32, color2 : guint32): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h
  */
  def gdk_pixbuf_composite_color_simple(src : Ptr[GdkPixbuf], dest_width : CInt, dest_height : CInt, interp_type : GdkInterpType, overall_alpha : CInt, check_size : CInt, color1 : guint32, color2 : guint32): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_copy(pixbuf : Ptr[GdkPixbuf]): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_copy_area(src_pixbuf : Ptr[GdkPixbuf], src_x : CInt, src_y : CInt, width : CInt, height : CInt, dest_pixbuf : Ptr[GdkPixbuf], dest_x : CInt, dest_y : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_copy_options(src_pixbuf : Ptr[GdkPixbuf], dest_pixbuf : Ptr[GdkPixbuf]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h
  */
  def gdk_pixbuf_error_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_fill(pixbuf : Ptr[GdkPixbuf], pixel : guint32): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h
  */
  def gdk_pixbuf_flip(src : Ptr[GdkPixbuf], horizontal : gboolean): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h
  */
  def gdk_pixbuf_format_copy(format : Ptr[GdkPixbufFormat]): Ptr[GdkPixbufFormat] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h
  */
  def gdk_pixbuf_format_free(format : Ptr[GdkPixbufFormat]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h
  */
  def gdk_pixbuf_format_get_description(format : Ptr[GdkPixbufFormat]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h
  */
  def gdk_pixbuf_format_get_extensions(format : Ptr[GdkPixbufFormat]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h
  */
  def gdk_pixbuf_format_get_license(format : Ptr[GdkPixbufFormat]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h
  */
  def gdk_pixbuf_format_get_mime_types(format : Ptr[GdkPixbufFormat]): Ptr[Ptr[gchar]] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h
  */
  def gdk_pixbuf_format_get_name(format : Ptr[GdkPixbufFormat]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h
  */
  def gdk_pixbuf_format_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h
  */
  def gdk_pixbuf_format_is_disabled(format : Ptr[GdkPixbufFormat]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h
  */
  def gdk_pixbuf_format_is_save_option_supported(format : Ptr[GdkPixbufFormat], option_key : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h
  */
  def gdk_pixbuf_format_is_scalable(format : Ptr[GdkPixbufFormat]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h
  */
  def gdk_pixbuf_format_is_writable(format : Ptr[GdkPixbufFormat]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h
  */
  def gdk_pixbuf_format_set_disabled(format : Ptr[GdkPixbufFormat], disabled : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_get_bits_per_sample(pixbuf : Ptr[GdkPixbuf]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_get_byte_length(pixbuf : Ptr[GdkPixbuf]): gsize = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_get_colorspace(pixbuf : Ptr[GdkPixbuf]): GdkColorspace = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h
  */
  def gdk_pixbuf_get_file_info(filename : Ptr[gchar], width : Ptr[gint], height : Ptr[gint]): Ptr[GdkPixbufFormat] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h
  */
  def gdk_pixbuf_get_file_info_async(filename : Ptr[gchar], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h
  */
  def gdk_pixbuf_get_file_info_finish(async_result : Ptr[GAsyncResult], width : Ptr[gint], height : Ptr[gint], error : Ptr[Ptr[GError]]): Ptr[GdkPixbufFormat] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h
  */
  def gdk_pixbuf_get_formats(): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpixbuf.h
  */
  def gdk_pixbuf_get_from_surface(surface : Ptr[cairo_surface_t], src_x : CInt, src_y : CInt, width : CInt, height : CInt): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpixbuf.h
  */
  def gdk_pixbuf_get_from_texture(texture : Ptr[GdkTexture]): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_get_has_alpha(pixbuf : Ptr[GdkPixbuf]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_get_height(pixbuf : Ptr[GdkPixbuf]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_get_n_channels(pixbuf : Ptr[GdkPixbuf]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_get_option(pixbuf : Ptr[GdkPixbuf], key : Ptr[gchar]): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_get_options(pixbuf : Ptr[GdkPixbuf]): Ptr[GHashTable] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_get_pixels(pixbuf : Ptr[GdkPixbuf]): Ptr[guchar] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_get_pixels_with_length(pixbuf : Ptr[GdkPixbuf], length : Ptr[guint]): Ptr[guchar] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_get_rowstride(pixbuf : Ptr[GdkPixbuf]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_get_width(pixbuf : Ptr[GdkPixbuf]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-io.h
  */
  def gdk_pixbuf_init_modules(path : CString, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h
  */
  def gdk_pixbuf_loader_close(loader : Ptr[GdkPixbufLoader], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h
  */
  def gdk_pixbuf_loader_get_animation(loader : Ptr[GdkPixbufLoader]): Ptr[GdkPixbufAnimation] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h
  */
  def gdk_pixbuf_loader_get_format(loader : Ptr[GdkPixbufLoader]): Ptr[GdkPixbufFormat] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h
  */
  def gdk_pixbuf_loader_get_pixbuf(loader : Ptr[GdkPixbufLoader]): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h
  */
  def gdk_pixbuf_loader_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h
  */
  def gdk_pixbuf_loader_new(): Ptr[GdkPixbufLoader] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h
  */
  def gdk_pixbuf_loader_new_with_mime_type(mime_type : CString, error : Ptr[Ptr[GError]]): Ptr[GdkPixbufLoader] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h
  */
  def gdk_pixbuf_loader_new_with_type(image_type : CString, error : Ptr[Ptr[GError]]): Ptr[GdkPixbufLoader] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h
  */
  def gdk_pixbuf_loader_set_size(loader : Ptr[GdkPixbufLoader], width : CInt, height : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h
  */
  def gdk_pixbuf_loader_write(loader : Ptr[GdkPixbufLoader], buf : Ptr[guchar], count : gsize, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-loader.h
  */
  def gdk_pixbuf_loader_write_bytes(loader : Ptr[GdkPixbufLoader], buffer : Ptr[GBytes], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_new(colorspace : GdkColorspace, has_alpha : gboolean, bits_per_sample : CInt, width : CInt, height : CInt): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_new_from_bytes(data : Ptr[GBytes], colorspace : GdkColorspace, has_alpha : gboolean, bits_per_sample : CInt, width : CInt, height : CInt, rowstride : CInt): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_new_from_data(data : Ptr[guchar], colorspace : GdkColorspace, has_alpha : gboolean, bits_per_sample : CInt, width : CInt, height : CInt, rowstride : CInt, destroy_fn : GdkPixbufDestroyNotify, destroy_fn_data : gpointer): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_new_from_file(filename : CString, error : Ptr[Ptr[GError]]): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_new_from_file_at_scale(filename : CString, width : CInt, height : CInt, preserve_aspect_ratio : gboolean, error : Ptr[Ptr[GError]]): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_new_from_file_at_size(filename : CString, width : CInt, height : CInt, error : Ptr[Ptr[GError]]): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_new_from_inline(data_length : gint, data : Ptr[guint8], copy_pixels : gboolean, error : Ptr[Ptr[GError]]): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_new_from_resource(resource_path : CString, error : Ptr[Ptr[GError]]): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_new_from_resource_at_scale(resource_path : CString, width : CInt, height : CInt, preserve_aspect_ratio : gboolean, error : Ptr[Ptr[GError]]): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_new_from_stream(stream : Ptr[GInputStream], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_new_from_stream_async(stream : Ptr[GInputStream], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_new_from_stream_at_scale(stream : Ptr[GInputStream], width : gint, height : gint, preserve_aspect_ratio : gboolean, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_new_from_stream_at_scale_async(stream : Ptr[GInputStream], width : gint, height : gint, preserve_aspect_ratio : gboolean, cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_new_from_stream_finish(async_result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_new_from_xpm_data(data : Ptr[CString]): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_new_subpixbuf(src_pixbuf : Ptr[GdkPixbuf], src_x : CInt, src_y : CInt, width : CInt, height : CInt): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_read_pixel_bytes(pixbuf : Ptr[GdkPixbuf]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_read_pixels(pixbuf : Ptr[GdkPixbuf]): Ptr[guint8] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_ref(pixbuf : Ptr[GdkPixbuf]): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_remove_option(pixbuf : Ptr[GdkPixbuf], key : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h
  */
  def gdk_pixbuf_rotate_simple(src : Ptr[GdkPixbuf], angle : GdkPixbufRotation): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-enum-types.h
  */
  def gdk_pixbuf_rotation_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_saturate_and_pixelate(src : Ptr[GdkPixbuf], dest : Ptr[GdkPixbuf], saturation : gfloat, pixelate : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_save(pixbuf : Ptr[GdkPixbuf], filename : CString, `type` : CString, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_save_to_buffer(pixbuf : Ptr[GdkPixbuf], buffer : Ptr[Ptr[gchar]], buffer_size : Ptr[gsize], `type` : CString, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_save_to_bufferv(pixbuf : Ptr[GdkPixbuf], buffer : Ptr[Ptr[gchar]], buffer_size : Ptr[gsize], `type` : CString, option_keys : Ptr[CString], option_values : Ptr[CString], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_save_to_callback(pixbuf : Ptr[GdkPixbuf], save_func : GdkPixbufSaveFunc, user_data : gpointer, `type` : CString, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_save_to_callbackv(pixbuf : Ptr[GdkPixbuf], save_func : GdkPixbufSaveFunc, user_data : gpointer, `type` : CString, option_keys : Ptr[CString], option_values : Ptr[CString], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_save_to_stream(pixbuf : Ptr[GdkPixbuf], stream : Ptr[GOutputStream], `type` : CString, cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_save_to_stream_async(pixbuf : Ptr[GdkPixbuf], stream : Ptr[GOutputStream], `type` : Ptr[gchar], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_save_to_stream_finish(async_result : Ptr[GAsyncResult], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_save_to_streamv(pixbuf : Ptr[GdkPixbuf], stream : Ptr[GOutputStream], `type` : CString, option_keys : Ptr[CString], option_values : Ptr[CString], cancellable : Ptr[GCancellable], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_save_to_streamv_async(pixbuf : Ptr[GdkPixbuf], stream : Ptr[GOutputStream], `type` : Ptr[gchar], option_keys : Ptr[Ptr[gchar]], option_values : Ptr[Ptr[gchar]], cancellable : Ptr[GCancellable], callback : GAsyncReadyCallback, user_data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_savev(pixbuf : Ptr[GdkPixbuf], filename : CString, `type` : CString, option_keys : Ptr[CString], option_values : Ptr[CString], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h
  */
  def gdk_pixbuf_scale(src : Ptr[GdkPixbuf], dest : Ptr[GdkPixbuf], dest_x : CInt, dest_y : CInt, dest_width : CInt, dest_height : CInt, offset_x : Double, offset_y : Double, scale_x : Double, scale_y : Double, interp_type : GdkInterpType): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-transform.h
  */
  def gdk_pixbuf_scale_simple(src : Ptr[GdkPixbuf], dest_width : CInt, dest_height : CInt, interp_type : GdkInterpType): Ptr[GdkPixbuf] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_set_option(pixbuf : Ptr[GdkPixbuf], key : Ptr[gchar], value : Ptr[gchar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h
  */
  def gdk_pixbuf_simple_anim_add_frame(animation : Ptr[GdkPixbufSimpleAnim], pixbuf : Ptr[GdkPixbuf]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h
  */
  def gdk_pixbuf_simple_anim_get_loop(animation : Ptr[GdkPixbufSimpleAnim]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h
  */
  def gdk_pixbuf_simple_anim_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h
  */
  def gdk_pixbuf_simple_anim_iter_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h
  */
  def gdk_pixbuf_simple_anim_new(width : gint, height : gint, rate : gfloat): Ptr[GdkPixbufSimpleAnim] = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-simple-anim.h
  */
  def gdk_pixbuf_simple_anim_set_loop(animation : Ptr[GdkPixbufSimpleAnim], loop : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-core.h
  */
  def gdk_pixbuf_unref(pixbuf : Ptr[GdkPixbuf]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopup.h
  */
  def gdk_popup_get_autohide(popup : Ptr[GdkPopup]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopup.h
  */
  def gdk_popup_get_parent(popup : Ptr[GdkPopup]): Ptr[GdkSurface] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopup.h
  */
  def gdk_popup_get_position_x(popup : Ptr[GdkPopup]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopup.h
  */
  def gdk_popup_get_position_y(popup : Ptr[GdkPopup]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopup.h
  */
  def gdk_popup_get_rect_anchor(popup : Ptr[GdkPopup]): GdkGravity = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopup.h
  */
  def gdk_popup_get_surface_anchor(popup : Ptr[GdkPopup]): GdkGravity = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopup.h
  */
  def gdk_popup_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopuplayout.h
  */
  def gdk_popup_layout_copy(layout : Ptr[GdkPopupLayout]): Ptr[GdkPopupLayout] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopuplayout.h
  */
  def gdk_popup_layout_equal(layout : Ptr[GdkPopupLayout], other : Ptr[GdkPopupLayout]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopuplayout.h
  */
  def gdk_popup_layout_get_anchor_hints(layout : Ptr[GdkPopupLayout]): GdkAnchorHints = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopuplayout.h
  */
  def gdk_popup_layout_get_anchor_rect(layout : Ptr[GdkPopupLayout]): Ptr[GdkRectangle] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopuplayout.h
  */
  def gdk_popup_layout_get_offset(layout : Ptr[GdkPopupLayout], dx : Ptr[CInt], dy : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopuplayout.h
  */
  def gdk_popup_layout_get_rect_anchor(layout : Ptr[GdkPopupLayout]): GdkGravity = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopuplayout.h
  */
  def gdk_popup_layout_get_shadow_width(layout : Ptr[GdkPopupLayout], left : Ptr[CInt], right : Ptr[CInt], top : Ptr[CInt], bottom : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopuplayout.h
  */
  def gdk_popup_layout_get_surface_anchor(layout : Ptr[GdkPopupLayout]): GdkGravity = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopuplayout.h
  */
  def gdk_popup_layout_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopuplayout.h
  */
  def gdk_popup_layout_new(anchor_rect : Ptr[GdkRectangle], rect_anchor : GdkGravity, surface_anchor : GdkGravity): Ptr[GdkPopupLayout] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopuplayout.h
  */
  def gdk_popup_layout_ref(layout : Ptr[GdkPopupLayout]): Ptr[GdkPopupLayout] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopuplayout.h
  */
  def gdk_popup_layout_set_anchor_hints(layout : Ptr[GdkPopupLayout], anchor_hints : GdkAnchorHints): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopuplayout.h
  */
  def gdk_popup_layout_set_anchor_rect(layout : Ptr[GdkPopupLayout], anchor_rect : Ptr[GdkRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopuplayout.h
  */
  def gdk_popup_layout_set_offset(layout : Ptr[GdkPopupLayout], dx : CInt, dy : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopuplayout.h
  */
  def gdk_popup_layout_set_rect_anchor(layout : Ptr[GdkPopupLayout], anchor : GdkGravity): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopuplayout.h
  */
  def gdk_popup_layout_set_shadow_width(layout : Ptr[GdkPopupLayout], left : CInt, right : CInt, top : CInt, bottom : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopuplayout.h
  */
  def gdk_popup_layout_set_surface_anchor(layout : Ptr[GdkPopupLayout], anchor : GdkGravity): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopuplayout.h
  */
  def gdk_popup_layout_unref(layout : Ptr[GdkPopupLayout]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopup.h
  */
  def gdk_popup_present(popup : Ptr[GdkPopup], width : CInt, height : CInt, layout : Ptr[GdkPopupLayout]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_proximity_event_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkrectangle.h
  */
  def gdk_rectangle_contains_point(rect : Ptr[GdkRectangle], x : CInt, y : CInt): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkrectangle.h
  */
  def gdk_rectangle_equal(rect1 : Ptr[GdkRectangle], rect2 : Ptr[GdkRectangle]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkrectangle.h
  */
  def gdk_rectangle_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkrectangle.h
  */
  def gdk_rectangle_intersect(src1 : Ptr[GdkRectangle], src2 : Ptr[GdkRectangle], dest : Ptr[GdkRectangle]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkrectangle.h
  */
  def gdk_rectangle_union(src1 : Ptr[GdkRectangle], src2 : Ptr[GdkRectangle], dest : Ptr[GdkRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkrgba.h
  */
  def gdk_rgba_copy(rgba : Ptr[GdkRGBA]): Ptr[GdkRGBA] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkrgba.h
  */
  def gdk_rgba_equal(p1 : gconstpointer, p2 : gconstpointer): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkrgba.h
  */
  def gdk_rgba_free(rgba : Ptr[GdkRGBA]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkrgba.h
  */
  def gdk_rgba_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkrgba.h
  */
  def gdk_rgba_hash(p : gconstpointer): guint = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkrgba.h
  */
  def gdk_rgba_is_clear(rgba : Ptr[GdkRGBA]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkrgba.h
  */
  def gdk_rgba_is_opaque(rgba : Ptr[GdkRGBA]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkrgba.h
  */
  def gdk_rgba_parse(rgba : Ptr[GdkRGBA], spec : CString): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkrgba.h
  */
  def gdk_rgba_to_string(rgba : Ptr[GdkRGBA]): CString = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_scroll_direction_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_scroll_event_get_deltas(event : Ptr[GdkEvent], delta_x : Ptr[Double], delta_y : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_scroll_event_get_direction(event : Ptr[GdkEvent]): GdkScrollDirection = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_scroll_event_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_scroll_event_is_stop(event : Ptr[GdkEvent]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_seat_capabilities_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkseat.h
  */
  def gdk_seat_get_capabilities(seat : Ptr[GdkSeat]): GdkSeatCapabilities = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkseat.h
  */
  def gdk_seat_get_devices(seat : Ptr[GdkSeat], capabilities : GdkSeatCapabilities): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkseat.h
  */
  def gdk_seat_get_display(seat : Ptr[GdkSeat]): Ptr[GdkDisplay] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkseat.h
  */
  def gdk_seat_get_keyboard(seat : Ptr[GdkSeat]): Ptr[GdkDevice] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkseat.h
  */
  def gdk_seat_get_pointer(seat : Ptr[GdkSeat]): Ptr[GdkDevice] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkseat.h
  */
  def gdk_seat_get_tools(seat : Ptr[GdkSeat]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkseat.h
  */
  def gdk_seat_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdisplaymanager.h
  */
  def gdk_set_allowed_backends(backends : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksnapshot.h
  */
  def gdk_snapshot_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_subpixel_layout_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_beep(surface : Ptr[GdkSurface]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_create_cairo_context(surface : Ptr[GdkSurface]): Ptr[GdkCairoContext] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_create_gl_context(surface : Ptr[GdkSurface], error : Ptr[Ptr[GError]]): Ptr[GdkGLContext] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_create_similar_surface(surface : Ptr[GdkSurface], content : cairo_content_t, width : CInt, height : CInt): Ptr[cairo_surface_t] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_create_vulkan_context(surface : Ptr[GdkSurface], error : Ptr[Ptr[GError]]): Ptr[GdkVulkanContext] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_destroy(surface : Ptr[GdkSurface]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_surface_edge_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_get_cursor(surface : Ptr[GdkSurface]): Ptr[GdkCursor] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_get_device_cursor(surface : Ptr[GdkSurface], device : Ptr[GdkDevice]): Ptr[GdkCursor] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_get_device_position(surface : Ptr[GdkSurface], device : Ptr[GdkDevice], x : Ptr[Double], y : Ptr[Double], mask : Ptr[GdkModifierType]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_get_display(surface : Ptr[GdkSurface]): Ptr[GdkDisplay] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_get_frame_clock(surface : Ptr[GdkSurface]): Ptr[GdkFrameClock] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_get_height(surface : Ptr[GdkSurface]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_get_mapped(surface : Ptr[GdkSurface]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_get_scale_factor(surface : Ptr[GdkSurface]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_get_width(surface : Ptr[GdkSurface]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_hide(surface : Ptr[GdkSurface]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_is_destroyed(surface : Ptr[GdkSurface]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_new_popup(parent : Ptr[GdkSurface], autohide : gboolean): Ptr[GdkSurface] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_new_toplevel(display : Ptr[GdkDisplay]): Ptr[GdkSurface] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_queue_render(surface : Ptr[GdkSurface]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_request_layout(surface : Ptr[GdkSurface]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_set_cursor(surface : Ptr[GdkSurface], cursor : Ptr[GdkCursor]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_set_device_cursor(surface : Ptr[GdkSurface], device : Ptr[GdkDevice], cursor : Ptr[GdkCursor]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_set_input_region(surface : Ptr[GdkSurface], region : Ptr[cairo_region_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_set_opaque_region(surface : Ptr[GdkSurface], region : Ptr[cairo_region_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def gdk_surface_translate_coordinates(from : Ptr[GdkSurface], to : Ptr[GdkSurface], x : Ptr[Double], y : Ptr[Double]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
  */
  def gdk_texture_download(texture : Ptr[GdkTexture], data : Ptr[guchar], stride : gsize): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_texture_error_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
  */
  def gdk_texture_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
  */
  def gdk_texture_get_height(texture : Ptr[GdkTexture]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
  */
  def gdk_texture_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
  */
  def gdk_texture_get_width(texture : Ptr[GdkTexture]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
  */
  def gdk_texture_new_for_pixbuf(pixbuf : Ptr[GdkPixbuf]): Ptr[GdkTexture] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
  */
  def gdk_texture_new_from_bytes(bytes : Ptr[GBytes], error : Ptr[Ptr[GError]]): Ptr[GdkTexture] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
  */
  def gdk_texture_new_from_file(file : Ptr[GFile], error : Ptr[Ptr[GError]]): Ptr[GdkTexture] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
  */
  def gdk_texture_new_from_filename(path : CString, error : Ptr[Ptr[GError]]): Ptr[GdkTexture] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
  */
  def gdk_texture_new_from_resource(resource_path : CString): Ptr[GdkTexture] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
  */
  def gdk_texture_save_to_png(texture : Ptr[GdkTexture], filename : CString): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
  */
  def gdk_texture_save_to_png_bytes(texture : Ptr[GdkTexture]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
  */
  def gdk_texture_save_to_tiff(texture : Ptr[GdkTexture], filename : CString): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
  */
  def gdk_texture_save_to_tiff_bytes(texture : Ptr[GdkTexture]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_titlebar_gesture_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def gdk_toplevel_begin_move(toplevel : Ptr[GdkToplevel], device : Ptr[GdkDevice], button : CInt, x : Double, y : Double, timestamp : guint32): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def gdk_toplevel_begin_resize(toplevel : Ptr[GdkToplevel], edge : GdkSurfaceEdge, device : Ptr[GdkDevice], button : CInt, x : Double, y : Double, timestamp : guint32): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def gdk_toplevel_focus(toplevel : Ptr[GdkToplevel], timestamp : guint32): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def gdk_toplevel_get_state(toplevel : Ptr[GdkToplevel]): GdkToplevelState = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def gdk_toplevel_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def gdk_toplevel_inhibit_system_shortcuts(toplevel : Ptr[GdkToplevel], event : Ptr[GdkEvent]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevellayout.h
  */
  def gdk_toplevel_layout_copy(layout : Ptr[GdkToplevelLayout]): Ptr[GdkToplevelLayout] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevellayout.h
  */
  def gdk_toplevel_layout_equal(layout : Ptr[GdkToplevelLayout], other : Ptr[GdkToplevelLayout]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevellayout.h
  */
  def gdk_toplevel_layout_get_fullscreen(layout : Ptr[GdkToplevelLayout], fullscreen : Ptr[gboolean]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevellayout.h
  */
  def gdk_toplevel_layout_get_fullscreen_monitor(layout : Ptr[GdkToplevelLayout]): Ptr[GdkMonitor] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevellayout.h
  */
  def gdk_toplevel_layout_get_maximized(layout : Ptr[GdkToplevelLayout], maximized : Ptr[gboolean]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevellayout.h
  */
  def gdk_toplevel_layout_get_resizable(layout : Ptr[GdkToplevelLayout]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevellayout.h
  */
  def gdk_toplevel_layout_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevellayout.h
  */
  def gdk_toplevel_layout_new(): Ptr[GdkToplevelLayout] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevellayout.h
  */
  def gdk_toplevel_layout_ref(layout : Ptr[GdkToplevelLayout]): Ptr[GdkToplevelLayout] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevellayout.h
  */
  def gdk_toplevel_layout_set_fullscreen(layout : Ptr[GdkToplevelLayout], fullscreen : gboolean, monitor : Ptr[GdkMonitor]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevellayout.h
  */
  def gdk_toplevel_layout_set_maximized(layout : Ptr[GdkToplevelLayout], maximized : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevellayout.h
  */
  def gdk_toplevel_layout_set_resizable(layout : Ptr[GdkToplevelLayout], resizable : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevellayout.h
  */
  def gdk_toplevel_layout_unref(layout : Ptr[GdkToplevelLayout]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def gdk_toplevel_lower(toplevel : Ptr[GdkToplevel]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def gdk_toplevel_minimize(toplevel : Ptr[GdkToplevel]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def gdk_toplevel_present(toplevel : Ptr[GdkToplevel], layout : Ptr[GdkToplevelLayout]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def gdk_toplevel_restore_system_shortcuts(toplevel : Ptr[GdkToplevel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def gdk_toplevel_set_decorated(toplevel : Ptr[GdkToplevel], decorated : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def gdk_toplevel_set_deletable(toplevel : Ptr[GdkToplevel], deletable : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def gdk_toplevel_set_icon_list(toplevel : Ptr[GdkToplevel], surfaces : Ptr[GList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def gdk_toplevel_set_modal(toplevel : Ptr[GdkToplevel], modal : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def gdk_toplevel_set_startup_id(toplevel : Ptr[GdkToplevel], startup_id : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def gdk_toplevel_set_title(toplevel : Ptr[GdkToplevel], title : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def gdk_toplevel_set_transient_for(toplevel : Ptr[GdkToplevel], parent : Ptr[GdkSurface]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def gdk_toplevel_show_window_menu(toplevel : Ptr[GdkToplevel], event : Ptr[GdkEvent]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevelsize.h
  */
  def gdk_toplevel_size_get_bounds(size : Ptr[GdkToplevelSize], bounds_width : Ptr[CInt], bounds_height : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevelsize.h
  */
  def gdk_toplevel_size_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevelsize.h
  */
  def gdk_toplevel_size_set_min_size(size : Ptr[GdkToplevelSize], min_width : CInt, min_height : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevelsize.h
  */
  def gdk_toplevel_size_set_shadow_width(size : Ptr[GdkToplevelSize], left : CInt, right : CInt, top : CInt, bottom : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevelsize.h
  */
  def gdk_toplevel_size_set_size(size : Ptr[GdkToplevelSize], width : CInt, height : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_toplevel_state_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def gdk_toplevel_supports_edge_constraints(toplevel : Ptr[GdkToplevel]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def gdk_toplevel_titlebar_gesture(toplevel : Ptr[GdkToplevel], gesture : GdkTitlebarGesture): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_touch_event_get_emulating_pointer(event : Ptr[GdkEvent]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_touch_event_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_touchpad_event_get_deltas(event : Ptr[GdkEvent], dx : Ptr[Double], dy : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_touchpad_event_get_gesture_phase(event : Ptr[GdkEvent]): GdkTouchpadGesturePhase = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_touchpad_event_get_n_fingers(event : Ptr[GdkEvent]): guint = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_touchpad_event_get_pinch_angle_delta(event : Ptr[GdkEvent]): Double = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_touchpad_event_get_pinch_scale(event : Ptr[GdkEvent]): Double = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkevents.h
  */
  def gdk_touchpad_event_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_touchpad_gesture_phase_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkkeys.h
  */
  def gdk_unicode_to_keyval(wc : guint32): guint = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkvulkancontext.h
  */
  def gdk_vulkan_context_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkenumtypes.h
  */
  def gdk_vulkan_error_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkvulkancontext.h
  */
  def gdk_vulkan_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_auto_cleanup_GCond(_ptr : Ptr[GCond]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_auto_cleanup_GMutex(_ptr : Ptr[GMutex]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_auto_cleanup_GQueue(_ptr : Ptr[GQueue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_auto_cleanup_GStrv(_ptr : Ptr[GStrv]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_auto_cleanup_GValue(_ptr : Ptr[GValue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_auto_cleanup_GVariantBuilder(_ptr : Ptr[GVariantBuilder]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_auto_cleanup_GVariantDict(_ptr : Ptr[GVariantDict]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def glib_autoptr_cleanup_AdwActionRow(_ptr : Ptr[Ptr[AdwActionRow]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def glib_autoptr_cleanup_AdwActionRowClass(_ptr : Ptr[Ptr[AdwActionRowClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def glib_autoptr_cleanup_AdwAnimation(_ptr : Ptr[Ptr[AdwAnimation]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def glib_autoptr_cleanup_AdwAnimationClass(_ptr : Ptr[Ptr[AdwAnimationClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def glib_autoptr_cleanup_AdwAnimationTarget(_ptr : Ptr[Ptr[AdwAnimationTarget]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def glib_autoptr_cleanup_AdwAnimationTargetClass(_ptr : Ptr[Ptr[AdwAnimationTargetClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
  */
  def glib_autoptr_cleanup_AdwApplication(_ptr : Ptr[Ptr[AdwApplication]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
  */
  def glib_autoptr_cleanup_AdwApplicationClass(_ptr : Ptr[Ptr[AdwApplicationClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
  */
  def glib_autoptr_cleanup_AdwApplicationWindow(_ptr : Ptr[Ptr[AdwApplicationWindow]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
  */
  def glib_autoptr_cleanup_AdwApplicationWindowClass(_ptr : Ptr[Ptr[AdwApplicationWindowClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def glib_autoptr_cleanup_AdwAvatar(_ptr : Ptr[Ptr[AdwAvatar]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def glib_autoptr_cleanup_AdwAvatarClass(_ptr : Ptr[Ptr[AdwAvatarClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
  */
  def glib_autoptr_cleanup_AdwBin(_ptr : Ptr[Ptr[AdwBin]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
  */
  def glib_autoptr_cleanup_AdwBinClass(_ptr : Ptr[Ptr[AdwBinClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
  */
  def glib_autoptr_cleanup_AdwButtonContent(_ptr : Ptr[Ptr[AdwButtonContent]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
  */
  def glib_autoptr_cleanup_AdwButtonContentClass(_ptr : Ptr[Ptr[AdwButtonContentClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def glib_autoptr_cleanup_AdwCallbackAnimationTarget(_ptr : Ptr[Ptr[AdwCallbackAnimationTarget]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def glib_autoptr_cleanup_AdwCallbackAnimationTargetClass(_ptr : Ptr[Ptr[AdwCallbackAnimationTargetClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def glib_autoptr_cleanup_AdwCarousel(_ptr : Ptr[Ptr[AdwCarousel]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def glib_autoptr_cleanup_AdwCarouselClass(_ptr : Ptr[Ptr[AdwCarouselClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-dots.h
  */
  def glib_autoptr_cleanup_AdwCarouselIndicatorDots(_ptr : Ptr[Ptr[AdwCarouselIndicatorDots]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-dots.h
  */
  def glib_autoptr_cleanup_AdwCarouselIndicatorDotsClass(_ptr : Ptr[Ptr[AdwCarouselIndicatorDotsClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-lines.h
  */
  def glib_autoptr_cleanup_AdwCarouselIndicatorLines(_ptr : Ptr[Ptr[AdwCarouselIndicatorLines]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-lines.h
  */
  def glib_autoptr_cleanup_AdwCarouselIndicatorLinesClass(_ptr : Ptr[Ptr[AdwCarouselIndicatorLinesClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
  */
  def glib_autoptr_cleanup_AdwClamp(_ptr : Ptr[Ptr[AdwClamp]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
  */
  def glib_autoptr_cleanup_AdwClampClass(_ptr : Ptr[Ptr[AdwClampClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
  */
  def glib_autoptr_cleanup_AdwClampLayout(_ptr : Ptr[Ptr[AdwClampLayout]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
  */
  def glib_autoptr_cleanup_AdwClampLayoutClass(_ptr : Ptr[Ptr[AdwClampLayoutClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
  */
  def glib_autoptr_cleanup_AdwClampScrollable(_ptr : Ptr[Ptr[AdwClampScrollable]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
  */
  def glib_autoptr_cleanup_AdwClampScrollableClass(_ptr : Ptr[Ptr[AdwClampScrollableClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def glib_autoptr_cleanup_AdwComboRow(_ptr : Ptr[Ptr[AdwComboRow]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def glib_autoptr_cleanup_AdwComboRowClass(_ptr : Ptr[Ptr[AdwComboRowClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def glib_autoptr_cleanup_AdwEnumListItem(_ptr : Ptr[Ptr[AdwEnumListItem]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def glib_autoptr_cleanup_AdwEnumListItemClass(_ptr : Ptr[Ptr[AdwEnumListItemClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def glib_autoptr_cleanup_AdwEnumListModel(_ptr : Ptr[Ptr[AdwEnumListModel]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def glib_autoptr_cleanup_AdwEnumListModelClass(_ptr : Ptr[Ptr[AdwEnumListModelClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def glib_autoptr_cleanup_AdwExpanderRow(_ptr : Ptr[Ptr[AdwExpanderRow]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def glib_autoptr_cleanup_AdwExpanderRowClass(_ptr : Ptr[Ptr[AdwExpanderRowClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def glib_autoptr_cleanup_AdwFlap(_ptr : Ptr[Ptr[AdwFlap]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def glib_autoptr_cleanup_AdwFlapClass(_ptr : Ptr[Ptr[AdwFlapClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def glib_autoptr_cleanup_AdwHeaderBar(_ptr : Ptr[Ptr[AdwHeaderBar]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def glib_autoptr_cleanup_AdwHeaderBarClass(_ptr : Ptr[Ptr[AdwHeaderBarClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def glib_autoptr_cleanup_AdwLeaflet(_ptr : Ptr[Ptr[AdwLeaflet]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def glib_autoptr_cleanup_AdwLeafletClass(_ptr : Ptr[Ptr[AdwLeafletClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def glib_autoptr_cleanup_AdwLeafletPage(_ptr : Ptr[Ptr[AdwLeafletPage]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def glib_autoptr_cleanup_AdwLeafletPageClass(_ptr : Ptr[Ptr[AdwLeafletPageClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def glib_autoptr_cleanup_AdwPreferencesGroup(_ptr : Ptr[Ptr[AdwPreferencesGroup]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def glib_autoptr_cleanup_AdwPreferencesGroupClass(_ptr : Ptr[Ptr[AdwPreferencesGroupClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def glib_autoptr_cleanup_AdwPreferencesPage(_ptr : Ptr[Ptr[AdwPreferencesPage]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def glib_autoptr_cleanup_AdwPreferencesPageClass(_ptr : Ptr[Ptr[AdwPreferencesPageClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def glib_autoptr_cleanup_AdwPreferencesRow(_ptr : Ptr[Ptr[AdwPreferencesRow]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def glib_autoptr_cleanup_AdwPreferencesRowClass(_ptr : Ptr[Ptr[AdwPreferencesRowClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def glib_autoptr_cleanup_AdwPreferencesWindow(_ptr : Ptr[Ptr[AdwPreferencesWindow]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def glib_autoptr_cleanup_AdwPreferencesWindowClass(_ptr : Ptr[Ptr[AdwPreferencesWindowClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def glib_autoptr_cleanup_AdwSplitButton(_ptr : Ptr[Ptr[AdwSplitButton]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def glib_autoptr_cleanup_AdwSplitButtonClass(_ptr : Ptr[Ptr[AdwSplitButtonClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def glib_autoptr_cleanup_AdwSpringAnimation(_ptr : Ptr[Ptr[AdwSpringAnimation]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def glib_autoptr_cleanup_AdwSpringAnimationClass(_ptr : Ptr[Ptr[AdwSpringAnimationClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-params.h
  */
  def glib_autoptr_cleanup_AdwSpringParams(_ptr : Ptr[Ptr[AdwSpringParams]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def glib_autoptr_cleanup_AdwSqueezer(_ptr : Ptr[Ptr[AdwSqueezer]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def glib_autoptr_cleanup_AdwSqueezerClass(_ptr : Ptr[Ptr[AdwSqueezerClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def glib_autoptr_cleanup_AdwSqueezerPage(_ptr : Ptr[Ptr[AdwSqueezerPage]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def glib_autoptr_cleanup_AdwSqueezerPageClass(_ptr : Ptr[Ptr[AdwSqueezerPageClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def glib_autoptr_cleanup_AdwStatusPage(_ptr : Ptr[Ptr[AdwStatusPage]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def glib_autoptr_cleanup_AdwStatusPageClass(_ptr : Ptr[Ptr[AdwStatusPageClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def glib_autoptr_cleanup_AdwStyleManager(_ptr : Ptr[Ptr[AdwStyleManager]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def glib_autoptr_cleanup_AdwStyleManagerClass(_ptr : Ptr[Ptr[AdwStyleManagerClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def glib_autoptr_cleanup_AdwSwipeTracker(_ptr : Ptr[Ptr[AdwSwipeTracker]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def glib_autoptr_cleanup_AdwSwipeTrackerClass(_ptr : Ptr[Ptr[AdwSwipeTrackerClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipeable.h
  */
  def glib_autoptr_cleanup_AdwSwipeable(_ptr : Ptr[Ptr[AdwSwipeable]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def glib_autoptr_cleanup_AdwTabBar(_ptr : Ptr[Ptr[AdwTabBar]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def glib_autoptr_cleanup_AdwTabBarClass(_ptr : Ptr[Ptr[AdwTabBarClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def glib_autoptr_cleanup_AdwTabPage(_ptr : Ptr[Ptr[AdwTabPage]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def glib_autoptr_cleanup_AdwTabPageClass(_ptr : Ptr[Ptr[AdwTabPageClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def glib_autoptr_cleanup_AdwTabView(_ptr : Ptr[Ptr[AdwTabView]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def glib_autoptr_cleanup_AdwTabViewClass(_ptr : Ptr[Ptr[AdwTabViewClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def glib_autoptr_cleanup_AdwTimedAnimation(_ptr : Ptr[Ptr[AdwTimedAnimation]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def glib_autoptr_cleanup_AdwTimedAnimationClass(_ptr : Ptr[Ptr[AdwTimedAnimationClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def glib_autoptr_cleanup_AdwToast(_ptr : Ptr[Ptr[AdwToast]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def glib_autoptr_cleanup_AdwToastClass(_ptr : Ptr[Ptr[AdwToastClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast-overlay.h
  */
  def glib_autoptr_cleanup_AdwToastOverlay(_ptr : Ptr[Ptr[AdwToastOverlay]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast-overlay.h
  */
  def glib_autoptr_cleanup_AdwToastOverlayClass(_ptr : Ptr[Ptr[AdwToastOverlayClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def glib_autoptr_cleanup_AdwViewStack(_ptr : Ptr[Ptr[AdwViewStack]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def glib_autoptr_cleanup_AdwViewStackClass(_ptr : Ptr[Ptr[AdwViewStackClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def glib_autoptr_cleanup_AdwViewStackPage(_ptr : Ptr[Ptr[AdwViewStackPage]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def glib_autoptr_cleanup_AdwViewStackPageClass(_ptr : Ptr[Ptr[AdwViewStackPageClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
  */
  def glib_autoptr_cleanup_AdwViewSwitcher(_ptr : Ptr[Ptr[AdwViewSwitcher]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
  */
  def glib_autoptr_cleanup_AdwViewSwitcherBar(_ptr : Ptr[Ptr[AdwViewSwitcherBar]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
  */
  def glib_autoptr_cleanup_AdwViewSwitcherBarClass(_ptr : Ptr[Ptr[AdwViewSwitcherBarClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
  */
  def glib_autoptr_cleanup_AdwViewSwitcherClass(_ptr : Ptr[Ptr[AdwViewSwitcherClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def glib_autoptr_cleanup_AdwViewSwitcherTitle(_ptr : Ptr[Ptr[AdwViewSwitcherTitle]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def glib_autoptr_cleanup_AdwViewSwitcherTitleClass(_ptr : Ptr[Ptr[AdwViewSwitcherTitleClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
  */
  def glib_autoptr_cleanup_AdwWindow(_ptr : Ptr[Ptr[AdwWindow]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
  */
  def glib_autoptr_cleanup_AdwWindowClass(_ptr : Ptr[Ptr[AdwWindowClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
  */
  def glib_autoptr_cleanup_AdwWindowTitle(_ptr : Ptr[Ptr[AdwWindowTitle]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
  */
  def glib_autoptr_cleanup_AdwWindowTitleClass(_ptr : Ptr[Ptr[AdwWindowTitleClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GAction(_ptr : Ptr[Ptr[GAction]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GActionMap(_ptr : Ptr[Ptr[GActionMap]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GAppInfo(_ptr : Ptr[Ptr[GAppInfo]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GAppInfoMonitor(_ptr : Ptr[Ptr[GAppInfoMonitor]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GAppLaunchContext(_ptr : Ptr[Ptr[GAppLaunchContext]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GApplication(_ptr : Ptr[Ptr[GApplication]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GApplicationCommandLine(_ptr : Ptr[Ptr[GApplicationCommandLine]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GArray(_ptr : Ptr[Ptr[GArray]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GAsyncInitable(_ptr : Ptr[Ptr[GAsyncInitable]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GAsyncQueue(_ptr : Ptr[Ptr[GAsyncQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GAsyncResult(_ptr : Ptr[Ptr[GAsyncResult]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GBookmarkFile(_ptr : Ptr[Ptr[GBookmarkFile]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GBufferedInputStream(_ptr : Ptr[Ptr[GBufferedInputStream]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GBufferedOutputStream(_ptr : Ptr[Ptr[GBufferedOutputStream]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GByteArray(_ptr : Ptr[Ptr[GByteArray]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GBytes(_ptr : Ptr[Ptr[GBytes]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GBytesIcon(_ptr : Ptr[Ptr[GBytesIcon]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GCancellable(_ptr : Ptr[Ptr[GCancellable]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GCharsetConverter(_ptr : Ptr[Ptr[GCharsetConverter]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GChecksum(_ptr : Ptr[Ptr[GChecksum]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_autoptr_cleanup_GClosure(_ptr : Ptr[Ptr[GClosure]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GConverter(_ptr : Ptr[Ptr[GConverter]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GConverterInputStream(_ptr : Ptr[Ptr[GConverterInputStream]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GConverterOutputStream(_ptr : Ptr[Ptr[GConverterOutputStream]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GCredentials(_ptr : Ptr[Ptr[GCredentials]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDBusActionGroup(_ptr : Ptr[Ptr[GDBusActionGroup]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDBusAuthObserver(_ptr : Ptr[Ptr[GDBusAuthObserver]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDBusConnection(_ptr : Ptr[Ptr[GDBusConnection]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDBusInterface(_ptr : Ptr[Ptr[GDBusInterface]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDBusInterfaceSkeleton(_ptr : Ptr[Ptr[GDBusInterfaceSkeleton]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDBusMenuModel(_ptr : Ptr[Ptr[GDBusMenuModel]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDBusMessage(_ptr : Ptr[Ptr[GDBusMessage]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDBusMethodInvocation(_ptr : Ptr[Ptr[GDBusMethodInvocation]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDBusNodeInfo(_ptr : Ptr[Ptr[GDBusNodeInfo]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDBusObject(_ptr : Ptr[Ptr[GDBusObject]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDBusObjectManager(_ptr : Ptr[Ptr[GDBusObjectManager]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDBusObjectManagerClient(_ptr : Ptr[Ptr[GDBusObjectManagerClient]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDBusObjectManagerServer(_ptr : Ptr[Ptr[GDBusObjectManagerServer]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDBusObjectProxy(_ptr : Ptr[Ptr[GDBusObjectProxy]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDBusObjectSkeleton(_ptr : Ptr[Ptr[GDBusObjectSkeleton]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDBusProxy(_ptr : Ptr[Ptr[GDBusProxy]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDBusServer(_ptr : Ptr[Ptr[GDBusServer]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDataInputStream(_ptr : Ptr[Ptr[GDataInputStream]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDataOutputStream(_ptr : Ptr[Ptr[GDataOutputStream]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDatagramBased(_ptr : Ptr[Ptr[GDatagramBased]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GDate(_ptr : Ptr[Ptr[GDate]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GDateTime(_ptr : Ptr[Ptr[GDateTime]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontroller.h
  */
  def glib_autoptr_cleanup_GDebugController(_ptr : Ptr[Ptr[GDebugController]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
  */
  def glib_autoptr_cleanup_GDebugControllerDBus(_ptr : Ptr[Ptr[GDebugControllerDBus]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
  */
  def glib_autoptr_cleanup_GDebugControllerDBusClass(_ptr : Ptr[Ptr[GDebugControllerDBusClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GDir(_ptr : Ptr[Ptr[GDir]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GDrive(_ptr : Ptr[Ptr[GDrive]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GEmblem(_ptr : Ptr[Ptr[GEmblem]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GEmblemedIcon(_ptr : Ptr[Ptr[GEmblemedIcon]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_autoptr_cleanup_GEnumClass(_ptr : Ptr[Ptr[GEnumClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GError(_ptr : Ptr[Ptr[GError]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GFile(_ptr : Ptr[Ptr[GFile]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GFileAttributeInfoList(_ptr : Ptr[Ptr[GFileAttributeInfoList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GFileEnumerator(_ptr : Ptr[Ptr[GFileEnumerator]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GFileIOStream(_ptr : Ptr[Ptr[GFileIOStream]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GFileIcon(_ptr : Ptr[Ptr[GFileIcon]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GFileInfo(_ptr : Ptr[Ptr[GFileInfo]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GFileInputStream(_ptr : Ptr[Ptr[GFileInputStream]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GFileMonitor(_ptr : Ptr[Ptr[GFileMonitor]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GFileOutputStream(_ptr : Ptr[Ptr[GFileOutputStream]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GFilenameCompleter(_ptr : Ptr[Ptr[GFilenameCompleter]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GFilterInputStream(_ptr : Ptr[Ptr[GFilterInputStream]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GFilterOutputStream(_ptr : Ptr[Ptr[GFilterOutputStream]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_autoptr_cleanup_GFlagsClass(_ptr : Ptr[Ptr[GFlagsClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GHashTable(_ptr : Ptr[Ptr[GHashTable]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GHmac(_ptr : Ptr[Ptr[GHmac]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GIOChannel(_ptr : Ptr[Ptr[GIOChannel]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GIOModule(_ptr : Ptr[Ptr[GIOModule]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GIOStream(_ptr : Ptr[Ptr[GIOStream]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GIcon(_ptr : Ptr[Ptr[GIcon]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GInetAddress(_ptr : Ptr[Ptr[GInetAddress]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GInetAddressMask(_ptr : Ptr[Ptr[GInetAddressMask]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GInetSocketAddress(_ptr : Ptr[Ptr[GInetSocketAddress]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GInitable(_ptr : Ptr[Ptr[GInitable]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_autoptr_cleanup_GInitiallyUnowned(_ptr : Ptr[Ptr[GInitiallyUnowned]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GInputStream(_ptr : Ptr[Ptr[GInputStream]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GKeyFile(_ptr : Ptr[Ptr[GKeyFile]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GList(_ptr : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/glistmodel.h
  */
  def glib_autoptr_cleanup_GListModel(_ptr : Ptr[Ptr[GListModel]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def glib_autoptr_cleanup_GListStore(_ptr : Ptr[Ptr[GListStore]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def glib_autoptr_cleanup_GListStoreClass(_ptr : Ptr[Ptr[GListStoreClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GLoadableIcon(_ptr : Ptr[Ptr[GLoadableIcon]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GMainContext(_ptr : Ptr[Ptr[GMainContext]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GMainContextPusher(_ptr : Ptr[Ptr[GMainContextPusher]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GMainLoop(_ptr : Ptr[Ptr[GMainLoop]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GMappedFile(_ptr : Ptr[Ptr[GMappedFile]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GMarkupParseContext(_ptr : Ptr[Ptr[GMarkupParseContext]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GMatchInfo(_ptr : Ptr[Ptr[GMatchInfo]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GMemoryInputStream(_ptr : Ptr[Ptr[GMemoryInputStream]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemorymonitor.h
  */
  def glib_autoptr_cleanup_GMemoryMonitor(_ptr : Ptr[Ptr[GMemoryMonitor]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GMemoryOutputStream(_ptr : Ptr[Ptr[GMemoryOutputStream]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GMenu(_ptr : Ptr[Ptr[GMenu]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GMenuAttributeIter(_ptr : Ptr[Ptr[GMenuAttributeIter]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GMenuItem(_ptr : Ptr[Ptr[GMenuItem]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GMenuLinkIter(_ptr : Ptr[Ptr[GMenuLinkIter]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GMenuModel(_ptr : Ptr[Ptr[GMenuModel]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GMount(_ptr : Ptr[Ptr[GMount]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GMountOperation(_ptr : Ptr[Ptr[GMountOperation]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GMutexLocker(_ptr : Ptr[Ptr[GMutexLocker]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GNativeVolumeMonitor(_ptr : Ptr[Ptr[GNativeVolumeMonitor]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GNetworkAddress(_ptr : Ptr[Ptr[GNetworkAddress]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GNetworkMonitor(_ptr : Ptr[Ptr[GNetworkMonitor]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GNetworkService(_ptr : Ptr[Ptr[GNetworkService]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GNode(_ptr : Ptr[Ptr[GNode]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GNotification(_ptr : Ptr[Ptr[GNotification]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_autoptr_cleanup_GObject(_ptr : Ptr[Ptr[GObject]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GOptionContext(_ptr : Ptr[Ptr[GOptionContext]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GOptionGroup(_ptr : Ptr[Ptr[GOptionGroup]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GOutputStream(_ptr : Ptr[Ptr[GOutputStream]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_autoptr_cleanup_GParamSpec(_ptr : Ptr[Ptr[GParamSpec]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GPatternSpec(_ptr : Ptr[Ptr[GPatternSpec]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GPermission(_ptr : Ptr[Ptr[GPermission]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GPollableInputStream(_ptr : Ptr[Ptr[GPollableInputStream]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GPollableOutputStream(_ptr : Ptr[Ptr[GPollableOutputStream]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpowerprofilemonitor.h
  */
  def glib_autoptr_cleanup_GPowerProfileMonitor(_ptr : Ptr[Ptr[GPowerProfileMonitor]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GPropertyAction(_ptr : Ptr[Ptr[GPropertyAction]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GProxy(_ptr : Ptr[Ptr[GProxy]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GProxyAddress(_ptr : Ptr[Ptr[GProxyAddress]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GProxyAddressEnumerator(_ptr : Ptr[Ptr[GProxyAddressEnumerator]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GProxyResolver(_ptr : Ptr[Ptr[GProxyResolver]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GPtrArray(_ptr : Ptr[Ptr[GPtrArray]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GQueue(_ptr : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GRWLockReaderLocker(_ptr : Ptr[Ptr[GRWLockReaderLocker]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GRWLockWriterLocker(_ptr : Ptr[Ptr[GRWLockWriterLocker]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GRand(_ptr : Ptr[Ptr[GRand]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GRecMutexLocker(_ptr : Ptr[Ptr[GRecMutexLocker]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GRefString(_ptr : Ptr[Ptr[GRefString]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GRegex(_ptr : Ptr[Ptr[GRegex]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GRemoteActionGroup(_ptr : Ptr[Ptr[GRemoteActionGroup]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GResolver(_ptr : Ptr[Ptr[GResolver]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GResource(_ptr : Ptr[Ptr[GResource]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GSList(_ptr : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GScanner(_ptr : Ptr[Ptr[GScanner]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSeekable(_ptr : Ptr[Ptr[GSeekable]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GSequence(_ptr : Ptr[Ptr[GSequence]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSettings(_ptr : Ptr[Ptr[GSettings]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSettingsBackend(_ptr : Ptr[Ptr[GSettingsBackend]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSettingsSchema(_ptr : Ptr[Ptr[GSettingsSchema]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSettingsSchemaKey(_ptr : Ptr[Ptr[GSettingsSchemaKey]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSettingsSchemaSource(_ptr : Ptr[Ptr[GSettingsSchemaSource]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSimpleAction(_ptr : Ptr[Ptr[GSimpleAction]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSimpleActionGroup(_ptr : Ptr[Ptr[GSimpleActionGroup]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSimpleAsyncResult(_ptr : Ptr[Ptr[GSimpleAsyncResult]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSimplePermission(_ptr : Ptr[Ptr[GSimplePermission]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSimpleProxyResolver(_ptr : Ptr[Ptr[GSimpleProxyResolver]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSocket(_ptr : Ptr[Ptr[GSocket]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSocketAddress(_ptr : Ptr[Ptr[GSocketAddress]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSocketAddressEnumerator(_ptr : Ptr[Ptr[GSocketAddressEnumerator]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSocketClient(_ptr : Ptr[Ptr[GSocketClient]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSocketConnectable(_ptr : Ptr[Ptr[GSocketConnectable]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSocketConnection(_ptr : Ptr[Ptr[GSocketConnection]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSocketControlMessage(_ptr : Ptr[Ptr[GSocketControlMessage]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSocketListener(_ptr : Ptr[Ptr[GSocketListener]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSocketService(_ptr : Ptr[Ptr[GSocketService]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GSource(_ptr : Ptr[Ptr[GSource]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GString(_ptr : Ptr[Ptr[GString]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GStringChunk(_ptr : Ptr[Ptr[GStringChunk]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GStrvBuilder(_ptr : Ptr[Ptr[GStrvBuilder]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSubprocess(_ptr : Ptr[Ptr[GSubprocess]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GSubprocessLauncher(_ptr : Ptr[Ptr[GSubprocessLauncher]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GTask(_ptr : Ptr[Ptr[GTask]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GTcpConnection(_ptr : Ptr[Ptr[GTcpConnection]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GTcpWrapperConnection(_ptr : Ptr[Ptr[GTcpWrapperConnection]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GTestDBus(_ptr : Ptr[Ptr[GTestDBus]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GThemedIcon(_ptr : Ptr[Ptr[GThemedIcon]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GThread(_ptr : Ptr[Ptr[GThread]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GThreadedSocketService(_ptr : Ptr[Ptr[GThreadedSocketService]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GTimeZone(_ptr : Ptr[Ptr[GTimeZone]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GTimer(_ptr : Ptr[Ptr[GTimer]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GTlsBackend(_ptr : Ptr[Ptr[GTlsBackend]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GTlsCertificate(_ptr : Ptr[Ptr[GTlsCertificate]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GTlsClientConnection(_ptr : Ptr[Ptr[GTlsClientConnection]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GTlsConnection(_ptr : Ptr[Ptr[GTlsConnection]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GTlsDatabase(_ptr : Ptr[Ptr[GTlsDatabase]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GTlsFileDatabase(_ptr : Ptr[Ptr[GTlsFileDatabase]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GTlsInteraction(_ptr : Ptr[Ptr[GTlsInteraction]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GTlsPassword(_ptr : Ptr[Ptr[GTlsPassword]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GTlsServerConnection(_ptr : Ptr[Ptr[GTlsServerConnection]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GTree(_ptr : Ptr[Ptr[GTree]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_autoptr_cleanup_GTypeClass(_ptr : Ptr[Ptr[GTypeClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtypemodule.h
  */
  def glib_autoptr_cleanup_GTypeModule(_ptr : Ptr[Ptr[GTypeModule]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GUri(_ptr : Ptr[Ptr[GUri]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GVariant(_ptr : Ptr[Ptr[GVariant]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GVariantBuilder(_ptr : Ptr[Ptr[GVariantBuilder]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GVariantDict(_ptr : Ptr[Ptr[GVariantDict]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GVariantIter(_ptr : Ptr[Ptr[GVariantIter]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_cleanup_GVariantType(_ptr : Ptr[Ptr[GVariantType]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GVfs(_ptr : Ptr[Ptr[GVfs]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GVolume(_ptr : Ptr[Ptr[GVolume]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GVolumeMonitor(_ptr : Ptr[Ptr[GVolumeMonitor]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GZlibCompressor(_ptr : Ptr[Ptr[GZlibCompressor]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_cleanup_GZlibDecompressor(_ptr : Ptr[Ptr[GZlibDecompressor]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_cleanup_GdkAppLaunchContext(_ptr : Ptr[Ptr[GdkAppLaunchContext]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_cleanup_GdkClipboard(_ptr : Ptr[Ptr[GdkClipboard]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_cleanup_GdkContentFormats(_ptr : Ptr[Ptr[GdkContentFormats]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_cleanup_GdkContentProvider(_ptr : Ptr[Ptr[GdkContentProvider]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_cleanup_GdkCursor(_ptr : Ptr[Ptr[GdkCursor]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_cleanup_GdkDevice(_ptr : Ptr[Ptr[GdkDevice]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_cleanup_GdkDisplay(_ptr : Ptr[Ptr[GdkDisplay]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_cleanup_GdkDisplayManager(_ptr : Ptr[Ptr[GdkDisplayManager]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_cleanup_GdkDrag(_ptr : Ptr[Ptr[GdkDrag]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdragsurface.h
  */
  def glib_autoptr_cleanup_GdkDragSurface(_ptr : Ptr[Ptr[GdkDragSurface]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_cleanup_GdkDrawContext(_ptr : Ptr[Ptr[GdkDrawContext]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrop.h
  */
  def glib_autoptr_cleanup_GdkDrop(_ptr : Ptr[Ptr[GdkDrop]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_cleanup_GdkEvent(_ptr : Ptr[Ptr[GdkEvent]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_cleanup_GdkFrameClock(_ptr : Ptr[Ptr[GdkFrameClock]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_cleanup_GdkFrameTimings(_ptr : Ptr[Ptr[GdkFrameTimings]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_cleanup_GdkGLContext(_ptr : Ptr[Ptr[GdkGLContext]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkgltexture.h
  */
  def glib_autoptr_cleanup_GdkGLTexture(_ptr : Ptr[Ptr[GdkGLTexture]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmemorytexture.h
  */
  def glib_autoptr_cleanup_GdkMemoryTexture(_ptr : Ptr[Ptr[GdkMemoryTexture]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_cleanup_GdkMonitor(_ptr : Ptr[Ptr[GdkMonitor]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
  */
  def glib_autoptr_cleanup_GdkPaintable(_ptr : Ptr[Ptr[GdkPaintable]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_autoptr_cleanup_GdkPixbuf(_ptr : Ptr[Ptr[GdkPixbuf]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_autoptr_cleanup_GdkPixbufAnimation(_ptr : Ptr[Ptr[GdkPixbufAnimation]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_autoptr_cleanup_GdkPixbufAnimationIter(_ptr : Ptr[Ptr[GdkPixbufAnimationIter]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_autoptr_cleanup_GdkPixbufLoader(_ptr : Ptr[Ptr[GdkPixbufLoader]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_autoptr_cleanup_GdkPixbufSimpleAnim(_ptr : Ptr[Ptr[GdkPixbufSimpleAnim]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopup.h
  */
  def glib_autoptr_cleanup_GdkPopup(_ptr : Ptr[Ptr[GdkPopup]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_cleanup_GdkPopupLayout(_ptr : Ptr[Ptr[GdkPopupLayout]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_cleanup_GdkRGBA(_ptr : Ptr[Ptr[GdkRGBA]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_cleanup_GdkSeat(_ptr : Ptr[Ptr[GdkSeat]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksnapshot.h
  */
  def glib_autoptr_cleanup_GdkSnapshot(_ptr : Ptr[Ptr[GdkSnapshot]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def glib_autoptr_cleanup_GdkSurface(_ptr : Ptr[Ptr[GdkSurface]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
  */
  def glib_autoptr_cleanup_GdkTexture(_ptr : Ptr[Ptr[GdkTexture]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def glib_autoptr_cleanup_GdkToplevel(_ptr : Ptr[Ptr[GdkToplevel]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_cleanup_GdkVulkanContext(_ptr : Ptr[Ptr[GdkVulkanContext]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def glib_autoptr_cleanup_GskGLShader(_ptr : Ptr[Ptr[GskGLShader]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def glib_autoptr_cleanup_GskGLShaderClass(_ptr : Ptr[Ptr[GskGLShaderClass]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsk-autocleanup.h
  */
  def glib_autoptr_cleanup_GskRenderNode(_ptr : Ptr[Ptr[GskRenderNode]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsk-autocleanup.h
  */
  def glib_autoptr_cleanup_GskRenderer(_ptr : Ptr[Ptr[GskRenderer]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsk-autocleanup.h
  */
  def glib_autoptr_cleanup_GskTransform(_ptr : Ptr[Ptr[GskTransform]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def glib_autoptr_cleanup_PangoAttrIterator(_ptr : Ptr[Ptr[PangoAttrIterator]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def glib_autoptr_cleanup_PangoAttrList(_ptr : Ptr[Ptr[PangoAttrList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def glib_autoptr_cleanup_PangoAttribute(_ptr : Ptr[Ptr[PangoAttribute]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-coverage.h
  */
  def glib_autoptr_cleanup_PangoCoverage(_ptr : Ptr[Ptr[PangoCoverage]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def glib_autoptr_cleanup_PangoFont(_ptr : Ptr[Ptr[PangoFont]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def glib_autoptr_cleanup_PangoFontDescription(_ptr : Ptr[Ptr[PangoFontDescription]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def glib_autoptr_cleanup_PangoFontFace(_ptr : Ptr[Ptr[PangoFontFace]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def glib_autoptr_cleanup_PangoFontFamily(_ptr : Ptr[Ptr[PangoFontFamily]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontmap.h
  */
  def glib_autoptr_cleanup_PangoFontMap(_ptr : Ptr[Ptr[PangoFontMap]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def glib_autoptr_cleanup_PangoLayout(_ptr : Ptr[Ptr[PangoLayout]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def glib_autoptr_cleanup_PangoLayoutIter(_ptr : Ptr[Ptr[PangoLayoutIter]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def glib_autoptr_cleanup_PangoTabArray(_ptr : Ptr[Ptr[PangoTabArray]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def glib_autoptr_clear_AdwActionRow(_ptr : Ptr[AdwActionRow]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def glib_autoptr_clear_AdwActionRowClass(_ptr : Ptr[AdwActionRowClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def glib_autoptr_clear_AdwAnimation(_ptr : Ptr[AdwAnimation]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def glib_autoptr_clear_AdwAnimationClass(_ptr : Ptr[AdwAnimationClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def glib_autoptr_clear_AdwAnimationTarget(_ptr : Ptr[AdwAnimationTarget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def glib_autoptr_clear_AdwAnimationTargetClass(_ptr : Ptr[AdwAnimationTargetClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
  */
  def glib_autoptr_clear_AdwApplication(_ptr : Ptr[AdwApplication]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
  */
  def glib_autoptr_clear_AdwApplicationClass(_ptr : Ptr[AdwApplicationClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
  */
  def glib_autoptr_clear_AdwApplicationWindow(_ptr : Ptr[AdwApplicationWindow]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
  */
  def glib_autoptr_clear_AdwApplicationWindowClass(_ptr : Ptr[AdwApplicationWindowClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def glib_autoptr_clear_AdwAvatar(_ptr : Ptr[AdwAvatar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def glib_autoptr_clear_AdwAvatarClass(_ptr : Ptr[AdwAvatarClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
  */
  def glib_autoptr_clear_AdwBin(_ptr : Ptr[AdwBin]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
  */
  def glib_autoptr_clear_AdwBinClass(_ptr : Ptr[AdwBinClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
  */
  def glib_autoptr_clear_AdwButtonContent(_ptr : Ptr[AdwButtonContent]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
  */
  def glib_autoptr_clear_AdwButtonContentClass(_ptr : Ptr[AdwButtonContentClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def glib_autoptr_clear_AdwCallbackAnimationTarget(_ptr : Ptr[AdwCallbackAnimationTarget]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def glib_autoptr_clear_AdwCallbackAnimationTargetClass(_ptr : Ptr[AdwCallbackAnimationTargetClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def glib_autoptr_clear_AdwCarousel(_ptr : Ptr[AdwCarousel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def glib_autoptr_clear_AdwCarouselClass(_ptr : Ptr[AdwCarouselClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-dots.h
  */
  def glib_autoptr_clear_AdwCarouselIndicatorDots(_ptr : Ptr[AdwCarouselIndicatorDots]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-dots.h
  */
  def glib_autoptr_clear_AdwCarouselIndicatorDotsClass(_ptr : Ptr[AdwCarouselIndicatorDotsClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-lines.h
  */
  def glib_autoptr_clear_AdwCarouselIndicatorLines(_ptr : Ptr[AdwCarouselIndicatorLines]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-lines.h
  */
  def glib_autoptr_clear_AdwCarouselIndicatorLinesClass(_ptr : Ptr[AdwCarouselIndicatorLinesClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
  */
  def glib_autoptr_clear_AdwClamp(_ptr : Ptr[AdwClamp]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
  */
  def glib_autoptr_clear_AdwClampClass(_ptr : Ptr[AdwClampClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
  */
  def glib_autoptr_clear_AdwClampLayout(_ptr : Ptr[AdwClampLayout]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
  */
  def glib_autoptr_clear_AdwClampLayoutClass(_ptr : Ptr[AdwClampLayoutClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
  */
  def glib_autoptr_clear_AdwClampScrollable(_ptr : Ptr[AdwClampScrollable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
  */
  def glib_autoptr_clear_AdwClampScrollableClass(_ptr : Ptr[AdwClampScrollableClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def glib_autoptr_clear_AdwComboRow(_ptr : Ptr[AdwComboRow]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def glib_autoptr_clear_AdwComboRowClass(_ptr : Ptr[AdwComboRowClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def glib_autoptr_clear_AdwEnumListItem(_ptr : Ptr[AdwEnumListItem]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def glib_autoptr_clear_AdwEnumListItemClass(_ptr : Ptr[AdwEnumListItemClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def glib_autoptr_clear_AdwEnumListModel(_ptr : Ptr[AdwEnumListModel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def glib_autoptr_clear_AdwEnumListModelClass(_ptr : Ptr[AdwEnumListModelClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def glib_autoptr_clear_AdwExpanderRow(_ptr : Ptr[AdwExpanderRow]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def glib_autoptr_clear_AdwExpanderRowClass(_ptr : Ptr[AdwExpanderRowClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def glib_autoptr_clear_AdwFlap(_ptr : Ptr[AdwFlap]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def glib_autoptr_clear_AdwFlapClass(_ptr : Ptr[AdwFlapClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def glib_autoptr_clear_AdwHeaderBar(_ptr : Ptr[AdwHeaderBar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def glib_autoptr_clear_AdwHeaderBarClass(_ptr : Ptr[AdwHeaderBarClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def glib_autoptr_clear_AdwLeaflet(_ptr : Ptr[AdwLeaflet]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def glib_autoptr_clear_AdwLeafletClass(_ptr : Ptr[AdwLeafletClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def glib_autoptr_clear_AdwLeafletPage(_ptr : Ptr[AdwLeafletPage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def glib_autoptr_clear_AdwLeafletPageClass(_ptr : Ptr[AdwLeafletPageClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def glib_autoptr_clear_AdwPreferencesGroup(_ptr : Ptr[AdwPreferencesGroup]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def glib_autoptr_clear_AdwPreferencesGroupClass(_ptr : Ptr[AdwPreferencesGroupClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def glib_autoptr_clear_AdwPreferencesPage(_ptr : Ptr[AdwPreferencesPage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def glib_autoptr_clear_AdwPreferencesPageClass(_ptr : Ptr[AdwPreferencesPageClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def glib_autoptr_clear_AdwPreferencesRow(_ptr : Ptr[AdwPreferencesRow]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def glib_autoptr_clear_AdwPreferencesRowClass(_ptr : Ptr[AdwPreferencesRowClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def glib_autoptr_clear_AdwPreferencesWindow(_ptr : Ptr[AdwPreferencesWindow]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def glib_autoptr_clear_AdwPreferencesWindowClass(_ptr : Ptr[AdwPreferencesWindowClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def glib_autoptr_clear_AdwSplitButton(_ptr : Ptr[AdwSplitButton]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def glib_autoptr_clear_AdwSplitButtonClass(_ptr : Ptr[AdwSplitButtonClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def glib_autoptr_clear_AdwSpringAnimation(_ptr : Ptr[AdwSpringAnimation]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def glib_autoptr_clear_AdwSpringAnimationClass(_ptr : Ptr[AdwSpringAnimationClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-params.h
  */
  def glib_autoptr_clear_AdwSpringParams(_ptr : Ptr[AdwSpringParams]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def glib_autoptr_clear_AdwSqueezer(_ptr : Ptr[AdwSqueezer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def glib_autoptr_clear_AdwSqueezerClass(_ptr : Ptr[AdwSqueezerClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def glib_autoptr_clear_AdwSqueezerPage(_ptr : Ptr[AdwSqueezerPage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def glib_autoptr_clear_AdwSqueezerPageClass(_ptr : Ptr[AdwSqueezerPageClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def glib_autoptr_clear_AdwStatusPage(_ptr : Ptr[AdwStatusPage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def glib_autoptr_clear_AdwStatusPageClass(_ptr : Ptr[AdwStatusPageClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def glib_autoptr_clear_AdwStyleManager(_ptr : Ptr[AdwStyleManager]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def glib_autoptr_clear_AdwStyleManagerClass(_ptr : Ptr[AdwStyleManagerClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def glib_autoptr_clear_AdwSwipeTracker(_ptr : Ptr[AdwSwipeTracker]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def glib_autoptr_clear_AdwSwipeTrackerClass(_ptr : Ptr[AdwSwipeTrackerClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipeable.h
  */
  def glib_autoptr_clear_AdwSwipeable(_ptr : Ptr[AdwSwipeable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def glib_autoptr_clear_AdwTabBar(_ptr : Ptr[AdwTabBar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def glib_autoptr_clear_AdwTabBarClass(_ptr : Ptr[AdwTabBarClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def glib_autoptr_clear_AdwTabPage(_ptr : Ptr[AdwTabPage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def glib_autoptr_clear_AdwTabPageClass(_ptr : Ptr[AdwTabPageClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def glib_autoptr_clear_AdwTabView(_ptr : Ptr[AdwTabView]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def glib_autoptr_clear_AdwTabViewClass(_ptr : Ptr[AdwTabViewClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def glib_autoptr_clear_AdwTimedAnimation(_ptr : Ptr[AdwTimedAnimation]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def glib_autoptr_clear_AdwTimedAnimationClass(_ptr : Ptr[AdwTimedAnimationClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def glib_autoptr_clear_AdwToast(_ptr : Ptr[AdwToast]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def glib_autoptr_clear_AdwToastClass(_ptr : Ptr[AdwToastClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast-overlay.h
  */
  def glib_autoptr_clear_AdwToastOverlay(_ptr : Ptr[AdwToastOverlay]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast-overlay.h
  */
  def glib_autoptr_clear_AdwToastOverlayClass(_ptr : Ptr[AdwToastOverlayClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def glib_autoptr_clear_AdwViewStack(_ptr : Ptr[AdwViewStack]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def glib_autoptr_clear_AdwViewStackClass(_ptr : Ptr[AdwViewStackClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def glib_autoptr_clear_AdwViewStackPage(_ptr : Ptr[AdwViewStackPage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def glib_autoptr_clear_AdwViewStackPageClass(_ptr : Ptr[AdwViewStackPageClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
  */
  def glib_autoptr_clear_AdwViewSwitcher(_ptr : Ptr[AdwViewSwitcher]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
  */
  def glib_autoptr_clear_AdwViewSwitcherBar(_ptr : Ptr[AdwViewSwitcherBar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
  */
  def glib_autoptr_clear_AdwViewSwitcherBarClass(_ptr : Ptr[AdwViewSwitcherBarClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
  */
  def glib_autoptr_clear_AdwViewSwitcherClass(_ptr : Ptr[AdwViewSwitcherClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def glib_autoptr_clear_AdwViewSwitcherTitle(_ptr : Ptr[AdwViewSwitcherTitle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def glib_autoptr_clear_AdwViewSwitcherTitleClass(_ptr : Ptr[AdwViewSwitcherTitleClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
  */
  def glib_autoptr_clear_AdwWindow(_ptr : Ptr[AdwWindow]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
  */
  def glib_autoptr_clear_AdwWindowClass(_ptr : Ptr[AdwWindowClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
  */
  def glib_autoptr_clear_AdwWindowTitle(_ptr : Ptr[AdwWindowTitle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
  */
  def glib_autoptr_clear_AdwWindowTitleClass(_ptr : Ptr[AdwWindowTitleClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GAction(_ptr : Ptr[GAction]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GActionMap(_ptr : Ptr[GActionMap]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GAppInfo(_ptr : Ptr[GAppInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GAppInfoMonitor(_ptr : Ptr[GAppInfoMonitor]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GAppLaunchContext(_ptr : Ptr[GAppLaunchContext]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GApplication(_ptr : Ptr[GApplication]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GApplicationCommandLine(_ptr : Ptr[GApplicationCommandLine]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GArray(_ptr : Ptr[GArray]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GAsyncInitable(_ptr : Ptr[GAsyncInitable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GAsyncQueue(_ptr : Ptr[GAsyncQueue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GAsyncResult(_ptr : Ptr[GAsyncResult]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GBookmarkFile(_ptr : Ptr[GBookmarkFile]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GBufferedInputStream(_ptr : Ptr[GBufferedInputStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GBufferedOutputStream(_ptr : Ptr[GBufferedOutputStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GByteArray(_ptr : Ptr[GByteArray]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GBytes(_ptr : Ptr[GBytes]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GBytesIcon(_ptr : Ptr[GBytesIcon]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GCancellable(_ptr : Ptr[GCancellable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GCharsetConverter(_ptr : Ptr[GCharsetConverter]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GChecksum(_ptr : Ptr[GChecksum]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_autoptr_clear_GClosure(_ptr : Ptr[GClosure]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GConverter(_ptr : Ptr[GConverter]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GConverterInputStream(_ptr : Ptr[GConverterInputStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GConverterOutputStream(_ptr : Ptr[GConverterOutputStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GCredentials(_ptr : Ptr[GCredentials]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDBusActionGroup(_ptr : Ptr[GDBusActionGroup]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDBusAuthObserver(_ptr : Ptr[GDBusAuthObserver]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDBusConnection(_ptr : Ptr[GDBusConnection]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDBusInterface(_ptr : Ptr[GDBusInterface]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDBusInterfaceSkeleton(_ptr : Ptr[GDBusInterfaceSkeleton]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDBusMenuModel(_ptr : Ptr[GDBusMenuModel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDBusMessage(_ptr : Ptr[GDBusMessage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDBusMethodInvocation(_ptr : Ptr[GDBusMethodInvocation]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDBusNodeInfo(_ptr : Ptr[GDBusNodeInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDBusObject(_ptr : Ptr[GDBusObject]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDBusObjectManager(_ptr : Ptr[GDBusObjectManager]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDBusObjectManagerClient(_ptr : Ptr[GDBusObjectManagerClient]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDBusObjectManagerServer(_ptr : Ptr[GDBusObjectManagerServer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDBusObjectProxy(_ptr : Ptr[GDBusObjectProxy]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDBusObjectSkeleton(_ptr : Ptr[GDBusObjectSkeleton]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDBusProxy(_ptr : Ptr[GDBusProxy]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDBusServer(_ptr : Ptr[GDBusServer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDataInputStream(_ptr : Ptr[GDataInputStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDataOutputStream(_ptr : Ptr[GDataOutputStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDatagramBased(_ptr : Ptr[GDatagramBased]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GDate(_ptr : Ptr[GDate]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GDateTime(_ptr : Ptr[GDateTime]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontroller.h
  */
  def glib_autoptr_clear_GDebugController(_ptr : Ptr[GDebugController]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
  */
  def glib_autoptr_clear_GDebugControllerDBus(_ptr : Ptr[GDebugControllerDBus]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
  */
  def glib_autoptr_clear_GDebugControllerDBusClass(_ptr : Ptr[GDebugControllerDBusClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GDir(_ptr : Ptr[GDir]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GDrive(_ptr : Ptr[GDrive]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GEmblem(_ptr : Ptr[GEmblem]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GEmblemedIcon(_ptr : Ptr[GEmblemedIcon]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_autoptr_clear_GEnumClass(_ptr : Ptr[GEnumClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GError(_ptr : Ptr[GError]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GFile(_ptr : Ptr[GFile]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GFileAttributeInfoList(_ptr : Ptr[GFileAttributeInfoList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GFileEnumerator(_ptr : Ptr[GFileEnumerator]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GFileIOStream(_ptr : Ptr[GFileIOStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GFileIcon(_ptr : Ptr[GFileIcon]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GFileInfo(_ptr : Ptr[GFileInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GFileInputStream(_ptr : Ptr[GFileInputStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GFileMonitor(_ptr : Ptr[GFileMonitor]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GFileOutputStream(_ptr : Ptr[GFileOutputStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GFilenameCompleter(_ptr : Ptr[GFilenameCompleter]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GFilterInputStream(_ptr : Ptr[GFilterInputStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GFilterOutputStream(_ptr : Ptr[GFilterOutputStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_autoptr_clear_GFlagsClass(_ptr : Ptr[GFlagsClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GHashTable(_ptr : Ptr[GHashTable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GHmac(_ptr : Ptr[GHmac]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GIOChannel(_ptr : Ptr[GIOChannel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GIOModule(_ptr : Ptr[GIOModule]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GIOStream(_ptr : Ptr[GIOStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GIcon(_ptr : Ptr[GIcon]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GInetAddress(_ptr : Ptr[GInetAddress]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GInetAddressMask(_ptr : Ptr[GInetAddressMask]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GInetSocketAddress(_ptr : Ptr[GInetSocketAddress]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GInitable(_ptr : Ptr[GInitable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_autoptr_clear_GInitiallyUnowned(_ptr : Ptr[GInitiallyUnowned]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GInputStream(_ptr : Ptr[GInputStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GKeyFile(_ptr : Ptr[GKeyFile]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GList(_ptr : Ptr[GList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/glistmodel.h
  */
  def glib_autoptr_clear_GListModel(_ptr : Ptr[GListModel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def glib_autoptr_clear_GListStore(_ptr : Ptr[GListStore]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def glib_autoptr_clear_GListStoreClass(_ptr : Ptr[GListStoreClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GLoadableIcon(_ptr : Ptr[GLoadableIcon]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GMainContext(_ptr : Ptr[GMainContext]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GMainContextPusher(_ptr : Ptr[GMainContextPusher]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GMainLoop(_ptr : Ptr[GMainLoop]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GMappedFile(_ptr : Ptr[GMappedFile]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GMarkupParseContext(_ptr : Ptr[GMarkupParseContext]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GMatchInfo(_ptr : Ptr[GMatchInfo]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GMemoryInputStream(_ptr : Ptr[GMemoryInputStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemorymonitor.h
  */
  def glib_autoptr_clear_GMemoryMonitor(_ptr : Ptr[GMemoryMonitor]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GMemoryOutputStream(_ptr : Ptr[GMemoryOutputStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GMenu(_ptr : Ptr[GMenu]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GMenuAttributeIter(_ptr : Ptr[GMenuAttributeIter]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GMenuItem(_ptr : Ptr[GMenuItem]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GMenuLinkIter(_ptr : Ptr[GMenuLinkIter]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GMenuModel(_ptr : Ptr[GMenuModel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GMount(_ptr : Ptr[GMount]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GMountOperation(_ptr : Ptr[GMountOperation]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GMutexLocker(_ptr : Ptr[GMutexLocker]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GNativeVolumeMonitor(_ptr : Ptr[GNativeVolumeMonitor]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GNetworkAddress(_ptr : Ptr[GNetworkAddress]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GNetworkMonitor(_ptr : Ptr[GNetworkMonitor]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GNetworkService(_ptr : Ptr[GNetworkService]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GNode(_ptr : Ptr[GNode]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GNotification(_ptr : Ptr[GNotification]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_autoptr_clear_GObject(_ptr : Ptr[GObject]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GOptionContext(_ptr : Ptr[GOptionContext]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GOptionGroup(_ptr : Ptr[GOptionGroup]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GOutputStream(_ptr : Ptr[GOutputStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_autoptr_clear_GParamSpec(_ptr : Ptr[GParamSpec]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GPatternSpec(_ptr : Ptr[GPatternSpec]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GPermission(_ptr : Ptr[GPermission]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GPollableInputStream(_ptr : Ptr[GPollableInputStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GPollableOutputStream(_ptr : Ptr[GPollableOutputStream]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpowerprofilemonitor.h
  */
  def glib_autoptr_clear_GPowerProfileMonitor(_ptr : Ptr[GPowerProfileMonitor]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GPropertyAction(_ptr : Ptr[GPropertyAction]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GProxy(_ptr : Ptr[GProxy]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GProxyAddress(_ptr : Ptr[GProxyAddress]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GProxyAddressEnumerator(_ptr : Ptr[GProxyAddressEnumerator]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GProxyResolver(_ptr : Ptr[GProxyResolver]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GPtrArray(_ptr : Ptr[GPtrArray]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GQueue(_ptr : Ptr[GQueue]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GRWLockReaderLocker(_ptr : Ptr[GRWLockReaderLocker]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GRWLockWriterLocker(_ptr : Ptr[GRWLockWriterLocker]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GRand(_ptr : Ptr[GRand]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GRecMutexLocker(_ptr : Ptr[GRecMutexLocker]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GRefString(_ptr : Ptr[GRefString]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GRegex(_ptr : Ptr[GRegex]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GRemoteActionGroup(_ptr : Ptr[GRemoteActionGroup]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GResolver(_ptr : Ptr[GResolver]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GResource(_ptr : Ptr[GResource]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GSList(_ptr : Ptr[GSList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GScanner(_ptr : Ptr[GScanner]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSeekable(_ptr : Ptr[GSeekable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GSequence(_ptr : Ptr[GSequence]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSettings(_ptr : Ptr[GSettings]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSettingsBackend(_ptr : Ptr[GSettingsBackend]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSettingsSchema(_ptr : Ptr[GSettingsSchema]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSettingsSchemaKey(_ptr : Ptr[GSettingsSchemaKey]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSettingsSchemaSource(_ptr : Ptr[GSettingsSchemaSource]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSimpleAction(_ptr : Ptr[GSimpleAction]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSimpleActionGroup(_ptr : Ptr[GSimpleActionGroup]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSimpleAsyncResult(_ptr : Ptr[GSimpleAsyncResult]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSimplePermission(_ptr : Ptr[GSimplePermission]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSimpleProxyResolver(_ptr : Ptr[GSimpleProxyResolver]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSocket(_ptr : Ptr[GSocket]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSocketAddress(_ptr : Ptr[GSocketAddress]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSocketAddressEnumerator(_ptr : Ptr[GSocketAddressEnumerator]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSocketClient(_ptr : Ptr[GSocketClient]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSocketConnectable(_ptr : Ptr[GSocketConnectable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSocketConnection(_ptr : Ptr[GSocketConnection]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSocketControlMessage(_ptr : Ptr[GSocketControlMessage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSocketListener(_ptr : Ptr[GSocketListener]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSocketService(_ptr : Ptr[GSocketService]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GSource(_ptr : Ptr[GSource]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GString(_ptr : Ptr[GString]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GStringChunk(_ptr : Ptr[GStringChunk]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GStrvBuilder(_ptr : Ptr[GStrvBuilder]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSubprocess(_ptr : Ptr[GSubprocess]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GSubprocessLauncher(_ptr : Ptr[GSubprocessLauncher]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GTask(_ptr : Ptr[GTask]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GTcpConnection(_ptr : Ptr[GTcpConnection]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GTcpWrapperConnection(_ptr : Ptr[GTcpWrapperConnection]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GTestDBus(_ptr : Ptr[GTestDBus]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GThemedIcon(_ptr : Ptr[GThemedIcon]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GThread(_ptr : Ptr[GThread]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GThreadedSocketService(_ptr : Ptr[GThreadedSocketService]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GTimeZone(_ptr : Ptr[GTimeZone]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GTimer(_ptr : Ptr[GTimer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GTlsBackend(_ptr : Ptr[GTlsBackend]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GTlsCertificate(_ptr : Ptr[GTlsCertificate]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GTlsClientConnection(_ptr : Ptr[GTlsClientConnection]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GTlsConnection(_ptr : Ptr[GTlsConnection]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GTlsDatabase(_ptr : Ptr[GTlsDatabase]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GTlsFileDatabase(_ptr : Ptr[GTlsFileDatabase]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GTlsInteraction(_ptr : Ptr[GTlsInteraction]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GTlsPassword(_ptr : Ptr[GTlsPassword]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GTlsServerConnection(_ptr : Ptr[GTlsServerConnection]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GTree(_ptr : Ptr[GTree]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_autoptr_clear_GTypeClass(_ptr : Ptr[GTypeClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtypemodule.h
  */
  def glib_autoptr_clear_GTypeModule(_ptr : Ptr[GTypeModule]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GUri(_ptr : Ptr[GUri]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GVariant(_ptr : Ptr[GVariant]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GVariantBuilder(_ptr : Ptr[GVariantBuilder]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GVariantDict(_ptr : Ptr[GVariantDict]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GVariantIter(_ptr : Ptr[GVariantIter]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_autoptr_clear_GVariantType(_ptr : Ptr[GVariantType]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GVfs(_ptr : Ptr[GVfs]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GVolume(_ptr : Ptr[GVolume]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GVolumeMonitor(_ptr : Ptr[GVolumeMonitor]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GZlibCompressor(_ptr : Ptr[GZlibCompressor]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_autoptr_clear_GZlibDecompressor(_ptr : Ptr[GZlibDecompressor]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_clear_GdkAppLaunchContext(_ptr : Ptr[GdkAppLaunchContext]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_clear_GdkClipboard(_ptr : Ptr[GdkClipboard]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_clear_GdkContentFormats(_ptr : Ptr[GdkContentFormats]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_clear_GdkContentProvider(_ptr : Ptr[GdkContentProvider]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_clear_GdkCursor(_ptr : Ptr[GdkCursor]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_clear_GdkDevice(_ptr : Ptr[GdkDevice]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_clear_GdkDisplay(_ptr : Ptr[GdkDisplay]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_clear_GdkDisplayManager(_ptr : Ptr[GdkDisplayManager]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_clear_GdkDrag(_ptr : Ptr[GdkDrag]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdragsurface.h
  */
  def glib_autoptr_clear_GdkDragSurface(_ptr : Ptr[GdkDragSurface]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_clear_GdkDrawContext(_ptr : Ptr[GdkDrawContext]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrop.h
  */
  def glib_autoptr_clear_GdkDrop(_ptr : Ptr[GdkDrop]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_clear_GdkEvent(_ptr : Ptr[GdkEvent]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_clear_GdkFrameClock(_ptr : Ptr[GdkFrameClock]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_clear_GdkFrameTimings(_ptr : Ptr[GdkFrameTimings]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_clear_GdkGLContext(_ptr : Ptr[GdkGLContext]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkgltexture.h
  */
  def glib_autoptr_clear_GdkGLTexture(_ptr : Ptr[GdkGLTexture]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmemorytexture.h
  */
  def glib_autoptr_clear_GdkMemoryTexture(_ptr : Ptr[GdkMemoryTexture]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_clear_GdkMonitor(_ptr : Ptr[GdkMonitor]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
  */
  def glib_autoptr_clear_GdkPaintable(_ptr : Ptr[GdkPaintable]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_autoptr_clear_GdkPixbuf(_ptr : Ptr[GdkPixbuf]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_autoptr_clear_GdkPixbufAnimation(_ptr : Ptr[GdkPixbufAnimation]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_autoptr_clear_GdkPixbufAnimationIter(_ptr : Ptr[GdkPixbufAnimationIter]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_autoptr_clear_GdkPixbufLoader(_ptr : Ptr[GdkPixbufLoader]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_autoptr_clear_GdkPixbufSimpleAnim(_ptr : Ptr[GdkPixbufSimpleAnim]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopup.h
  */
  def glib_autoptr_clear_GdkPopup(_ptr : Ptr[GdkPopup]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_clear_GdkPopupLayout(_ptr : Ptr[GdkPopupLayout]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_clear_GdkRGBA(_ptr : Ptr[GdkRGBA]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_clear_GdkSeat(_ptr : Ptr[GdkSeat]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksnapshot.h
  */
  def glib_autoptr_clear_GdkSnapshot(_ptr : Ptr[GdkSnapshot]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def glib_autoptr_clear_GdkSurface(_ptr : Ptr[GdkSurface]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
  */
  def glib_autoptr_clear_GdkTexture(_ptr : Ptr[GdkTexture]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def glib_autoptr_clear_GdkToplevel(_ptr : Ptr[GdkToplevel]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_autoptr_clear_GdkVulkanContext(_ptr : Ptr[GdkVulkanContext]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def glib_autoptr_clear_GskGLShader(_ptr : Ptr[GskGLShader]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def glib_autoptr_clear_GskGLShaderClass(_ptr : Ptr[GskGLShaderClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsk-autocleanup.h
  */
  def glib_autoptr_clear_GskRenderNode(_ptr : Ptr[GskRenderNode]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsk-autocleanup.h
  */
  def glib_autoptr_clear_GskRenderer(_ptr : Ptr[GskRenderer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsk-autocleanup.h
  */
  def glib_autoptr_clear_GskTransform(_ptr : Ptr[GskTransform]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def glib_autoptr_clear_PangoAttrIterator(_ptr : Ptr[PangoAttrIterator]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def glib_autoptr_clear_PangoAttrList(_ptr : Ptr[PangoAttrList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def glib_autoptr_clear_PangoAttribute(_ptr : Ptr[PangoAttribute]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-coverage.h
  */
  def glib_autoptr_clear_PangoCoverage(_ptr : Ptr[PangoCoverage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def glib_autoptr_clear_PangoFont(_ptr : Ptr[PangoFont]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def glib_autoptr_clear_PangoFontDescription(_ptr : Ptr[PangoFontDescription]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def glib_autoptr_clear_PangoFontFace(_ptr : Ptr[PangoFontFace]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def glib_autoptr_clear_PangoFontFamily(_ptr : Ptr[PangoFontFamily]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontmap.h
  */
  def glib_autoptr_clear_PangoFontMap(_ptr : Ptr[PangoFontMap]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def glib_autoptr_clear_PangoLayout(_ptr : Ptr[PangoLayout]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def glib_autoptr_clear_PangoLayoutIter(_ptr : Ptr[PangoLayoutIter]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def glib_autoptr_clear_PangoTabArray(_ptr : Ptr[PangoTabArray]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/gversion.h
  */
  def glib_check_version(required_major : guint, required_minor : guint, required_micro : guint): Ptr[gchar] = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def glib_listautoptr_cleanup_AdwActionRow(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def glib_listautoptr_cleanup_AdwActionRowClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def glib_listautoptr_cleanup_AdwAnimation(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def glib_listautoptr_cleanup_AdwAnimationClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def glib_listautoptr_cleanup_AdwAnimationTarget(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def glib_listautoptr_cleanup_AdwAnimationTargetClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
  */
  def glib_listautoptr_cleanup_AdwApplication(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
  */
  def glib_listautoptr_cleanup_AdwApplicationClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
  */
  def glib_listautoptr_cleanup_AdwApplicationWindow(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
  */
  def glib_listautoptr_cleanup_AdwApplicationWindowClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def glib_listautoptr_cleanup_AdwAvatar(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def glib_listautoptr_cleanup_AdwAvatarClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
  */
  def glib_listautoptr_cleanup_AdwBin(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
  */
  def glib_listautoptr_cleanup_AdwBinClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
  */
  def glib_listautoptr_cleanup_AdwButtonContent(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
  */
  def glib_listautoptr_cleanup_AdwButtonContentClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def glib_listautoptr_cleanup_AdwCallbackAnimationTarget(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def glib_listautoptr_cleanup_AdwCallbackAnimationTargetClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def glib_listautoptr_cleanup_AdwCarousel(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def glib_listautoptr_cleanup_AdwCarouselClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-dots.h
  */
  def glib_listautoptr_cleanup_AdwCarouselIndicatorDots(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-dots.h
  */
  def glib_listautoptr_cleanup_AdwCarouselIndicatorDotsClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-lines.h
  */
  def glib_listautoptr_cleanup_AdwCarouselIndicatorLines(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-lines.h
  */
  def glib_listautoptr_cleanup_AdwCarouselIndicatorLinesClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
  */
  def glib_listautoptr_cleanup_AdwClamp(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
  */
  def glib_listautoptr_cleanup_AdwClampClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
  */
  def glib_listautoptr_cleanup_AdwClampLayout(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
  */
  def glib_listautoptr_cleanup_AdwClampLayoutClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
  */
  def glib_listautoptr_cleanup_AdwClampScrollable(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
  */
  def glib_listautoptr_cleanup_AdwClampScrollableClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def glib_listautoptr_cleanup_AdwComboRow(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def glib_listautoptr_cleanup_AdwComboRowClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def glib_listautoptr_cleanup_AdwEnumListItem(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def glib_listautoptr_cleanup_AdwEnumListItemClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def glib_listautoptr_cleanup_AdwEnumListModel(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def glib_listautoptr_cleanup_AdwEnumListModelClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def glib_listautoptr_cleanup_AdwExpanderRow(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def glib_listautoptr_cleanup_AdwExpanderRowClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def glib_listautoptr_cleanup_AdwFlap(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def glib_listautoptr_cleanup_AdwFlapClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def glib_listautoptr_cleanup_AdwHeaderBar(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def glib_listautoptr_cleanup_AdwHeaderBarClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def glib_listautoptr_cleanup_AdwLeaflet(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def glib_listautoptr_cleanup_AdwLeafletClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def glib_listautoptr_cleanup_AdwLeafletPage(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def glib_listautoptr_cleanup_AdwLeafletPageClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def glib_listautoptr_cleanup_AdwPreferencesGroup(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def glib_listautoptr_cleanup_AdwPreferencesGroupClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def glib_listautoptr_cleanup_AdwPreferencesPage(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def glib_listautoptr_cleanup_AdwPreferencesPageClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def glib_listautoptr_cleanup_AdwPreferencesRow(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def glib_listautoptr_cleanup_AdwPreferencesRowClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def glib_listautoptr_cleanup_AdwPreferencesWindow(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def glib_listautoptr_cleanup_AdwPreferencesWindowClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def glib_listautoptr_cleanup_AdwSplitButton(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def glib_listautoptr_cleanup_AdwSplitButtonClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def glib_listautoptr_cleanup_AdwSpringAnimation(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def glib_listautoptr_cleanup_AdwSpringAnimationClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-params.h
  */
  def glib_listautoptr_cleanup_AdwSpringParams(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def glib_listautoptr_cleanup_AdwSqueezer(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def glib_listautoptr_cleanup_AdwSqueezerClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def glib_listautoptr_cleanup_AdwSqueezerPage(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def glib_listautoptr_cleanup_AdwSqueezerPageClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def glib_listautoptr_cleanup_AdwStatusPage(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def glib_listautoptr_cleanup_AdwStatusPageClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def glib_listautoptr_cleanup_AdwStyleManager(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def glib_listautoptr_cleanup_AdwStyleManagerClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def glib_listautoptr_cleanup_AdwSwipeTracker(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def glib_listautoptr_cleanup_AdwSwipeTrackerClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipeable.h
  */
  def glib_listautoptr_cleanup_AdwSwipeable(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def glib_listautoptr_cleanup_AdwTabBar(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def glib_listautoptr_cleanup_AdwTabBarClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def glib_listautoptr_cleanup_AdwTabPage(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def glib_listautoptr_cleanup_AdwTabPageClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def glib_listautoptr_cleanup_AdwTabView(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def glib_listautoptr_cleanup_AdwTabViewClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def glib_listautoptr_cleanup_AdwTimedAnimation(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def glib_listautoptr_cleanup_AdwTimedAnimationClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def glib_listautoptr_cleanup_AdwToast(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def glib_listautoptr_cleanup_AdwToastClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast-overlay.h
  */
  def glib_listautoptr_cleanup_AdwToastOverlay(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast-overlay.h
  */
  def glib_listautoptr_cleanup_AdwToastOverlayClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def glib_listautoptr_cleanup_AdwViewStack(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def glib_listautoptr_cleanup_AdwViewStackClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def glib_listautoptr_cleanup_AdwViewStackPage(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def glib_listautoptr_cleanup_AdwViewStackPageClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
  */
  def glib_listautoptr_cleanup_AdwViewSwitcher(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
  */
  def glib_listautoptr_cleanup_AdwViewSwitcherBar(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
  */
  def glib_listautoptr_cleanup_AdwViewSwitcherBarClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
  */
  def glib_listautoptr_cleanup_AdwViewSwitcherClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def glib_listautoptr_cleanup_AdwViewSwitcherTitle(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def glib_listautoptr_cleanup_AdwViewSwitcherTitleClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
  */
  def glib_listautoptr_cleanup_AdwWindow(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
  */
  def glib_listautoptr_cleanup_AdwWindowClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
  */
  def glib_listautoptr_cleanup_AdwWindowTitle(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
  */
  def glib_listautoptr_cleanup_AdwWindowTitleClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GAction(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GActionMap(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GAppInfo(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GAppInfoMonitor(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GAppLaunchContext(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GApplication(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GApplicationCommandLine(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GArray(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GAsyncInitable(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GAsyncQueue(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GAsyncResult(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GBookmarkFile(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GBufferedInputStream(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GBufferedOutputStream(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GByteArray(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GBytes(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GBytesIcon(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GCancellable(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GCharsetConverter(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GChecksum(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_listautoptr_cleanup_GClosure(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GConverter(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GConverterInputStream(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GConverterOutputStream(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GCredentials(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDBusActionGroup(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDBusAuthObserver(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDBusConnection(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDBusInterface(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDBusInterfaceSkeleton(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDBusMenuModel(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDBusMessage(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDBusMethodInvocation(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDBusNodeInfo(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDBusObject(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDBusObjectManager(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDBusObjectManagerClient(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDBusObjectManagerServer(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDBusObjectProxy(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDBusObjectSkeleton(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDBusProxy(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDBusServer(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDataInputStream(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDataOutputStream(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDatagramBased(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDate(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDateTime(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontroller.h
  */
  def glib_listautoptr_cleanup_GDebugController(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
  */
  def glib_listautoptr_cleanup_GDebugControllerDBus(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
  */
  def glib_listautoptr_cleanup_GDebugControllerDBusClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDir(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GDrive(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GEmblem(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GEmblemedIcon(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_listautoptr_cleanup_GEnumClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GError(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GFile(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GFileAttributeInfoList(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GFileEnumerator(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GFileIOStream(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GFileIcon(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GFileInfo(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GFileInputStream(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GFileMonitor(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GFileOutputStream(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GFilenameCompleter(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GFilterInputStream(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GFilterOutputStream(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_listautoptr_cleanup_GFlagsClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GHashTable(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GHmac(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GIOChannel(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GIOModule(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GIOStream(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GIcon(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GInetAddress(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GInetAddressMask(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GInetSocketAddress(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GInitable(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_listautoptr_cleanup_GInitiallyUnowned(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GInputStream(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GKeyFile(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GList(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/glistmodel.h
  */
  def glib_listautoptr_cleanup_GListModel(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def glib_listautoptr_cleanup_GListStore(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def glib_listautoptr_cleanup_GListStoreClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GLoadableIcon(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GMainContext(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GMainContextPusher(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GMainLoop(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GMappedFile(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GMarkupParseContext(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GMatchInfo(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GMemoryInputStream(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemorymonitor.h
  */
  def glib_listautoptr_cleanup_GMemoryMonitor(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GMemoryOutputStream(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GMenu(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GMenuAttributeIter(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GMenuItem(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GMenuLinkIter(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GMenuModel(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GMount(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GMountOperation(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GMutexLocker(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GNativeVolumeMonitor(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GNetworkAddress(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GNetworkMonitor(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GNetworkService(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GNode(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GNotification(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_listautoptr_cleanup_GObject(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GOptionContext(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GOptionGroup(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GOutputStream(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_listautoptr_cleanup_GParamSpec(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GPatternSpec(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GPermission(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GPollableInputStream(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GPollableOutputStream(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpowerprofilemonitor.h
  */
  def glib_listautoptr_cleanup_GPowerProfileMonitor(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GPropertyAction(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GProxy(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GProxyAddress(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GProxyAddressEnumerator(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GProxyResolver(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GPtrArray(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GQueue(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GRWLockReaderLocker(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GRWLockWriterLocker(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GRand(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GRecMutexLocker(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GRefString(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GRegex(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GRemoteActionGroup(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GResolver(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GResource(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSList(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GScanner(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSeekable(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSequence(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSettings(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSettingsBackend(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSettingsSchema(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSettingsSchemaKey(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSettingsSchemaSource(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSimpleAction(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSimpleActionGroup(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSimpleAsyncResult(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSimplePermission(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSimpleProxyResolver(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSocket(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSocketAddress(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSocketAddressEnumerator(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSocketClient(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSocketConnectable(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSocketConnection(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSocketControlMessage(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSocketListener(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSocketService(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSource(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GString(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GStringChunk(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GStrvBuilder(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSubprocess(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GSubprocessLauncher(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GTask(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GTcpConnection(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GTcpWrapperConnection(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GTestDBus(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GThemedIcon(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GThread(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GThreadedSocketService(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GTimeZone(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GTimer(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GTlsBackend(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GTlsCertificate(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GTlsClientConnection(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GTlsConnection(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GTlsDatabase(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GTlsFileDatabase(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GTlsInteraction(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GTlsPassword(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GTlsServerConnection(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GTree(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_listautoptr_cleanup_GTypeClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtypemodule.h
  */
  def glib_listautoptr_cleanup_GTypeModule(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GUri(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GVariant(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GVariantBuilder(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GVariantDict(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GVariantIter(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_listautoptr_cleanup_GVariantType(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GVfs(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GVolume(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GVolumeMonitor(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GZlibCompressor(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_listautoptr_cleanup_GZlibDecompressor(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GdkAppLaunchContext(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GdkClipboard(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GdkContentFormats(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GdkContentProvider(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GdkCursor(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GdkDevice(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GdkDisplay(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GdkDisplayManager(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GdkDrag(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdragsurface.h
  */
  def glib_listautoptr_cleanup_GdkDragSurface(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GdkDrawContext(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrop.h
  */
  def glib_listautoptr_cleanup_GdkDrop(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GdkEvent(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GdkFrameClock(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GdkFrameTimings(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GdkGLContext(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkgltexture.h
  */
  def glib_listautoptr_cleanup_GdkGLTexture(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmemorytexture.h
  */
  def glib_listautoptr_cleanup_GdkMemoryTexture(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GdkMonitor(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
  */
  def glib_listautoptr_cleanup_GdkPaintable(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_listautoptr_cleanup_GdkPixbuf(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_listautoptr_cleanup_GdkPixbufAnimation(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_listautoptr_cleanup_GdkPixbufAnimationIter(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_listautoptr_cleanup_GdkPixbufLoader(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_listautoptr_cleanup_GdkPixbufSimpleAnim(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopup.h
  */
  def glib_listautoptr_cleanup_GdkPopup(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GdkPopupLayout(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GdkRGBA(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GdkSeat(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksnapshot.h
  */
  def glib_listautoptr_cleanup_GdkSnapshot(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def glib_listautoptr_cleanup_GdkSurface(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
  */
  def glib_listautoptr_cleanup_GdkTexture(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def glib_listautoptr_cleanup_GdkToplevel(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GdkVulkanContext(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def glib_listautoptr_cleanup_GskGLShader(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def glib_listautoptr_cleanup_GskGLShaderClass(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GskRenderNode(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GskRenderer(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsk-autocleanup.h
  */
  def glib_listautoptr_cleanup_GskTransform(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def glib_listautoptr_cleanup_PangoAttrIterator(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def glib_listautoptr_cleanup_PangoAttrList(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def glib_listautoptr_cleanup_PangoAttribute(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-coverage.h
  */
  def glib_listautoptr_cleanup_PangoCoverage(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def glib_listautoptr_cleanup_PangoFont(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def glib_listautoptr_cleanup_PangoFontDescription(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def glib_listautoptr_cleanup_PangoFontFace(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def glib_listautoptr_cleanup_PangoFontFamily(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontmap.h
  */
  def glib_listautoptr_cleanup_PangoFontMap(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def glib_listautoptr_cleanup_PangoLayout(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def glib_listautoptr_cleanup_PangoLayoutIter(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def glib_listautoptr_cleanup_PangoTabArray(_l : Ptr[Ptr[GList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def glib_queueautoptr_cleanup_AdwActionRow(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def glib_queueautoptr_cleanup_AdwActionRowClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def glib_queueautoptr_cleanup_AdwAnimation(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def glib_queueautoptr_cleanup_AdwAnimationClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def glib_queueautoptr_cleanup_AdwAnimationTarget(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def glib_queueautoptr_cleanup_AdwAnimationTargetClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
  */
  def glib_queueautoptr_cleanup_AdwApplication(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
  */
  def glib_queueautoptr_cleanup_AdwApplicationClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
  */
  def glib_queueautoptr_cleanup_AdwApplicationWindow(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
  */
  def glib_queueautoptr_cleanup_AdwApplicationWindowClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def glib_queueautoptr_cleanup_AdwAvatar(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def glib_queueautoptr_cleanup_AdwAvatarClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
  */
  def glib_queueautoptr_cleanup_AdwBin(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
  */
  def glib_queueautoptr_cleanup_AdwBinClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
  */
  def glib_queueautoptr_cleanup_AdwButtonContent(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
  */
  def glib_queueautoptr_cleanup_AdwButtonContentClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def glib_queueautoptr_cleanup_AdwCallbackAnimationTarget(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def glib_queueautoptr_cleanup_AdwCallbackAnimationTargetClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def glib_queueautoptr_cleanup_AdwCarousel(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def glib_queueautoptr_cleanup_AdwCarouselClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-dots.h
  */
  def glib_queueautoptr_cleanup_AdwCarouselIndicatorDots(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-dots.h
  */
  def glib_queueautoptr_cleanup_AdwCarouselIndicatorDotsClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-lines.h
  */
  def glib_queueautoptr_cleanup_AdwCarouselIndicatorLines(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-lines.h
  */
  def glib_queueautoptr_cleanup_AdwCarouselIndicatorLinesClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
  */
  def glib_queueautoptr_cleanup_AdwClamp(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
  */
  def glib_queueautoptr_cleanup_AdwClampClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
  */
  def glib_queueautoptr_cleanup_AdwClampLayout(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
  */
  def glib_queueautoptr_cleanup_AdwClampLayoutClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
  */
  def glib_queueautoptr_cleanup_AdwClampScrollable(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
  */
  def glib_queueautoptr_cleanup_AdwClampScrollableClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def glib_queueautoptr_cleanup_AdwComboRow(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def glib_queueautoptr_cleanup_AdwComboRowClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def glib_queueautoptr_cleanup_AdwEnumListItem(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def glib_queueautoptr_cleanup_AdwEnumListItemClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def glib_queueautoptr_cleanup_AdwEnumListModel(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def glib_queueautoptr_cleanup_AdwEnumListModelClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def glib_queueautoptr_cleanup_AdwExpanderRow(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def glib_queueautoptr_cleanup_AdwExpanderRowClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def glib_queueautoptr_cleanup_AdwFlap(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def glib_queueautoptr_cleanup_AdwFlapClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def glib_queueautoptr_cleanup_AdwHeaderBar(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def glib_queueautoptr_cleanup_AdwHeaderBarClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def glib_queueautoptr_cleanup_AdwLeaflet(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def glib_queueautoptr_cleanup_AdwLeafletClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def glib_queueautoptr_cleanup_AdwLeafletPage(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def glib_queueautoptr_cleanup_AdwLeafletPageClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def glib_queueautoptr_cleanup_AdwPreferencesGroup(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def glib_queueautoptr_cleanup_AdwPreferencesGroupClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def glib_queueautoptr_cleanup_AdwPreferencesPage(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def glib_queueautoptr_cleanup_AdwPreferencesPageClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def glib_queueautoptr_cleanup_AdwPreferencesRow(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def glib_queueautoptr_cleanup_AdwPreferencesRowClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def glib_queueautoptr_cleanup_AdwPreferencesWindow(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def glib_queueautoptr_cleanup_AdwPreferencesWindowClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def glib_queueautoptr_cleanup_AdwSplitButton(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def glib_queueautoptr_cleanup_AdwSplitButtonClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def glib_queueautoptr_cleanup_AdwSpringAnimation(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def glib_queueautoptr_cleanup_AdwSpringAnimationClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-params.h
  */
  def glib_queueautoptr_cleanup_AdwSpringParams(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def glib_queueautoptr_cleanup_AdwSqueezer(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def glib_queueautoptr_cleanup_AdwSqueezerClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def glib_queueautoptr_cleanup_AdwSqueezerPage(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def glib_queueautoptr_cleanup_AdwSqueezerPageClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def glib_queueautoptr_cleanup_AdwStatusPage(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def glib_queueautoptr_cleanup_AdwStatusPageClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def glib_queueautoptr_cleanup_AdwStyleManager(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def glib_queueautoptr_cleanup_AdwStyleManagerClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def glib_queueautoptr_cleanup_AdwSwipeTracker(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def glib_queueautoptr_cleanup_AdwSwipeTrackerClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipeable.h
  */
  def glib_queueautoptr_cleanup_AdwSwipeable(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def glib_queueautoptr_cleanup_AdwTabBar(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def glib_queueautoptr_cleanup_AdwTabBarClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def glib_queueautoptr_cleanup_AdwTabPage(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def glib_queueautoptr_cleanup_AdwTabPageClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def glib_queueautoptr_cleanup_AdwTabView(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def glib_queueautoptr_cleanup_AdwTabViewClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def glib_queueautoptr_cleanup_AdwTimedAnimation(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def glib_queueautoptr_cleanup_AdwTimedAnimationClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def glib_queueautoptr_cleanup_AdwToast(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def glib_queueautoptr_cleanup_AdwToastClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast-overlay.h
  */
  def glib_queueautoptr_cleanup_AdwToastOverlay(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast-overlay.h
  */
  def glib_queueautoptr_cleanup_AdwToastOverlayClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def glib_queueautoptr_cleanup_AdwViewStack(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def glib_queueautoptr_cleanup_AdwViewStackClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def glib_queueautoptr_cleanup_AdwViewStackPage(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def glib_queueautoptr_cleanup_AdwViewStackPageClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
  */
  def glib_queueautoptr_cleanup_AdwViewSwitcher(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
  */
  def glib_queueautoptr_cleanup_AdwViewSwitcherBar(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
  */
  def glib_queueautoptr_cleanup_AdwViewSwitcherBarClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
  */
  def glib_queueautoptr_cleanup_AdwViewSwitcherClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def glib_queueautoptr_cleanup_AdwViewSwitcherTitle(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def glib_queueautoptr_cleanup_AdwViewSwitcherTitleClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
  */
  def glib_queueautoptr_cleanup_AdwWindow(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
  */
  def glib_queueautoptr_cleanup_AdwWindowClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
  */
  def glib_queueautoptr_cleanup_AdwWindowTitle(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
  */
  def glib_queueautoptr_cleanup_AdwWindowTitleClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GAction(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GActionMap(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GAppInfo(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GAppInfoMonitor(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GAppLaunchContext(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GApplication(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GApplicationCommandLine(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GArray(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GAsyncInitable(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GAsyncQueue(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GAsyncResult(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GBookmarkFile(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GBufferedInputStream(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GBufferedOutputStream(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GByteArray(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GBytes(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GBytesIcon(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GCancellable(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GCharsetConverter(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GChecksum(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GClosure(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GConverter(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GConverterInputStream(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GConverterOutputStream(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GCredentials(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDBusActionGroup(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDBusAuthObserver(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDBusConnection(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDBusInterface(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDBusInterfaceSkeleton(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDBusMenuModel(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDBusMessage(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDBusMethodInvocation(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDBusNodeInfo(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDBusObject(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDBusObjectManager(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDBusObjectManagerClient(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDBusObjectManagerServer(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDBusObjectProxy(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDBusObjectSkeleton(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDBusProxy(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDBusServer(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDataInputStream(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDataOutputStream(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDatagramBased(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDate(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDateTime(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontroller.h
  */
  def glib_queueautoptr_cleanup_GDebugController(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
  */
  def glib_queueautoptr_cleanup_GDebugControllerDBus(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
  */
  def glib_queueautoptr_cleanup_GDebugControllerDBusClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDir(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GDrive(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GEmblem(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GEmblemedIcon(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GEnumClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GError(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GFile(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GFileAttributeInfoList(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GFileEnumerator(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GFileIOStream(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GFileIcon(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GFileInfo(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GFileInputStream(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GFileMonitor(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GFileOutputStream(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GFilenameCompleter(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GFilterInputStream(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GFilterOutputStream(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GFlagsClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GHashTable(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GHmac(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GIOChannel(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GIOModule(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GIOStream(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GIcon(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GInetAddress(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GInetAddressMask(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GInetSocketAddress(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GInitable(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GInitiallyUnowned(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GInputStream(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GKeyFile(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GList(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/glistmodel.h
  */
  def glib_queueautoptr_cleanup_GListModel(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def glib_queueautoptr_cleanup_GListStore(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def glib_queueautoptr_cleanup_GListStoreClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GLoadableIcon(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GMainContext(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GMainContextPusher(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GMainLoop(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GMappedFile(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GMarkupParseContext(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GMatchInfo(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GMemoryInputStream(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemorymonitor.h
  */
  def glib_queueautoptr_cleanup_GMemoryMonitor(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GMemoryOutputStream(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GMenu(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GMenuAttributeIter(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GMenuItem(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GMenuLinkIter(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GMenuModel(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GMount(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GMountOperation(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GMutexLocker(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GNativeVolumeMonitor(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GNetworkAddress(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GNetworkMonitor(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GNetworkService(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GNode(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GNotification(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GObject(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GOptionContext(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GOptionGroup(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GOutputStream(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GParamSpec(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GPatternSpec(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GPermission(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GPollableInputStream(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GPollableOutputStream(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpowerprofilemonitor.h
  */
  def glib_queueautoptr_cleanup_GPowerProfileMonitor(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GPropertyAction(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GProxy(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GProxyAddress(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GProxyAddressEnumerator(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GProxyResolver(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GPtrArray(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GQueue(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GRWLockReaderLocker(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GRWLockWriterLocker(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GRand(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GRecMutexLocker(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GRefString(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GRegex(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GRemoteActionGroup(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GResolver(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GResource(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSList(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GScanner(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSeekable(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSequence(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSettings(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSettingsBackend(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSettingsSchema(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSettingsSchemaKey(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSettingsSchemaSource(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSimpleAction(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSimpleActionGroup(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSimpleAsyncResult(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSimplePermission(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSimpleProxyResolver(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSocket(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSocketAddress(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSocketAddressEnumerator(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSocketClient(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSocketConnectable(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSocketConnection(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSocketControlMessage(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSocketListener(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSocketService(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSource(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GString(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GStringChunk(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GStrvBuilder(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSubprocess(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GSubprocessLauncher(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GTask(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GTcpConnection(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GTcpWrapperConnection(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GTestDBus(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GThemedIcon(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GThread(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GThreadedSocketService(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GTimeZone(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GTimer(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GTlsBackend(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GTlsCertificate(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GTlsClientConnection(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GTlsConnection(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GTlsDatabase(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GTlsFileDatabase(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GTlsInteraction(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GTlsPassword(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GTlsServerConnection(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GTree(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GTypeClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtypemodule.h
  */
  def glib_queueautoptr_cleanup_GTypeModule(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GUri(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GVariant(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GVariantBuilder(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GVariantDict(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GVariantIter(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GVariantType(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GVfs(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GVolume(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GVolumeMonitor(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GZlibCompressor(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GZlibDecompressor(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GdkAppLaunchContext(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GdkClipboard(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GdkContentFormats(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GdkContentProvider(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GdkCursor(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GdkDevice(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GdkDisplay(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GdkDisplayManager(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GdkDrag(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdragsurface.h
  */
  def glib_queueautoptr_cleanup_GdkDragSurface(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GdkDrawContext(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrop.h
  */
  def glib_queueautoptr_cleanup_GdkDrop(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GdkEvent(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GdkFrameClock(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GdkFrameTimings(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GdkGLContext(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkgltexture.h
  */
  def glib_queueautoptr_cleanup_GdkGLTexture(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmemorytexture.h
  */
  def glib_queueautoptr_cleanup_GdkMemoryTexture(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GdkMonitor(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
  */
  def glib_queueautoptr_cleanup_GdkPaintable(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GdkPixbuf(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GdkPixbufAnimation(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GdkPixbufAnimationIter(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GdkPixbufLoader(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_queueautoptr_cleanup_GdkPixbufSimpleAnim(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopup.h
  */
  def glib_queueautoptr_cleanup_GdkPopup(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GdkPopupLayout(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GdkRGBA(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GdkSeat(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksnapshot.h
  */
  def glib_queueautoptr_cleanup_GdkSnapshot(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def glib_queueautoptr_cleanup_GdkSurface(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
  */
  def glib_queueautoptr_cleanup_GdkTexture(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def glib_queueautoptr_cleanup_GdkToplevel(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GdkVulkanContext(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def glib_queueautoptr_cleanup_GskGLShader(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def glib_queueautoptr_cleanup_GskGLShaderClass(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GskRenderNode(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GskRenderer(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsk-autocleanup.h
  */
  def glib_queueautoptr_cleanup_GskTransform(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def glib_queueautoptr_cleanup_PangoAttrIterator(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def glib_queueautoptr_cleanup_PangoAttrList(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def glib_queueautoptr_cleanup_PangoAttribute(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-coverage.h
  */
  def glib_queueautoptr_cleanup_PangoCoverage(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def glib_queueautoptr_cleanup_PangoFont(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def glib_queueautoptr_cleanup_PangoFontDescription(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def glib_queueautoptr_cleanup_PangoFontFace(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def glib_queueautoptr_cleanup_PangoFontFamily(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontmap.h
  */
  def glib_queueautoptr_cleanup_PangoFontMap(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def glib_queueautoptr_cleanup_PangoLayout(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def glib_queueautoptr_cleanup_PangoLayoutIter(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def glib_queueautoptr_cleanup_PangoTabArray(_q : Ptr[Ptr[GQueue]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def glib_slistautoptr_cleanup_AdwActionRow(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-action-row.h
  */
  def glib_slistautoptr_cleanup_AdwActionRowClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def glib_slistautoptr_cleanup_AdwAnimation(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation.h
  */
  def glib_slistautoptr_cleanup_AdwAnimationClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def glib_slistautoptr_cleanup_AdwAnimationTarget(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def glib_slistautoptr_cleanup_AdwAnimationTargetClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
  */
  def glib_slistautoptr_cleanup_AdwApplication(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application.h
  */
  def glib_slistautoptr_cleanup_AdwApplicationClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
  */
  def glib_slistautoptr_cleanup_AdwApplicationWindow(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-application-window.h
  */
  def glib_slistautoptr_cleanup_AdwApplicationWindowClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def glib_slistautoptr_cleanup_AdwAvatar(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-avatar.h
  */
  def glib_slistautoptr_cleanup_AdwAvatarClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
  */
  def glib_slistautoptr_cleanup_AdwBin(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-bin.h
  */
  def glib_slistautoptr_cleanup_AdwBinClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
  */
  def glib_slistautoptr_cleanup_AdwButtonContent(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-button-content.h
  */
  def glib_slistautoptr_cleanup_AdwButtonContentClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def glib_slistautoptr_cleanup_AdwCallbackAnimationTarget(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-animation-target.h
  */
  def glib_slistautoptr_cleanup_AdwCallbackAnimationTargetClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def glib_slistautoptr_cleanup_AdwCarousel(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel.h
  */
  def glib_slistautoptr_cleanup_AdwCarouselClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-dots.h
  */
  def glib_slistautoptr_cleanup_AdwCarouselIndicatorDots(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-dots.h
  */
  def glib_slistautoptr_cleanup_AdwCarouselIndicatorDotsClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-lines.h
  */
  def glib_slistautoptr_cleanup_AdwCarouselIndicatorLines(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-carousel-indicator-lines.h
  */
  def glib_slistautoptr_cleanup_AdwCarouselIndicatorLinesClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
  */
  def glib_slistautoptr_cleanup_AdwClamp(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp.h
  */
  def glib_slistautoptr_cleanup_AdwClampClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
  */
  def glib_slistautoptr_cleanup_AdwClampLayout(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-layout.h
  */
  def glib_slistautoptr_cleanup_AdwClampLayoutClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
  */
  def glib_slistautoptr_cleanup_AdwClampScrollable(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-clamp-scrollable.h
  */
  def glib_slistautoptr_cleanup_AdwClampScrollableClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def glib_slistautoptr_cleanup_AdwComboRow(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-combo-row.h
  */
  def glib_slistautoptr_cleanup_AdwComboRowClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def glib_slistautoptr_cleanup_AdwEnumListItem(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def glib_slistautoptr_cleanup_AdwEnumListItemClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def glib_slistautoptr_cleanup_AdwEnumListModel(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-enum-list-model.h
  */
  def glib_slistautoptr_cleanup_AdwEnumListModelClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def glib_slistautoptr_cleanup_AdwExpanderRow(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-expander-row.h
  */
  def glib_slistautoptr_cleanup_AdwExpanderRowClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def glib_slistautoptr_cleanup_AdwFlap(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-flap.h
  */
  def glib_slistautoptr_cleanup_AdwFlapClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def glib_slistautoptr_cleanup_AdwHeaderBar(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-header-bar.h
  */
  def glib_slistautoptr_cleanup_AdwHeaderBarClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def glib_slistautoptr_cleanup_AdwLeaflet(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def glib_slistautoptr_cleanup_AdwLeafletClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def glib_slistautoptr_cleanup_AdwLeafletPage(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-leaflet.h
  */
  def glib_slistautoptr_cleanup_AdwLeafletPageClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def glib_slistautoptr_cleanup_AdwPreferencesGroup(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-group.h
  */
  def glib_slistautoptr_cleanup_AdwPreferencesGroupClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def glib_slistautoptr_cleanup_AdwPreferencesPage(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-page.h
  */
  def glib_slistautoptr_cleanup_AdwPreferencesPageClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def glib_slistautoptr_cleanup_AdwPreferencesRow(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-row.h
  */
  def glib_slistautoptr_cleanup_AdwPreferencesRowClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def glib_slistautoptr_cleanup_AdwPreferencesWindow(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-preferences-window.h
  */
  def glib_slistautoptr_cleanup_AdwPreferencesWindowClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def glib_slistautoptr_cleanup_AdwSplitButton(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-split-button.h
  */
  def glib_slistautoptr_cleanup_AdwSplitButtonClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def glib_slistautoptr_cleanup_AdwSpringAnimation(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-animation.h
  */
  def glib_slistautoptr_cleanup_AdwSpringAnimationClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-spring-params.h
  */
  def glib_slistautoptr_cleanup_AdwSpringParams(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def glib_slistautoptr_cleanup_AdwSqueezer(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def glib_slistautoptr_cleanup_AdwSqueezerClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def glib_slistautoptr_cleanup_AdwSqueezerPage(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-squeezer.h
  */
  def glib_slistautoptr_cleanup_AdwSqueezerPageClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def glib_slistautoptr_cleanup_AdwStatusPage(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-status-page.h
  */
  def glib_slistautoptr_cleanup_AdwStatusPageClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def glib_slistautoptr_cleanup_AdwStyleManager(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-style-manager.h
  */
  def glib_slistautoptr_cleanup_AdwStyleManagerClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def glib_slistautoptr_cleanup_AdwSwipeTracker(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipe-tracker.h
  */
  def glib_slistautoptr_cleanup_AdwSwipeTrackerClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-swipeable.h
  */
  def glib_slistautoptr_cleanup_AdwSwipeable(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def glib_slistautoptr_cleanup_AdwTabBar(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-bar.h
  */
  def glib_slistautoptr_cleanup_AdwTabBarClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def glib_slistautoptr_cleanup_AdwTabPage(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def glib_slistautoptr_cleanup_AdwTabPageClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def glib_slistautoptr_cleanup_AdwTabView(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-tab-view.h
  */
  def glib_slistautoptr_cleanup_AdwTabViewClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def glib_slistautoptr_cleanup_AdwTimedAnimation(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-timed-animation.h
  */
  def glib_slistautoptr_cleanup_AdwTimedAnimationClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def glib_slistautoptr_cleanup_AdwToast(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast.h
  */
  def glib_slistautoptr_cleanup_AdwToastClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast-overlay.h
  */
  def glib_slistautoptr_cleanup_AdwToastOverlay(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-toast-overlay.h
  */
  def glib_slistautoptr_cleanup_AdwToastOverlayClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def glib_slistautoptr_cleanup_AdwViewStack(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def glib_slistautoptr_cleanup_AdwViewStackClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def glib_slistautoptr_cleanup_AdwViewStackPage(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-stack.h
  */
  def glib_slistautoptr_cleanup_AdwViewStackPageClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
  */
  def glib_slistautoptr_cleanup_AdwViewSwitcher(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
  */
  def glib_slistautoptr_cleanup_AdwViewSwitcherBar(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-bar.h
  */
  def glib_slistautoptr_cleanup_AdwViewSwitcherBarClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher.h
  */
  def glib_slistautoptr_cleanup_AdwViewSwitcherClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def glib_slistautoptr_cleanup_AdwViewSwitcherTitle(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-view-switcher-title.h
  */
  def glib_slistautoptr_cleanup_AdwViewSwitcherTitleClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
  */
  def glib_slistautoptr_cleanup_AdwWindow(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window.h
  */
  def glib_slistautoptr_cleanup_AdwWindowClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
  */
  def glib_slistautoptr_cleanup_AdwWindowTitle(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/libadwaita-1/adw-window-title.h
  */
  def glib_slistautoptr_cleanup_AdwWindowTitleClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GAction(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GActionMap(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GAppInfo(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GAppInfoMonitor(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GAppLaunchContext(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GApplication(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GApplicationCommandLine(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GArray(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GAsyncInitable(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GAsyncQueue(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GAsyncResult(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GBookmarkFile(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GBufferedInputStream(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GBufferedOutputStream(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GByteArray(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GBytes(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GBytesIcon(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GCancellable(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GCharsetConverter(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GChecksum(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GClosure(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GConverter(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GConverterInputStream(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GConverterOutputStream(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GCredentials(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDBusActionGroup(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDBusAuthObserver(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDBusConnection(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDBusInterface(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDBusInterfaceSkeleton(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDBusMenuModel(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDBusMessage(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDBusMethodInvocation(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDBusNodeInfo(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDBusObject(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDBusObjectManager(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDBusObjectManagerClient(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDBusObjectManagerServer(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDBusObjectProxy(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDBusObjectSkeleton(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDBusProxy(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDBusServer(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDataInputStream(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDataOutputStream(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDatagramBased(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDate(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDateTime(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontroller.h
  */
  def glib_slistautoptr_cleanup_GDebugController(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
  */
  def glib_slistautoptr_cleanup_GDebugControllerDBus(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gdebugcontrollerdbus.h
  */
  def glib_slistautoptr_cleanup_GDebugControllerDBusClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDir(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GDrive(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GEmblem(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GEmblemedIcon(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GEnumClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GError(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GFile(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GFileAttributeInfoList(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GFileEnumerator(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GFileIOStream(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GFileIcon(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GFileInfo(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GFileInputStream(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GFileMonitor(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GFileOutputStream(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GFilenameCompleter(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GFilterInputStream(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GFilterOutputStream(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GFlagsClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GHashTable(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GHmac(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GIOChannel(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GIOModule(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GIOStream(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GIcon(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GInetAddress(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GInetAddressMask(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GInetSocketAddress(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GInitable(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GInitiallyUnowned(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GInputStream(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GKeyFile(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GList(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/glistmodel.h
  */
  def glib_slistautoptr_cleanup_GListModel(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def glib_slistautoptr_cleanup_GListStore(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gliststore.h
  */
  def glib_slistautoptr_cleanup_GListStoreClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GLoadableIcon(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GMainContext(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GMainContextPusher(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GMainLoop(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GMappedFile(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GMarkupParseContext(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GMatchInfo(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GMemoryInputStream(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gmemorymonitor.h
  */
  def glib_slistautoptr_cleanup_GMemoryMonitor(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GMemoryOutputStream(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GMenu(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GMenuAttributeIter(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GMenuItem(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GMenuLinkIter(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GMenuModel(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GMount(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GMountOperation(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GMutexLocker(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GNativeVolumeMonitor(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GNetworkAddress(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GNetworkMonitor(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GNetworkService(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GNode(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GNotification(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GObject(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GOptionContext(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GOptionGroup(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GOutputStream(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GParamSpec(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GPatternSpec(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GPermission(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GPollableInputStream(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GPollableOutputStream(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gpowerprofilemonitor.h
  */
  def glib_slistautoptr_cleanup_GPowerProfileMonitor(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GPropertyAction(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GProxy(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GProxyAddress(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GProxyAddressEnumerator(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GProxyResolver(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GPtrArray(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GQueue(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GRWLockReaderLocker(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GRWLockWriterLocker(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GRand(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GRecMutexLocker(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GRefString(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GRegex(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GRemoteActionGroup(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GResolver(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GResource(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSList(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GScanner(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSeekable(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSequence(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSettings(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSettingsBackend(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSettingsSchema(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSettingsSchemaKey(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSettingsSchemaSource(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSimpleAction(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSimpleActionGroup(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSimpleAsyncResult(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSimplePermission(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSimpleProxyResolver(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSocket(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSocketAddress(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSocketAddressEnumerator(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSocketClient(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSocketConnectable(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSocketConnection(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSocketControlMessage(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSocketListener(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSocketService(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSource(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GString(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GStringChunk(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GStrvBuilder(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSubprocess(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GSubprocessLauncher(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GTask(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GTcpConnection(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GTcpWrapperConnection(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GTestDBus(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GThemedIcon(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GThread(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GThreadedSocketService(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GTimeZone(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GTimer(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GTlsBackend(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GTlsCertificate(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GTlsClientConnection(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GTlsConnection(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GTlsDatabase(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GTlsFileDatabase(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GTlsInteraction(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GTlsPassword(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GTlsServerConnection(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GTree(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gobject-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GTypeClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gobject/gtypemodule.h
  */
  def glib_slistautoptr_cleanup_GTypeModule(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GUri(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GVariant(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GVariantBuilder(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GVariantDict(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GVariantIter(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/glib/glib-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GVariantType(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GVfs(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GVolume(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GVolumeMonitor(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GZlibCompressor(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/glib-2.0/gio/gio-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GZlibDecompressor(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GdkAppLaunchContext(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GdkClipboard(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GdkContentFormats(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GdkContentProvider(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GdkCursor(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GdkDevice(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GdkDisplay(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GdkDisplayManager(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GdkDrag(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdragsurface.h
  */
  def glib_slistautoptr_cleanup_GdkDragSurface(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GdkDrawContext(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkdrop.h
  */
  def glib_slistautoptr_cleanup_GdkDrop(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GdkEvent(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GdkFrameClock(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GdkFrameTimings(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GdkGLContext(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkgltexture.h
  */
  def glib_slistautoptr_cleanup_GdkGLTexture(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkmemorytexture.h
  */
  def glib_slistautoptr_cleanup_GdkMemoryTexture(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GdkMonitor(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpaintable.h
  */
  def glib_slistautoptr_cleanup_GdkPaintable(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GdkPixbuf(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GdkPixbufAnimation(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GdkPixbufAnimationIter(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GdkPixbufLoader(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gdk-pixbuf-2.0/gdk-pixbuf/gdk-pixbuf-autocleanups.h
  */
  def glib_slistautoptr_cleanup_GdkPixbufSimpleAnim(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdkpopup.h
  */
  def glib_slistautoptr_cleanup_GdkPopup(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GdkPopupLayout(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GdkRGBA(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GdkSeat(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksnapshot.h
  */
  def glib_slistautoptr_cleanup_GdkSnapshot(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdksurface.h
  */
  def glib_slistautoptr_cleanup_GdkSurface(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktexture.h
  */
  def glib_slistautoptr_cleanup_GdkTexture(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdktoplevel.h
  */
  def glib_slistautoptr_cleanup_GdkToplevel(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gdk/gdk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GdkVulkanContext(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def glib_slistautoptr_cleanup_GskGLShader(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def glib_slistautoptr_cleanup_GskGLShaderClass(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GskRenderNode(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GskRenderer(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsk-autocleanup.h
  */
  def glib_slistautoptr_cleanup_GskTransform(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def glib_slistautoptr_cleanup_PangoAttrIterator(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def glib_slistautoptr_cleanup_PangoAttrList(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def glib_slistautoptr_cleanup_PangoAttribute(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-coverage.h
  */
  def glib_slistautoptr_cleanup_PangoCoverage(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def glib_slistautoptr_cleanup_PangoFont(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def glib_slistautoptr_cleanup_PangoFontDescription(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def glib_slistautoptr_cleanup_PangoFontFace(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def glib_slistautoptr_cleanup_PangoFontFamily(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontmap.h
  */
  def glib_slistautoptr_cleanup_PangoFontMap(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def glib_slistautoptr_cleanup_PangoLayout(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def glib_slistautoptr_cleanup_PangoLayoutIter(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def glib_slistautoptr_cleanup_PangoTabArray(_l : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_alloc(): Ptr[graphene_box_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_contains_box(a : Ptr[graphene_box_t], b : Ptr[graphene_box_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_contains_point(box : Ptr[graphene_box_t], point : Ptr[graphene_point3d_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_empty(): Ptr[graphene_box_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_equal(a : Ptr[graphene_box_t], b : Ptr[graphene_box_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_expand(box : Ptr[graphene_box_t], point : Ptr[graphene_point3d_t], res : Ptr[graphene_box_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_expand_scalar(box : Ptr[graphene_box_t], scalar : Float, res : Ptr[graphene_box_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_expand_vec3(box : Ptr[graphene_box_t], vec : Ptr[graphene_vec3_t], res : Ptr[graphene_box_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_free(box : Ptr[graphene_box_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_get_bounding_sphere(box : Ptr[graphene_box_t], sphere : Ptr[graphene_sphere_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_get_center(box : Ptr[graphene_box_t], center : Ptr[graphene_point3d_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_get_depth(box : Ptr[graphene_box_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_get_height(box : Ptr[graphene_box_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_get_max(box : Ptr[graphene_box_t], max : Ptr[graphene_point3d_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_get_min(box : Ptr[graphene_box_t], min : Ptr[graphene_point3d_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_get_size(box : Ptr[graphene_box_t], size : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_get_vertices(box : Ptr[graphene_box_t], vertices : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_get_width(box : Ptr[graphene_box_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_infinite(): Ptr[graphene_box_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_init(box : Ptr[graphene_box_t], min : Ptr[graphene_point3d_t], max : Ptr[graphene_point3d_t]): Ptr[graphene_box_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_init_from_box(box : Ptr[graphene_box_t], src : Ptr[graphene_box_t]): Ptr[graphene_box_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_init_from_points(box : Ptr[graphene_box_t], n_points : CUnsignedInt, points : Ptr[graphene_point3d_t]): Ptr[graphene_box_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_init_from_vec3(box : Ptr[graphene_box_t], min : Ptr[graphene_vec3_t], max : Ptr[graphene_vec3_t]): Ptr[graphene_box_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_init_from_vectors(box : Ptr[graphene_box_t], n_vectors : CUnsignedInt, vectors : Ptr[graphene_vec3_t]): Ptr[graphene_box_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_intersection(a : Ptr[graphene_box_t], b : Ptr[graphene_box_t], res : Ptr[graphene_box_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_minus_one(): Ptr[graphene_box_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_one(): Ptr[graphene_box_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_one_minus_one(): Ptr[graphene_box_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_union(a : Ptr[graphene_box_t], b : Ptr[graphene_box_t], res : Ptr[graphene_box_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-box.h
  */
  def graphene_box_zero(): Ptr[graphene_box_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_alloc(): Ptr[graphene_euler_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_equal(a : Ptr[graphene_euler_t], b : Ptr[graphene_euler_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_free(e : Ptr[graphene_euler_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_get_alpha(e : Ptr[graphene_euler_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_get_beta(e : Ptr[graphene_euler_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_get_gamma(e : Ptr[graphene_euler_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_get_order(e : Ptr[graphene_euler_t]): graphene_euler_order_t = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_get_x(e : Ptr[graphene_euler_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_get_y(e : Ptr[graphene_euler_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_get_z(e : Ptr[graphene_euler_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_init(e : Ptr[graphene_euler_t], x : Float, y : Float, z : Float): Ptr[graphene_euler_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_init_from_euler(e : Ptr[graphene_euler_t], src : Ptr[graphene_euler_t]): Ptr[graphene_euler_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_init_from_matrix(e : Ptr[graphene_euler_t], m : Ptr[graphene_matrix_t], order : graphene_euler_order_t): Ptr[graphene_euler_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_init_from_quaternion(e : Ptr[graphene_euler_t], q : Ptr[graphene_quaternion_t], order : graphene_euler_order_t): Ptr[graphene_euler_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_init_from_radians(e : Ptr[graphene_euler_t], x : Float, y : Float, z : Float, order : graphene_euler_order_t): Ptr[graphene_euler_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_init_from_vec3(e : Ptr[graphene_euler_t], v : Ptr[graphene_vec3_t], order : graphene_euler_order_t): Ptr[graphene_euler_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_init_with_order(e : Ptr[graphene_euler_t], x : Float, y : Float, z : Float, order : graphene_euler_order_t): Ptr[graphene_euler_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_reorder(e : Ptr[graphene_euler_t], order : graphene_euler_order_t, res : Ptr[graphene_euler_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_to_matrix(e : Ptr[graphene_euler_t], res : Ptr[graphene_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_to_quaternion(e : Ptr[graphene_euler_t], res : Ptr[graphene_quaternion_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-euler.h
  */
  def graphene_euler_to_vec3(e : Ptr[graphene_euler_t], res : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-frustum.h
  */
  def graphene_frustum_alloc(): Ptr[graphene_frustum_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-frustum.h
  */
  def graphene_frustum_contains_point(f : Ptr[graphene_frustum_t], point : Ptr[graphene_point3d_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-frustum.h
  */
  def graphene_frustum_equal(a : Ptr[graphene_frustum_t], b : Ptr[graphene_frustum_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-frustum.h
  */
  def graphene_frustum_free(f : Ptr[graphene_frustum_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-frustum.h
  */
  def graphene_frustum_get_planes(f : Ptr[graphene_frustum_t], planes : Ptr[graphene_plane_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-frustum.h
  */
  def graphene_frustum_init(f : Ptr[graphene_frustum_t], p0 : Ptr[graphene_plane_t], p1 : Ptr[graphene_plane_t], p2 : Ptr[graphene_plane_t], p3 : Ptr[graphene_plane_t], p4 : Ptr[graphene_plane_t], p5 : Ptr[graphene_plane_t]): Ptr[graphene_frustum_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-frustum.h
  */
  def graphene_frustum_init_from_frustum(f : Ptr[graphene_frustum_t], src : Ptr[graphene_frustum_t]): Ptr[graphene_frustum_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-frustum.h
  */
  def graphene_frustum_init_from_matrix(f : Ptr[graphene_frustum_t], matrix : Ptr[graphene_matrix_t]): Ptr[graphene_frustum_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-frustum.h
  */
  def graphene_frustum_intersects_box(f : Ptr[graphene_frustum_t], box : Ptr[graphene_box_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-frustum.h
  */
  def graphene_frustum_intersects_sphere(f : Ptr[graphene_frustum_t], sphere : Ptr[graphene_sphere_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_alloc(): Ptr[graphene_matrix_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_decompose(m : Ptr[graphene_matrix_t], translate : Ptr[graphene_vec3_t], scale : Ptr[graphene_vec3_t], rotate : Ptr[graphene_quaternion_t], shear : Ptr[graphene_vec3_t], perspective : Ptr[graphene_vec4_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_determinant(m : Ptr[graphene_matrix_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_equal(a : Ptr[graphene_matrix_t], b : Ptr[graphene_matrix_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_equal_fast(a : Ptr[graphene_matrix_t], b : Ptr[graphene_matrix_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_free(m : Ptr[graphene_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_get_row(m : Ptr[graphene_matrix_t], `index_` : CUnsignedInt, res : Ptr[graphene_vec4_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_get_value(m : Ptr[graphene_matrix_t], row : CUnsignedInt, col : CUnsignedInt): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_get_x_scale(m : Ptr[graphene_matrix_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_get_x_translation(m : Ptr[graphene_matrix_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_get_y_scale(m : Ptr[graphene_matrix_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_get_y_translation(m : Ptr[graphene_matrix_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_get_z_scale(m : Ptr[graphene_matrix_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_get_z_translation(m : Ptr[graphene_matrix_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_init_from_2d(m : Ptr[graphene_matrix_t], xx : Double, yx : Double, xy : Double, yy : Double, x_0 : Double, y_0 : Double): Ptr[graphene_matrix_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_init_from_float(m : Ptr[graphene_matrix_t], v : Ptr[Float]): Ptr[graphene_matrix_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_init_from_matrix(m : Ptr[graphene_matrix_t], src : Ptr[graphene_matrix_t]): Ptr[graphene_matrix_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_init_from_vec4(m : Ptr[graphene_matrix_t], v0 : Ptr[graphene_vec4_t], v1 : Ptr[graphene_vec4_t], v2 : Ptr[graphene_vec4_t], v3 : Ptr[graphene_vec4_t]): Ptr[graphene_matrix_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_init_frustum(m : Ptr[graphene_matrix_t], left : Float, right : Float, bottom : Float, top : Float, z_near : Float, z_far : Float): Ptr[graphene_matrix_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_init_identity(m : Ptr[graphene_matrix_t]): Ptr[graphene_matrix_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_init_look_at(m : Ptr[graphene_matrix_t], eye : Ptr[graphene_vec3_t], center : Ptr[graphene_vec3_t], up : Ptr[graphene_vec3_t]): Ptr[graphene_matrix_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_init_ortho(m : Ptr[graphene_matrix_t], left : Float, right : Float, top : Float, bottom : Float, z_near : Float, z_far : Float): Ptr[graphene_matrix_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_init_perspective(m : Ptr[graphene_matrix_t], fovy : Float, aspect : Float, z_near : Float, z_far : Float): Ptr[graphene_matrix_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_init_rotate(m : Ptr[graphene_matrix_t], angle : Float, axis : Ptr[graphene_vec3_t]): Ptr[graphene_matrix_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_init_scale(m : Ptr[graphene_matrix_t], x : Float, y : Float, z : Float): Ptr[graphene_matrix_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_init_skew(m : Ptr[graphene_matrix_t], x_skew : Float, y_skew : Float): Ptr[graphene_matrix_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_init_translate(m : Ptr[graphene_matrix_t], p : Ptr[graphene_point3d_t]): Ptr[graphene_matrix_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_interpolate(a : Ptr[graphene_matrix_t], b : Ptr[graphene_matrix_t], factor : Double, res : Ptr[graphene_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_inverse(m : Ptr[graphene_matrix_t], res : Ptr[graphene_matrix_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_is_2d(m : Ptr[graphene_matrix_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_is_backface_visible(m : Ptr[graphene_matrix_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_is_identity(m : Ptr[graphene_matrix_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_is_singular(m : Ptr[graphene_matrix_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_multiply(a : Ptr[graphene_matrix_t], b : Ptr[graphene_matrix_t], res : Ptr[graphene_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_near(a : Ptr[graphene_matrix_t], b : Ptr[graphene_matrix_t], epsilon : Float): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_normalize(m : Ptr[graphene_matrix_t], res : Ptr[graphene_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_perspective(m : Ptr[graphene_matrix_t], depth : Float, res : Ptr[graphene_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_print(m : Ptr[graphene_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_project_point(m : Ptr[graphene_matrix_t], p : Ptr[graphene_point_t], res : Ptr[graphene_point_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_project_rect(m : Ptr[graphene_matrix_t], r : Ptr[graphene_rect_t], res : Ptr[graphene_quad_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_project_rect_bounds(m : Ptr[graphene_matrix_t], r : Ptr[graphene_rect_t], res : Ptr[graphene_rect_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_rotate(m : Ptr[graphene_matrix_t], angle : Float, axis : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_rotate_euler(m : Ptr[graphene_matrix_t], e : Ptr[graphene_euler_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_rotate_quaternion(m : Ptr[graphene_matrix_t], q : Ptr[graphene_quaternion_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_rotate_x(m : Ptr[graphene_matrix_t], angle : Float): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_rotate_y(m : Ptr[graphene_matrix_t], angle : Float): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_rotate_z(m : Ptr[graphene_matrix_t], angle : Float): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_scale(m : Ptr[graphene_matrix_t], factor_x : Float, factor_y : Float, factor_z : Float): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_skew_xy(m : Ptr[graphene_matrix_t], factor : Float): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_skew_xz(m : Ptr[graphene_matrix_t], factor : Float): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_skew_yz(m : Ptr[graphene_matrix_t], factor : Float): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_to_2d(m : Ptr[graphene_matrix_t], xx : Ptr[Double], yx : Ptr[Double], xy : Ptr[Double], yy : Ptr[Double], x_0 : Ptr[Double], y_0 : Ptr[Double]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_to_float(m : Ptr[graphene_matrix_t], v : Ptr[Float]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_transform_bounds(m : Ptr[graphene_matrix_t], r : Ptr[graphene_rect_t], res : Ptr[graphene_rect_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_transform_box(m : Ptr[graphene_matrix_t], b : Ptr[graphene_box_t], res : Ptr[graphene_box_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_transform_point(m : Ptr[graphene_matrix_t], p : Ptr[graphene_point_t], res : Ptr[graphene_point_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_transform_point3d(m : Ptr[graphene_matrix_t], p : Ptr[graphene_point3d_t], res : Ptr[graphene_point3d_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_transform_ray(m : Ptr[graphene_matrix_t], r : Ptr[graphene_ray_t], res : Ptr[graphene_ray_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_transform_rect(m : Ptr[graphene_matrix_t], r : Ptr[graphene_rect_t], res : Ptr[graphene_quad_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_transform_sphere(m : Ptr[graphene_matrix_t], s : Ptr[graphene_sphere_t], res : Ptr[graphene_sphere_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_transform_vec3(m : Ptr[graphene_matrix_t], v : Ptr[graphene_vec3_t], res : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_transform_vec4(m : Ptr[graphene_matrix_t], v : Ptr[graphene_vec4_t], res : Ptr[graphene_vec4_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_translate(m : Ptr[graphene_matrix_t], pos : Ptr[graphene_point3d_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_transpose(m : Ptr[graphene_matrix_t], res : Ptr[graphene_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_unproject_point3d(projection : Ptr[graphene_matrix_t], modelview : Ptr[graphene_matrix_t], point : Ptr[graphene_point3d_t], res : Ptr[graphene_point3d_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_untransform_bounds(m : Ptr[graphene_matrix_t], r : Ptr[graphene_rect_t], bounds : Ptr[graphene_rect_t], res : Ptr[graphene_rect_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-matrix.h
  */
  def graphene_matrix_untransform_point(m : Ptr[graphene_matrix_t], p : Ptr[graphene_point_t], bounds : Ptr[graphene_rect_t], res : Ptr[graphene_point_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-plane.h
  */
  def graphene_plane_alloc(): Ptr[graphene_plane_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-plane.h
  */
  def graphene_plane_distance(p : Ptr[graphene_plane_t], point : Ptr[graphene_point3d_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-plane.h
  */
  def graphene_plane_equal(a : Ptr[graphene_plane_t], b : Ptr[graphene_plane_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-plane.h
  */
  def graphene_plane_free(p : Ptr[graphene_plane_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-plane.h
  */
  def graphene_plane_get_constant(p : Ptr[graphene_plane_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-plane.h
  */
  def graphene_plane_get_normal(p : Ptr[graphene_plane_t], normal : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-plane.h
  */
  def graphene_plane_init(p : Ptr[graphene_plane_t], normal : Ptr[graphene_vec3_t], constant : Float): Ptr[graphene_plane_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-plane.h
  */
  def graphene_plane_init_from_plane(p : Ptr[graphene_plane_t], src : Ptr[graphene_plane_t]): Ptr[graphene_plane_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-plane.h
  */
  def graphene_plane_init_from_point(p : Ptr[graphene_plane_t], normal : Ptr[graphene_vec3_t], point : Ptr[graphene_point3d_t]): Ptr[graphene_plane_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-plane.h
  */
  def graphene_plane_init_from_points(p : Ptr[graphene_plane_t], a : Ptr[graphene_point3d_t], b : Ptr[graphene_point3d_t], c : Ptr[graphene_point3d_t]): Ptr[graphene_plane_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-plane.h
  */
  def graphene_plane_init_from_vec4(p : Ptr[graphene_plane_t], src : Ptr[graphene_vec4_t]): Ptr[graphene_plane_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-plane.h
  */
  def graphene_plane_negate(p : Ptr[graphene_plane_t], res : Ptr[graphene_plane_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-plane.h
  */
  def graphene_plane_normalize(p : Ptr[graphene_plane_t], res : Ptr[graphene_plane_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-plane.h
  */
  def graphene_plane_transform(p : Ptr[graphene_plane_t], matrix : Ptr[graphene_matrix_t], normal_matrix : Ptr[graphene_matrix_t], res : Ptr[graphene_plane_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point3d.h
  */
  def graphene_point3d_alloc(): Ptr[graphene_point3d_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point3d.h
  */
  def graphene_point3d_cross(a : Ptr[graphene_point3d_t], b : Ptr[graphene_point3d_t], res : Ptr[graphene_point3d_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point3d.h
  */
  def graphene_point3d_distance(a : Ptr[graphene_point3d_t], b : Ptr[graphene_point3d_t], delta : Ptr[graphene_vec3_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point3d.h
  */
  def graphene_point3d_dot(a : Ptr[graphene_point3d_t], b : Ptr[graphene_point3d_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point3d.h
  */
  def graphene_point3d_equal(a : Ptr[graphene_point3d_t], b : Ptr[graphene_point3d_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point3d.h
  */
  def graphene_point3d_free(p : Ptr[graphene_point3d_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point3d.h
  */
  def graphene_point3d_init(p : Ptr[graphene_point3d_t], x : Float, y : Float, z : Float): Ptr[graphene_point3d_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point3d.h
  */
  def graphene_point3d_init_from_point(p : Ptr[graphene_point3d_t], src : Ptr[graphene_point3d_t]): Ptr[graphene_point3d_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point3d.h
  */
  def graphene_point3d_init_from_vec3(p : Ptr[graphene_point3d_t], v : Ptr[graphene_vec3_t]): Ptr[graphene_point3d_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point3d.h
  */
  def graphene_point3d_interpolate(a : Ptr[graphene_point3d_t], b : Ptr[graphene_point3d_t], factor : Double, res : Ptr[graphene_point3d_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point3d.h
  */
  def graphene_point3d_length(p : Ptr[graphene_point3d_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point3d.h
  */
  def graphene_point3d_near(a : Ptr[graphene_point3d_t], b : Ptr[graphene_point3d_t], epsilon : Float): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point3d.h
  */
  def graphene_point3d_normalize(p : Ptr[graphene_point3d_t], res : Ptr[graphene_point3d_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point3d.h
  */
  def graphene_point3d_normalize_viewport(p : Ptr[graphene_point3d_t], viewport : Ptr[graphene_rect_t], z_near : Float, z_far : Float, res : Ptr[graphene_point3d_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point3d.h
  */
  def graphene_point3d_scale(p : Ptr[graphene_point3d_t], factor : Float, res : Ptr[graphene_point3d_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point3d.h
  */
  def graphene_point3d_to_vec3(p : Ptr[graphene_point3d_t], v : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point3d.h
  */
  def graphene_point3d_zero(): Ptr[graphene_point3d_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point.h
  */
  def graphene_point_alloc(): Ptr[graphene_point_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point.h
  */
  def graphene_point_distance(a : Ptr[graphene_point_t], b : Ptr[graphene_point_t], d_x : Ptr[Float], d_y : Ptr[Float]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point.h
  */
  def graphene_point_equal(a : Ptr[graphene_point_t], b : Ptr[graphene_point_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point.h
  */
  def graphene_point_free(p : Ptr[graphene_point_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point.h
  */
  def graphene_point_init(p : Ptr[graphene_point_t], x : Float, y : Float): Ptr[graphene_point_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point.h
  */
  def graphene_point_init_from_point(p : Ptr[graphene_point_t], src : Ptr[graphene_point_t]): Ptr[graphene_point_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point.h
  */
  def graphene_point_init_from_vec2(p : Ptr[graphene_point_t], src : Ptr[graphene_vec2_t]): Ptr[graphene_point_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point.h
  */
  def graphene_point_interpolate(a : Ptr[graphene_point_t], b : Ptr[graphene_point_t], factor : Double, res : Ptr[graphene_point_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point.h
  */
  def graphene_point_near(a : Ptr[graphene_point_t], b : Ptr[graphene_point_t], epsilon : Float): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point.h
  */
  def graphene_point_to_vec2(p : Ptr[graphene_point_t], v : Ptr[graphene_vec2_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-point.h
  */
  def graphene_point_zero(): Ptr[graphene_point_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quad.h
  */
  def graphene_quad_alloc(): Ptr[graphene_quad_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quad.h
  */
  def graphene_quad_bounds(q : Ptr[graphene_quad_t], r : Ptr[graphene_rect_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quad.h
  */
  def graphene_quad_contains(q : Ptr[graphene_quad_t], p : Ptr[graphene_point_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quad.h
  */
  def graphene_quad_free(q : Ptr[graphene_quad_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quad.h
  */
  def graphene_quad_get_point(q : Ptr[graphene_quad_t], `index_` : CUnsignedInt): Ptr[graphene_point_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quad.h
  */
  def graphene_quad_init(q : Ptr[graphene_quad_t], p1 : Ptr[graphene_point_t], p2 : Ptr[graphene_point_t], p3 : Ptr[graphene_point_t], p4 : Ptr[graphene_point_t]): Ptr[graphene_quad_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quad.h
  */
  def graphene_quad_init_from_points(q : Ptr[graphene_quad_t], points : Ptr[graphene_point_t]): Ptr[graphene_quad_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quad.h
  */
  def graphene_quad_init_from_rect(q : Ptr[graphene_quad_t], r : Ptr[graphene_rect_t]): Ptr[graphene_quad_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_add(a : Ptr[graphene_quaternion_t], b : Ptr[graphene_quaternion_t], res : Ptr[graphene_quaternion_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_alloc(): Ptr[graphene_quaternion_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_dot(a : Ptr[graphene_quaternion_t], b : Ptr[graphene_quaternion_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_equal(a : Ptr[graphene_quaternion_t], b : Ptr[graphene_quaternion_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_free(q : Ptr[graphene_quaternion_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_init(q : Ptr[graphene_quaternion_t], x : Float, y : Float, z : Float, w : Float): Ptr[graphene_quaternion_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_init_from_angle_vec3(q : Ptr[graphene_quaternion_t], angle : Float, axis : Ptr[graphene_vec3_t]): Ptr[graphene_quaternion_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_init_from_angles(q : Ptr[graphene_quaternion_t], deg_x : Float, deg_y : Float, deg_z : Float): Ptr[graphene_quaternion_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_init_from_euler(q : Ptr[graphene_quaternion_t], e : Ptr[graphene_euler_t]): Ptr[graphene_quaternion_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_init_from_matrix(q : Ptr[graphene_quaternion_t], m : Ptr[graphene_matrix_t]): Ptr[graphene_quaternion_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_init_from_quaternion(q : Ptr[graphene_quaternion_t], src : Ptr[graphene_quaternion_t]): Ptr[graphene_quaternion_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_init_from_radians(q : Ptr[graphene_quaternion_t], rad_x : Float, rad_y : Float, rad_z : Float): Ptr[graphene_quaternion_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_init_from_vec4(q : Ptr[graphene_quaternion_t], src : Ptr[graphene_vec4_t]): Ptr[graphene_quaternion_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_init_identity(q : Ptr[graphene_quaternion_t]): Ptr[graphene_quaternion_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_invert(q : Ptr[graphene_quaternion_t], res : Ptr[graphene_quaternion_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_multiply(a : Ptr[graphene_quaternion_t], b : Ptr[graphene_quaternion_t], res : Ptr[graphene_quaternion_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_normalize(q : Ptr[graphene_quaternion_t], res : Ptr[graphene_quaternion_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_scale(q : Ptr[graphene_quaternion_t], factor : Float, res : Ptr[graphene_quaternion_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_slerp(a : Ptr[graphene_quaternion_t], b : Ptr[graphene_quaternion_t], factor : Float, res : Ptr[graphene_quaternion_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_to_angle_vec3(q : Ptr[graphene_quaternion_t], angle : Ptr[Float], axis : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_to_angles(q : Ptr[graphene_quaternion_t], deg_x : Ptr[Float], deg_y : Ptr[Float], deg_z : Ptr[Float]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_to_matrix(q : Ptr[graphene_quaternion_t], m : Ptr[graphene_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_to_radians(q : Ptr[graphene_quaternion_t], rad_x : Ptr[Float], rad_y : Ptr[Float], rad_z : Ptr[Float]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-quaternion.h
  */
  def graphene_quaternion_to_vec4(q : Ptr[graphene_quaternion_t], res : Ptr[graphene_vec4_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-ray.h
  */
  def graphene_ray_alloc(): Ptr[graphene_ray_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-ray.h
  */
  def graphene_ray_equal(a : Ptr[graphene_ray_t], b : Ptr[graphene_ray_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-ray.h
  */
  def graphene_ray_free(r : Ptr[graphene_ray_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-ray.h
  */
  def graphene_ray_get_closest_point_to_point(r : Ptr[graphene_ray_t], p : Ptr[graphene_point3d_t], res : Ptr[graphene_point3d_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-ray.h
  */
  def graphene_ray_get_direction(r : Ptr[graphene_ray_t], direction : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-ray.h
  */
  def graphene_ray_get_distance_to_plane(r : Ptr[graphene_ray_t], p : Ptr[graphene_plane_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-ray.h
  */
  def graphene_ray_get_distance_to_point(r : Ptr[graphene_ray_t], p : Ptr[graphene_point3d_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-ray.h
  */
  def graphene_ray_get_origin(r : Ptr[graphene_ray_t], origin : Ptr[graphene_point3d_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-ray.h
  */
  def graphene_ray_get_position_at(r : Ptr[graphene_ray_t], t : Float, position : Ptr[graphene_point3d_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-ray.h
  */
  def graphene_ray_init(r : Ptr[graphene_ray_t], origin : Ptr[graphene_point3d_t], direction : Ptr[graphene_vec3_t]): Ptr[graphene_ray_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-ray.h
  */
  def graphene_ray_init_from_ray(r : Ptr[graphene_ray_t], src : Ptr[graphene_ray_t]): Ptr[graphene_ray_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-ray.h
  */
  def graphene_ray_init_from_vec3(r : Ptr[graphene_ray_t], origin : Ptr[graphene_vec3_t], direction : Ptr[graphene_vec3_t]): Ptr[graphene_ray_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-ray.h
  */
  def graphene_ray_intersect_box(r : Ptr[graphene_ray_t], b : Ptr[graphene_box_t], t_out : Ptr[Float]): graphene_ray_intersection_kind_t = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-ray.h
  */
  def graphene_ray_intersect_sphere(r : Ptr[graphene_ray_t], s : Ptr[graphene_sphere_t], t_out : Ptr[Float]): graphene_ray_intersection_kind_t = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-ray.h
  */
  def graphene_ray_intersect_triangle(r : Ptr[graphene_ray_t], t : Ptr[graphene_triangle_t], t_out : Ptr[Float]): graphene_ray_intersection_kind_t = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-ray.h
  */
  def graphene_ray_intersects_box(r : Ptr[graphene_ray_t], b : Ptr[graphene_box_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-ray.h
  */
  def graphene_ray_intersects_sphere(r : Ptr[graphene_ray_t], s : Ptr[graphene_sphere_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-ray.h
  */
  def graphene_ray_intersects_triangle(r : Ptr[graphene_ray_t], t : Ptr[graphene_triangle_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_alloc(): Ptr[graphene_rect_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_contains_point(r : Ptr[graphene_rect_t], p : Ptr[graphene_point_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_contains_rect(a : Ptr[graphene_rect_t], b : Ptr[graphene_rect_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_equal(a : Ptr[graphene_rect_t], b : Ptr[graphene_rect_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_expand(r : Ptr[graphene_rect_t], p : Ptr[graphene_point_t], res : Ptr[graphene_rect_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_free(r : Ptr[graphene_rect_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_get_area(r : Ptr[graphene_rect_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_get_bottom_left(r : Ptr[graphene_rect_t], p : Ptr[graphene_point_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_get_bottom_right(r : Ptr[graphene_rect_t], p : Ptr[graphene_point_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_get_center(r : Ptr[graphene_rect_t], p : Ptr[graphene_point_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_get_height(r : Ptr[graphene_rect_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_get_top_left(r : Ptr[graphene_rect_t], p : Ptr[graphene_point_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_get_top_right(r : Ptr[graphene_rect_t], p : Ptr[graphene_point_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_get_vertices(r : Ptr[graphene_rect_t], vertices : Ptr[graphene_vec2_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_get_width(r : Ptr[graphene_rect_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_get_x(r : Ptr[graphene_rect_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_get_y(r : Ptr[graphene_rect_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_init(r : Ptr[graphene_rect_t], x : Float, y : Float, width : Float, height : Float): Ptr[graphene_rect_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_init_from_rect(r : Ptr[graphene_rect_t], src : Ptr[graphene_rect_t]): Ptr[graphene_rect_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_inset(r : Ptr[graphene_rect_t], d_x : Float, d_y : Float): Ptr[graphene_rect_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_inset_r(r : Ptr[graphene_rect_t], d_x : Float, d_y : Float, res : Ptr[graphene_rect_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_interpolate(a : Ptr[graphene_rect_t], b : Ptr[graphene_rect_t], factor : Double, res : Ptr[graphene_rect_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_intersection(a : Ptr[graphene_rect_t], b : Ptr[graphene_rect_t], res : Ptr[graphene_rect_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_normalize(r : Ptr[graphene_rect_t]): Ptr[graphene_rect_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_normalize_r(r : Ptr[graphene_rect_t], res : Ptr[graphene_rect_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_offset(r : Ptr[graphene_rect_t], d_x : Float, d_y : Float): Ptr[graphene_rect_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_offset_r(r : Ptr[graphene_rect_t], d_x : Float, d_y : Float, res : Ptr[graphene_rect_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_round(r : Ptr[graphene_rect_t], res : Ptr[graphene_rect_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_round_extents(r : Ptr[graphene_rect_t], res : Ptr[graphene_rect_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_round_to_pixel(r : Ptr[graphene_rect_t]): Ptr[graphene_rect_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_scale(r : Ptr[graphene_rect_t], s_h : Float, s_v : Float, res : Ptr[graphene_rect_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_union(a : Ptr[graphene_rect_t], b : Ptr[graphene_rect_t], res : Ptr[graphene_rect_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-rect.h
  */
  def graphene_rect_zero(): Ptr[graphene_rect_t] = extern

  /**
   * graphene_simd4x4f_add: : a #graphene_simd4x4f_t : a #graphene_simd4x4f_t : (out caller-allocates): return location for a #graphene_simd4x4f_t
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_add(a : Ptr[graphene_simd4x4f_t], b : Ptr[graphene_simd4x4f_t], res : Ptr[graphene_simd4x4f_t]): Unit = extern

  /**
   * graphene_simd4x4f_determinant: : a #graphene_simd4x4f_t _r: (out): return location for the matrix determinant _r: (out): return location for the inverse of the matrix determinant
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_determinant(m : Ptr[graphene_simd4x4f_t], det_r : Ptr[graphene_simd4f_t], invdet_r : Ptr[graphene_simd4f_t]): Unit = extern

  /**
   * graphene_simd4x4f_div: : a #graphene_simd4x4f_t : a #graphene_simd4x4f_t : (out caller-allocates): return location for a #graphene_simd4x4f_t
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_div(a : Ptr[graphene_simd4x4f_t], b : Ptr[graphene_simd4x4f_t], res : Ptr[graphene_simd4x4f_t]): Unit = extern

  /**
   * graphene_simd4x4f_init_from_float: : a #graphene_simd4x4f_t : (array fixed-size=16): an array of 16 floating point values
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_init_from_float(m : Ptr[graphene_simd4x4f_t], f : Ptr[Float]): Unit = extern

  /**
   * graphene_simd4x4f_init_frustum: : a #graphene_simd4x4f_t : distance of the left clipping plane : distance of the right clipping plane : distance of the bottom clipping plane : distance of the top clipping plane _near: distance of the near clipping plane _far: distance of the far clipping plane
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_init_frustum(m : Ptr[graphene_simd4x4f_t], left : Float, right : Float, bottom : Float, top : Float, z_near : Float, z_far : Float): Unit = extern

  /**
   * graphene_simd4x4f_init_identity: : a #graphene_simd4x4f_t
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_init_identity(m : Ptr[graphene_simd4x4f_t]): Unit = extern

  /**
   * graphene_simd4x4f_init_ortho: : a #graphene_simd4x4f_t : edge of the left clipping plane : edge of the right clipping plane : edge of the bottom clipping plane : edge of the top clipping plane _near: depth of the near clipping plane _far: depth of the far clipping plane
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_init_ortho(m : Ptr[graphene_simd4x4f_t], left : Float, right : Float, bottom : Float, top : Float, z_near : Float, z_far : Float): Unit = extern

  /**
   * graphene_simd4x4f_init_perspective: : a #graphene_simd4x4f_t _rad: the angle of the field of vision, in radians : the aspect value _near: the depth of the near clipping plane _far: the depth of the far clipping plane
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_init_perspective(m : Ptr[graphene_simd4x4f_t], fovy_rad : Float, aspect : Float, z_near : Float, z_far : Float): Unit = extern

  /**
   * graphene_simd4x4f_inv_ortho_point3_mul: : a #graphene_simd4x4f_t : a #graphene_simd4x4f_t : (out): return location for the result vector
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_inv_ortho_point3_mul(a : Ptr[graphene_simd4x4f_t], b : Ptr[graphene_simd4f_t], res : Ptr[graphene_simd4f_t]): Unit = extern

  /**
   * graphene_simd4x4f_inv_ortho_vec3_mul: : a #graphene_simd4x4f_t : a #graphene_simd4f_t : (out): return location for the transformed vector
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_inv_ortho_vec3_mul(a : Ptr[graphene_simd4x4f_t], b : Ptr[graphene_simd4f_t], res : Ptr[graphene_simd4f_t]): Unit = extern

  /**
   * graphene_simd4x4f_inverse: : a #graphene_simd4x4f_t : (out): return location for the inverse matrix
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_inverse(m : Ptr[graphene_simd4x4f_t], res : Ptr[graphene_simd4x4f_t]): Boolean = extern

  /**
   * graphene_simd4x4f_is_2d: : a #graphene_simd4x4f_t
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_is_2d(m : Ptr[graphene_simd4x4f_t]): Boolean = extern

  /**
   * graphene_simd4x4f_is_identity: : a #graphene_simd4x4f_t
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_is_identity(m : Ptr[graphene_simd4x4f_t]): Boolean = extern

  /**
   * graphene_simd4x4f_matrix_mul: : a #graphene_simd4x4f_t : a #graphene_simd4x4f_t : (out): return location for the result
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_matrix_mul(a : Ptr[graphene_simd4x4f_t], b : Ptr[graphene_simd4x4f_t], res : Ptr[graphene_simd4x4f_t]): Unit = extern

  /**
   * graphene_simd4x4f_mul: : a #graphene_simd4x4f_t : a #graphene_simd4x4f_t : (out caller-allocates): return location for a #graphene_simd4x4f_t
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_mul(a : Ptr[graphene_simd4x4f_t], b : Ptr[graphene_simd4x4f_t], res : Ptr[graphene_simd4x4f_t]): Unit = extern

  /**
   * graphene_simd4x4f_perspective: : a #graphene_simd4x4f_t : depth of the perspective
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_perspective(m : Ptr[graphene_simd4x4f_t], depth : Float): Unit = extern

  /**
   * graphene_simd4x4f_point3_mul: : a #graphene_simd4x4f_t : a #graphene_simd4f_t : (out): return location for a #graphene_simd4f_t
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_point3_mul(m : Ptr[graphene_simd4x4f_t], p : Ptr[graphene_simd4f_t], res : Ptr[graphene_simd4f_t]): Unit = extern

  /**
   * graphene_simd4x4f_scale: : a #graphene_simd4x4f_t : scaling factor on the X axis : scaling factor on the Y axis : scaling factor on the Z axis
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_scale(m : Ptr[graphene_simd4x4f_t], x : Float, y : Float, z : Float): Unit = extern

  /**
   * graphene_simd4x4f_sub: : a #graphene_simd4x4f_t : a #graphene_simd4x4f_t : (out caller-allocates): return location for a #graphene_simd4x4f_t
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_sub(a : Ptr[graphene_simd4x4f_t], b : Ptr[graphene_simd4x4f_t], res : Ptr[graphene_simd4x4f_t]): Unit = extern

  /**
   * graphene_simd4x4f_sum: : a #graphene_simd4f_t : (out): return location for the sum vector
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_sum(a : Ptr[graphene_simd4x4f_t], res : Ptr[graphene_simd4f_t]): Unit = extern

  /**
   * graphene_simd4x4f_to_float: : a #graphene_sidm4x4f_t : (out caller-allocates) (array fixed-size=16): a floating point values vector capable of holding at least 16 values
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_to_float(m : Ptr[graphene_simd4x4f_t], v : Ptr[Float]): Unit = extern

  /**
   * graphene_simd4x4f_translation: : a #graphene_simd4x4f_t : coordinate of the X translation : coordinate of the Y translation : coordinate of the Z translation
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_translation(m : Ptr[graphene_simd4x4f_t], x : Float, y : Float, z : Float): Unit = extern

  /**
   * graphene_simd4x4f_transpose: : a #graphene_simd4x4f_t : (out): return location for the transposed matrix
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_transpose(s : Ptr[graphene_simd4x4f_t], res : Ptr[graphene_simd4x4f_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_transpose_in_place(s : Ptr[graphene_simd4x4f_t]): Unit = extern

  /**
   * graphene_simd4x4f_vec3_mul: : a #graphene_simd4x4f_t : a #graphene_simd4f_t : (out): return location for a #graphene_simd4f_t
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_vec3_mul(m : Ptr[graphene_simd4x4f_t], v : Ptr[graphene_simd4f_t], res : Ptr[graphene_simd4f_t]): Unit = extern

  /**
   * graphene_simd4x4f_vec4_mul: : a #graphene_simd4x4f_t : a #graphene_simd4f_t : (out): return location for a #graphene_simd4f_t
  
   * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
  */
  def graphene_simd4x4f_vec4_mul(a : Ptr[graphene_simd4x4f_t], b : Ptr[graphene_simd4f_t], res : Ptr[graphene_simd4f_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-size.h
  */
  def graphene_size_alloc(): Ptr[graphene_size_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-size.h
  */
  def graphene_size_equal(a : Ptr[graphene_size_t], b : Ptr[graphene_size_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-size.h
  */
  def graphene_size_free(s : Ptr[graphene_size_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-size.h
  */
  def graphene_size_init(s : Ptr[graphene_size_t], width : Float, height : Float): Ptr[graphene_size_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-size.h
  */
  def graphene_size_init_from_size(s : Ptr[graphene_size_t], src : Ptr[graphene_size_t]): Ptr[graphene_size_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-size.h
  */
  def graphene_size_interpolate(a : Ptr[graphene_size_t], b : Ptr[graphene_size_t], factor : Double, res : Ptr[graphene_size_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-size.h
  */
  def graphene_size_scale(s : Ptr[graphene_size_t], factor : Float, res : Ptr[graphene_size_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-size.h
  */
  def graphene_size_zero(): Ptr[graphene_size_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-sphere.h
  */
  def graphene_sphere_alloc(): Ptr[graphene_sphere_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-sphere.h
  */
  def graphene_sphere_contains_point(s : Ptr[graphene_sphere_t], point : Ptr[graphene_point3d_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-sphere.h
  */
  def graphene_sphere_distance(s : Ptr[graphene_sphere_t], point : Ptr[graphene_point3d_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-sphere.h
  */
  def graphene_sphere_equal(a : Ptr[graphene_sphere_t], b : Ptr[graphene_sphere_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-sphere.h
  */
  def graphene_sphere_free(s : Ptr[graphene_sphere_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-sphere.h
  */
  def graphene_sphere_get_bounding_box(s : Ptr[graphene_sphere_t], box : Ptr[graphene_box_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-sphere.h
  */
  def graphene_sphere_get_center(s : Ptr[graphene_sphere_t], center : Ptr[graphene_point3d_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-sphere.h
  */
  def graphene_sphere_get_radius(s : Ptr[graphene_sphere_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-sphere.h
  */
  def graphene_sphere_init(s : Ptr[graphene_sphere_t], center : Ptr[graphene_point3d_t], radius : Float): Ptr[graphene_sphere_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-sphere.h
  */
  def graphene_sphere_init_from_points(s : Ptr[graphene_sphere_t], n_points : CUnsignedInt, points : Ptr[graphene_point3d_t], center : Ptr[graphene_point3d_t]): Ptr[graphene_sphere_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-sphere.h
  */
  def graphene_sphere_init_from_vectors(s : Ptr[graphene_sphere_t], n_vectors : CUnsignedInt, vectors : Ptr[graphene_vec3_t], center : Ptr[graphene_point3d_t]): Ptr[graphene_sphere_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-sphere.h
  */
  def graphene_sphere_is_empty(s : Ptr[graphene_sphere_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-sphere.h
  */
  def graphene_sphere_translate(s : Ptr[graphene_sphere_t], point : Ptr[graphene_point3d_t], res : Ptr[graphene_sphere_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-triangle.h
  */
  def graphene_triangle_alloc(): Ptr[graphene_triangle_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-triangle.h
  */
  def graphene_triangle_contains_point(t : Ptr[graphene_triangle_t], p : Ptr[graphene_point3d_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-triangle.h
  */
  def graphene_triangle_equal(a : Ptr[graphene_triangle_t], b : Ptr[graphene_triangle_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-triangle.h
  */
  def graphene_triangle_free(t : Ptr[graphene_triangle_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-triangle.h
  */
  def graphene_triangle_get_area(t : Ptr[graphene_triangle_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-triangle.h
  */
  def graphene_triangle_get_barycoords(t : Ptr[graphene_triangle_t], p : Ptr[graphene_point3d_t], res : Ptr[graphene_vec2_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-triangle.h
  */
  def graphene_triangle_get_bounding_box(t : Ptr[graphene_triangle_t], res : Ptr[graphene_box_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-triangle.h
  */
  def graphene_triangle_get_midpoint(t : Ptr[graphene_triangle_t], res : Ptr[graphene_point3d_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-triangle.h
  */
  def graphene_triangle_get_normal(t : Ptr[graphene_triangle_t], res : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-triangle.h
  */
  def graphene_triangle_get_plane(t : Ptr[graphene_triangle_t], res : Ptr[graphene_plane_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-triangle.h
  */
  def graphene_triangle_get_points(t : Ptr[graphene_triangle_t], a : Ptr[graphene_point3d_t], b : Ptr[graphene_point3d_t], c : Ptr[graphene_point3d_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-triangle.h
  */
  def graphene_triangle_get_uv(t : Ptr[graphene_triangle_t], p : Ptr[graphene_point3d_t], uv_a : Ptr[graphene_vec2_t], uv_b : Ptr[graphene_vec2_t], uv_c : Ptr[graphene_vec2_t], res : Ptr[graphene_vec2_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-triangle.h
  */
  def graphene_triangle_get_vertices(t : Ptr[graphene_triangle_t], a : Ptr[graphene_vec3_t], b : Ptr[graphene_vec3_t], c : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-triangle.h
  */
  def graphene_triangle_init_from_float(t : Ptr[graphene_triangle_t], a : Ptr[Float], b : Ptr[Float], c : Ptr[Float]): Ptr[graphene_triangle_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-triangle.h
  */
  def graphene_triangle_init_from_point3d(t : Ptr[graphene_triangle_t], a : Ptr[graphene_point3d_t], b : Ptr[graphene_point3d_t], c : Ptr[graphene_point3d_t]): Ptr[graphene_triangle_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-triangle.h
  */
  def graphene_triangle_init_from_vec3(t : Ptr[graphene_triangle_t], a : Ptr[graphene_vec3_t], b : Ptr[graphene_vec3_t], c : Ptr[graphene_vec3_t]): Ptr[graphene_triangle_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_add(a : Ptr[graphene_vec2_t], b : Ptr[graphene_vec2_t], res : Ptr[graphene_vec2_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_alloc(): Ptr[graphene_vec2_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_divide(a : Ptr[graphene_vec2_t], b : Ptr[graphene_vec2_t], res : Ptr[graphene_vec2_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_dot(a : Ptr[graphene_vec2_t], b : Ptr[graphene_vec2_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_equal(v1 : Ptr[graphene_vec2_t], v2 : Ptr[graphene_vec2_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_free(v : Ptr[graphene_vec2_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_get_x(v : Ptr[graphene_vec2_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_get_y(v : Ptr[graphene_vec2_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_init(v : Ptr[graphene_vec2_t], x : Float, y : Float): Ptr[graphene_vec2_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_init_from_float(v : Ptr[graphene_vec2_t], src : Ptr[Float]): Ptr[graphene_vec2_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_init_from_vec2(v : Ptr[graphene_vec2_t], src : Ptr[graphene_vec2_t]): Ptr[graphene_vec2_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_interpolate(v1 : Ptr[graphene_vec2_t], v2 : Ptr[graphene_vec2_t], factor : Double, res : Ptr[graphene_vec2_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_length(v : Ptr[graphene_vec2_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_max(a : Ptr[graphene_vec2_t], b : Ptr[graphene_vec2_t], res : Ptr[graphene_vec2_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_min(a : Ptr[graphene_vec2_t], b : Ptr[graphene_vec2_t], res : Ptr[graphene_vec2_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_multiply(a : Ptr[graphene_vec2_t], b : Ptr[graphene_vec2_t], res : Ptr[graphene_vec2_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_near(v1 : Ptr[graphene_vec2_t], v2 : Ptr[graphene_vec2_t], epsilon : Float): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_negate(v : Ptr[graphene_vec2_t], res : Ptr[graphene_vec2_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_normalize(v : Ptr[graphene_vec2_t], res : Ptr[graphene_vec2_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_one(): Ptr[graphene_vec2_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_scale(v : Ptr[graphene_vec2_t], factor : Float, res : Ptr[graphene_vec2_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_subtract(a : Ptr[graphene_vec2_t], b : Ptr[graphene_vec2_t], res : Ptr[graphene_vec2_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_to_float(v : Ptr[graphene_vec2_t], dest : Ptr[Float]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_x_axis(): Ptr[graphene_vec2_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_y_axis(): Ptr[graphene_vec2_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec2.h
  */
  def graphene_vec2_zero(): Ptr[graphene_vec2_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_add(a : Ptr[graphene_vec3_t], b : Ptr[graphene_vec3_t], res : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_alloc(): Ptr[graphene_vec3_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_cross(a : Ptr[graphene_vec3_t], b : Ptr[graphene_vec3_t], res : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_divide(a : Ptr[graphene_vec3_t], b : Ptr[graphene_vec3_t], res : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_dot(a : Ptr[graphene_vec3_t], b : Ptr[graphene_vec3_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_equal(v1 : Ptr[graphene_vec3_t], v2 : Ptr[graphene_vec3_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_free(v : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_get_x(v : Ptr[graphene_vec3_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_get_xy(v : Ptr[graphene_vec3_t], res : Ptr[graphene_vec2_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_get_xy0(v : Ptr[graphene_vec3_t], res : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_get_xyz0(v : Ptr[graphene_vec3_t], res : Ptr[graphene_vec4_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_get_xyz1(v : Ptr[graphene_vec3_t], res : Ptr[graphene_vec4_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_get_xyzw(v : Ptr[graphene_vec3_t], w : Float, res : Ptr[graphene_vec4_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_get_y(v : Ptr[graphene_vec3_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_get_z(v : Ptr[graphene_vec3_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_init(v : Ptr[graphene_vec3_t], x : Float, y : Float, z : Float): Ptr[graphene_vec3_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_init_from_float(v : Ptr[graphene_vec3_t], src : Ptr[Float]): Ptr[graphene_vec3_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_init_from_vec3(v : Ptr[graphene_vec3_t], src : Ptr[graphene_vec3_t]): Ptr[graphene_vec3_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_interpolate(v1 : Ptr[graphene_vec3_t], v2 : Ptr[graphene_vec3_t], factor : Double, res : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_length(v : Ptr[graphene_vec3_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_max(a : Ptr[graphene_vec3_t], b : Ptr[graphene_vec3_t], res : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_min(a : Ptr[graphene_vec3_t], b : Ptr[graphene_vec3_t], res : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_multiply(a : Ptr[graphene_vec3_t], b : Ptr[graphene_vec3_t], res : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_near(v1 : Ptr[graphene_vec3_t], v2 : Ptr[graphene_vec3_t], epsilon : Float): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_negate(v : Ptr[graphene_vec3_t], res : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_normalize(v : Ptr[graphene_vec3_t], res : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_one(): Ptr[graphene_vec3_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_scale(v : Ptr[graphene_vec3_t], factor : Float, res : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_subtract(a : Ptr[graphene_vec3_t], b : Ptr[graphene_vec3_t], res : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_to_float(v : Ptr[graphene_vec3_t], dest : Ptr[Float]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_x_axis(): Ptr[graphene_vec3_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_y_axis(): Ptr[graphene_vec3_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_z_axis(): Ptr[graphene_vec3_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec3.h
  */
  def graphene_vec3_zero(): Ptr[graphene_vec3_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_add(a : Ptr[graphene_vec4_t], b : Ptr[graphene_vec4_t], res : Ptr[graphene_vec4_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_alloc(): Ptr[graphene_vec4_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_divide(a : Ptr[graphene_vec4_t], b : Ptr[graphene_vec4_t], res : Ptr[graphene_vec4_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_dot(a : Ptr[graphene_vec4_t], b : Ptr[graphene_vec4_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_equal(v1 : Ptr[graphene_vec4_t], v2 : Ptr[graphene_vec4_t]): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_free(v : Ptr[graphene_vec4_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_get_w(v : Ptr[graphene_vec4_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_get_x(v : Ptr[graphene_vec4_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_get_xy(v : Ptr[graphene_vec4_t], res : Ptr[graphene_vec2_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_get_xyz(v : Ptr[graphene_vec4_t], res : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_get_y(v : Ptr[graphene_vec4_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_get_z(v : Ptr[graphene_vec4_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_init(v : Ptr[graphene_vec4_t], x : Float, y : Float, z : Float, w : Float): Ptr[graphene_vec4_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_init_from_float(v : Ptr[graphene_vec4_t], src : Ptr[Float]): Ptr[graphene_vec4_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_init_from_vec2(v : Ptr[graphene_vec4_t], src : Ptr[graphene_vec2_t], z : Float, w : Float): Ptr[graphene_vec4_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_init_from_vec3(v : Ptr[graphene_vec4_t], src : Ptr[graphene_vec3_t], w : Float): Ptr[graphene_vec4_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_init_from_vec4(v : Ptr[graphene_vec4_t], src : Ptr[graphene_vec4_t]): Ptr[graphene_vec4_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_interpolate(v1 : Ptr[graphene_vec4_t], v2 : Ptr[graphene_vec4_t], factor : Double, res : Ptr[graphene_vec4_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_length(v : Ptr[graphene_vec4_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_max(a : Ptr[graphene_vec4_t], b : Ptr[graphene_vec4_t], res : Ptr[graphene_vec4_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_min(a : Ptr[graphene_vec4_t], b : Ptr[graphene_vec4_t], res : Ptr[graphene_vec4_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_multiply(a : Ptr[graphene_vec4_t], b : Ptr[graphene_vec4_t], res : Ptr[graphene_vec4_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_near(v1 : Ptr[graphene_vec4_t], v2 : Ptr[graphene_vec4_t], epsilon : Float): Boolean = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_negate(v : Ptr[graphene_vec4_t], res : Ptr[graphene_vec4_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_normalize(v : Ptr[graphene_vec4_t], res : Ptr[graphene_vec4_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_one(): Ptr[graphene_vec4_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_scale(v : Ptr[graphene_vec4_t], factor : Float, res : Ptr[graphene_vec4_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_subtract(a : Ptr[graphene_vec4_t], b : Ptr[graphene_vec4_t], res : Ptr[graphene_vec4_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_to_float(v : Ptr[graphene_vec4_t], dest : Ptr[Float]): Unit = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_w_axis(): Ptr[graphene_vec4_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_x_axis(): Ptr[graphene_vec4_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_y_axis(): Ptr[graphene_vec4_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_z_axis(): Ptr[graphene_vec4_t] = extern

  /**
   * [bindgen] header: /usr/include/graphene-1.0/graphene-vec4.h
  */
  def graphene_vec4_zero(): Ptr[graphene_vec4_t] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskenumtypes.h
  */
  def gsk_blend_mode_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_blend_node_get_blend_mode(node : Ptr[GskRenderNode]): GskBlendMode = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_blend_node_get_bottom_child(node : Ptr[GskRenderNode]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_blend_node_get_top_child(node : Ptr[GskRenderNode]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_blend_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_blend_node_new(bottom : Ptr[GskRenderNode], top : Ptr[GskRenderNode], blend_mode : GskBlendMode): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_blur_node_get_child(node : Ptr[GskRenderNode]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_blur_node_get_radius(node : Ptr[GskRenderNode]): Float = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_blur_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_blur_node_new(child : Ptr[GskRenderNode], radius : Float): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_border_node_get_colors(node : Ptr[GskRenderNode]): Ptr[GdkRGBA] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_border_node_get_outline(node : Ptr[GskRenderNode]): Ptr[GskRoundedRect] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_border_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_border_node_get_widths(node : Ptr[GskRenderNode]): Ptr[Float] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_border_node_new(outline : Ptr[GskRoundedRect], border_width : CArray[Float, Nat._4], border_color : CArray[GdkRGBA, Nat._4]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_cairo_node_get_draw_context(node : Ptr[GskRenderNode]): Ptr[cairo_t] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_cairo_node_get_surface(node : Ptr[GskRenderNode]): Ptr[cairo_surface_t] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_cairo_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_cairo_node_new(bounds : Ptr[graphene_rect_t]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskcairorenderer.h
  */
  def gsk_cairo_renderer_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskcairorenderer.h
  */
  def gsk_cairo_renderer_new(): Ptr[GskRenderer] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_clip_node_get_child(node : Ptr[GskRenderNode]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_clip_node_get_clip(node : Ptr[GskRenderNode]): Ptr[graphene_rect_t] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_clip_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_clip_node_new(child : Ptr[GskRenderNode], clip : Ptr[graphene_rect_t]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_color_matrix_node_get_child(node : Ptr[GskRenderNode]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_color_matrix_node_get_color_matrix(node : Ptr[GskRenderNode]): Ptr[graphene_matrix_t] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_color_matrix_node_get_color_offset(node : Ptr[GskRenderNode]): Ptr[graphene_vec4_t] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_color_matrix_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_color_matrix_node_new(child : Ptr[GskRenderNode], color_matrix : Ptr[graphene_matrix_t], color_offset : Ptr[graphene_vec4_t]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_color_node_get_color(node : Ptr[GskRenderNode]): Ptr[GdkRGBA] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_color_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_color_node_new(rgba : Ptr[GdkRGBA], bounds : Ptr[graphene_rect_t]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_conic_gradient_node_get_angle(node : Ptr[GskRenderNode]): Float = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_conic_gradient_node_get_center(node : Ptr[GskRenderNode]): Ptr[graphene_point_t] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_conic_gradient_node_get_color_stops(node : Ptr[GskRenderNode], n_stops : Ptr[gsize]): Ptr[GskColorStop] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_conic_gradient_node_get_n_color_stops(node : Ptr[GskRenderNode]): gsize = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_conic_gradient_node_get_rotation(node : Ptr[GskRenderNode]): Float = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_conic_gradient_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_conic_gradient_node_new(bounds : Ptr[graphene_rect_t], center : Ptr[graphene_point_t], rotation : Float, color_stops : Ptr[GskColorStop], n_color_stops : gsize): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_container_node_get_child(node : Ptr[GskRenderNode], idx : guint): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_container_node_get_n_children(node : Ptr[GskRenderNode]): guint = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_container_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_container_node_new(children : Ptr[Ptr[GskRenderNode]], n_children : guint): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskenumtypes.h
  */
  def gsk_corner_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_cross_fade_node_get_end_child(node : Ptr[GskRenderNode]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_cross_fade_node_get_progress(node : Ptr[GskRenderNode]): Float = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_cross_fade_node_get_start_child(node : Ptr[GskRenderNode]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_cross_fade_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_cross_fade_node_new(start : Ptr[GskRenderNode], end : Ptr[GskRenderNode], progress : Float): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_debug_node_get_child(node : Ptr[GskRenderNode]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_debug_node_get_message(node : Ptr[GskRenderNode]): CString = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_debug_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_debug_node_new(child : Ptr[GskRenderNode], message : CString): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_compile(shader : Ptr[GskGLShader], renderer : Ptr[GskRenderer], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_find_uniform_by_name(shader : Ptr[GskGLShader], name : CString): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_format_args(shader : Ptr[GskGLShader]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_format_args_va(shader : Ptr[GskGLShader], uniforms : va_list): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_get_arg_bool(shader : Ptr[GskGLShader], args : Ptr[GBytes], idx : CInt): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_get_arg_float(shader : Ptr[GskGLShader], args : Ptr[GBytes], idx : CInt): Float = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_get_arg_int(shader : Ptr[GskGLShader], args : Ptr[GBytes], idx : CInt): gint32 = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_get_arg_uint(shader : Ptr[GskGLShader], args : Ptr[GBytes], idx : CInt): guint32 = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_get_arg_vec2(shader : Ptr[GskGLShader], args : Ptr[GBytes], idx : CInt, out_value : Ptr[graphene_vec2_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_get_arg_vec3(shader : Ptr[GskGLShader], args : Ptr[GBytes], idx : CInt, out_value : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_get_arg_vec4(shader : Ptr[GskGLShader], args : Ptr[GBytes], idx : CInt, out_value : Ptr[graphene_vec4_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_get_args_size(shader : Ptr[GskGLShader]): gsize = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_get_n_textures(shader : Ptr[GskGLShader]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_get_n_uniforms(shader : Ptr[GskGLShader]): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_get_resource(shader : Ptr[GskGLShader]): CString = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_get_source(shader : Ptr[GskGLShader]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_get_uniform_name(shader : Ptr[GskGLShader], idx : CInt): CString = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_get_uniform_offset(shader : Ptr[GskGLShader], idx : CInt): CInt = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_get_uniform_type(shader : Ptr[GskGLShader], idx : CInt): GskGLUniformType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_new_from_bytes(sourcecode : Ptr[GBytes]): Ptr[GskGLShader] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_gl_shader_new_from_resource(resource_path : CString): Ptr[GskGLShader] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_gl_shader_node_get_args(node : Ptr[GskRenderNode]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_gl_shader_node_get_child(node : Ptr[GskRenderNode], idx : guint): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_gl_shader_node_get_n_children(node : Ptr[GskRenderNode]): guint = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_gl_shader_node_get_shader(node : Ptr[GskRenderNode]): Ptr[GskGLShader] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_gl_shader_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_gl_shader_node_new(shader : Ptr[GskGLShader], bounds : Ptr[graphene_rect_t], args : Ptr[GBytes], children : Ptr[Ptr[GskRenderNode]], n_children : guint): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskenumtypes.h
  */
  def gsk_gl_uniform_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_inset_shadow_node_get_blur_radius(node : Ptr[GskRenderNode]): Float = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_inset_shadow_node_get_color(node : Ptr[GskRenderNode]): Ptr[GdkRGBA] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_inset_shadow_node_get_dx(node : Ptr[GskRenderNode]): Float = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_inset_shadow_node_get_dy(node : Ptr[GskRenderNode]): Float = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_inset_shadow_node_get_outline(node : Ptr[GskRenderNode]): Ptr[GskRoundedRect] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_inset_shadow_node_get_spread(node : Ptr[GskRenderNode]): Float = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_inset_shadow_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_inset_shadow_node_new(outline : Ptr[GskRoundedRect], color : Ptr[GdkRGBA], dx : Float, dy : Float, spread : Float, blur_radius : Float): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_linear_gradient_node_get_color_stops(node : Ptr[GskRenderNode], n_stops : Ptr[gsize]): Ptr[GskColorStop] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_linear_gradient_node_get_end(node : Ptr[GskRenderNode]): Ptr[graphene_point_t] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_linear_gradient_node_get_n_color_stops(node : Ptr[GskRenderNode]): gsize = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_linear_gradient_node_get_start(node : Ptr[GskRenderNode]): Ptr[graphene_point_t] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_linear_gradient_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_linear_gradient_node_new(bounds : Ptr[graphene_rect_t], start : Ptr[graphene_point_t], end : Ptr[graphene_point_t], color_stops : Ptr[GskColorStop], n_color_stops : gsize): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_opacity_node_get_child(node : Ptr[GskRenderNode]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_opacity_node_get_opacity(node : Ptr[GskRenderNode]): Float = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_opacity_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_opacity_node_new(child : Ptr[GskRenderNode], opacity : Float): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_outset_shadow_node_get_blur_radius(node : Ptr[GskRenderNode]): Float = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_outset_shadow_node_get_color(node : Ptr[GskRenderNode]): Ptr[GdkRGBA] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_outset_shadow_node_get_dx(node : Ptr[GskRenderNode]): Float = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_outset_shadow_node_get_dy(node : Ptr[GskRenderNode]): Float = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_outset_shadow_node_get_outline(node : Ptr[GskRenderNode]): Ptr[GskRoundedRect] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_outset_shadow_node_get_spread(node : Ptr[GskRenderNode]): Float = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_outset_shadow_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_outset_shadow_node_new(outline : Ptr[GskRoundedRect], color : Ptr[GdkRGBA], dx : Float, dy : Float, spread : Float, blur_radius : Float): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_radial_gradient_node_get_center(node : Ptr[GskRenderNode]): Ptr[graphene_point_t] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_radial_gradient_node_get_color_stops(node : Ptr[GskRenderNode], n_stops : Ptr[gsize]): Ptr[GskColorStop] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_radial_gradient_node_get_end(node : Ptr[GskRenderNode]): Float = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_radial_gradient_node_get_hradius(node : Ptr[GskRenderNode]): Float = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_radial_gradient_node_get_n_color_stops(node : Ptr[GskRenderNode]): gsize = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_radial_gradient_node_get_start(node : Ptr[GskRenderNode]): Float = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_radial_gradient_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_radial_gradient_node_get_vradius(node : Ptr[GskRenderNode]): Float = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_radial_gradient_node_new(bounds : Ptr[graphene_rect_t], center : Ptr[graphene_point_t], hradius : Float, vradius : Float, start : Float, end : Float, color_stops : Ptr[GskColorStop], n_color_stops : gsize): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_render_node_deserialize(bytes : Ptr[GBytes], error_func : GskParseErrorFunc, user_data : gpointer): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_render_node_draw(node : Ptr[GskRenderNode], cr : Ptr[cairo_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_render_node_get_bounds(node : Ptr[GskRenderNode], bounds : Ptr[graphene_rect_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_render_node_get_node_type(node : Ptr[GskRenderNode]): GskRenderNodeType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_render_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_render_node_ref(node : Ptr[GskRenderNode]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_render_node_serialize(node : Ptr[GskRenderNode]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskenumtypes.h
  */
  def gsk_render_node_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_render_node_unref(node : Ptr[GskRenderNode]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_render_node_write_to_file(node : Ptr[GskRenderNode], filename : CString, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrenderer.h
  */
  def gsk_renderer_get_surface(renderer : Ptr[GskRenderer]): Ptr[GdkSurface] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrenderer.h
  */
  def gsk_renderer_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrenderer.h
  */
  def gsk_renderer_is_realized(renderer : Ptr[GskRenderer]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrenderer.h
  */
  def gsk_renderer_new_for_surface(surface : Ptr[GdkSurface]): Ptr[GskRenderer] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrenderer.h
  */
  def gsk_renderer_realize(renderer : Ptr[GskRenderer], surface : Ptr[GdkSurface], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrenderer.h
  */
  def gsk_renderer_render(renderer : Ptr[GskRenderer], root : Ptr[GskRenderNode], region : Ptr[cairo_region_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrenderer.h
  */
  def gsk_renderer_render_texture(renderer : Ptr[GskRenderer], root : Ptr[GskRenderNode], viewport : Ptr[graphene_rect_t]): Ptr[GdkTexture] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrenderer.h
  */
  def gsk_renderer_unrealize(renderer : Ptr[GskRenderer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_repeat_node_get_child(node : Ptr[GskRenderNode]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_repeat_node_get_child_bounds(node : Ptr[GskRenderNode]): Ptr[graphene_rect_t] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_repeat_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_repeat_node_new(bounds : Ptr[graphene_rect_t], child : Ptr[GskRenderNode], child_bounds : Ptr[graphene_rect_t]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_repeating_linear_gradient_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_repeating_linear_gradient_node_new(bounds : Ptr[graphene_rect_t], start : Ptr[graphene_point_t], end : Ptr[graphene_point_t], color_stops : Ptr[GskColorStop], n_color_stops : gsize): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_repeating_radial_gradient_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_repeating_radial_gradient_node_new(bounds : Ptr[graphene_rect_t], center : Ptr[graphene_point_t], hradius : Float, vradius : Float, start : Float, end : Float, color_stops : Ptr[GskColorStop], n_color_stops : gsize): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_rounded_clip_node_get_child(node : Ptr[GskRenderNode]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_rounded_clip_node_get_clip(node : Ptr[GskRenderNode]): Ptr[GskRoundedRect] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_rounded_clip_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_rounded_clip_node_new(child : Ptr[GskRenderNode], clip : Ptr[GskRoundedRect]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskroundedrect.h
  */
  def gsk_rounded_rect_contains_point(self : Ptr[GskRoundedRect], point : Ptr[graphene_point_t]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskroundedrect.h
  */
  def gsk_rounded_rect_contains_rect(self : Ptr[GskRoundedRect], rect : Ptr[graphene_rect_t]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskroundedrect.h
  */
  def gsk_rounded_rect_init(self : Ptr[GskRoundedRect], bounds : Ptr[graphene_rect_t], top_left : Ptr[graphene_size_t], top_right : Ptr[graphene_size_t], bottom_right : Ptr[graphene_size_t], bottom_left : Ptr[graphene_size_t]): Ptr[GskRoundedRect] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskroundedrect.h
  */
  def gsk_rounded_rect_init_copy(self : Ptr[GskRoundedRect], src : Ptr[GskRoundedRect]): Ptr[GskRoundedRect] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskroundedrect.h
  */
  def gsk_rounded_rect_init_from_rect(self : Ptr[GskRoundedRect], bounds : Ptr[graphene_rect_t], radius : Float): Ptr[GskRoundedRect] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskroundedrect.h
  */
  def gsk_rounded_rect_intersects_rect(self : Ptr[GskRoundedRect], rect : Ptr[graphene_rect_t]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskroundedrect.h
  */
  def gsk_rounded_rect_is_rectilinear(self : Ptr[GskRoundedRect]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskroundedrect.h
  */
  def gsk_rounded_rect_normalize(self : Ptr[GskRoundedRect]): Ptr[GskRoundedRect] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskroundedrect.h
  */
  def gsk_rounded_rect_offset(self : Ptr[GskRoundedRect], dx : Float, dy : Float): Ptr[GskRoundedRect] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskroundedrect.h
  */
  def gsk_rounded_rect_shrink(self : Ptr[GskRoundedRect], top : Float, right : Float, bottom : Float, left : Float): Ptr[GskRoundedRect] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskenumtypes.h
  */
  def gsk_scaling_filter_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskenumtypes.h
  */
  def gsk_serialization_error_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_serialization_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_shader_args_builder_free_to_args(builder : Ptr[GskShaderArgsBuilder]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_shader_args_builder_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_shader_args_builder_new(shader : Ptr[GskGLShader], initial_values : Ptr[GBytes]): Ptr[GskShaderArgsBuilder] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_shader_args_builder_ref(builder : Ptr[GskShaderArgsBuilder]): Ptr[GskShaderArgsBuilder] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_shader_args_builder_set_bool(builder : Ptr[GskShaderArgsBuilder], idx : CInt, value : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_shader_args_builder_set_float(builder : Ptr[GskShaderArgsBuilder], idx : CInt, value : Float): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_shader_args_builder_set_int(builder : Ptr[GskShaderArgsBuilder], idx : CInt, value : gint32): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_shader_args_builder_set_uint(builder : Ptr[GskShaderArgsBuilder], idx : CInt, value : guint32): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_shader_args_builder_set_vec2(builder : Ptr[GskShaderArgsBuilder], idx : CInt, value : Ptr[graphene_vec2_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_shader_args_builder_set_vec3(builder : Ptr[GskShaderArgsBuilder], idx : CInt, value : Ptr[graphene_vec3_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_shader_args_builder_set_vec4(builder : Ptr[GskShaderArgsBuilder], idx : CInt, value : Ptr[graphene_vec4_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_shader_args_builder_to_args(builder : Ptr[GskShaderArgsBuilder]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskglshader.h
  */
  def gsk_shader_args_builder_unref(builder : Ptr[GskShaderArgsBuilder]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_shadow_node_get_child(node : Ptr[GskRenderNode]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_shadow_node_get_n_shadows(node : Ptr[GskRenderNode]): gsize = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_shadow_node_get_shadow(node : Ptr[GskRenderNode], i : gsize): Ptr[GskShadow] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_shadow_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_shadow_node_new(child : Ptr[GskRenderNode], shadows : Ptr[GskShadow], n_shadows : gsize): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_text_node_get_color(node : Ptr[GskRenderNode]): Ptr[GdkRGBA] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_text_node_get_font(node : Ptr[GskRenderNode]): Ptr[PangoFont] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_text_node_get_glyphs(node : Ptr[GskRenderNode], n_glyphs : Ptr[guint]): Ptr[PangoGlyphInfo] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_text_node_get_num_glyphs(node : Ptr[GskRenderNode]): guint = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_text_node_get_offset(node : Ptr[GskRenderNode]): Ptr[graphene_point_t] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_text_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_text_node_has_color_glyphs(node : Ptr[GskRenderNode]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_text_node_new(font : Ptr[PangoFont], glyphs : Ptr[PangoGlyphString], color : Ptr[GdkRGBA], offset : Ptr[graphene_point_t]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_texture_node_get_texture(node : Ptr[GskRenderNode]): Ptr[GdkTexture] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_texture_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_texture_node_new(texture : Ptr[GdkTexture], bounds : Ptr[graphene_rect_t]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskenumtypes.h
  */
  def gsk_transform_category_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_equal(first : Ptr[GskTransform], second : Ptr[GskTransform]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_get_category(self : Ptr[GskTransform]): GskTransformCategory = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_invert(self : Ptr[GskTransform]): Ptr[GskTransform] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_matrix(next : Ptr[GskTransform], matrix : Ptr[graphene_matrix_t]): Ptr[GskTransform] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_new(): Ptr[GskTransform] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_transform_node_get_child(node : Ptr[GskRenderNode]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_transform_node_get_transform(node : Ptr[GskRenderNode]): Ptr[GskTransform] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_transform_node_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_transform_node_new(child : Ptr[GskRenderNode], transform : Ptr[GskTransform]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_parse(string : CString, out_transform : Ptr[Ptr[GskTransform]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_perspective(next : Ptr[GskTransform], depth : Float): Ptr[GskTransform] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_print(self : Ptr[GskTransform], string : Ptr[GString]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_ref(self : Ptr[GskTransform]): Ptr[GskTransform] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_rotate(next : Ptr[GskTransform], angle : Float): Ptr[GskTransform] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_rotate_3d(next : Ptr[GskTransform], angle : Float, axis : Ptr[graphene_vec3_t]): Ptr[GskTransform] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_scale(next : Ptr[GskTransform], factor_x : Float, factor_y : Float): Ptr[GskTransform] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_scale_3d(next : Ptr[GskTransform], factor_x : Float, factor_y : Float, factor_z : Float): Ptr[GskTransform] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_skew(next : Ptr[GskTransform], skew_x : Float, skew_y : Float): Ptr[GskTransform] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_to_2d(self : Ptr[GskTransform], out_xx : Ptr[Float], out_yx : Ptr[Float], out_xy : Ptr[Float], out_yy : Ptr[Float], out_dx : Ptr[Float], out_dy : Ptr[Float]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_to_2d_components(self : Ptr[GskTransform], out_skew_x : Ptr[Float], out_skew_y : Ptr[Float], out_scale_x : Ptr[Float], out_scale_y : Ptr[Float], out_angle : Ptr[Float], out_dx : Ptr[Float], out_dy : Ptr[Float]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_to_affine(self : Ptr[GskTransform], out_scale_x : Ptr[Float], out_scale_y : Ptr[Float], out_dx : Ptr[Float], out_dy : Ptr[Float]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_to_matrix(self : Ptr[GskTransform], out_matrix : Ptr[graphene_matrix_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_to_string(self : Ptr[GskTransform]): CString = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_to_translate(self : Ptr[GskTransform], out_dx : Ptr[Float], out_dy : Ptr[Float]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_transform(next : Ptr[GskTransform], other : Ptr[GskTransform]): Ptr[GskTransform] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_transform_bounds(self : Ptr[GskTransform], rect : Ptr[graphene_rect_t], out_rect : Ptr[graphene_rect_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_transform_point(self : Ptr[GskTransform], point : Ptr[graphene_point_t], out_point : Ptr[graphene_point_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_translate(next : Ptr[GskTransform], point : Ptr[graphene_point_t]): Ptr[GskTransform] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_translate_3d(next : Ptr[GskTransform], point : Ptr[graphene_point3d_t]): Ptr[GskTransform] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gsktransform.h
  */
  def gsk_transform_unref(self : Ptr[GskTransform]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_value_dup_render_node(value : Ptr[GValue]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_value_get_render_node(value : Ptr[GValue]): Ptr[GskRenderNode] = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_value_set_render_node(value : Ptr[GValue], node : Ptr[GskRenderNode]): Unit = extern

  /**
   * [bindgen] header: /usr/include/gtk-4.0/gsk/gskrendernode.h
  */
  def gsk_value_take_render_node(value : Ptr[GValue], node : Ptr[GskRenderNode]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-blob.h
  */
  def hb_blob_copy_writable_or_fail(blob : Ptr[hb_blob_t]): Ptr[hb_blob_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-blob.h
  */
  def hb_blob_create(data : CString, length : CUnsignedInt, mode : hb_memory_mode_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Ptr[hb_blob_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-blob.h
  */
  def hb_blob_create_from_file(file_name : CString): Ptr[hb_blob_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-blob.h
  */
  def hb_blob_create_sub_blob(parent : Ptr[hb_blob_t], offset : CUnsignedInt, length : CUnsignedInt): Ptr[hb_blob_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-blob.h
  */
  def hb_blob_destroy(blob : Ptr[hb_blob_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-blob.h
  */
  def hb_blob_get_data(blob : Ptr[hb_blob_t], length : Ptr[CUnsignedInt]): CString = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-blob.h
  */
  def hb_blob_get_data_writable(blob : Ptr[hb_blob_t], length : Ptr[CUnsignedInt]): CString = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-blob.h
  */
  def hb_blob_get_empty(): Ptr[hb_blob_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-blob.h
  */
  def hb_blob_get_length(blob : Ptr[hb_blob_t]): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-blob.h
  */
  def hb_blob_get_user_data(blob : Ptr[hb_blob_t], key : Ptr[hb_user_data_key_t]): Ptr[Byte] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-blob.h
  */
  def hb_blob_is_immutable(blob : Ptr[hb_blob_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-blob.h
  */
  def hb_blob_make_immutable(blob : Ptr[hb_blob_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-blob.h
  */
  def hb_blob_reference(blob : Ptr[hb_blob_t]): Ptr[hb_blob_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-blob.h
  */
  def hb_blob_set_user_data(blob : Ptr[hb_blob_t], key : Ptr[hb_user_data_key_t], data : Ptr[Byte], destroy : hb_destroy_func_t, replace : hb_bool_t): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_add(buffer : Ptr[hb_buffer_t], codepoint : hb_codepoint_t, cluster : CUnsignedInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_add_codepoints(buffer : Ptr[hb_buffer_t], text : Ptr[hb_codepoint_t], text_length : CInt, item_offset : CUnsignedInt, item_length : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_add_latin1(buffer : Ptr[hb_buffer_t], text : Ptr[uint8_t], text_length : CInt, item_offset : CUnsignedInt, item_length : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_add_utf16(buffer : Ptr[hb_buffer_t], text : Ptr[uint16_t], text_length : CInt, item_offset : CUnsignedInt, item_length : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_add_utf32(buffer : Ptr[hb_buffer_t], text : Ptr[uint32_t], text_length : CInt, item_offset : CUnsignedInt, item_length : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_add_utf8(buffer : Ptr[hb_buffer_t], text : CString, text_length : CInt, item_offset : CUnsignedInt, item_length : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_allocation_successful(buffer : Ptr[hb_buffer_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_append(buffer : Ptr[hb_buffer_t], source : Ptr[hb_buffer_t], start : CUnsignedInt, end : CUnsignedInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_clear_contents(buffer : Ptr[hb_buffer_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_create(): Ptr[hb_buffer_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_deserialize_glyphs(buffer : Ptr[hb_buffer_t], buf : CString, buf_len : CInt, end_ptr : Ptr[CString], font : Ptr[hb_font_t], format : hb_buffer_serialize_format_t): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_deserialize_unicode(buffer : Ptr[hb_buffer_t], buf : CString, buf_len : CInt, end_ptr : Ptr[CString], format : hb_buffer_serialize_format_t): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_destroy(buffer : Ptr[hb_buffer_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_diff(buffer : Ptr[hb_buffer_t], reference : Ptr[hb_buffer_t], dottedcircle_glyph : hb_codepoint_t, position_fuzz : CUnsignedInt): hb_buffer_diff_flags_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_get_cluster_level(buffer : Ptr[hb_buffer_t]): hb_buffer_cluster_level_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_get_content_type(buffer : Ptr[hb_buffer_t]): hb_buffer_content_type_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_get_direction(buffer : Ptr[hb_buffer_t]): hb_direction_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_get_empty(): Ptr[hb_buffer_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_get_flags(buffer : Ptr[hb_buffer_t]): hb_buffer_flags_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_get_glyph_infos(buffer : Ptr[hb_buffer_t], length : Ptr[CUnsignedInt]): Ptr[hb_glyph_info_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_get_glyph_positions(buffer : Ptr[hb_buffer_t], length : Ptr[CUnsignedInt]): Ptr[hb_glyph_position_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_get_invisible_glyph(buffer : Ptr[hb_buffer_t]): hb_codepoint_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_get_language(buffer : Ptr[hb_buffer_t]): hb_language_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_get_length(buffer : Ptr[hb_buffer_t]): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_get_replacement_codepoint(buffer : Ptr[hb_buffer_t]): hb_codepoint_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_get_script(buffer : Ptr[hb_buffer_t]): hb_script_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_get_segment_properties(buffer : Ptr[hb_buffer_t], props : Ptr[hb_segment_properties_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_get_unicode_funcs(buffer : Ptr[hb_buffer_t]): Ptr[hb_unicode_funcs_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_get_user_data(buffer : Ptr[hb_buffer_t], key : Ptr[hb_user_data_key_t]): Ptr[Byte] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_guess_segment_properties(buffer : Ptr[hb_buffer_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_has_positions(buffer : Ptr[hb_buffer_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_normalize_glyphs(buffer : Ptr[hb_buffer_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_pre_allocate(buffer : Ptr[hb_buffer_t], size : CUnsignedInt): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_reference(buffer : Ptr[hb_buffer_t]): Ptr[hb_buffer_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_reset(buffer : Ptr[hb_buffer_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_reverse(buffer : Ptr[hb_buffer_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_reverse_clusters(buffer : Ptr[hb_buffer_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_reverse_range(buffer : Ptr[hb_buffer_t], start : CUnsignedInt, end : CUnsignedInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_serialize(buffer : Ptr[hb_buffer_t], start : CUnsignedInt, end : CUnsignedInt, buf : CString, buf_size : CUnsignedInt, buf_consumed : Ptr[CUnsignedInt], font : Ptr[hb_font_t], format : hb_buffer_serialize_format_t, flags : hb_buffer_serialize_flags_t): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_serialize_format_from_string(str : CString, len : CInt): hb_buffer_serialize_format_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_serialize_format_to_string(format : hb_buffer_serialize_format_t): CString = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_serialize_glyphs(buffer : Ptr[hb_buffer_t], start : CUnsignedInt, end : CUnsignedInt, buf : CString, buf_size : CUnsignedInt, buf_consumed : Ptr[CUnsignedInt], font : Ptr[hb_font_t], format : hb_buffer_serialize_format_t, flags : hb_buffer_serialize_flags_t): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_serialize_list_formats(): Ptr[CString] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_serialize_unicode(buffer : Ptr[hb_buffer_t], start : CUnsignedInt, end : CUnsignedInt, buf : CString, buf_size : CUnsignedInt, buf_consumed : Ptr[CUnsignedInt], format : hb_buffer_serialize_format_t, flags : hb_buffer_serialize_flags_t): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_set_cluster_level(buffer : Ptr[hb_buffer_t], cluster_level : hb_buffer_cluster_level_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_set_content_type(buffer : Ptr[hb_buffer_t], content_type : hb_buffer_content_type_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_set_direction(buffer : Ptr[hb_buffer_t], direction : hb_direction_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_set_flags(buffer : Ptr[hb_buffer_t], flags : hb_buffer_flags_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_set_invisible_glyph(buffer : Ptr[hb_buffer_t], invisible : hb_codepoint_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_set_language(buffer : Ptr[hb_buffer_t], language : hb_language_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_set_length(buffer : Ptr[hb_buffer_t], length : CUnsignedInt): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_set_message_func(buffer : Ptr[hb_buffer_t], func : hb_buffer_message_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_set_replacement_codepoint(buffer : Ptr[hb_buffer_t], replacement : hb_codepoint_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_set_script(buffer : Ptr[hb_buffer_t], script : hb_script_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_set_segment_properties(buffer : Ptr[hb_buffer_t], props : Ptr[hb_segment_properties_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_set_unicode_funcs(buffer : Ptr[hb_buffer_t], unicode_funcs : Ptr[hb_unicode_funcs_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_buffer_set_user_data(buffer : Ptr[hb_buffer_t], key : Ptr[hb_user_data_key_t], data : Ptr[Byte], destroy : hb_destroy_func_t, replace : hb_bool_t): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-common.h
  */
  def hb_color_get_alpha(color : hb_color_t): uint8_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-common.h
  */
  def hb_color_get_blue(color : hb_color_t): uint8_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-common.h
  */
  def hb_color_get_green(color : hb_color_t): uint8_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-common.h
  */
  def hb_color_get_red(color : hb_color_t): uint8_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-common.h
  */
  def hb_direction_from_string(str : CString, len : CInt): hb_direction_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-common.h
  */
  def hb_direction_to_string(direction : hb_direction_t): CString = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_builder_add_table(face : Ptr[hb_face_t], tag : hb_tag_t, blob : Ptr[hb_blob_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_builder_create(): Ptr[hb_face_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_collect_unicodes(face : Ptr[hb_face_t], out : Ptr[hb_set_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_collect_variation_selectors(face : Ptr[hb_face_t], out : Ptr[hb_set_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_collect_variation_unicodes(face : Ptr[hb_face_t], variation_selector : hb_codepoint_t, out : Ptr[hb_set_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_count(blob : Ptr[hb_blob_t]): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_create(blob : Ptr[hb_blob_t], index : CUnsignedInt): Ptr[hb_face_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_create_for_tables(reference_table_func : hb_reference_table_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Ptr[hb_face_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_destroy(face : Ptr[hb_face_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_get_empty(): Ptr[hb_face_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_get_glyph_count(face : Ptr[hb_face_t]): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_get_index(face : Ptr[hb_face_t]): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_get_table_tags(face : Ptr[hb_face_t], start_offset : CUnsignedInt, table_count : Ptr[CUnsignedInt], table_tags : Ptr[hb_tag_t]): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_get_upem(face : Ptr[hb_face_t]): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_get_user_data(face : Ptr[hb_face_t], key : Ptr[hb_user_data_key_t]): Ptr[Byte] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_is_immutable(face : Ptr[hb_face_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_make_immutable(face : Ptr[hb_face_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_reference(face : Ptr[hb_face_t]): Ptr[hb_face_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_reference_blob(face : Ptr[hb_face_t]): Ptr[hb_blob_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_reference_table(face : Ptr[hb_face_t], tag : hb_tag_t): Ptr[hb_blob_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_set_glyph_count(face : Ptr[hb_face_t], glyph_count : CUnsignedInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_set_index(face : Ptr[hb_face_t], index : CUnsignedInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_set_upem(face : Ptr[hb_face_t], upem : CUnsignedInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-face.h
  */
  def hb_face_set_user_data(face : Ptr[hb_face_t], key : Ptr[hb_user_data_key_t], data : Ptr[Byte], destroy : hb_destroy_func_t, replace : hb_bool_t): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-common.h
  */
  def hb_feature_from_string(str : CString, len : CInt, feature : Ptr[hb_feature_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-common.h
  */
  def hb_feature_to_string(feature : Ptr[hb_feature_t], buf : CString, size : CUnsignedInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_add_glyph_origin_for_direction(font : Ptr[hb_font_t], glyph : hb_codepoint_t, direction : hb_direction_t, x : Ptr[hb_position_t], y : Ptr[hb_position_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_create(face : Ptr[hb_face_t]): Ptr[hb_font_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_create_sub_font(parent : Ptr[hb_font_t]): Ptr[hb_font_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_destroy(font : Ptr[hb_font_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_create(): Ptr[hb_font_funcs_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_destroy(ffuncs : Ptr[hb_font_funcs_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_get_empty(): Ptr[hb_font_funcs_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_get_user_data(ffuncs : Ptr[hb_font_funcs_t], key : Ptr[hb_user_data_key_t]): Ptr[Byte] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_is_immutable(ffuncs : Ptr[hb_font_funcs_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_make_immutable(ffuncs : Ptr[hb_font_funcs_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_reference(ffuncs : Ptr[hb_font_funcs_t]): Ptr[hb_font_funcs_t] = extern

  /**
   * hb_font_funcs_set_font_h_extents_func: : A font-function structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_set_font_h_extents_func(ffuncs : Ptr[hb_font_funcs_t], func : hb_font_get_font_h_extents_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_font_funcs_set_font_v_extents_func: : A font-function structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_set_font_v_extents_func(ffuncs : Ptr[hb_font_funcs_t], func : hb_font_get_font_v_extents_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_font_funcs_set_glyph_contour_point_func: : A font-function structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_set_glyph_contour_point_func(ffuncs : Ptr[hb_font_funcs_t], func : hb_font_get_glyph_contour_point_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_font_funcs_set_glyph_extents_func: : A font-function structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_set_glyph_extents_func(ffuncs : Ptr[hb_font_funcs_t], func : hb_font_get_glyph_extents_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_font_funcs_set_glyph_from_name_func: : A font-function structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_set_glyph_from_name_func(ffuncs : Ptr[hb_font_funcs_t], func : hb_font_get_glyph_from_name_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-deprecated.h
  */
  def hb_font_funcs_set_glyph_func(ffuncs : Ptr[hb_font_funcs_t], func : hb_font_get_glyph_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_font_funcs_set_glyph_h_advance_func: : A font-function structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_set_glyph_h_advance_func(ffuncs : Ptr[hb_font_funcs_t], func : hb_font_get_glyph_h_advance_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_font_funcs_set_glyph_h_advances_func: : A font-function structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_set_glyph_h_advances_func(ffuncs : Ptr[hb_font_funcs_t], func : hb_font_get_glyph_h_advances_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_font_funcs_set_glyph_h_kerning_func: : font functions. : (closure user_data) (destroy destroy) (scope notified): _data: :
  
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_set_glyph_h_kerning_func(ffuncs : Ptr[hb_font_funcs_t], func : hb_font_get_glyph_h_kerning_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_font_funcs_set_glyph_h_origin_func: : A font-function structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_set_glyph_h_origin_func(ffuncs : Ptr[hb_font_funcs_t], func : hb_font_get_glyph_h_origin_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_font_funcs_set_glyph_name_func: : A font-function structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_set_glyph_name_func(ffuncs : Ptr[hb_font_funcs_t], func : hb_font_get_glyph_name_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_font_funcs_set_glyph_v_advance_func: : A font-function structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_set_glyph_v_advance_func(ffuncs : Ptr[hb_font_funcs_t], func : hb_font_get_glyph_v_advance_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_font_funcs_set_glyph_v_advances_func: : A font-function structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_set_glyph_v_advances_func(ffuncs : Ptr[hb_font_funcs_t], func : hb_font_get_glyph_v_advances_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_font_funcs_set_glyph_v_kerning_func: : font functions. : (closure user_data) (destroy destroy) (scope notified): _data: :
  
   * [bindgen] header: /usr/include/harfbuzz/hb-deprecated.h
  */
  def hb_font_funcs_set_glyph_v_kerning_func(ffuncs : Ptr[hb_font_funcs_t], func : hb_font_get_glyph_v_kerning_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_font_funcs_set_glyph_v_origin_func: : A font-function structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_set_glyph_v_origin_func(ffuncs : Ptr[hb_font_funcs_t], func : hb_font_get_glyph_v_origin_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_font_funcs_set_nominal_glyph_func: : A font-function structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_set_nominal_glyph_func(ffuncs : Ptr[hb_font_funcs_t], func : hb_font_get_nominal_glyph_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_font_funcs_set_nominal_glyphs_func: : A font-function structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_set_nominal_glyphs_func(ffuncs : Ptr[hb_font_funcs_t], func : hb_font_get_nominal_glyphs_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_set_user_data(ffuncs : Ptr[hb_font_funcs_t], key : Ptr[hb_user_data_key_t], data : Ptr[Byte], destroy : hb_destroy_func_t, replace : hb_bool_t): hb_bool_t = extern

  /**
   * hb_font_funcs_set_variation_glyph_func: : A font-function structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_funcs_set_variation_glyph_func(ffuncs : Ptr[hb_font_funcs_t], func : hb_font_get_variation_glyph_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_empty(): Ptr[hb_font_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_extents_for_direction(font : Ptr[hb_font_t], direction : hb_direction_t, extents : Ptr[hb_font_extents_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_face(font : Ptr[hb_font_t]): Ptr[hb_face_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_glyph(font : Ptr[hb_font_t], unicode : hb_codepoint_t, variation_selector : hb_codepoint_t, glyph : Ptr[hb_codepoint_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_glyph_advance_for_direction(font : Ptr[hb_font_t], glyph : hb_codepoint_t, direction : hb_direction_t, x : Ptr[hb_position_t], y : Ptr[hb_position_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_glyph_advances_for_direction(font : Ptr[hb_font_t], direction : hb_direction_t, count : CUnsignedInt, first_glyph : Ptr[hb_codepoint_t], glyph_stride : CUnsignedInt, first_advance : Ptr[hb_position_t], advance_stride : CUnsignedInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_glyph_contour_point(font : Ptr[hb_font_t], glyph : hb_codepoint_t, point_index : CUnsignedInt, x : Ptr[hb_position_t], y : Ptr[hb_position_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_glyph_contour_point_for_origin(font : Ptr[hb_font_t], glyph : hb_codepoint_t, point_index : CUnsignedInt, direction : hb_direction_t, x : Ptr[hb_position_t], y : Ptr[hb_position_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_glyph_extents(font : Ptr[hb_font_t], glyph : hb_codepoint_t, extents : Ptr[hb_glyph_extents_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_glyph_extents_for_origin(font : Ptr[hb_font_t], glyph : hb_codepoint_t, direction : hb_direction_t, extents : Ptr[hb_glyph_extents_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_glyph_from_name(font : Ptr[hb_font_t], name : CString, len : CInt, glyph : Ptr[hb_codepoint_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_glyph_h_advance(font : Ptr[hb_font_t], glyph : hb_codepoint_t): hb_position_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_glyph_h_advances(font : Ptr[hb_font_t], count : CUnsignedInt, first_glyph : Ptr[hb_codepoint_t], glyph_stride : CUnsignedInt, first_advance : Ptr[hb_position_t], advance_stride : CUnsignedInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_glyph_h_kerning(font : Ptr[hb_font_t], left_glyph : hb_codepoint_t, right_glyph : hb_codepoint_t): hb_position_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_glyph_h_origin(font : Ptr[hb_font_t], glyph : hb_codepoint_t, x : Ptr[hb_position_t], y : Ptr[hb_position_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_glyph_kerning_for_direction(font : Ptr[hb_font_t], first_glyph : hb_codepoint_t, second_glyph : hb_codepoint_t, direction : hb_direction_t, x : Ptr[hb_position_t], y : Ptr[hb_position_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_glyph_name(font : Ptr[hb_font_t], glyph : hb_codepoint_t, name : CString, size : CUnsignedInt): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_glyph_origin_for_direction(font : Ptr[hb_font_t], glyph : hb_codepoint_t, direction : hb_direction_t, x : Ptr[hb_position_t], y : Ptr[hb_position_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_glyph_v_advance(font : Ptr[hb_font_t], glyph : hb_codepoint_t): hb_position_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_glyph_v_advances(font : Ptr[hb_font_t], count : CUnsignedInt, first_glyph : Ptr[hb_codepoint_t], glyph_stride : CUnsignedInt, first_advance : Ptr[hb_position_t], advance_stride : CUnsignedInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-deprecated.h
  */
  def hb_font_get_glyph_v_kerning(font : Ptr[hb_font_t], top_glyph : hb_codepoint_t, bottom_glyph : hb_codepoint_t): hb_position_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_glyph_v_origin(font : Ptr[hb_font_t], glyph : hb_codepoint_t, x : Ptr[hb_position_t], y : Ptr[hb_position_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_h_extents(font : Ptr[hb_font_t], extents : Ptr[hb_font_extents_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_nominal_glyph(font : Ptr[hb_font_t], unicode : hb_codepoint_t, glyph : Ptr[hb_codepoint_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_nominal_glyphs(font : Ptr[hb_font_t], count : CUnsignedInt, first_unicode : Ptr[hb_codepoint_t], unicode_stride : CUnsignedInt, first_glyph : Ptr[hb_codepoint_t], glyph_stride : CUnsignedInt): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_parent(font : Ptr[hb_font_t]): Ptr[hb_font_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_ppem(font : Ptr[hb_font_t], x_ppem : Ptr[CUnsignedInt], y_ppem : Ptr[CUnsignedInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_ptem(font : Ptr[hb_font_t]): Float = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_scale(font : Ptr[hb_font_t], x_scale : Ptr[CInt], y_scale : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_user_data(font : Ptr[hb_font_t], key : Ptr[hb_user_data_key_t]): Ptr[Byte] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_v_extents(font : Ptr[hb_font_t], extents : Ptr[hb_font_extents_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_var_coords_normalized(font : Ptr[hb_font_t], length : Ptr[CUnsignedInt]): Ptr[CInt] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_get_variation_glyph(font : Ptr[hb_font_t], unicode : hb_codepoint_t, variation_selector : hb_codepoint_t, glyph : Ptr[hb_codepoint_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_glyph_from_string(font : Ptr[hb_font_t], s : CString, len : CInt, glyph : Ptr[hb_codepoint_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_glyph_to_string(font : Ptr[hb_font_t], glyph : hb_codepoint_t, s : CString, size : CUnsignedInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_is_immutable(font : Ptr[hb_font_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_make_immutable(font : Ptr[hb_font_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_reference(font : Ptr[hb_font_t]): Ptr[hb_font_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_set_face(font : Ptr[hb_font_t], face : Ptr[hb_face_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_set_funcs(font : Ptr[hb_font_t], klass : Ptr[hb_font_funcs_t], font_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_set_funcs_data(font : Ptr[hb_font_t], font_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_set_parent(font : Ptr[hb_font_t], parent : Ptr[hb_font_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_set_ppem(font : Ptr[hb_font_t], x_ppem : CUnsignedInt, y_ppem : CUnsignedInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_set_ptem(font : Ptr[hb_font_t], ptem : Float): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_set_scale(font : Ptr[hb_font_t], x_scale : CInt, y_scale : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_set_user_data(font : Ptr[hb_font_t], key : Ptr[hb_user_data_key_t], data : Ptr[Byte], destroy : hb_destroy_func_t, replace : hb_bool_t): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_set_var_coords_design(font : Ptr[hb_font_t], coords : Ptr[Float], coords_length : CUnsignedInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_set_var_coords_normalized(font : Ptr[hb_font_t], coords : Ptr[CInt], coords_length : CUnsignedInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_set_var_named_instance(font : Ptr[hb_font_t], instance_index : CUnsignedInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_set_variations(font : Ptr[hb_font_t], variations : Ptr[hb_variation_t], variations_length : CUnsignedInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-font.h
  */
  def hb_font_subtract_glyph_origin_for_direction(font : Ptr[hb_font_t], glyph : hb_codepoint_t, direction : hb_direction_t, x : Ptr[hb_position_t], y : Ptr[hb_position_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_glyph_info_get_glyph_flags(info : Ptr[hb_glyph_info_t]): hb_glyph_flags_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-common.h
  */
  def hb_language_from_string(str : CString, len : CInt): hb_language_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-common.h
  */
  def hb_language_get_default(): hb_language_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-common.h
  */
  def hb_language_to_string(language : hb_language_t): CString = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-map.h
  */
  def hb_map_allocation_successful(map : Ptr[hb_map_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-map.h
  */
  def hb_map_clear(map : Ptr[hb_map_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-map.h
  */
  def hb_map_create(): Ptr[hb_map_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-map.h
  */
  def hb_map_del(map : Ptr[hb_map_t], key : hb_codepoint_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-map.h
  */
  def hb_map_destroy(map : Ptr[hb_map_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-map.h
  */
  def hb_map_get(map : Ptr[hb_map_t], key : hb_codepoint_t): hb_codepoint_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-map.h
  */
  def hb_map_get_empty(): Ptr[hb_map_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-map.h
  */
  def hb_map_get_population(map : Ptr[hb_map_t]): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-map.h
  */
  def hb_map_get_user_data(map : Ptr[hb_map_t], key : Ptr[hb_user_data_key_t]): Ptr[Byte] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-map.h
  */
  def hb_map_has(map : Ptr[hb_map_t], key : hb_codepoint_t): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-map.h
  */
  def hb_map_is_empty(map : Ptr[hb_map_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-map.h
  */
  def hb_map_reference(map : Ptr[hb_map_t]): Ptr[hb_map_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-map.h
  */
  def hb_map_set(map : Ptr[hb_map_t], key : hb_codepoint_t, value : hb_codepoint_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-map.h
  */
  def hb_map_set_user_data(map : Ptr[hb_map_t], key : Ptr[hb_user_data_key_t], data : Ptr[Byte], destroy : hb_destroy_func_t, replace : hb_bool_t): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-common.h
  */
  def hb_script_from_iso15924_tag(tag : hb_tag_t): hb_script_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-common.h
  */
  def hb_script_from_string(str : CString, len : CInt): hb_script_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-common.h
  */
  def hb_script_get_horizontal_direction(script : hb_script_t): hb_direction_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-common.h
  */
  def hb_script_to_iso15924_tag(script : hb_script_t): hb_tag_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_segment_properties_equal(a : Ptr[hb_segment_properties_t], b : Ptr[hb_segment_properties_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-buffer.h
  */
  def hb_segment_properties_hash(p : Ptr[hb_segment_properties_t]): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_add(set : Ptr[hb_set_t], codepoint : hb_codepoint_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_add_range(set : Ptr[hb_set_t], first : hb_codepoint_t, last : hb_codepoint_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_allocation_successful(set : Ptr[hb_set_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_clear(set : Ptr[hb_set_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_create(): Ptr[hb_set_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_del(set : Ptr[hb_set_t], codepoint : hb_codepoint_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_del_range(set : Ptr[hb_set_t], first : hb_codepoint_t, last : hb_codepoint_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_destroy(set : Ptr[hb_set_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_get_empty(): Ptr[hb_set_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_get_max(set : Ptr[hb_set_t]): hb_codepoint_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_get_min(set : Ptr[hb_set_t]): hb_codepoint_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_get_population(set : Ptr[hb_set_t]): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_get_user_data(set : Ptr[hb_set_t], key : Ptr[hb_user_data_key_t]): Ptr[Byte] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_has(set : Ptr[hb_set_t], codepoint : hb_codepoint_t): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_intersect(set : Ptr[hb_set_t], other : Ptr[hb_set_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-deprecated.h
  */
  def hb_set_invert(set : Ptr[hb_set_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_is_empty(set : Ptr[hb_set_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_is_equal(set : Ptr[hb_set_t], other : Ptr[hb_set_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_is_subset(set : Ptr[hb_set_t], larger_set : Ptr[hb_set_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_next(set : Ptr[hb_set_t], codepoint : Ptr[hb_codepoint_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_next_range(set : Ptr[hb_set_t], first : Ptr[hb_codepoint_t], last : Ptr[hb_codepoint_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_previous(set : Ptr[hb_set_t], codepoint : Ptr[hb_codepoint_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_previous_range(set : Ptr[hb_set_t], first : Ptr[hb_codepoint_t], last : Ptr[hb_codepoint_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_reference(set : Ptr[hb_set_t]): Ptr[hb_set_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_set(set : Ptr[hb_set_t], other : Ptr[hb_set_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_set_user_data(set : Ptr[hb_set_t], key : Ptr[hb_user_data_key_t], data : Ptr[Byte], destroy : hb_destroy_func_t, replace : hb_bool_t): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_subtract(set : Ptr[hb_set_t], other : Ptr[hb_set_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_symmetric_difference(set : Ptr[hb_set_t], other : Ptr[hb_set_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-set.h
  */
  def hb_set_union(set : Ptr[hb_set_t], other : Ptr[hb_set_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-shape.h
  */
  def hb_shape(font : Ptr[hb_font_t], buffer : Ptr[hb_buffer_t], features : Ptr[hb_feature_t], num_features : CUnsignedInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-shape.h
  */
  def hb_shape_full(font : Ptr[hb_font_t], buffer : Ptr[hb_buffer_t], features : Ptr[hb_feature_t], num_features : CUnsignedInt, shaper_list : Ptr[CString]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-shape.h
  */
  def hb_shape_list_shapers(): Ptr[CString] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-shape-plan.h
  */
  def hb_shape_plan_create(face : Ptr[hb_face_t], props : Ptr[hb_segment_properties_t], user_features : Ptr[hb_feature_t], num_user_features : CUnsignedInt, shaper_list : Ptr[CString]): Ptr[hb_shape_plan_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-shape-plan.h
  */
  def hb_shape_plan_create2(face : Ptr[hb_face_t], props : Ptr[hb_segment_properties_t], user_features : Ptr[hb_feature_t], num_user_features : CUnsignedInt, coords : Ptr[CInt], num_coords : CUnsignedInt, shaper_list : Ptr[CString]): Ptr[hb_shape_plan_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-shape-plan.h
  */
  def hb_shape_plan_create_cached(face : Ptr[hb_face_t], props : Ptr[hb_segment_properties_t], user_features : Ptr[hb_feature_t], num_user_features : CUnsignedInt, shaper_list : Ptr[CString]): Ptr[hb_shape_plan_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-shape-plan.h
  */
  def hb_shape_plan_create_cached2(face : Ptr[hb_face_t], props : Ptr[hb_segment_properties_t], user_features : Ptr[hb_feature_t], num_user_features : CUnsignedInt, coords : Ptr[CInt], num_coords : CUnsignedInt, shaper_list : Ptr[CString]): Ptr[hb_shape_plan_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-shape-plan.h
  */
  def hb_shape_plan_destroy(shape_plan : Ptr[hb_shape_plan_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-shape-plan.h
  */
  def hb_shape_plan_execute(shape_plan : Ptr[hb_shape_plan_t], font : Ptr[hb_font_t], buffer : Ptr[hb_buffer_t], features : Ptr[hb_feature_t], num_features : CUnsignedInt): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-shape-plan.h
  */
  def hb_shape_plan_get_empty(): Ptr[hb_shape_plan_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-shape-plan.h
  */
  def hb_shape_plan_get_shaper(shape_plan : Ptr[hb_shape_plan_t]): CString = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-shape-plan.h
  */
  def hb_shape_plan_get_user_data(shape_plan : Ptr[hb_shape_plan_t], key : Ptr[hb_user_data_key_t]): Ptr[Byte] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-shape-plan.h
  */
  def hb_shape_plan_reference(shape_plan : Ptr[hb_shape_plan_t]): Ptr[hb_shape_plan_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-shape-plan.h
  */
  def hb_shape_plan_set_user_data(shape_plan : Ptr[hb_shape_plan_t], key : Ptr[hb_user_data_key_t], data : Ptr[Byte], destroy : hb_destroy_func_t, replace : hb_bool_t): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-common.h
  */
  def hb_tag_from_string(str : CString, len : CInt): hb_tag_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-common.h
  */
  def hb_tag_to_string(tag : hb_tag_t, buf : CString): Unit = extern

  /**
   * hb_unicode_combining_class: : The Unicode-functions structure : The code point to query
  
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_combining_class(ufuncs : Ptr[hb_unicode_funcs_t], unicode : hb_codepoint_t): hb_unicode_combining_class_t = extern

  /**
   * hb_unicode_compose: : The Unicode-functions structure : The first code point to compose : The second code point to compose : (out): The composed code point
  
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_compose(ufuncs : Ptr[hb_unicode_funcs_t], a : hb_codepoint_t, b : hb_codepoint_t, ab : Ptr[hb_codepoint_t]): hb_bool_t = extern

  /**
   * hb_unicode_decompose: : The Unicode-functions structure : The code point to decompose : (out): The first decomposed code point : (out): The second decomposed code point
  
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_decompose(ufuncs : Ptr[hb_unicode_funcs_t], ab : hb_codepoint_t, a : Ptr[hb_codepoint_t], b : Ptr[hb_codepoint_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-deprecated.h
  */
  def hb_unicode_decompose_compatibility(ufuncs : Ptr[hb_unicode_funcs_t], u : hb_codepoint_t, decomposed : Ptr[hb_codepoint_t]): CUnsignedInt = extern

  /**
   * hb_unicode_eastasian_width:
  
   * [bindgen] header: /usr/include/harfbuzz/hb-deprecated.h
  */
  def hb_unicode_eastasian_width(ufuncs : Ptr[hb_unicode_funcs_t], unicode : hb_codepoint_t): CUnsignedInt = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_funcs_create(parent : Ptr[hb_unicode_funcs_t]): Ptr[hb_unicode_funcs_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_funcs_destroy(ufuncs : Ptr[hb_unicode_funcs_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_funcs_get_default(): Ptr[hb_unicode_funcs_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_funcs_get_empty(): Ptr[hb_unicode_funcs_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_funcs_get_parent(ufuncs : Ptr[hb_unicode_funcs_t]): Ptr[hb_unicode_funcs_t] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_funcs_get_user_data(ufuncs : Ptr[hb_unicode_funcs_t], key : Ptr[hb_user_data_key_t]): Ptr[Byte] = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_funcs_is_immutable(ufuncs : Ptr[hb_unicode_funcs_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_funcs_make_immutable(ufuncs : Ptr[hb_unicode_funcs_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_funcs_reference(ufuncs : Ptr[hb_unicode_funcs_t]): Ptr[hb_unicode_funcs_t] = extern

  /**
   * hb_unicode_funcs_set_combining_class_func: : A Unicode-functions structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_funcs_set_combining_class_func(ufuncs : Ptr[hb_unicode_funcs_t], func : hb_unicode_combining_class_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_unicode_funcs_set_compose_func: : A Unicode-functions structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_funcs_set_compose_func(ufuncs : Ptr[hb_unicode_funcs_t], func : hb_unicode_compose_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_unicode_funcs_set_decompose_compatibility_func: : a Unicode function structure : (closure user_data) (destroy destroy) (scope notified): _data: :
  
   * [bindgen] header: /usr/include/harfbuzz/hb-deprecated.h
  */
  def hb_unicode_funcs_set_decompose_compatibility_func(ufuncs : Ptr[hb_unicode_funcs_t], func : hb_unicode_decompose_compatibility_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_unicode_funcs_set_decompose_func: : A Unicode-functions structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_funcs_set_decompose_func(ufuncs : Ptr[hb_unicode_funcs_t], func : hb_unicode_decompose_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_unicode_funcs_set_eastasian_width_func: : a Unicode function structure : (closure user_data) (destroy destroy) (scope notified): _data: :
  
   * [bindgen] header: /usr/include/harfbuzz/hb-deprecated.h
  */
  def hb_unicode_funcs_set_eastasian_width_func(ufuncs : Ptr[hb_unicode_funcs_t], func : hb_unicode_eastasian_width_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_unicode_funcs_set_general_category_func: : A Unicode-functions structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_funcs_set_general_category_func(ufuncs : Ptr[hb_unicode_funcs_t], func : hb_unicode_general_category_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_unicode_funcs_set_mirroring_func: : A Unicode-functions structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_funcs_set_mirroring_func(ufuncs : Ptr[hb_unicode_funcs_t], func : hb_unicode_mirroring_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * hb_unicode_funcs_set_script_func: : A Unicode-functions structure : (closure user_data) (destroy destroy) (scope notified): The callback function to assign _data: Data to pass to : (optional): The function to call when _data is not needed anymore
  
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_funcs_set_script_func(ufuncs : Ptr[hb_unicode_funcs_t], func : hb_unicode_script_func_t, user_data : Ptr[Byte], destroy : hb_destroy_func_t): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_funcs_set_user_data(ufuncs : Ptr[hb_unicode_funcs_t], key : Ptr[hb_user_data_key_t], data : Ptr[Byte], destroy : hb_destroy_func_t, replace : hb_bool_t): hb_bool_t = extern

  /**
   * hb_unicode_general_category: : The Unicode-functions structure : The code point to query
  
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_general_category(ufuncs : Ptr[hb_unicode_funcs_t], unicode : hb_codepoint_t): hb_unicode_general_category_t = extern

  /**
   * hb_unicode_mirroring: : The Unicode-functions structure : The code point to query
  
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_mirroring(ufuncs : Ptr[hb_unicode_funcs_t], unicode : hb_codepoint_t): hb_codepoint_t = extern

  /**
   * hb_unicode_script: : The Unicode-functions structure : The code point to query
  
   * [bindgen] header: /usr/include/harfbuzz/hb-unicode.h
  */
  def hb_unicode_script(ufuncs : Ptr[hb_unicode_funcs_t], unicode : hb_codepoint_t): hb_script_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-common.h
  */
  def hb_variation_from_string(str : CString, len : CInt, variation : Ptr[hb_variation_t]): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-common.h
  */
  def hb_variation_to_string(variation : Ptr[hb_variation_t], buf : CString, size : CUnsignedInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-version.h
  */
  def hb_version(major : Ptr[CUnsignedInt], minor : Ptr[CUnsignedInt], micro : Ptr[CUnsignedInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-version.h
  */
  def hb_version_atleast(major : CUnsignedInt, minor : CUnsignedInt, micro : CUnsignedInt): hb_bool_t = extern

  /**
   * [bindgen] header: /usr/include/harfbuzz/hb-version.h
  */
  def hb_version_string(): CString = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_alignment_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_allow_breaks_new(allow_breaks : gboolean): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_background_alpha_new(alpha : guint16): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_background_new(red : guint16, green : guint16, blue : guint16): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_baseline_shift_new(shift : CInt): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-break.h
  */
  def pango_attr_break(text : CString, length : CInt, attr_list : Ptr[PangoAttrList], offset : CInt, attrs : Ptr[PangoLogAttr], attrs_len : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_fallback_new(enable_fallback : gboolean): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_family_new(family : CString): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_font_desc_new(desc : Ptr[PangoFontDescription]): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_font_features_new(features : CString): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_font_scale_new(scale : PangoFontScale): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_foreground_alpha_new(alpha : guint16): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_foreground_new(red : guint16, green : guint16, blue : guint16): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_gravity_hint_new(hint : PangoGravityHint): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_gravity_new(gravity : PangoGravity): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_insert_hyphens_new(insert_hyphens : gboolean): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_iterator_copy(iterator : Ptr[PangoAttrIterator]): Ptr[PangoAttrIterator] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_iterator_destroy(iterator : Ptr[PangoAttrIterator]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_iterator_get(iterator : Ptr[PangoAttrIterator], `type` : PangoAttrType): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_iterator_get_attrs(iterator : Ptr[PangoAttrIterator]): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_iterator_get_font(iterator : Ptr[PangoAttrIterator], desc : Ptr[PangoFontDescription], language : Ptr[Ptr[PangoLanguage]], extra_attrs : Ptr[Ptr[GSList]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_iterator_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_iterator_next(iterator : Ptr[PangoAttrIterator]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_iterator_range(iterator : Ptr[PangoAttrIterator], start : Ptr[CInt], end : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_language_new(language : Ptr[PangoLanguage]): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_letter_spacing_new(letter_spacing : CInt): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_line_height_new(factor : Double): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_line_height_new_absolute(height : CInt): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_list_change(list : Ptr[PangoAttrList], attr : Ptr[PangoAttribute]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_list_copy(list : Ptr[PangoAttrList]): Ptr[PangoAttrList] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_list_equal(list : Ptr[PangoAttrList], other_list : Ptr[PangoAttrList]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_list_filter(list : Ptr[PangoAttrList], func : PangoAttrFilterFunc, data : gpointer): Ptr[PangoAttrList] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_list_from_string(text : CString): Ptr[PangoAttrList] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_list_get_attributes(list : Ptr[PangoAttrList]): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_list_get_iterator(list : Ptr[PangoAttrList]): Ptr[PangoAttrIterator] = extern

  /**
   * PangoAttrList:
  
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_list_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_list_insert(list : Ptr[PangoAttrList], attr : Ptr[PangoAttribute]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_list_insert_before(list : Ptr[PangoAttrList], attr : Ptr[PangoAttribute]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_list_new(): Ptr[PangoAttrList] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_list_ref(list : Ptr[PangoAttrList]): Ptr[PangoAttrList] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_list_splice(list : Ptr[PangoAttrList], other : Ptr[PangoAttrList], pos : CInt, len : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_list_to_string(list : Ptr[PangoAttrList]): CString = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_list_unref(list : Ptr[PangoAttrList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_list_update(list : Ptr[PangoAttrList], pos : CInt, remove : CInt, add : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_overline_color_new(red : guint16, green : guint16, blue : guint16): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_overline_new(overline : PangoOverline): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_rise_new(rise : CInt): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_scale_new(scale_factor : Double): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_sentence_new(): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_shape_new(ink_rect : Ptr[PangoRectangle], logical_rect : Ptr[PangoRectangle]): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_shape_new_with_data(ink_rect : Ptr[PangoRectangle], logical_rect : Ptr[PangoRectangle], data : gpointer, copy_func : PangoAttrDataCopyFunc, destroy_func : GDestroyNotify): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_show_new(flags : PangoShowFlags): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_size_new(size : CInt): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_size_new_absolute(size : CInt): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_stretch_new(stretch : PangoStretch): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_strikethrough_color_new(red : guint16, green : guint16, blue : guint16): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_strikethrough_new(strikethrough : gboolean): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_style_new(style : PangoStyle): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_text_transform_new(transform : PangoTextTransform): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_type_get_name(`type` : PangoAttrType): CString = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_attr_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_type_register(name : CString): PangoAttrType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_underline_color_new(red : guint16, green : guint16, blue : guint16): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_underline_new(underline : PangoUnderline): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_variant_new(variant : PangoVariant): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_weight_new(weight : PangoWeight): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attr_word_new(): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attribute_as_color(attr : Ptr[PangoAttribute]): Ptr[PangoAttrColor] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attribute_as_float(attr : Ptr[PangoAttribute]): Ptr[PangoAttrFloat] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attribute_as_font_desc(attr : Ptr[PangoAttribute]): Ptr[PangoAttrFontDesc] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attribute_as_font_features(attr : Ptr[PangoAttribute]): Ptr[PangoAttrFontFeatures] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attribute_as_int(attr : Ptr[PangoAttribute]): Ptr[PangoAttrInt] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attribute_as_language(attr : Ptr[PangoAttribute]): Ptr[PangoAttrLanguage] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attribute_as_shape(attr : Ptr[PangoAttribute]): Ptr[PangoAttrShape] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attribute_as_size(attr : Ptr[PangoAttribute]): Ptr[PangoAttrSize] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attribute_as_string(attr : Ptr[PangoAttribute]): Ptr[PangoAttrString] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attribute_copy(attr : Ptr[PangoAttribute]): Ptr[PangoAttribute] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attribute_destroy(attr : Ptr[PangoAttribute]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attribute_equal(attr1 : Ptr[PangoAttribute], attr2 : Ptr[PangoAttribute]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attribute_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-attributes.h
  */
  def pango_attribute_init(attr : Ptr[PangoAttribute], klass : Ptr[PangoAttrClass]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_baseline_shift_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-bidi-type.h
  */
  def pango_bidi_type_for_unichar(ch : gunichar): PangoBidiType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_bidi_type_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-break.h
  */
  def pango_break(text : CString, length : CInt, analysis : Ptr[PangoAnalysis], attrs : Ptr[PangoLogAttr], attrs_len : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_context_get_font_options(context : Ptr[PangoContext]): Ptr[cairo_font_options_t] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_context_get_resolution(context : Ptr[PangoContext]): Double = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_context_get_shape_renderer(context : Ptr[PangoContext], data : Ptr[gpointer]): PangoCairoShapeRendererFunc = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_context_set_font_options(context : Ptr[PangoContext], options : Ptr[cairo_font_options_t]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_context_set_resolution(context : Ptr[PangoContext], dpi : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_context_set_shape_renderer(context : Ptr[PangoContext], func : PangoCairoShapeRendererFunc, data : gpointer, dnotify : GDestroyNotify): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_create_context(cr : Ptr[cairo_t]): Ptr[PangoContext] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_create_layout(cr : Ptr[cairo_t]): Ptr[PangoLayout] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_error_underline_path(cr : Ptr[cairo_t], x : Double, y : Double, width : Double, height : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_font_get_scaled_font(font : Ptr[PangoCairoFont]): Ptr[cairo_scaled_font_t] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_font_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_font_map_create_context(fontmap : Ptr[PangoCairoFontMap]): Ptr[PangoContext] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_font_map_get_default(): Ptr[PangoFontMap] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_font_map_get_font_type(fontmap : Ptr[PangoCairoFontMap]): cairo_font_type_t = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_font_map_get_resolution(fontmap : Ptr[PangoCairoFontMap]): Double = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_font_map_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_font_map_new(): Ptr[PangoFontMap] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_font_map_new_for_font_type(fonttype : cairo_font_type_t): Ptr[PangoFontMap] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_font_map_set_default(fontmap : Ptr[PangoCairoFontMap]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_font_map_set_resolution(fontmap : Ptr[PangoCairoFontMap], dpi : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_glyph_string_path(cr : Ptr[cairo_t], font : Ptr[PangoFont], glyphs : Ptr[PangoGlyphString]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_layout_line_path(cr : Ptr[cairo_t], line : Ptr[PangoLayoutLine]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_layout_path(cr : Ptr[cairo_t], layout : Ptr[PangoLayout]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_show_error_underline(cr : Ptr[cairo_t], x : Double, y : Double, width : Double, height : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_show_glyph_item(cr : Ptr[cairo_t], text : CString, glyph_item : Ptr[PangoGlyphItem]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_show_glyph_string(cr : Ptr[cairo_t], font : Ptr[PangoFont], glyphs : Ptr[PangoGlyphString]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_show_layout(cr : Ptr[cairo_t], layout : Ptr[PangoLayout]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_show_layout_line(cr : Ptr[cairo_t], line : Ptr[PangoLayoutLine]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_update_context(cr : Ptr[cairo_t], context : Ptr[PangoContext]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pangocairo.h
  */
  def pango_cairo_update_layout(cr : Ptr[cairo_t], layout : Ptr[PangoLayout]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-color.h
  */
  def pango_color_copy(src : Ptr[PangoColor]): Ptr[PangoColor] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-color.h
  */
  def pango_color_free(color : Ptr[PangoColor]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-color.h
  */
  def pango_color_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-color.h
  */
  def pango_color_parse(color : Ptr[PangoColor], spec : CString): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-color.h
  */
  def pango_color_parse_with_alpha(color : Ptr[PangoColor], alpha : Ptr[guint16], spec : CString): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-color.h
  */
  def pango_color_to_string(color : Ptr[PangoColor]): CString = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_changed(context : Ptr[PangoContext]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_get_base_dir(context : Ptr[PangoContext]): PangoDirection = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_get_base_gravity(context : Ptr[PangoContext]): PangoGravity = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_get_font_description(context : Ptr[PangoContext]): Ptr[PangoFontDescription] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_get_font_map(context : Ptr[PangoContext]): Ptr[PangoFontMap] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_get_gravity(context : Ptr[PangoContext]): PangoGravity = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_get_gravity_hint(context : Ptr[PangoContext]): PangoGravityHint = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_get_language(context : Ptr[PangoContext]): Ptr[PangoLanguage] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_get_matrix(context : Ptr[PangoContext]): Ptr[PangoMatrix] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_get_metrics(context : Ptr[PangoContext], desc : Ptr[PangoFontDescription], language : Ptr[PangoLanguage]): Ptr[PangoFontMetrics] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_get_round_glyph_positions(context : Ptr[PangoContext]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_get_serial(context : Ptr[PangoContext]): guint = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_list_families(context : Ptr[PangoContext], families : Ptr[Ptr[Ptr[PangoFontFamily]]], n_families : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_load_font(context : Ptr[PangoContext], desc : Ptr[PangoFontDescription]): Ptr[PangoFont] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_load_fontset(context : Ptr[PangoContext], desc : Ptr[PangoFontDescription], language : Ptr[PangoLanguage]): Ptr[PangoFontset] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_new(): Ptr[PangoContext] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_set_base_dir(context : Ptr[PangoContext], direction : PangoDirection): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_set_base_gravity(context : Ptr[PangoContext], gravity : PangoGravity): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_set_font_description(context : Ptr[PangoContext], desc : Ptr[PangoFontDescription]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_set_font_map(context : Ptr[PangoContext], font_map : Ptr[PangoFontMap]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_set_gravity_hint(context : Ptr[PangoContext], hint : PangoGravityHint): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_set_language(context : Ptr[PangoContext], language : Ptr[PangoLanguage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_set_matrix(context : Ptr[PangoContext], matrix : Ptr[PangoMatrix]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-context.h
  */
  def pango_context_set_round_glyph_positions(context : Ptr[PangoContext], round_positions : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-coverage.h
  */
  def pango_coverage_copy(coverage : Ptr[PangoCoverage]): Ptr[PangoCoverage] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-coverage.h
  */
  def pango_coverage_from_bytes(bytes : Ptr[guchar], n_bytes : CInt): Ptr[PangoCoverage] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-coverage.h
  */
  def pango_coverage_get(coverage : Ptr[PangoCoverage], `index_` : CInt): PangoCoverageLevel = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-coverage.h
  */
  def pango_coverage_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_coverage_level_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-coverage.h
  */
  def pango_coverage_max(coverage : Ptr[PangoCoverage], other : Ptr[PangoCoverage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-coverage.h
  */
  def pango_coverage_new(): Ptr[PangoCoverage] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-coverage.h
  */
  def pango_coverage_ref(coverage : Ptr[PangoCoverage]): Ptr[PangoCoverage] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-coverage.h
  */
  def pango_coverage_set(coverage : Ptr[PangoCoverage], `index_` : CInt, level : PangoCoverageLevel): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-coverage.h
  */
  def pango_coverage_to_bytes(coverage : Ptr[PangoCoverage], bytes : Ptr[Ptr[guchar]], n_bytes : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-coverage.h
  */
  def pango_coverage_unref(coverage : Ptr[PangoCoverage]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-break.h
  */
  def pango_default_break(text : CString, length : CInt, analysis : Ptr[PangoAnalysis], attrs : Ptr[PangoLogAttr], attrs_len : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_direction_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_ellipsize_mode_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
  */
  def pango_engine_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
  */
  def pango_engine_lang_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
  */
  def pango_engine_shape_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-types.h
  */
  def pango_extents_to_pixels(inclusive : Ptr[PangoRectangle], nearest : Ptr[PangoRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-bidi-type.h
  */
  def pango_find_base_dir(text : Ptr[gchar], length : gint): PangoDirection = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-utils.h
  */
  def pango_find_paragraph_boundary(text : CString, length : CInt, paragraph_delimiter_index : Ptr[CInt], next_paragraph_start : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_describe(font : Ptr[PangoFont]): Ptr[PangoFontDescription] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_describe_with_absolute_size(font : Ptr[PangoFont]): Ptr[PangoFontDescription] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_better_match(desc : Ptr[PangoFontDescription], old_match : Ptr[PangoFontDescription], new_match : Ptr[PangoFontDescription]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_copy(desc : Ptr[PangoFontDescription]): Ptr[PangoFontDescription] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_copy_static(desc : Ptr[PangoFontDescription]): Ptr[PangoFontDescription] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_equal(desc1 : Ptr[PangoFontDescription], desc2 : Ptr[PangoFontDescription]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_free(desc : Ptr[PangoFontDescription]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_from_string(str : CString): Ptr[PangoFontDescription] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_get_family(desc : Ptr[PangoFontDescription]): CString = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_get_gravity(desc : Ptr[PangoFontDescription]): PangoGravity = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_get_set_fields(desc : Ptr[PangoFontDescription]): PangoFontMask = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_get_size(desc : Ptr[PangoFontDescription]): gint = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_get_size_is_absolute(desc : Ptr[PangoFontDescription]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_get_stretch(desc : Ptr[PangoFontDescription]): PangoStretch = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_get_style(desc : Ptr[PangoFontDescription]): PangoStyle = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_get_variant(desc : Ptr[PangoFontDescription]): PangoVariant = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_get_variations(desc : Ptr[PangoFontDescription]): CString = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_get_weight(desc : Ptr[PangoFontDescription]): PangoWeight = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_hash(desc : Ptr[PangoFontDescription]): guint = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_merge(desc : Ptr[PangoFontDescription], desc_to_merge : Ptr[PangoFontDescription], replace_existing : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_merge_static(desc : Ptr[PangoFontDescription], desc_to_merge : Ptr[PangoFontDescription], replace_existing : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_new(): Ptr[PangoFontDescription] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_set_absolute_size(desc : Ptr[PangoFontDescription], size : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_set_family(desc : Ptr[PangoFontDescription], family : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_set_family_static(desc : Ptr[PangoFontDescription], family : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_set_gravity(desc : Ptr[PangoFontDescription], gravity : PangoGravity): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_set_size(desc : Ptr[PangoFontDescription], size : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_set_stretch(desc : Ptr[PangoFontDescription], stretch : PangoStretch): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_set_style(desc : Ptr[PangoFontDescription], style : PangoStyle): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_set_variant(desc : Ptr[PangoFontDescription], variant : PangoVariant): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_set_variations(desc : Ptr[PangoFontDescription], variations : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_set_variations_static(desc : Ptr[PangoFontDescription], variations : CString): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_set_weight(desc : Ptr[PangoFontDescription], weight : PangoWeight): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_to_filename(desc : Ptr[PangoFontDescription]): CString = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_to_string(desc : Ptr[PangoFontDescription]): CString = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_description_unset_fields(desc : Ptr[PangoFontDescription], to_unset : PangoFontMask): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_descriptions_free(descs : Ptr[Ptr[PangoFontDescription]], n_descs : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_deserialize(context : Ptr[PangoContext], bytes : Ptr[GBytes], error : Ptr[Ptr[GError]]): Ptr[PangoFont] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_face_describe(face : Ptr[PangoFontFace]): Ptr[PangoFontDescription] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_face_get_face_name(face : Ptr[PangoFontFace]): CString = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_face_get_family(face : Ptr[PangoFontFace]): Ptr[PangoFontFamily] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_face_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_face_is_synthesized(face : Ptr[PangoFontFace]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_face_list_sizes(face : Ptr[PangoFontFace], sizes : Ptr[Ptr[CInt]], n_sizes : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_family_get_face(family : Ptr[PangoFontFamily], name : CString): Ptr[PangoFontFace] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_family_get_name(family : Ptr[PangoFontFamily]): CString = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_family_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_family_is_monospace(family : Ptr[PangoFontFamily]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_family_is_variable(family : Ptr[PangoFontFamily]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_family_list_faces(family : Ptr[PangoFontFamily], faces : Ptr[Ptr[Ptr[PangoFontFace]]], n_faces : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_find_shaper(font : Ptr[PangoFont], language : Ptr[PangoLanguage], ch : guint32): Ptr[PangoEngineShape] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_get_coverage(font : Ptr[PangoFont], language : Ptr[PangoLanguage]): Ptr[PangoCoverage] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_get_face(font : Ptr[PangoFont]): Ptr[PangoFontFace] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_get_features(font : Ptr[PangoFont], features : Ptr[hb_feature_t], len : guint, num_features : Ptr[guint]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_get_font_map(font : Ptr[PangoFont]): Ptr[PangoFontMap] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_get_glyph_extents(font : Ptr[PangoFont], glyph : PangoGlyph, ink_rect : Ptr[PangoRectangle], logical_rect : Ptr[PangoRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_get_hb_font(font : Ptr[PangoFont]): Ptr[hb_font_t] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_get_languages(font : Ptr[PangoFont]): Ptr[Ptr[PangoLanguage]] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_get_metrics(font : Ptr[PangoFont], language : Ptr[PangoLanguage]): Ptr[PangoFontMetrics] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_has_char(font : Ptr[PangoFont], wc : gunichar): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontmap.h
  */
  def pango_font_map_changed(fontmap : Ptr[PangoFontMap]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontmap.h
  */
  def pango_font_map_create_context(fontmap : Ptr[PangoFontMap]): Ptr[PangoContext] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontmap.h
  */
  def pango_font_map_get_family(fontmap : Ptr[PangoFontMap], name : CString): Ptr[PangoFontFamily] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontmap.h
  */
  def pango_font_map_get_serial(fontmap : Ptr[PangoFontMap]): guint = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontmap.h
  */
  def pango_font_map_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontmap.h
  */
  def pango_font_map_list_families(fontmap : Ptr[PangoFontMap], families : Ptr[Ptr[Ptr[PangoFontFamily]]], n_families : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontmap.h
  */
  def pango_font_map_load_font(fontmap : Ptr[PangoFontMap], context : Ptr[PangoContext], desc : Ptr[PangoFontDescription]): Ptr[PangoFont] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontmap.h
  */
  def pango_font_map_load_fontset(fontmap : Ptr[PangoFontMap], context : Ptr[PangoContext], desc : Ptr[PangoFontDescription], language : Ptr[PangoLanguage]): Ptr[PangoFontset] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_font_mask_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_metrics_get_approximate_char_width(metrics : Ptr[PangoFontMetrics]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_metrics_get_approximate_digit_width(metrics : Ptr[PangoFontMetrics]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_metrics_get_ascent(metrics : Ptr[PangoFontMetrics]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_metrics_get_descent(metrics : Ptr[PangoFontMetrics]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_metrics_get_height(metrics : Ptr[PangoFontMetrics]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_metrics_get_strikethrough_position(metrics : Ptr[PangoFontMetrics]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_metrics_get_strikethrough_thickness(metrics : Ptr[PangoFontMetrics]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_metrics_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_metrics_get_underline_position(metrics : Ptr[PangoFontMetrics]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_metrics_get_underline_thickness(metrics : Ptr[PangoFontMetrics]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_metrics_ref(metrics : Ptr[PangoFontMetrics]): Ptr[PangoFontMetrics] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_metrics_unref(metrics : Ptr[PangoFontMetrics]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_font_scale_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-font.h
  */
  def pango_font_serialize(font : Ptr[PangoFont]): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontset.h
  */
  def pango_fontset_foreach(fontset : Ptr[PangoFontset], func : PangoFontsetForeachFunc, data : gpointer): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontset.h
  */
  def pango_fontset_get_font(fontset : Ptr[PangoFontset], wc : guint): Ptr[PangoFont] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontset.h
  */
  def pango_fontset_get_metrics(fontset : Ptr[PangoFontset]): Ptr[PangoFontMetrics] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontset.h
  */
  def pango_fontset_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontset-simple.h
  */
  def pango_fontset_simple_append(fontset : Ptr[PangoFontsetSimple], font : Ptr[PangoFont]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontset-simple.h
  */
  def pango_fontset_simple_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontset-simple.h
  */
  def pango_fontset_simple_new(language : Ptr[PangoLanguage]): Ptr[PangoFontsetSimple] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-fontset-simple.h
  */
  def pango_fontset_simple_size(fontset : Ptr[PangoFontsetSimple]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-break.h
  */
  def pango_get_log_attrs(text : CString, length : CInt, level : CInt, language : Ptr[PangoLanguage], attrs : Ptr[PangoLogAttr], attrs_len : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-bidi-type.h
  */
  def pango_get_mirror_char(ch : gunichar, mirrored_ch : Ptr[gunichar]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph-item.h
  */
  def pango_glyph_item_apply_attrs(glyph_item : Ptr[PangoGlyphItem], text : CString, list : Ptr[PangoAttrList]): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph-item.h
  */
  def pango_glyph_item_copy(orig : Ptr[PangoGlyphItem]): Ptr[PangoGlyphItem] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph-item.h
  */
  def pango_glyph_item_free(glyph_item : Ptr[PangoGlyphItem]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph-item.h
  */
  def pango_glyph_item_get_logical_widths(glyph_item : Ptr[PangoGlyphItem], text : CString, logical_widths : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph-item.h
  */
  def pango_glyph_item_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph-item.h
  */
  def pango_glyph_item_iter_copy(orig : Ptr[PangoGlyphItemIter]): Ptr[PangoGlyphItemIter] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph-item.h
  */
  def pango_glyph_item_iter_free(iter : Ptr[PangoGlyphItemIter]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph-item.h
  */
  def pango_glyph_item_iter_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph-item.h
  */
  def pango_glyph_item_iter_init_end(iter : Ptr[PangoGlyphItemIter], glyph_item : Ptr[PangoGlyphItem], text : CString): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph-item.h
  */
  def pango_glyph_item_iter_init_start(iter : Ptr[PangoGlyphItemIter], glyph_item : Ptr[PangoGlyphItem], text : CString): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph-item.h
  */
  def pango_glyph_item_iter_next_cluster(iter : Ptr[PangoGlyphItemIter]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph-item.h
  */
  def pango_glyph_item_iter_prev_cluster(iter : Ptr[PangoGlyphItemIter]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph-item.h
  */
  def pango_glyph_item_letter_space(glyph_item : Ptr[PangoGlyphItem], text : CString, log_attrs : Ptr[PangoLogAttr], letter_spacing : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph-item.h
  */
  def pango_glyph_item_split(orig : Ptr[PangoGlyphItem], text : CString, split_index : CInt): Ptr[PangoGlyphItem] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
  */
  def pango_glyph_string_copy(string : Ptr[PangoGlyphString]): Ptr[PangoGlyphString] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
  */
  def pango_glyph_string_extents(glyphs : Ptr[PangoGlyphString], font : Ptr[PangoFont], ink_rect : Ptr[PangoRectangle], logical_rect : Ptr[PangoRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
  */
  def pango_glyph_string_extents_range(glyphs : Ptr[PangoGlyphString], start : CInt, end : CInt, font : Ptr[PangoFont], ink_rect : Ptr[PangoRectangle], logical_rect : Ptr[PangoRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
  */
  def pango_glyph_string_free(string : Ptr[PangoGlyphString]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
  */
  def pango_glyph_string_get_logical_widths(glyphs : Ptr[PangoGlyphString], text : CString, length : CInt, embedding_level : CInt, logical_widths : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
  */
  def pango_glyph_string_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
  */
  def pango_glyph_string_get_width(glyphs : Ptr[PangoGlyphString]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
  */
  def pango_glyph_string_index_to_x(glyphs : Ptr[PangoGlyphString], text : CString, length : CInt, analysis : Ptr[PangoAnalysis], `index_` : CInt, trailing : gboolean, x_pos : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
  */
  def pango_glyph_string_index_to_x_full(glyphs : Ptr[PangoGlyphString], text : CString, length : CInt, analysis : Ptr[PangoAnalysis], attrs : Ptr[PangoLogAttr], `index_` : CInt, trailing : gboolean, x_pos : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
  */
  def pango_glyph_string_new(): Ptr[PangoGlyphString] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
  */
  def pango_glyph_string_set_size(string : Ptr[PangoGlyphString], new_len : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
  */
  def pango_glyph_string_x_to_index(glyphs : Ptr[PangoGlyphString], text : CString, length : CInt, analysis : Ptr[PangoAnalysis], x_pos : CInt, `index_` : Ptr[CInt], trailing : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-gravity.h
  */
  def pango_gravity_get_for_matrix(matrix : Ptr[PangoMatrix]): PangoGravity = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-gravity.h
  */
  def pango_gravity_get_for_script(script : PangoScript, base_gravity : PangoGravity, hint : PangoGravityHint): PangoGravity = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-gravity.h
  */
  def pango_gravity_get_for_script_and_width(script : PangoScript, wide : gboolean, base_gravity : PangoGravity, hint : PangoGravityHint): PangoGravity = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_gravity_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_gravity_hint_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-gravity.h
  */
  def pango_gravity_to_rotation(gravity : PangoGravity): Double = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-utils.h
  */
  def pango_is_zero_width(ch : gunichar): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-item.h
  */
  def pango_item_apply_attrs(item : Ptr[PangoItem], iter : Ptr[PangoAttrIterator]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-item.h
  */
  def pango_item_copy(item : Ptr[PangoItem]): Ptr[PangoItem] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-item.h
  */
  def pango_item_free(item : Ptr[PangoItem]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-item.h
  */
  def pango_item_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-item.h
  */
  def pango_item_new(): Ptr[PangoItem] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-item.h
  */
  def pango_item_split(orig : Ptr[PangoItem], split_index : CInt, split_offset : CInt): Ptr[PangoItem] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-item.h
  */
  def pango_itemize(context : Ptr[PangoContext], text : CString, start_index : CInt, length : CInt, attrs : Ptr[PangoAttrList], cached_iter : Ptr[PangoAttrIterator]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-item.h
  */
  def pango_itemize_with_base_dir(context : Ptr[PangoContext], base_dir : PangoDirection, text : CString, start_index : CInt, length : CInt, attrs : Ptr[PangoAttrList], cached_iter : Ptr[PangoAttrIterator]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-language.h
  */
  def pango_language_from_string(language : CString): Ptr[PangoLanguage] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-language.h
  */
  def pango_language_get_default(): Ptr[PangoLanguage] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-language.h
  */
  def pango_language_get_preferred(): Ptr[Ptr[PangoLanguage]] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-language.h
  */
  def pango_language_get_sample_string(language : Ptr[PangoLanguage]): CString = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-language.h
  */
  def pango_language_get_scripts(language : Ptr[PangoLanguage], num_scripts : Ptr[CInt]): Ptr[PangoScript] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-language.h
  */
  def pango_language_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-language.h
  */
  def pango_language_includes_script(language : Ptr[PangoLanguage], script : PangoScript): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-language.h
  */
  def pango_language_matches(language : Ptr[PangoLanguage], range_list : CString): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-language.h
  */
  def pango_language_to_string(language : Ptr[PangoLanguage]): CString = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_context_changed(layout : Ptr[PangoLayout]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_copy(src : Ptr[PangoLayout]): Ptr[PangoLayout] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_deserialize(context : Ptr[PangoContext], bytes : Ptr[GBytes], flags : PangoLayoutDeserializeFlags, error : Ptr[Ptr[GError]]): Ptr[PangoLayout] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_layout_deserialize_error_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_deserialize_error_quark(): GQuark = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_layout_deserialize_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_alignment(layout : Ptr[PangoLayout]): PangoAlignment = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_attributes(layout : Ptr[PangoLayout]): Ptr[PangoAttrList] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_auto_dir(layout : Ptr[PangoLayout]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_baseline(layout : Ptr[PangoLayout]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_caret_pos(layout : Ptr[PangoLayout], `index_` : CInt, strong_pos : Ptr[PangoRectangle], weak_pos : Ptr[PangoRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_character_count(layout : Ptr[PangoLayout]): gint = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_context(layout : Ptr[PangoLayout]): Ptr[PangoContext] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_cursor_pos(layout : Ptr[PangoLayout], `index_` : CInt, strong_pos : Ptr[PangoRectangle], weak_pos : Ptr[PangoRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_direction(layout : Ptr[PangoLayout], index : CInt): PangoDirection = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_ellipsize(layout : Ptr[PangoLayout]): PangoEllipsizeMode = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_extents(layout : Ptr[PangoLayout], ink_rect : Ptr[PangoRectangle], logical_rect : Ptr[PangoRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_font_description(layout : Ptr[PangoLayout]): Ptr[PangoFontDescription] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_height(layout : Ptr[PangoLayout]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_indent(layout : Ptr[PangoLayout]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_iter(layout : Ptr[PangoLayout]): Ptr[PangoLayoutIter] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_justify(layout : Ptr[PangoLayout]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_justify_last_line(layout : Ptr[PangoLayout]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_line(layout : Ptr[PangoLayout], line : CInt): Ptr[PangoLayoutLine] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_line_count(layout : Ptr[PangoLayout]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_line_readonly(layout : Ptr[PangoLayout], line : CInt): Ptr[PangoLayoutLine] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_line_spacing(layout : Ptr[PangoLayout]): Float = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_lines(layout : Ptr[PangoLayout]): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_lines_readonly(layout : Ptr[PangoLayout]): Ptr[GSList] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_log_attrs(layout : Ptr[PangoLayout], attrs : Ptr[Ptr[PangoLogAttr]], n_attrs : Ptr[gint]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_log_attrs_readonly(layout : Ptr[PangoLayout], n_attrs : Ptr[gint]): Ptr[PangoLogAttr] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_pixel_extents(layout : Ptr[PangoLayout], ink_rect : Ptr[PangoRectangle], logical_rect : Ptr[PangoRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_pixel_size(layout : Ptr[PangoLayout], width : Ptr[CInt], height : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_serial(layout : Ptr[PangoLayout]): guint = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_single_paragraph_mode(layout : Ptr[PangoLayout]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_size(layout : Ptr[PangoLayout], width : Ptr[CInt], height : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_spacing(layout : Ptr[PangoLayout]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_tabs(layout : Ptr[PangoLayout]): Ptr[PangoTabArray] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_text(layout : Ptr[PangoLayout]): CString = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_unknown_glyphs_count(layout : Ptr[PangoLayout]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_width(layout : Ptr[PangoLayout]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_get_wrap(layout : Ptr[PangoLayout]): PangoWrapMode = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_index_to_line_x(layout : Ptr[PangoLayout], `index_` : CInt, trailing : gboolean, line : Ptr[CInt], x_pos : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_index_to_pos(layout : Ptr[PangoLayout], `index_` : CInt, pos : Ptr[PangoRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_is_ellipsized(layout : Ptr[PangoLayout]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_is_wrapped(layout : Ptr[PangoLayout]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_at_last_line(iter : Ptr[PangoLayoutIter]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_copy(iter : Ptr[PangoLayoutIter]): Ptr[PangoLayoutIter] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_free(iter : Ptr[PangoLayoutIter]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_get_baseline(iter : Ptr[PangoLayoutIter]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_get_char_extents(iter : Ptr[PangoLayoutIter], logical_rect : Ptr[PangoRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_get_cluster_extents(iter : Ptr[PangoLayoutIter], ink_rect : Ptr[PangoRectangle], logical_rect : Ptr[PangoRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_get_index(iter : Ptr[PangoLayoutIter]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_get_layout(iter : Ptr[PangoLayoutIter]): Ptr[PangoLayout] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_get_layout_extents(iter : Ptr[PangoLayoutIter], ink_rect : Ptr[PangoRectangle], logical_rect : Ptr[PangoRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_get_line(iter : Ptr[PangoLayoutIter]): Ptr[PangoLayoutLine] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_get_line_extents(iter : Ptr[PangoLayoutIter], ink_rect : Ptr[PangoRectangle], logical_rect : Ptr[PangoRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_get_line_readonly(iter : Ptr[PangoLayoutIter]): Ptr[PangoLayoutLine] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_get_line_yrange(iter : Ptr[PangoLayoutIter], `y0_` : Ptr[CInt], `y1_` : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_get_run(iter : Ptr[PangoLayoutIter]): Ptr[PangoLayoutRun] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_get_run_baseline(iter : Ptr[PangoLayoutIter]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_get_run_extents(iter : Ptr[PangoLayoutIter], ink_rect : Ptr[PangoRectangle], logical_rect : Ptr[PangoRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_get_run_readonly(iter : Ptr[PangoLayoutIter]): Ptr[PangoLayoutRun] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_next_char(iter : Ptr[PangoLayoutIter]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_next_cluster(iter : Ptr[PangoLayoutIter]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_next_line(iter : Ptr[PangoLayoutIter]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_iter_next_run(iter : Ptr[PangoLayoutIter]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_line_get_extents(line : Ptr[PangoLayoutLine], ink_rect : Ptr[PangoRectangle], logical_rect : Ptr[PangoRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_line_get_height(line : Ptr[PangoLayoutLine], height : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_line_get_length(line : Ptr[PangoLayoutLine]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_line_get_pixel_extents(layout_line : Ptr[PangoLayoutLine], ink_rect : Ptr[PangoRectangle], logical_rect : Ptr[PangoRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_line_get_resolved_direction(line : Ptr[PangoLayoutLine]): PangoDirection = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_line_get_start_index(line : Ptr[PangoLayoutLine]): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_line_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_line_get_x_ranges(line : Ptr[PangoLayoutLine], start_index : CInt, end_index : CInt, ranges : Ptr[Ptr[CInt]], n_ranges : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_line_index_to_x(line : Ptr[PangoLayoutLine], `index_` : CInt, trailing : gboolean, x_pos : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_line_is_paragraph_start(line : Ptr[PangoLayoutLine]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_line_ref(line : Ptr[PangoLayoutLine]): Ptr[PangoLayoutLine] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_line_unref(line : Ptr[PangoLayoutLine]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_line_x_to_index(line : Ptr[PangoLayoutLine], x_pos : CInt, `index_` : Ptr[CInt], trailing : Ptr[CInt]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_move_cursor_visually(layout : Ptr[PangoLayout], strong : gboolean, old_index : CInt, old_trailing : CInt, direction : CInt, new_index : Ptr[CInt], new_trailing : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_new(context : Ptr[PangoContext]): Ptr[PangoLayout] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_serialize(layout : Ptr[PangoLayout], flags : PangoLayoutSerializeFlags): Ptr[GBytes] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_layout_serialize_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_set_alignment(layout : Ptr[PangoLayout], alignment : PangoAlignment): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_set_attributes(layout : Ptr[PangoLayout], attrs : Ptr[PangoAttrList]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_set_auto_dir(layout : Ptr[PangoLayout], auto_dir : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_set_ellipsize(layout : Ptr[PangoLayout], ellipsize : PangoEllipsizeMode): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_set_font_description(layout : Ptr[PangoLayout], desc : Ptr[PangoFontDescription]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_set_height(layout : Ptr[PangoLayout], height : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_set_indent(layout : Ptr[PangoLayout], indent : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_set_justify(layout : Ptr[PangoLayout], justify : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_set_justify_last_line(layout : Ptr[PangoLayout], justify : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_set_line_spacing(layout : Ptr[PangoLayout], factor : Float): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_set_markup(layout : Ptr[PangoLayout], markup : CString, length : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_set_markup_with_accel(layout : Ptr[PangoLayout], markup : CString, length : CInt, accel_marker : gunichar, accel_char : Ptr[gunichar]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_set_single_paragraph_mode(layout : Ptr[PangoLayout], setting : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_set_spacing(layout : Ptr[PangoLayout], spacing : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_set_tabs(layout : Ptr[PangoLayout], tabs : Ptr[PangoTabArray]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_set_text(layout : Ptr[PangoLayout], text : CString, length : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_set_width(layout : Ptr[PangoLayout], width : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_set_wrap(layout : Ptr[PangoLayout], wrap : PangoWrapMode): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_write_to_file(layout : Ptr[PangoLayout], flags : PangoLayoutSerializeFlags, filename : CString, error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-layout.h
  */
  def pango_layout_xy_to_index(layout : Ptr[PangoLayout], x : CInt, y : CInt, `index_` : Ptr[CInt], trailing : Ptr[CInt]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-utils.h
  */
  def pango_log2vis_get_embedding_levels(text : Ptr[gchar], length : CInt, pbase_dir : Ptr[PangoDirection]): Ptr[guint8] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-markup.h
  */
  def pango_markup_parser_finish(context : Ptr[GMarkupParseContext], attr_list : Ptr[Ptr[PangoAttrList]], text : Ptr[CString], accel_char : Ptr[gunichar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-markup.h
  */
  def pango_markup_parser_new(accel_marker : gunichar): Ptr[GMarkupParseContext] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-matrix.h
  */
  def pango_matrix_concat(matrix : Ptr[PangoMatrix], new_matrix : Ptr[PangoMatrix]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-matrix.h
  */
  def pango_matrix_copy(matrix : Ptr[PangoMatrix]): Ptr[PangoMatrix] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-matrix.h
  */
  def pango_matrix_free(matrix : Ptr[PangoMatrix]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-matrix.h
  */
  def pango_matrix_get_font_scale_factor(matrix : Ptr[PangoMatrix]): Double = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-matrix.h
  */
  def pango_matrix_get_font_scale_factors(matrix : Ptr[PangoMatrix], xscale : Ptr[Double], yscale : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-matrix.h
  */
  def pango_matrix_get_slant_ratio(matrix : Ptr[PangoMatrix]): Double = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-matrix.h
  */
  def pango_matrix_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-matrix.h
  */
  def pango_matrix_rotate(matrix : Ptr[PangoMatrix], degrees : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-matrix.h
  */
  def pango_matrix_scale(matrix : Ptr[PangoMatrix], scale_x : Double, scale_y : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-matrix.h
  */
  def pango_matrix_transform_distance(matrix : Ptr[PangoMatrix], dx : Ptr[Double], dy : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-matrix.h
  */
  def pango_matrix_transform_pixel_rectangle(matrix : Ptr[PangoMatrix], rect : Ptr[PangoRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-matrix.h
  */
  def pango_matrix_transform_point(matrix : Ptr[PangoMatrix], x : Ptr[Double], y : Ptr[Double]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-matrix.h
  */
  def pango_matrix_transform_rectangle(matrix : Ptr[PangoMatrix], rect : Ptr[PangoRectangle]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-matrix.h
  */
  def pango_matrix_translate(matrix : Ptr[PangoMatrix], tx : Double, ty : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_overline_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-utils.h
  */
  def pango_parse_enum(`type` : GType, str : CString, value : Ptr[CInt], warn : gboolean, possible_values : Ptr[CString]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-markup.h
  */
  def pango_parse_markup(markup_text : CString, length : CInt, accel_marker : gunichar, attr_list : Ptr[Ptr[PangoAttrList]], text : Ptr[CString], accel_char : Ptr[gunichar], error : Ptr[Ptr[GError]]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-utils.h
  */
  def pango_parse_stretch(str : CString, stretch : Ptr[PangoStretch], warn : gboolean): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-utils.h
  */
  def pango_parse_style(str : CString, style : Ptr[PangoStyle], warn : gboolean): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-utils.h
  */
  def pango_parse_variant(str : CString, variant : Ptr[PangoVariant], warn : gboolean): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-utils.h
  */
  def pango_parse_weight(str : CString, weight : Ptr[PangoWeight], warn : gboolean): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-utils.h
  */
  def pango_quantize_line_geometry(thickness : Ptr[CInt], position : Ptr[CInt]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-utils.h
  */
  def pango_read_line(stream : Ptr[FILE], str : Ptr[GString]): gint = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_render_part_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
  */
  def pango_renderer_activate(renderer : Ptr[PangoRenderer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
  */
  def pango_renderer_deactivate(renderer : Ptr[PangoRenderer]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
  */
  def pango_renderer_draw_error_underline(renderer : Ptr[PangoRenderer], x : CInt, y : CInt, width : CInt, height : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
  */
  def pango_renderer_draw_glyph(renderer : Ptr[PangoRenderer], font : Ptr[PangoFont], glyph : PangoGlyph, x : Double, y : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
  */
  def pango_renderer_draw_glyph_item(renderer : Ptr[PangoRenderer], text : CString, glyph_item : Ptr[PangoGlyphItem], x : CInt, y : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
  */
  def pango_renderer_draw_glyphs(renderer : Ptr[PangoRenderer], font : Ptr[PangoFont], glyphs : Ptr[PangoGlyphString], x : CInt, y : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
  */
  def pango_renderer_draw_layout(renderer : Ptr[PangoRenderer], layout : Ptr[PangoLayout], x : CInt, y : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
  */
  def pango_renderer_draw_layout_line(renderer : Ptr[PangoRenderer], line : Ptr[PangoLayoutLine], x : CInt, y : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
  */
  def pango_renderer_draw_rectangle(renderer : Ptr[PangoRenderer], part : PangoRenderPart, x : CInt, y : CInt, width : CInt, height : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
  */
  def pango_renderer_draw_trapezoid(renderer : Ptr[PangoRenderer], part : PangoRenderPart, `y1_` : Double, x11 : Double, x21 : Double, y2 : Double, x12 : Double, x22 : Double): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
  */
  def pango_renderer_get_alpha(renderer : Ptr[PangoRenderer], part : PangoRenderPart): guint16 = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
  */
  def pango_renderer_get_color(renderer : Ptr[PangoRenderer], part : PangoRenderPart): Ptr[PangoColor] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
  */
  def pango_renderer_get_layout(renderer : Ptr[PangoRenderer]): Ptr[PangoLayout] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
  */
  def pango_renderer_get_layout_line(renderer : Ptr[PangoRenderer]): Ptr[PangoLayoutLine] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
  */
  def pango_renderer_get_matrix(renderer : Ptr[PangoRenderer]): Ptr[PangoMatrix] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
  */
  def pango_renderer_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
  */
  def pango_renderer_part_changed(renderer : Ptr[PangoRenderer], part : PangoRenderPart): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
  */
  def pango_renderer_set_alpha(renderer : Ptr[PangoRenderer], part : PangoRenderPart, alpha : guint16): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
  */
  def pango_renderer_set_color(renderer : Ptr[PangoRenderer], part : PangoRenderPart, color : Ptr[PangoColor]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-renderer.h
  */
  def pango_renderer_set_matrix(renderer : Ptr[PangoRenderer], matrix : Ptr[PangoMatrix]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-item.h
  */
  def pango_reorder_items(items : Ptr[GList]): Ptr[GList] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-utils.h
  */
  def pango_scan_int(pos : Ptr[CString], out : Ptr[CInt]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-utils.h
  */
  def pango_scan_string(pos : Ptr[CString], out : Ptr[GString]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-utils.h
  */
  def pango_scan_word(pos : Ptr[CString], out : Ptr[GString]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-script.h
  */
  def pango_script_for_unichar(ch : gunichar): PangoScript = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-script.h
  */
  def pango_script_get_sample_language(script : PangoScript): Ptr[PangoLanguage] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_script_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-script.h
  */
  def pango_script_iter_free(iter : Ptr[PangoScriptIter]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-script.h
  */
  def pango_script_iter_get_range(iter : Ptr[PangoScriptIter], start : Ptr[CString], end : Ptr[CString], script : Ptr[PangoScript]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-script.h
  */
  def pango_script_iter_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-script.h
  */
  def pango_script_iter_new(text : CString, length : CInt): Ptr[PangoScriptIter] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-script.h
  */
  def pango_script_iter_next(iter : Ptr[PangoScriptIter]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
  */
  def pango_shape(text : CString, length : CInt, analysis : Ptr[PangoAnalysis], glyphs : Ptr[PangoGlyphString]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_shape_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
  */
  def pango_shape_full(item_text : CString, item_length : CInt, paragraph_text : CString, paragraph_length : CInt, analysis : Ptr[PangoAnalysis], glyphs : Ptr[PangoGlyphString]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
  */
  def pango_shape_item(item : Ptr[PangoItem], paragraph_text : CString, paragraph_length : CInt, log_attrs : Ptr[PangoLogAttr], glyphs : Ptr[PangoGlyphString], flags : PangoShapeFlags): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-glyph.h
  */
  def pango_shape_with_flags(item_text : CString, item_length : CInt, paragraph_text : CString, paragraph_length : CInt, analysis : Ptr[PangoAnalysis], glyphs : Ptr[PangoGlyphString], flags : PangoShapeFlags): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_show_flags_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-utils.h
  */
  def pango_skip_space(pos : Ptr[CString]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-utils.h
  */
  def pango_split_file_list(str : CString): Ptr[CString] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_stretch_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_style_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_tab_align_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def pango_tab_array_copy(src : Ptr[PangoTabArray]): Ptr[PangoTabArray] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def pango_tab_array_free(tab_array : Ptr[PangoTabArray]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def pango_tab_array_from_string(text : CString): Ptr[PangoTabArray] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def pango_tab_array_get_decimal_point(tab_array : Ptr[PangoTabArray], tab_index : CInt): gunichar = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def pango_tab_array_get_positions_in_pixels(tab_array : Ptr[PangoTabArray]): gboolean = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def pango_tab_array_get_size(tab_array : Ptr[PangoTabArray]): gint = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def pango_tab_array_get_tab(tab_array : Ptr[PangoTabArray], tab_index : gint, alignment : Ptr[PangoTabAlign], location : Ptr[gint]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def pango_tab_array_get_tabs(tab_array : Ptr[PangoTabArray], alignments : Ptr[Ptr[PangoTabAlign]], locations : Ptr[Ptr[gint]]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def pango_tab_array_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def pango_tab_array_new(initial_size : gint, positions_in_pixels : gboolean): Ptr[PangoTabArray] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def pango_tab_array_new_with_positions(size : gint, positions_in_pixels : gboolean, first_alignment : PangoTabAlign, first_position : gint): Ptr[PangoTabArray] = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def pango_tab_array_resize(tab_array : Ptr[PangoTabArray], new_size : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def pango_tab_array_set_decimal_point(tab_array : Ptr[PangoTabArray], tab_index : CInt, decimal_point : gunichar): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def pango_tab_array_set_positions_in_pixels(tab_array : Ptr[PangoTabArray], positions_in_pixels : gboolean): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def pango_tab_array_set_tab(tab_array : Ptr[PangoTabArray], tab_index : gint, alignment : PangoTabAlign, location : gint): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def pango_tab_array_sort(tab_array : Ptr[PangoTabArray]): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-tabs.h
  */
  def pango_tab_array_to_string(tab_array : Ptr[PangoTabArray]): CString = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-break.h
  */
  def pango_tailor_break(text : CString, length : CInt, analysis : Ptr[PangoAnalysis], offset : CInt, attrs : Ptr[PangoLogAttr], attrs_len : CInt): Unit = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_text_transform_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-utils.h
  */
  def pango_trim_string(str : CString): CString = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_underline_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-bidi-type.h
  */
  def pango_unichar_direction(ch : gunichar): PangoDirection = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-types.h
  */
  def pango_units_from_double(d : Double): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-types.h
  */
  def pango_units_to_double(i : CInt): Double = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_variant_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-utils.h
  */
  def pango_version(): CInt = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-utils.h
  */
  def pango_version_check(required_major : CInt, required_minor : CInt, required_micro : CInt): CString = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-utils.h
  */
  def pango_version_string(): CString = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_weight_get_type(): GType = extern

  /**
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-enum-types.h
  */
  def pango_wrap_mode_get_type(): GType = extern

  /**
   * script_engine_create: (skip)
  
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
  */
  def script_engine_create(id : CString): Ptr[PangoEngine] = extern

  /**
   * script_engine_exit: (skip)
  
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
  */
  def script_engine_exit(): Unit = extern

  /**
   * script_engine_init: (skip) : a `GTypeModule` structure used to associate any GObject types created in this module with the module.
  
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
  */
  def script_engine_init(module : Ptr[GTypeModule]): Unit = extern

  /**
   * script_engine_list: (skip) : location to store a pointer to an array of engines. _engines: location to store the number of elements in .
  
   * [bindgen] header: /usr/include/pango-1.0/pango/pango-engine.h
  */
  def script_engine_list(engines : Ptr[Ptr[PangoEngineInfo]], n_engines : Ptr[CInt]): Unit = extern

import extern_functions.*
export extern_functions.*

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_add(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_add(a, b, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_add(a : graphene_simd4f_t, b : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](3)
  !(__ptr_0 + 0) = a
  !(__ptr_0 + 1) = b
  __sn_wrap_adwaita_graphene_simd4f_add((__ptr_0 + 0), (__ptr_0 + 1), (__ptr_0 + 2))
  !(__ptr_0 + 2)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_add(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_add(a, b, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * graphene_simd4f_clamp: : a #graphene_simd4f_t : the lower boundary : the upper boundary

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_clamp(v : Ptr[graphene_simd4f_t], min : Ptr[graphene_simd4f_t], max : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_clamp(v, min, max, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * graphene_simd4f_clamp: : a #graphene_simd4f_t : the lower boundary : the upper boundary

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_clamp(v : graphene_simd4f_t, min : graphene_simd4f_t, max : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](4)
  !(__ptr_0 + 0) = v
  !(__ptr_0 + 1) = min
  !(__ptr_0 + 2) = max
  __sn_wrap_adwaita_graphene_simd4f_clamp((__ptr_0 + 0), (__ptr_0 + 1), (__ptr_0 + 2), (__ptr_0 + 3))
  !(__ptr_0 + 3)

/**
 * graphene_simd4f_clamp: : a #graphene_simd4f_t : the lower boundary : the upper boundary

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_clamp(v : Ptr[graphene_simd4f_t], min : Ptr[graphene_simd4f_t], max : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_clamp(v, min, max, __return)

/**
 * graphene_simd4f_clamp_scalar: : a #graphene_simd4f_t : the lower boundary : the upper boundary

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_clamp_scalar(v : graphene_simd4f_t, min : Float, max : Float)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = v
  __sn_wrap_adwaita_graphene_simd4f_clamp_scalar((__ptr_0 + 0), min, max, (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * graphene_simd4f_clamp_scalar: : a #graphene_simd4f_t : the lower boundary : the upper boundary

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_clamp_scalar(v : Ptr[graphene_simd4f_t], min : Float, max : Float)(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_clamp_scalar(v, min, max, __return)

/**
 * graphene_simd4f_clamp_scalar: : a #graphene_simd4f_t : the lower boundary : the upper boundary

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_clamp_scalar(v : Ptr[graphene_simd4f_t], min : Float, max : Float)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_clamp_scalar(v, min, max, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_cmp_eq(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t]): Boolean = 
  __sn_wrap_adwaita_graphene_simd4f_cmp_eq(a, b)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_cmp_eq(a : graphene_simd4f_t, b : graphene_simd4f_t)(using Zone): Boolean = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = a
  !(__ptr_0 + 1) = b
  __sn_wrap_adwaita_graphene_simd4f_cmp_eq((__ptr_0 + 0), (__ptr_0 + 1))

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_cmp_ge(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t]): Boolean = 
  __sn_wrap_adwaita_graphene_simd4f_cmp_ge(a, b)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_cmp_ge(a : graphene_simd4f_t, b : graphene_simd4f_t)(using Zone): Boolean = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = a
  !(__ptr_0 + 1) = b
  __sn_wrap_adwaita_graphene_simd4f_cmp_ge((__ptr_0 + 0), (__ptr_0 + 1))

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_cmp_gt(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t]): Boolean = 
  __sn_wrap_adwaita_graphene_simd4f_cmp_gt(a, b)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_cmp_gt(a : graphene_simd4f_t, b : graphene_simd4f_t)(using Zone): Boolean = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = a
  !(__ptr_0 + 1) = b
  __sn_wrap_adwaita_graphene_simd4f_cmp_gt((__ptr_0 + 0), (__ptr_0 + 1))

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_cmp_le(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t]): Boolean = 
  __sn_wrap_adwaita_graphene_simd4f_cmp_le(a, b)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_cmp_le(a : graphene_simd4f_t, b : graphene_simd4f_t)(using Zone): Boolean = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = a
  !(__ptr_0 + 1) = b
  __sn_wrap_adwaita_graphene_simd4f_cmp_le((__ptr_0 + 0), (__ptr_0 + 1))

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_cmp_lt(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t]): Boolean = 
  __sn_wrap_adwaita_graphene_simd4f_cmp_lt(a, b)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_cmp_lt(a : graphene_simd4f_t, b : graphene_simd4f_t)(using Zone): Boolean = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = a
  !(__ptr_0 + 1) = b
  __sn_wrap_adwaita_graphene_simd4f_cmp_lt((__ptr_0 + 0), (__ptr_0 + 1))

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_cmp_neq(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t]): Boolean = 
  __sn_wrap_adwaita_graphene_simd4f_cmp_neq(a, b)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_cmp_neq(a : graphene_simd4f_t, b : graphene_simd4f_t)(using Zone): Boolean = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = a
  !(__ptr_0 + 1) = b
  __sn_wrap_adwaita_graphene_simd4f_cmp_neq((__ptr_0 + 0), (__ptr_0 + 1))

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_cross3(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_cross3(a, b, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_cross3(a : graphene_simd4f_t, b : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](3)
  !(__ptr_0 + 0) = a
  !(__ptr_0 + 1) = b
  __sn_wrap_adwaita_graphene_simd4f_cross3((__ptr_0 + 0), (__ptr_0 + 1), (__ptr_0 + 2))
  !(__ptr_0 + 2)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_cross3(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_cross3(a, b, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_div(a : graphene_simd4f_t, b : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](3)
  !(__ptr_0 + 0) = a
  !(__ptr_0 + 1) = b
  __sn_wrap_adwaita_graphene_simd4f_div((__ptr_0 + 0), (__ptr_0 + 1), (__ptr_0 + 2))
  !(__ptr_0 + 2)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_div(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_div(a, b, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_div(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_div(a, b, __return)

/**
 * graphene_simd4f_dot2: : a #graphene_simd4f_t : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_dot2(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_dot2(a, b, __return)

/**
 * graphene_simd4f_dot2: : a #graphene_simd4f_t : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_dot2(a : graphene_simd4f_t, b : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](3)
  !(__ptr_0 + 0) = a
  !(__ptr_0 + 1) = b
  __sn_wrap_adwaita_graphene_simd4f_dot2((__ptr_0 + 0), (__ptr_0 + 1), (__ptr_0 + 2))
  !(__ptr_0 + 2)

/**
 * graphene_simd4f_dot2: : a #graphene_simd4f_t : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_dot2(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_dot2(a, b, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_dot3(a : graphene_simd4f_t, b : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](3)
  !(__ptr_0 + 0) = a
  !(__ptr_0 + 1) = b
  __sn_wrap_adwaita_graphene_simd4f_dot3((__ptr_0 + 0), (__ptr_0 + 1), (__ptr_0 + 2))
  !(__ptr_0 + 2)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_dot3(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_dot3(a, b, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_dot3(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_dot3(a, b, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_dot3_scalar(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t]): Float = 
  __sn_wrap_adwaita_graphene_simd4f_dot3_scalar(a, b)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_dot3_scalar(a : graphene_simd4f_t, b : graphene_simd4f_t)(using Zone): Float = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = a
  !(__ptr_0 + 1) = b
  __sn_wrap_adwaita_graphene_simd4f_dot3_scalar((__ptr_0 + 0), (__ptr_0 + 1))

/**
 * graphene_simd4f_dot4: : a #graphene_simd4f_t : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_dot4(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_dot4(a, b, __return)

/**
 * graphene_simd4f_dot4: : a #graphene_simd4f_t : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_dot4(a : graphene_simd4f_t, b : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](3)
  !(__ptr_0 + 0) = a
  !(__ptr_0 + 1) = b
  __sn_wrap_adwaita_graphene_simd4f_dot4((__ptr_0 + 0), (__ptr_0 + 1), (__ptr_0 + 2))
  !(__ptr_0 + 2)

/**
 * graphene_simd4f_dot4: : a #graphene_simd4f_t : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_dot4(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_dot4(a, b, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_dup_2f(s : graphene_simd4f_t, v : Ptr[Float])(using Zone): Unit = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_dup_2f((__ptr_0 + 0), v)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_dup_2f(s : Ptr[graphene_simd4f_t], v : Ptr[Float]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_dup_2f(s, v)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_dup_3f(s : Ptr[graphene_simd4f_t], v : Ptr[Float]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_dup_3f(s, v)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_dup_3f(s : graphene_simd4f_t, v : Ptr[Float])(using Zone): Unit = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_dup_3f((__ptr_0 + 0), v)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_dup_4f(s : graphene_simd4f_t, v : Ptr[Float])(using Zone): Unit = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_dup_4f((__ptr_0 + 0), v)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_dup_4f(s : Ptr[graphene_simd4f_t], v : Ptr[Float]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_dup_4f(s, v)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_flip_sign_0101(s : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_flip_sign_0101(s, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_flip_sign_0101(s : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_flip_sign_0101(s, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_flip_sign_0101(s : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_flip_sign_0101((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_flip_sign_1010(s : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_flip_sign_1010((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_flip_sign_1010(s : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_flip_sign_1010(s, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_flip_sign_1010(s : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_flip_sign_1010(s, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_get(s : graphene_simd4f_t, i : CUnsignedInt)(using Zone): Float = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_get((__ptr_0 + 0), i)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_get(s : Ptr[graphene_simd4f_t], i : CUnsignedInt): Float = 
  __sn_wrap_adwaita_graphene_simd4f_get(s, i)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_get_w(s : Ptr[graphene_simd4f_t]): Float = 
  __sn_wrap_adwaita_graphene_simd4f_get_w(s)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_get_w(s : graphene_simd4f_t)(using Zone): Float = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_get_w((__ptr_0 + 0))

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_get_x(s : graphene_simd4f_t)(using Zone): Float = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_get_x((__ptr_0 + 0))

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_get_x(s : Ptr[graphene_simd4f_t]): Float = 
  __sn_wrap_adwaita_graphene_simd4f_get_x(s)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_get_y(s : Ptr[graphene_simd4f_t]): Float = 
  __sn_wrap_adwaita_graphene_simd4f_get_y(s)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_get_y(s : graphene_simd4f_t)(using Zone): Float = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_get_y((__ptr_0 + 0))

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_get_z(s : Ptr[graphene_simd4f_t]): Float = 
  __sn_wrap_adwaita_graphene_simd4f_get_z(s)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_get_z(s : graphene_simd4f_t)(using Zone): Float = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_get_z((__ptr_0 + 0))

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_init(x : Float, y : Float, z : Float, w : Float)(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_init(x, y, z, w, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_init(x : Float, y : Float, z : Float, w : Float)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_init(x, y, z, w, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_init_2f(v : Ptr[Float])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_init_2f(v, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_init_2f(v : Ptr[Float])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_init_2f(v, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_init_3f(v : Ptr[Float])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_init_3f(v, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_init_3f(v : Ptr[Float])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_init_3f(v, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_init_4f(v : Ptr[Float])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_init_4f(v, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_init_4f(v : Ptr[Float])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_init_4f(v, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_init_zero()(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_init_zero(__return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_init_zero()(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_init_zero((__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * graphene_simd4f_interpolate: : a #graphene_simd4f_t : a #graphene_simd4f_t : the interpolation factor

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_interpolate(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t], f : Float)(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_interpolate(a, b, f, __return)

/**
 * graphene_simd4f_interpolate: : a #graphene_simd4f_t : a #graphene_simd4f_t : the interpolation factor

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_interpolate(a : graphene_simd4f_t, b : graphene_simd4f_t, f : Float)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](3)
  !(__ptr_0 + 0) = a
  !(__ptr_0 + 1) = b
  __sn_wrap_adwaita_graphene_simd4f_interpolate((__ptr_0 + 0), (__ptr_0 + 1), f, (__ptr_0 + 2))
  !(__ptr_0 + 2)

/**
 * graphene_simd4f_interpolate: : a #graphene_simd4f_t : a #graphene_simd4f_t : the interpolation factor

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_interpolate(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t], f : Float)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_interpolate(a, b, f, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * graphene_simd4f_is_zero2: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_is_zero2(v : graphene_simd4f_t)(using Zone): Boolean = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  !(__ptr_0 + 0) = v
  __sn_wrap_adwaita_graphene_simd4f_is_zero2((__ptr_0 + 0))

/**
 * graphene_simd4f_is_zero2: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_is_zero2(v : Ptr[graphene_simd4f_t]): Boolean = 
  __sn_wrap_adwaita_graphene_simd4f_is_zero2(v)

/**
 * graphene_simd4f_is_zero3: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_is_zero3(v : graphene_simd4f_t)(using Zone): Boolean = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  !(__ptr_0 + 0) = v
  __sn_wrap_adwaita_graphene_simd4f_is_zero3((__ptr_0 + 0))

/**
 * graphene_simd4f_is_zero3: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_is_zero3(v : Ptr[graphene_simd4f_t]): Boolean = 
  __sn_wrap_adwaita_graphene_simd4f_is_zero3(v)

/**
 * graphene_simd4f_is_zero4: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_is_zero4(v : graphene_simd4f_t)(using Zone): Boolean = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  !(__ptr_0 + 0) = v
  __sn_wrap_adwaita_graphene_simd4f_is_zero4((__ptr_0 + 0))

/**
 * graphene_simd4f_is_zero4: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_is_zero4(v : Ptr[graphene_simd4f_t]): Boolean = 
  __sn_wrap_adwaita_graphene_simd4f_is_zero4(v)

/**
 * graphene_simd4f_length2: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_length2(v : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = v
  __sn_wrap_adwaita_graphene_simd4f_length2((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * graphene_simd4f_length2: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_length2(v : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_length2(v, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * graphene_simd4f_length2: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_length2(v : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_length2(v, __return)

/**
 * graphene_simd4f_length3: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_length3(v : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_length3(v, __return)

/**
 * graphene_simd4f_length3: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_length3(v : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_length3(v, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * graphene_simd4f_length3: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_length3(v : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = v
  __sn_wrap_adwaita_graphene_simd4f_length3((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * graphene_simd4f_length4: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_length4(v : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_length4(v, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * graphene_simd4f_length4: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_length4(v : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_length4(v, __return)

/**
 * graphene_simd4f_length4: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_length4(v : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = v
  __sn_wrap_adwaita_graphene_simd4f_length4((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * graphene_simd4f_madd: : a #graphene_simd4f_t : a #graphene_simd4f_t : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_madd(m1 : graphene_simd4f_t, m2 : graphene_simd4f_t, a : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](4)
  !(__ptr_0 + 0) = m1
  !(__ptr_0 + 1) = m2
  !(__ptr_0 + 2) = a
  __sn_wrap_adwaita_graphene_simd4f_madd((__ptr_0 + 0), (__ptr_0 + 1), (__ptr_0 + 2), (__ptr_0 + 3))
  !(__ptr_0 + 3)

/**
 * graphene_simd4f_madd: : a #graphene_simd4f_t : a #graphene_simd4f_t : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_madd(m1 : Ptr[graphene_simd4f_t], m2 : Ptr[graphene_simd4f_t], a : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_madd(m1, m2, a, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * graphene_simd4f_madd: : a #graphene_simd4f_t : a #graphene_simd4f_t : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_madd(m1 : Ptr[graphene_simd4f_t], m2 : Ptr[graphene_simd4f_t], a : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_madd(m1, m2, a, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_max(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_max(a, b, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_max(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_max(a, b, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_max(a : graphene_simd4f_t, b : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](3)
  !(__ptr_0 + 0) = a
  !(__ptr_0 + 1) = b
  __sn_wrap_adwaita_graphene_simd4f_max((__ptr_0 + 0), (__ptr_0 + 1), (__ptr_0 + 2))
  !(__ptr_0 + 2)

/**
 * graphene_simd4f_max_val: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_max_val(v : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_max_val(v, __return)

/**
 * graphene_simd4f_max_val: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_max_val(v : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = v
  __sn_wrap_adwaita_graphene_simd4f_max_val((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * graphene_simd4f_max_val: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_max_val(v : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_max_val(v, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_merge_high(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_merge_high(a, b, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_merge_high(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_merge_high(a, b, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_merge_high(a : graphene_simd4f_t, b : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](3)
  !(__ptr_0 + 0) = a
  !(__ptr_0 + 1) = b
  __sn_wrap_adwaita_graphene_simd4f_merge_high((__ptr_0 + 0), (__ptr_0 + 1), (__ptr_0 + 2))
  !(__ptr_0 + 2)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_merge_low(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_merge_low(a, b, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_merge_low(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_merge_low(a, b, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_merge_low(a : graphene_simd4f_t, b : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](3)
  !(__ptr_0 + 0) = a
  !(__ptr_0 + 1) = b
  __sn_wrap_adwaita_graphene_simd4f_merge_low((__ptr_0 + 0), (__ptr_0 + 1), (__ptr_0 + 2))
  !(__ptr_0 + 2)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_merge_w(s : graphene_simd4f_t, v : Float)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_merge_w((__ptr_0 + 0), v, (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_merge_w(s : Ptr[graphene_simd4f_t], v : Float)(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_merge_w(s, v, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_merge_w(s : Ptr[graphene_simd4f_t], v : Float)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_merge_w(s, v, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_min(a : graphene_simd4f_t, b : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](3)
  !(__ptr_0 + 0) = a
  !(__ptr_0 + 1) = b
  __sn_wrap_adwaita_graphene_simd4f_min((__ptr_0 + 0), (__ptr_0 + 1), (__ptr_0 + 2))
  !(__ptr_0 + 2)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_min(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_min(a, b, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_min(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_min(a, b, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * graphene_simd4f_min_val: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_min_val(v : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = v
  __sn_wrap_adwaita_graphene_simd4f_min_val((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * graphene_simd4f_min_val: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_min_val(v : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_min_val(v, __return)

/**
 * graphene_simd4f_min_val: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_min_val(v : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_min_val(v, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_mul(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_mul(a, b, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_mul(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_mul(a, b, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_mul(a : graphene_simd4f_t, b : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](3)
  !(__ptr_0 + 0) = a
  !(__ptr_0 + 1) = b
  __sn_wrap_adwaita_graphene_simd4f_mul((__ptr_0 + 0), (__ptr_0 + 1), (__ptr_0 + 2))
  !(__ptr_0 + 2)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_neg(s : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_neg(s, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_neg(s : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_neg((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_neg(s : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_neg(s, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * graphene_simd4f_normalize2: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_normalize2(v : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = v
  __sn_wrap_adwaita_graphene_simd4f_normalize2((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * graphene_simd4f_normalize2: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_normalize2(v : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_normalize2(v, __return)

/**
 * graphene_simd4f_normalize2: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_normalize2(v : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_normalize2(v, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * graphene_simd4f_normalize3: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_normalize3(v : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_normalize3(v, __return)

/**
 * graphene_simd4f_normalize3: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_normalize3(v : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_normalize3(v, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * graphene_simd4f_normalize3: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_normalize3(v : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = v
  __sn_wrap_adwaita_graphene_simd4f_normalize3((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * graphene_simd4f_normalize4: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_normalize4(v : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_normalize4(v, __return)

/**
 * graphene_simd4f_normalize4: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_normalize4(v : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_normalize4(v, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * graphene_simd4f_normalize4: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_normalize4(v : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = v
  __sn_wrap_adwaita_graphene_simd4f_normalize4((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_reciprocal(s : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_reciprocal(s, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_reciprocal(s : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_reciprocal((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_reciprocal(s : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_reciprocal(s, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_rsqrt(s : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_rsqrt(s, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_rsqrt(s : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_rsqrt(s, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_rsqrt(s : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_rsqrt((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_shuffle_wxyz(s : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_shuffle_wxyz(s, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_shuffle_wxyz(s : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_shuffle_wxyz(s, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_shuffle_wxyz(s : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_shuffle_wxyz((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_shuffle_yzwx(s : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_shuffle_yzwx(s, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_shuffle_yzwx(s : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_shuffle_yzwx(s, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_shuffle_yzwx(s : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_shuffle_yzwx((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_shuffle_zwxy(s : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_shuffle_zwxy(s, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_shuffle_zwxy(s : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_shuffle_zwxy(s, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_shuffle_zwxy(s : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_shuffle_zwxy((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_splat(v : Float)(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_splat(v, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_splat(v : Float)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_splat(v, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_splat_w(s : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_splat_w(s, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_splat_w(s : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_splat_w(s, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_splat_w(s : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_splat_w((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_splat_x(s : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_splat_x(s, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_splat_x(s : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_splat_x(s, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_splat_x(s : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_splat_x((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_splat_y(s : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_splat_y(s, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_splat_y(s : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_splat_y(s, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_splat_y(s : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_splat_y((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_splat_z(s : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_splat_z((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_splat_z(s : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_splat_z(s, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_splat_z(s : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_splat_z(s, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_sqrt(s : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_sqrt(s, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_sqrt(s : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_sqrt((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_sqrt(s : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_sqrt(s, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_sub(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_sub(a, b, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_sub(a : Ptr[graphene_simd4f_t], b : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_sub(a, b, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_sub(a : graphene_simd4f_t, b : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](3)
  !(__ptr_0 + 0) = a
  !(__ptr_0 + 1) = b
  __sn_wrap_adwaita_graphene_simd4f_sub((__ptr_0 + 0), (__ptr_0 + 1), (__ptr_0 + 2))
  !(__ptr_0 + 2)

/**
 * graphene_simd4f_sum: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_sum(v : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = v
  __sn_wrap_adwaita_graphene_simd4f_sum((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * graphene_simd4f_sum: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_sum(v : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_sum(v, __return)

/**
 * graphene_simd4f_sum: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_sum(v : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_sum(v, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * graphene_simd4f_sum_scalar: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_sum_scalar(v : graphene_simd4f_t)(using Zone): Float = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  !(__ptr_0 + 0) = v
  __sn_wrap_adwaita_graphene_simd4f_sum_scalar((__ptr_0 + 0))

/**
 * graphene_simd4f_sum_scalar: : a #graphene_simd4f_t

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_sum_scalar(v : Ptr[graphene_simd4f_t]): Float = 
  __sn_wrap_adwaita_graphene_simd4f_sum_scalar(v)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_zero_w(s : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_zero_w(s, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_zero_w(s : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_zero_w((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_zero_w(s : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_zero_w(s, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_zero_zw(s : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4f_zero_zw(s, __return)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_zero_zw(s : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  __sn_wrap_adwaita_graphene_simd4f_zero_zw(s, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4f.h
*/
def graphene_simd4f_zero_zw(s : graphene_simd4f_t)(using Zone): graphene_simd4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](2)
  !(__ptr_0 + 0) = s
  __sn_wrap_adwaita_graphene_simd4f_zero_zw((__ptr_0 + 0), (__ptr_0 + 1))
  !(__ptr_0 + 1)

/**
 * graphene_simd4x4f_init: : a #graphene_simd4f_t for the first row : a #graphene_simd4f_t for the second row : a #graphene_simd4f_t for the third row : a #graphene_simd4f_t for the fourth row

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
*/
def graphene_simd4x4f_init(x : graphene_simd4f_t, y : graphene_simd4f_t, z : graphene_simd4f_t, w : graphene_simd4f_t)(using Zone): graphene_simd4x4f_t = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](4)
  val __ptr_1: Ptr[graphene_simd4x4f_t] = alloc[graphene_simd4x4f_t](1)
  !(__ptr_0 + 0) = x
  !(__ptr_0 + 1) = y
  !(__ptr_0 + 2) = z
  !(__ptr_0 + 3) = w
  __sn_wrap_adwaita_graphene_simd4x4f_init((__ptr_0 + 0), (__ptr_0 + 1), (__ptr_0 + 2), (__ptr_0 + 3), (__ptr_1 + 0))
  !(__ptr_1 + 0)

/**
 * graphene_simd4x4f_init: : a #graphene_simd4f_t for the first row : a #graphene_simd4f_t for the second row : a #graphene_simd4f_t for the third row : a #graphene_simd4f_t for the fourth row

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
*/
def graphene_simd4x4f_init(x : Ptr[graphene_simd4f_t], y : Ptr[graphene_simd4f_t], z : Ptr[graphene_simd4f_t], w : Ptr[graphene_simd4f_t])(__return : Ptr[graphene_simd4x4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4x4f_init(x, y, z, w, __return)

/**
 * graphene_simd4x4f_init: : a #graphene_simd4f_t for the first row : a #graphene_simd4f_t for the second row : a #graphene_simd4f_t for the third row : a #graphene_simd4f_t for the fourth row

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
*/
def graphene_simd4x4f_init(x : Ptr[graphene_simd4f_t], y : Ptr[graphene_simd4f_t], z : Ptr[graphene_simd4f_t], w : Ptr[graphene_simd4f_t])(using Zone): graphene_simd4x4f_t = 
  val __ptr_0: Ptr[graphene_simd4x4f_t] = alloc[graphene_simd4x4f_t](1)
  __sn_wrap_adwaita_graphene_simd4x4f_init(x, y, z, w, (__ptr_0 + 0))
  !(__ptr_0 + 0)

/**
 * graphene_simd4x4f_init_look_at: : a #graphene_simd4x4f_t : vector for the camera coordinates : vector for the object coordinates : vector for the upwards direction

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
*/
def graphene_simd4x4f_init_look_at(m : Ptr[graphene_simd4x4f_t], eye : graphene_simd4f_t, center : graphene_simd4f_t, up : graphene_simd4f_t)(using Zone): Unit = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](3)
  !(__ptr_0 + 0) = eye
  !(__ptr_0 + 1) = center
  !(__ptr_0 + 2) = up
  __sn_wrap_adwaita_graphene_simd4x4f_init_look_at(m, (__ptr_0 + 0), (__ptr_0 + 1), (__ptr_0 + 2))

/**
 * graphene_simd4x4f_init_look_at: : a #graphene_simd4x4f_t : vector for the camera coordinates : vector for the object coordinates : vector for the upwards direction

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
*/
def graphene_simd4x4f_init_look_at(m : Ptr[graphene_simd4x4f_t], eye : Ptr[graphene_simd4f_t], center : Ptr[graphene_simd4f_t], up : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4x4f_init_look_at(m, eye, center, up)

/**
 * graphene_simd4x4f_rotation: : a #graphene_simd4x4f_t : the rotation, in radians : the vector of the axis of rotation

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
*/
def graphene_simd4x4f_rotation(m : Ptr[graphene_simd4x4f_t], rad : Float, axis : graphene_simd4f_t)(using Zone): Unit = 
  val __ptr_0: Ptr[graphene_simd4f_t] = alloc[graphene_simd4f_t](1)
  !(__ptr_0 + 0) = axis
  __sn_wrap_adwaita_graphene_simd4x4f_rotation(m, rad, (__ptr_0 + 0))

/**
 * graphene_simd4x4f_rotation: : a #graphene_simd4x4f_t : the rotation, in radians : the vector of the axis of rotation

 * [bindgen] header: /usr/include/graphene-1.0/graphene-simd4x4f.h
*/
def graphene_simd4x4f_rotation(m : Ptr[graphene_simd4x4f_t], rad : Float, axis : Ptr[graphene_simd4f_t]): Unit = 
  __sn_wrap_adwaita_graphene_simd4x4f_rotation(m, rad, axis)

